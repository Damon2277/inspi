/**\n * AdminService 测试\n */\n\nimport { AdminServiceImpl } from '@/lib/invitation/services/AdminService'\nimport { MockDatabaseService } from '@/lib/testing/mocks/MockDatabaseService'\nimport { RewardType } from '@/lib/invitation/types'\n\ndescribe('AdminService', () => {\n  let adminService: AdminServiceImpl\n  let mockDb: MockDatabaseService\n\n  beforeEach(() => {\n    mockDb = new MockDatabaseService()\n    adminService = new AdminServiceImpl(mockDb as any)\n  })\n\n  afterEach(() => {\n    mockDb.reset()\n  })\n\n  describe('getDashboardData', () => {\n    it('should return dashboard overview data', async () => {\n      // Mock database responses\n      mockDb.setQueryResult('SELECT', {\n        total_users: '100',\n        total_invites: '50',\n        total_registrations: '30',\n        total_rewards: '75'\n      })\n\n      mockDb.setQueryResults('SELECT', [\n        {\n          type: 'invite_created',\n          description: '用户 张三 创建了邀请码 ABC123',\n          timestamp: new Date('2024-01-01T10:00:00Z'),\n          user_id: 'user1',\n          user_name: '张三'\n        }\n      ])\n\n      const result = await adminService.getDashboardData()\n\n      expect(result).toMatchObject({\n        overview: {\n          totalUsers: 100,\n          totalInvites: 50,\n          totalRegistrations: 30,\n          totalRewards: 75,\n          conversionRate: 60 // 30/50 * 100\n        },\n        recentActivity: expect.arrayContaining([\n          expect.objectContaining({\n            type: 'invite_created',\n            description: '用户 张三 创建了邀请码 ABC123'\n          })\n        ]),\n        systemHealth: expect.objectContaining({\n          status: expect.any(String),\n          issues: expect.any(Array),\n          lastCheck: expect.any(Date)\n        })\n      })\n    })\n\n    it('should handle database errors gracefully', async () => {\n      mockDb.setError('Database connection failed')\n\n      await expect(adminService.getDashboardData()).rejects.toThrow('Failed to get dashboard data')\n    })\n  })\n\n  describe('getInviteManagement', () => {\n    it('should return paginated invite data', async () => {\n      const mockInvites = [\n        {\n          id: 'invite1',\n          code: 'ABC123',\n          inviter_name: '张三',\n          inviter_email: 'zhang@example.com',\n          created_at: new Date('2024-01-01'),\n          usage_count: '2',\n          max_usage: '5',\n          is_active: 1,\n          expires_at: null\n        }\n      ]\n\n      mockDb.setQueryResults('SELECT', mockInvites)\n      mockDb.setQueryResult('SELECT COUNT', { total: '1' })\n\n      const result = await adminService.getInviteManagement(1, 20)\n\n      expect(result).toMatchObject({\n        invites: [\n          {\n            id: 'invite1',\n            code: 'ABC123',\n            inviterName: '张三',\n            inviterEmail: 'zhang@example.com',\n            usageCount: 2,\n            maxUsage: 5,\n            isActive: true\n          }\n        ],\n        totalCount: 1,\n        pagination: {\n          page: 1,\n          limit: 20,\n          totalPages: 1\n        }\n      })\n    })\n\n    it('should apply search filters', async () => {\n      mockDb.setQueryResults('SELECT', [])\n      mockDb.setQueryResult('SELECT COUNT', { total: '0' })\n\n      await adminService.getInviteManagement(1, 20, {\n        search: 'test',\n        status: 'active'\n      })\n\n      const queries = mockDb.getExecutedQueries()\n      expect(queries.some(q => q.includes('LIKE') && q.includes('is_active = 1'))).toBe(true)\n    })\n  })\n\n  describe('deactivateInviteCode', () => {\n    it('should deactivate invite code', async () => {\n      await adminService.deactivateInviteCode('invite1', 'Admin action')\n\n      const queries = mockDb.getExecutedQueries()\n      expect(queries.some(q => \n        q.includes('UPDATE invite_codes') && \n        q.includes('is_active = 0')\n      )).toBe(true)\n    })\n\n    it('should handle database errors', async () => {\n      mockDb.setError('Update failed')\n\n      await expect(adminService.deactivateInviteCode('invite1', 'reason'))\n        .rejects.toThrow('Failed to deactivate invite code')\n    })\n  })\n\n  describe('getUserManagement', () => {\n    it('should return paginated user data with invite statistics', async () => {\n      const mockUsers = [\n        {\n          id: 'user1',\n          name: '张三',\n          email: 'zhang@example.com',\n          registered_at: new Date('2024-01-01'),\n          is_active: 1,\n          last_login_at: new Date('2024-01-15'),\n          invite_count: '3',\n          registration_count: '2',\n          total_rewards: '100',\n          invited_by_user_id: null,\n          invited_by_user_name: null,\n          invited_by_code_id: null\n        }\n      ]\n\n      mockDb.setQueryResults('SELECT', mockUsers)\n      mockDb.setQueryResult('SELECT COUNT', { total: '1' })\n\n      const result = await adminService.getUserManagement(1, 20)\n\n      expect(result.users[0]).toMatchObject({\n        id: 'user1',\n        name: '张三',\n        email: 'zhang@example.com',\n        inviteCount: 3,\n        registrationCount: 2,\n        totalRewards: 100,\n        isActive: true,\n        invitedBy: undefined\n      })\n    })\n  })\n\n  describe('grantReward', () => {\n    it('should grant reward to user', async () => {\n      await adminService.grantReward('user1', 'ai_credits', 100, 'Admin grant')\n\n      const queries = mockDb.getExecutedQueries()\n      expect(queries.some(q => \n        q.includes('INSERT INTO rewards') &&\n        q.includes('ai_credits') &&\n        q.includes('100')\n      )).toBe(true)\n    })\n  })\n\n  describe('getRewardManagement', () => {\n    it('should return paginated reward data', async () => {\n      const mockRewards = [\n        {\n          id: 'reward1',\n          user_id: 'user1',\n          user_name: '张三',\n          type: 'ai_credits',\n          amount: '100',\n          description: 'Invitation reward',\n          granted_at: new Date('2024-01-01'),\n          granted_by: 'system',\n          source_type: 'invitation',\n          source_id: 'invite1'\n        }\n      ]\n\n      mockDb.setQueryResults('SELECT', mockRewards)\n      mockDb.setQueryResult('SELECT COUNT', { total: '1' })\n      mockDb.setQueryResult('SELECT SUM', {\n        total_credits: '500',\n        total_badges: '3',\n        total_titles: '1',\n        total_premium_days: '30'\n      })\n\n      const result = await adminService.getRewardManagement(1, 20)\n\n      expect(result).toMatchObject({\n        rewards: [\n          {\n            id: 'reward1',\n            userId: 'user1',\n            userName: '张三',\n            type: 'ai_credits',\n            amount: 100,\n            description: 'Invitation reward'\n          }\n        ],\n        totalCount: 1,\n        summary: {\n          totalCredits: 500,\n          totalBadges: 3,\n          totalTitles: 1,\n          totalPremiumDays: 30\n        }\n      })\n    })\n  })\n\n  describe('getSystemHealth', () => {\n    it('should return healthy status when no issues', async () => {\n      mockDb.setQueryResult('SELECT 1', { '1': 1 })\n      mockDb.setQueryResult('SELECT COUNT', { error_count: '0' })\n      mockDb.setQueryResult('SELECT COUNT', { recent_invites: '5' })\n\n      const result = await adminService.getSystemHealth()\n\n      expect(result).toMatchObject({\n        status: 'healthy',\n        issues: [],\n        lastCheck: expect.any(Date)\n      })\n    })\n\n    it('should detect issues and return warning status', async () => {\n      mockDb.setQueryResult('SELECT 1', { '1': 1 })\n      mockDb.setQueryResult('SELECT COUNT', { error_count: '15' })\n      mockDb.setQueryResult('SELECT COUNT', { recent_invites: '0' })\n\n      const result = await adminService.getSystemHealth()\n\n      expect(result.status).toBe('warning')\n      expect(result.issues).toContain('最近1小时内有15个错误日志')\n      expect(result.issues).toContain('最近1小时内没有新的邀请活动')\n    })\n\n    it('should return error status on database failure', async () => {\n      mockDb.setError('Database connection failed')\n\n      const result = await adminService.getSystemHealth()\n\n      expect(result).toMatchObject({\n        status: 'error',\n        issues: ['系统健康检查失败'],\n        lastCheck: expect.any(Date)\n      })\n    })\n  })\n\n  describe('exportInviteData', () => {\n    it('should export invite data as CSV', async () => {\n      const mockData = [\n        {\n          '邀请码': 'ABC123',\n          '邀请人': '张三',\n          '邀请人邮箱': 'zhang@example.com',\n          '创建时间': '2024-01-01',\n          '使用次数': '2',\n          '最大使用次数': '5',\n          '状态': '激活',\n          '过期时间': null\n        }\n      ]\n\n      mockDb.setQueryResults('SELECT', mockData)\n\n      const result = await adminService.exportInviteData()\n\n      expect(result).toContain('邀请码,邀请人,邀请人邮箱')\n      expect(result).toContain('ABC123,张三,zhang@example.com')\n    })\n\n    it('should return empty string for no data', async () => {\n      mockDb.setQueryResults('SELECT', [])\n\n      const result = await adminService.exportInviteData()\n\n      expect(result).toBe('')\n    })\n  })\n\n  describe('getSystemLogs', () => {\n    it('should return paginated system logs', async () => {\n      const mockLogs = [\n        {\n          id: 'log1',\n          level: 'info',\n          message: 'System started',\n          timestamp: new Date('2024-01-01T10:00:00Z'),\n          metadata: '{}'\n        }\n      ]\n\n      mockDb.setQueryResults('SELECT', mockLogs)\n      mockDb.setQueryResult('SELECT COUNT', { total: '1' })\n\n      const result = await adminService.getSystemLogs(1, 50, 'info')\n\n      expect(result).toMatchObject({\n        logs: [\n          {\n            id: 'log1',\n            level: 'info',\n            message: 'System started',\n            timestamp: expect.any(Date),\n            metadata: {}\n          }\n        ],\n        totalCount: 1\n      })\n    })\n\n    it('should handle missing system_logs table gracefully', async () => {\n      mockDb.setError('Table does not exist')\n\n      const result = await adminService.getSystemLogs()\n\n      expect(result).toMatchObject({\n        logs: [],\n        totalCount: 0\n      })\n    })\n  })\n})"