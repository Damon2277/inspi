/**
 * Playwright ÂÖ®Â±ÄËÆæÁΩÆ
 * Âú®ÊâÄÊúâÊµãËØïÂºÄÂßãÂâçÊâßË°å
 */

import { chromium, FullConfig } from '@playwright/test';

async function globalSetup(config: FullConfig) {
  console.log('üöÄ ÂºÄÂßãÂÖ®Â±ÄÊµãËØïËÆæÁΩÆ...');

  // ÂêØÂä®ÊµèËßàÂô®ËøõË°åÈ¢ÑÁÉ≠
  const browser = await chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    // È¢ÑÁÉ≠Â∫îÁî®
    console.log('üî• È¢ÑÁÉ≠Â∫îÁî®...');
    await page.goto(config.projects[0].use?.baseURL || 'http://localhost:3000');
    await page.waitForLoadState('networkidle');

    // ÂàõÂª∫ÊµãËØïÁî®Êà∑ÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
    console.log('üë§ ÂáÜÂ§áÊµãËØïÊï∞ÊçÆ...');
    await setupTestData(page);

    // È™åËØÅÂÖ≥ÈîÆÊúçÂä°ÂèØÁî®ÊÄß
    console.log('üîç È™åËØÅÊúçÂä°Áä∂ÊÄÅ...');
    await verifyServices(page);

    console.log('‚úÖ ÂÖ®Â±ÄËÆæÁΩÆÂÆåÊàê');

  } catch (error) {
    console.error('‚ùå ÂÖ®Â±ÄËÆæÁΩÆÂ§±Ë¥•:', error);
    throw error;
  } finally {
    await context.close();
    await browser.close();
  }
}

/**
 * ËÆæÁΩÆÊµãËØïÊï∞ÊçÆ
 */
async function setupTestData(page: any) {
  // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÊµãËØïÊï∞ÊçÆÁöÑÂàùÂßãÂåñÈÄªËæë
  // ‰æãÂ¶ÇÔºöÂàõÂª∫ÊµãËØïÁî®Êà∑„ÄÅÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìÁ≠â

  try {
    // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÂàõÂª∫ÊµãËØïÁî®Êà∑
    const response = await page.evaluate(async () => {
      try {
        const res = await fetch('/api/test/setup', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            action: 'create-test-user',
            user: {
              email: 'test@example.com',
              password: 'Test123456',
              name: 'ÊµãËØïÁî®Êà∑',
            },
          }),
        });
        return res.ok;
      } catch {
        return false;
      }
    });

    if (response) {
      console.log('‚úÖ ÊµãËØïÁî®Êà∑ÂàõÂª∫ÊàêÂäü');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è ÊµãËØïÊï∞ÊçÆËÆæÁΩÆË∑≥Ëøá:', error);
  }
}

/**
 * È™åËØÅÂÖ≥ÈîÆÊúçÂä°
 */
async function verifyServices(page: any) {
  const services = [
    { name: 'APIÂÅ•Â∫∑Ê£ÄÊü•', url: '/api/health' },
    { name: 'Êï∞ÊçÆÂ∫ìËøûÊé•', url: '/api/health/db' },
    { name: 'ÁºìÂ≠òÊúçÂä°', url: '/api/health/cache' },
    { name: 'AIÊúçÂä°', url: '/api/health/ai' },
  ];

  for (const service of services) {
    try {
      const response = await page.evaluate(async (url: string) => {
        const res = await fetch(url);
        return { status: res.status, ok: res.ok };
      }, service.url);

      if (response.ok) {
        console.log(`‚úÖ ${service.name} Ê≠£Â∏∏`);
      } else {
        console.warn(`‚ö†Ô∏è ${service.name} ÂºÇÂ∏∏ (${response.status})`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è ${service.name} Ê£ÄÊü•Â§±Ë¥•:`, error);
    }
  }
}

export default globalSetup;
