version: '3.8'

services:
  # 应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: inspi-ai-platform:latest
    container_name: inspi-ai-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=mysql-primary
      - DB_PORT=3306
      - DB_NAME=inspi_ai_prod
      - DB_USER=inspi_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_REPLICA_1_HOST=mysql-replica-1
      - DB_REPLICA_2_HOST=mysql-replica-2
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=7000
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - MONITORING_ENABLED=true
      - LOG_LEVEL=info
    depends_on:
      - mysql-primary
      - mysql-replica-1
      - mysql-replica-2
      - redis-cluster
      - prometheus
      - grafana
    networks:
      - app-network
    volumes:
      - app-logs:/app/logs
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 负载均衡器
  nginx:
    image: nginx:alpine
    container_name: inspi-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # MySQL主数据库
  mysql-primary:
    image: mysql:8.0
    container_name: inspi-ai-mysql-primary
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=inspi_ai_prod
      - MYSQL_USER=inspi_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_REPLICATION_MODE=master
      - MYSQL_REPLICATION_USER=replicator
      - MYSQL_REPLICATION_PASSWORD=${MYSQL_REPLICATION_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-primary-data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network
    command: >
      --server-id=1
      --log-bin=mysql-bin
      --binlog-format=ROW
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
      --log-slave-updates=ON
      --binlog-do-db=inspi_ai_prod
      --innodb-buffer-pool-size=1G
      --innodb-log-file-size=256M
      --max-connections=1000
      --query-cache-size=0
      --query-cache-type=0
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # MySQL从数据库1
  mysql-replica-1:
    image: mysql:8.0
    container_name: inspi-ai-mysql-replica-1
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=inspi_ai_prod
      - MYSQL_USER=inspi_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_REPLICATION_MODE=slave
      - MYSQL_REPLICATION_USER=replicator
      - MYSQL_REPLICATION_PASSWORD=${MYSQL_REPLICATION_PASSWORD}
      - MYSQL_MASTER_HOST=mysql-primary
      - MYSQL_MASTER_PORT_NUMBER=3306
    ports:
      - "3307:3306"
    volumes:
      - mysql-replica-1-data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    depends_on:
      - mysql-primary
    networks:
      - app-network
    command: >
      --server-id=2
      --log-bin=mysql-bin
      --binlog-format=ROW
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
      --log-slave-updates=ON
      --read-only=1
      --super-read-only=1
      --innodb-buffer-pool-size=512M
      --max-connections=500
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # MySQL从数据库2
  mysql-replica-2:
    image: mysql:8.0
    container_name: inspi-ai-mysql-replica-2
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=inspi_ai_prod
      - MYSQL_USER=inspi_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_REPLICATION_MODE=slave
      - MYSQL_REPLICATION_USER=replicator
      - MYSQL_REPLICATION_PASSWORD=${MYSQL_REPLICATION_PASSWORD}
      - MYSQL_MASTER_HOST=mysql-primary
      - MYSQL_MASTER_PORT_NUMBER=3306
    ports:
      - "3308:3306"
    volumes:
      - mysql-replica-2-data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    depends_on:
      - mysql-primary
    networks:
      - app-network
    command: >
      --server-id=3
      --log-bin=mysql-bin
      --binlog-format=ROW
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
      --log-slave-updates=ON
      --read-only=1
      --super-read-only=1
      --innodb-buffer-pool-size=512M
      --max-connections=500
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis集群
  redis-cluster:
    image: redis:7-alpine
    container_name: inspi-ai-redis-cluster
    restart: unless-stopped
    ports:
      - "7000-7005:7000-7005"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-cluster-data:/data
      - ./redis/redis-cluster.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - app-network
    command: >
      sh -c "
        redis-server /usr/local/etc/redis/redis.conf --port 7000 --cluster-enabled yes --cluster-config-file nodes-7000.conf --cluster-node-timeout 5000 --appendonly yes --appendfilename appendonly-7000.aof --dbfilename dump-7000.rdb --logfile /var/log/redis/redis-7000.log --daemonize yes &&
        redis-server /usr/local/etc/redis/redis.conf --port 7001 --cluster-enabled yes --cluster-config-file nodes-7001.conf --cluster-node-timeout 5000 --appendonly yes --appendfilename appendonly-7001.aof --dbfilename dump-7001.rdb --logfile /var/log/redis/redis-7001.log --daemonize yes &&
        redis-server /usr/local/etc/redis/redis.conf --port 7002 --cluster-enabled yes --cluster-config-file nodes-7002.conf --cluster-node-timeout 5000 --appendonly yes --appendfilename appendonly-7002.aof --dbfilename dump-7002.rdb --logfile /var/log/redis/redis-7002.log --daemonize yes &&
        redis-server /usr/local/etc/redis/redis.conf --port 7003 --cluster-enabled yes --cluster-config-file nodes-7003.conf --cluster-node-timeout 5000 --appendonly yes --appendfilename appendonly-7003.aof --dbfilename dump-7003.rdb --logfile /var/log/redis/redis-7003.log --daemonize yes &&
        redis-server /usr/local/etc/redis/redis.conf --port 7004 --cluster-enabled yes --cluster-config-file nodes-7004.conf --cluster-node-timeout 5000 --appendonly yes --appendfilename appendonly-7004.aof --dbfilename dump-7004.rdb --logfile /var/log/redis/redis-7004.log --daemonize yes &&
        redis-server /usr/local/etc/redis/redis.conf --port 7005 --cluster-enabled yes --cluster-config-file nodes-7005.conf --cluster-node-timeout 5000 --appendonly yes --appendfilename appendonly-7005.aof --dbfilename dump-7005.rdb --logfile /var/log/redis/redis-7005.log &&
        tail -f /var/log/redis/redis-*.log
      "
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: inspi-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - app-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: inspi-ai-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Node Exporter (系统指标)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: inspi-ai-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - app-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # cAdvisor (容器指标)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: inspi-ai-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - app-network
    privileged: true
    devices:
      - /dev/kmsg
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M

  # Elasticsearch (日志存储)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: inspi-ai-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Logstash (日志处理)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: inspi-ai-logstash
    restart: unless-stopped
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/config:/usr/share/logstash/config:ro
      - app-logs:/var/log/app:ro
      - nginx-logs:/var/log/nginx:ro
    depends_on:
      - elasticsearch
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Kibana (日志可视化)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: inspi-ai-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql-primary-data:
    driver: local
  mysql-replica-1-data:
    driver: local
  mysql-replica-2-data:
    driver: local
  redis-cluster-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local