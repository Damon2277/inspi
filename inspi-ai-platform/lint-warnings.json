[{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/api/works.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/components/Footer.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/components/Loading.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/components/square/FilterBar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/components/square/SearchBar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/components/square/WorkCard.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":12,"column":12,"nodeType":"JSXOpeningElement","endLine":12,"endColumn":50,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/components/ui/Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/components/ui/GlassCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/infrastructure/database-config.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/infrastructure/project-structure.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/auth/google.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/auth/middleware.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/auth/service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/db-utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/models/User.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/models/Work.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/mongodb.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/redis.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/services/subscriptionService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/lib/services/workService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/pages/home.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/pages/square.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/utils/constants.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/__tests__/utils/helpers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/config/environment.simple.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.config.advanced.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.config.base.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.config.e2e.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.config.integration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.config.unit.generated.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.config.unit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.env.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.global-setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.global-teardown.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.integration.setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.setup.advanced.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.setup.e2e.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.setup.integration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.setup.simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.setup.test-isolation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/jest.setup.unit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/__mocks__/test-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/auth/auth-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/contribution/contribution-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/health/health-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/integration/api-integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/knowledge-graph/knowledge-graph-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/leaderboard/leaderboard-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/magic/magic-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/mocks/api-mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/run-api-tests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/seo.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/setup/api-test-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/setup/test-server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/simple/simple-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/subscription/subscription-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/users/users-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/api/works/works-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/desktop/DesktopButton.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/desktop/DesktopCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/desktop/DesktopCreatePage.interactions.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/desktop/DesktopHomePage.interactions.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/desktop/DesktopHomePage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/desktop/DesktopLoginPrompt.interactions.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/desktop/DesktopNavigation.interactions.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/errors/ErrorBoundary-simple.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/errors/ErrorBoundary.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/invitation/ActivityList.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/invitation/InvitationManagement.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/invitation/InvitationStats.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/notification/NotificationHistory.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/notification/NotificationPreferences.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/square/WorkCard.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":30,"column":7,"nodeType":"JSXOpeningElement","endLine":37,"endColumn":9,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/ui/FocusIndicator.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/ui/HighDensityComponents.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/components/ui/HoverEffects.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/contribution.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/e2e/global-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/e2e/global-teardown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/e2e/subscription-flow.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/e2e/user-flows.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/e2e/user-journey.e2e.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/email/email-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/factories/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/fixtures/api-fixtures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/fixtures/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/fixtures/knowledge-graph-fixtures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/fixtures/user-fixtures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/fixtures/work-fixtures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/graph-types.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/graph-visualization-simple.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/hooks/useContentValidation.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/hooks/useErrorHandler.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/hooks/useKeyboardNavigation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/hooks/useResponsive.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/infrastructure/test-config-basic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/infrastructure/test-config-system.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/ai/task2-comprehensive.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/ai/task2-quick-test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/api-test-framework.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/api/comprehensive-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/invitation/FraudDetectionIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/invitation/IntegrationTestRunner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/invitation/InvitationFlowIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/invitation/PerformanceStressTest.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/invitation/RewardSystemIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/invitation/runIntegrationTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/knowledge-graph-recovery.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/responsive-system.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/integration/subscription-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/knowledge-graph-visualization.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/knowledgeGraph.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/leaderboard.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/middleware/fraudDetectionMiddleware.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/AdminService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/AdvancedFraudDetectionService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/AnalyticsService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/BadgeSystem.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/CreditSystem.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/FraudDetectionService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/InvitationActivityService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/InvitationService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/InviteRegistrationHandler.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/LeaderboardService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/NotificationEventHandler.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/NotificationIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/NotificationScheduler.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/NotificationService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/RewardConfigService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/RewardEngine.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/ShareContentGenerator.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/ShareSDKIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/ShareService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/services/ShareTrackingService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/invitation/utils/deviceFingerprint.test.ts","messages":[],"suppressedMessages":[{"ruleId":"no-new-func","severity":2,"message":"The Function constructor is eval.","line":337,"column":9,"nodeType":"NewExpression","messageId":"noFunctionConstructor","endLine":337,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/security/aiContentFilter.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/security/contentValidator.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/security/thirdPartyFilters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/MockServiceIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/MockServiceManager.simple.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/MockServiceManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/TestDataFactory.simple.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/TestDataFactory.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/analytics/HistoricalAnalysisSystem.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/analytics/HistoricalDataManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/analytics/QualityPredictor.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/analytics/RecommendationEngine.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/analytics/TrendAnalyzer.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/cicd/CICDIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/cicd/CICDReporter.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/cicd/DeploymentValidator.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/cicd/PipelineAnalyzer.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/cicd/PipelineOptimizer.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/cicd/QualityGateManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/compatibility/CompatibilityTestingIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/compatibility/CrossPlatformTestRunner.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/compatibility/EnvironmentDetector.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/compliance/ComplianceChecker.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/compliance/ComplianceReporter.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/compliance/ComplianceUtils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/dashboard/DashboardIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/dashboard/DynamicChartGenerator.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/dashboard/NotificationSystem.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/dashboard/RealTimeDashboard.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/dashboard/TeamCollaborationHub.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/incremental/GitChangeDetector.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/incremental/TestCacheManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/middleware/MiddlewareChainTester.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/middleware/MiddlewareTestFramework.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/middleware/MiddlewareTestingIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/mocks/MockDatabaseService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/mocks/MockEmailService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/mocks/MockGeminiService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/monitoring/MemoryUsageTracker.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/monitoring/PerformanceBottleneckAnalyzer.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/monitoring/PerformanceRegressionDetector.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/monitoring/RealTimePerformanceMonitor.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/monitoring/TestPerformanceMonitoringSystem.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/parallel/ErrorIsolation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/parallel/LoadBalancer.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/parallel/ParallelTestEngine.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/parallel/ParallelTestExecutor.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/parallel/ResultAggregator.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/privacy/AccessPermissionTester.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/privacy/DataDeletionTester.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/privacy/DataMaskingTester.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/privacy/PrivacyTestingIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/quality-gates/QualityGateSystem.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/reporting/ReportingIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/reporting/TestReportGenerator.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/security/SecurityTestFramework.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/security/SecurityTestingIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/stability/FlakyTestDetector.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/stability/TestEnvironmentVerifier.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/stability/TestRetryManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/stability/TestStabilityMonitor.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/stability/TestStabilitySystem.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/state/StateConsistencyTester.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/state/StateTestFramework.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/state/StateTestingIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/state/ZustandTestUtils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/tools/AssertionHelpers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/tools/CustomMatchers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/tools/PerformanceMonitor.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/tools/TestError.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/tools/TestingToolsIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/types/RuntimeTypeValidator.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/types/TypeAssertions.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/types/TypeCoverageAnalyzer.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/types/TypeRegressionTester.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/types/TypeTestFramework.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/ui/AccessibilityTester.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":94,"column":7,"nodeType":"JSXOpeningElement","endLine":94,"endColumn":58,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":119,"column":7,"nodeType":"JSXOpeningElement","endLine":119,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/ui/ComponentTestFramework.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/ui/UIFrameworkBasic.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/ui/UIFrameworkCore.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/ui/UIFrameworkSimple.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/lib/testing/ui/UITestingIntegration.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":116,"column":9,"nodeType":"JSXOpeningElement","endLine":120,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/load/load-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/mocks/database-mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/navigation/navigation-system.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/performance/ai/task2-performance.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/performance/performance.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/responsive/lazy-loading.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/responsive/responsive-system.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/responsive/simple-integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/runners/test-runner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/security/security-scan.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/seo/seo-utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/seo/sitemap.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/setup/global-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/setup/global-teardown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/ui-simplification/data-compatibility.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/ui-simplification/performance-optimization.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/ui-simplification/visual-regression.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/ai/ai-services-integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/ai/aiPerformanceAndErrorHandling.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/ai/aiResponseHandling.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/ai/enhanced-gemini-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/ai/geminiService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/ai/promptTemplates.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/api/api-error-handling-simple.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/api/apiErrorHandling.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/api/authApiSecurity.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/api/healthCheckReliability.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/api/magicGenerateApi.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/auth/auth-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/auth/authMiddleware.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/auth/jwtSecurity.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/auth/permissionValidation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/auth/sessionManagement.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/cache/cacheConcurrency.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/cache/cacheConsistencyTests.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/cache/cacheInvalidation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/cache/cacheInvalidationTests.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/cache/cacheManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/cache/cachePerformance.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/cache/cachePerformanceTests.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/cache/cacheStrategyTests.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/cache/redisConsistency.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/community/community-features.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/community/work-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/components/CardGenerator.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/components/KnowledgeGraphViewer.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/components/LazyImage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/components/Loading.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/components/SearchFilter.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/components/UserProfile.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/core/graph-data-manager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/core/layout-algorithms.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/core/simple-layout.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/database/performanceOptimization.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/database/transactionConsistency.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/email/emailRateLimitingAndRecovery.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/email/emailService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/email/emailServiceEnhanced.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/email/emailServiceReliability.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/email/emailTemplateRendering.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/email/emailTemplateSimple.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/email/emailVerificationFlow.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/errors/errorHandler.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/hooks/useDebounce.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/hooks/useErrorHandler.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/hooks/usePerformanceMonitor.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/hooks/useResponsive.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/lib/utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/middleware/rateLimit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/middleware/usageLimit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/models/User.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/models/Work.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/quota/quotaBusinessLogic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/quota/quotaDataAccuracy.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/quota/quotaManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/quota/quotaManagerConcurrency.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/quota/quotaNotificationTiming.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/services/contributionService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/services/knowledgeGraphService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/stores/authStore.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/subscription/quota-manager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/subscription/subscription-features.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/subscription/subscription-manager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/utils/helpers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/unit/utils/logger.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/utils/mock-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/utils/report-generator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/utils/test-data-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/utils/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/utils/testHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/__tests__/visual/subscription-ui.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":284,"column":13,"nodeType":"JSXOpeningElement","endLine":284,"endColumn":73,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/admin/invites/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/admin/system-status/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/admin/test-runner/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/activities/[id]/join/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/activities/[id]/leaderboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/activities/[id]/progress/[userId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/activities/[id]/results/[userId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/activities/[id]/rewards/[userId]/claim/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/activities/[id]/rewards/[userId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/activities/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/activities/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/admin/activities/[id]/complete/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/admin/activities/[id]/leaderboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/admin/activities/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/admin/activities/[id]/stats/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/admin/activities/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/ai/generate-card/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/ai/generate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/ai/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/analytics/events/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/change-password/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/check-permission/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/google/callback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/google/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/login/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/logout/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/permissions/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/profile/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/refresh/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/register/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/send-verification/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/validate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/auth/verify-email/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/cards/create/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/cards/export/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/cards/reuse/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/content/validate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/contribution/history/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/contribution/leaderboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/contribution/record/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/contribution/trending/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/contribution/user/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/example/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/favicon/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/health/database/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/health/redis/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/invite/[code]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/invite/activate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/leaderboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/logging/logs/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/magic/generate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/metrics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/monitoring/alerts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/monitoring/dashboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/monitoring/errors/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/monitoring/metrics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/notifications/[id]/read/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/notifications/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/payment/cancel/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/payment/create/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/payment/records/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/payment/retry/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/payment/statistics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/payment/status/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/payment/wechat/notify/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/ready/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/seo/analyze/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/seo/update/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/share/card/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/create/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/current/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/payment/webhook/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/plans/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/plans/compare/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/plans/create/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/plans/recommendations/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/plans/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/plans/search/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/plans/statistics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/quota/consume/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/quota/daily-usage/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/quota/graph-nodes/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/quota/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/subscription/upgrade/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/test-auth/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/test-status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/test/integration/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/trending/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/users/[id]/rank/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/version/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/works/[id]/like/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/works/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/works/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/api/works/search/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/auth/forgot-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/auth/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/auth/register/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/auth/verify-email/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [token, verifyEmail]","fix":{"range":[859,866],"text":"[token, verifyEmail]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport React, { useState, useEffect } from 'react';\n\nexport default function VerifyEmailPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const [verificationStatus, setVerificationStatus] = useState<'loading' | 'success' | 'error' | 'expired'>('loading');\n  const [error, setError] = useState<string | null>(null);\n  const [canResend, setCanResend] = useState(false);\n  const [resendCooldown, setResendCooldown] = useState(0);\n\n  const token = searchParams.get('token');\n  const email = searchParams.get('email');\n\n  useEffect(() => {\n    if (token) {\n      // 如果有token，验证邮箱\n      verifyEmail(token);\n    } else {\n      // 如果没有token，显示等待验证状态\n      setVerificationStatus('loading');\n      setCanResend(true);\n    }\n  }, [token]);\n\n  const verifyEmail = async (verificationToken: string) => {\n    try {\n      const response = await fetch('/api/auth/verify-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          token: verificationToken,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        setVerificationStatus('success');\n        // 3秒后自动跳转到登录页面\n        setTimeout(() => {\n          router.push('/auth/login?verified=true');\n        }, 3000);\n      } else {\n        if (result.error === 'Token expired') {\n          setVerificationStatus('expired');\n        } else {\n          setVerificationStatus('error');\n          setError(result.error || '验证失败');\n        }\n      }\n    } catch (err) {\n      setVerificationStatus('error');\n      setError('网络错误，请重试');\n    }\n  };\n\n  const resendVerificationEmail = async () => {\n    if (!email || resendCooldown > 0) return;\n\n    try {\n      const response = await fetch('/api/auth/resend-verification', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: email,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        // 设置60秒冷却时间\n        let countdown = 60;\n        setResendCooldown(countdown);\n        const timer = setInterval(() => {\n          countdown -= 1;\n          if (countdown <= 0) {\n            clearInterval(timer);\n            setResendCooldown(0);\n          } else {\n            setResendCooldown(countdown);\n          }\n        }, 1000);\n      } else {\n        setError(result.error || '重发邮件失败');\n      }\n    } catch (err) {\n      setError('网络错误，请重试');\n    }\n  };\n\n  const renderContent = () => {\n    switch (verificationStatus) {\n      case 'loading':\n        if (token) {\n          return (\n            <div className=\"text-center\">\n              <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-blue-100 mb-6\">\n                <svg className=\"animate-spin h-8 w-8 text-blue-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                正在验证邮箱...\n              </h3>\n              <p className=\"text-gray-600\">\n                请稍候，我们正在验证您的邮箱地址\n              </p>\n            </div>\n          );\n        } else {\n          return (\n            <div className=\"text-center\">\n              <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-yellow-100 mb-6\">\n                <svg className=\"h-8 w-8 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                </svg>\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                请验证您的邮箱\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                我们已向您的邮箱发送了验证邮件，请点击邮件中的链接完成验证。\n              </p>\n              {email && (\n                <p className=\"text-sm text-gray-500 mb-6\">\n                  验证邮件已发送至：<span className=\"font-medium\">{email}</span>\n                </p>\n              )}\n              <div className=\"space-y-3\">\n                <button\n                  onClick={resendVerificationEmail}\n                  disabled={!canResend || resendCooldown > 0}\n                  className={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${\n                    !canResend || resendCooldown > 0\n                      ? 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                      : 'bg-blue-600 hover:bg-blue-700 text-white'\n                  }`}\n                >\n                  {resendCooldown > 0 ? `重新发送 (${resendCooldown}s)` : '重新发送验证邮件'}\n                </button>\n              </div>\n            </div>\n          );\n        }\n\n      case 'success':\n        return (\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-6\">\n              <svg className=\"h-8 w-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              邮箱验证成功！\n            </h3>\n            <p className=\"text-gray-600 mb-6\">\n              您的邮箱已成功验证，现在可以使用所有功能了。\n            </p>\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n              <p className=\"text-sm text-green-800\">\n                🎉 恭喜！您现在可以开始创建AI卡片，每天享有3次创建和1次复用的免费额度。\n              </p>\n            </div>\n            <p className=\"text-sm text-gray-500 mb-6\">\n              3秒后自动跳转到登录页面...\n            </p>\n            <Link\n              href=\"/auth/login\"\n              className=\"inline-block bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition-colors\"\n            >\n              立即登录\n            </Link>\n          </div>\n        );\n\n      case 'expired':\n        return (\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-orange-100 mb-6\">\n              <svg className=\"h-8 w-8 text-orange-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              验证链接已过期\n            </h3>\n            <p className=\"text-gray-600 mb-6\">\n              验证链接已过期，请重新发送验证邮件。\n            </p>\n            <div className=\"space-y-3\">\n              <button\n                onClick={resendVerificationEmail}\n                disabled={resendCooldown > 0}\n                className={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${\n                  resendCooldown > 0\n                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                    : 'bg-orange-600 hover:bg-orange-700 text-white'\n                }`}\n              >\n                {resendCooldown > 0 ? `重新发送 (${resendCooldown}s)` : '重新发送验证邮件'}\n              </button>\n            </div>\n          </div>\n        );\n\n      case 'error':\n        return (\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-red-100 mb-6\">\n              <svg className=\"h-8 w-8 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              验证失败\n            </h3>\n            <p className=\"text-gray-600 mb-6\">\n              {error || '邮箱验证失败，请重试'}\n            </p>\n            <div className=\"space-y-3\">\n              <button\n                onClick={resendVerificationEmail}\n                disabled={resendCooldown > 0}\n                className={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${\n                  resendCooldown > 0\n                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                    : 'bg-red-600 hover:bg-red-700 text-white'\n                }`}\n              >\n                {resendCooldown > 0 ? `重新发送 (${resendCooldown}s)` : '重新发送验证邮件'}\n              </button>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-cyan-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* 头部 */}\n        <div className=\"text-center\">\n          <Link href=\"/\" className=\"inline-block\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n              Inspi.AI\n            </h1>\n          </Link>\n          <h2 className=\"text-xl font-semibold text-gray-700 mb-2\">\n            邮箱验证\n          </h2>\n        </div>\n\n        {/* 验证内容卡片 */}\n        <div className=\"bg-white rounded-2xl shadow-xl p-8\">\n          {renderContent()}\n\n          {/* 错误提示 */}\n          {error && verificationStatus !== 'error' && (\n            <div className=\"mt-4 bg-red-50 border border-red-200 rounded-lg p-4\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm text-red-800\">{error}</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* 帮助信息 */}\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              需要帮助？{' '}\n              <Link\n                href=\"/support\"\n                className=\"font-medium text-blue-600 hover:text-blue-500 transition-colors\"\n              >\n                联系客服\n              </Link>\n            </p>\n          </div>\n        </div>\n\n        {/* 返回首页 */}\n        <div className=\"text-center\">\n          <Link\n            href=\"/\"\n            className=\"text-sm text-gray-500 hover:text-gray-700 transition-colors\"\n          >\n            ← 返回首页\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/case/[id]/page.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":421,"column":23,"nodeType":"CallExpression","messageId":"unexpected","endLine":421,"endColumn":42},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":431,"column":23,"nodeType":"CallExpression","messageId":"unexpected","endLine":431,"endColumn":42},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":450,"column":25,"nodeType":"CallExpression","messageId":"unexpected","endLine":450,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport Link from 'next/link';\nimport { useParams } from 'next/navigation';\nimport React from 'react';\n\nimport { AppLayout } from '@/components/layout';\n\n\n// 案例数据接口\ninterface CaseItem {\n  id: number;\n  title: string;\n  author: string;\n  subject: string;\n  grade: string;\n  description: string;\n  thumbnail: string;\n  likes: number;\n  uses: number;\n  rating: number;\n  tags: string[];\n  content?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\n/**\n * 案例详情页面组件\n */\nexport default function CaseDetailPage() {\n  const params = useParams();\n  const caseId = params.id as string;\n\n  // 模拟案例详情数据 - 实际应该从API获取\n  const getCaseDetail = (id: string): CaseItem | null => {\n    const mockCases: CaseItem[] = [\n      {\n        id: 1,\n        title: '二次函数的图像与性质',\n        author: '张老师',\n        subject: '数学',\n        grade: '高中',\n        description: '通过动态图像展示二次函数的变化规律，帮助学生理解抛物线的开口方向、对称轴等重要概念。',\n        thumbnail: '📊',\n        likes: 156,\n        uses: 89,\n        rating: 4.8,\n        tags: ['函数', '图像', '可视化'],\n        content: `\n# 二次函数的图像与性质\n\n## 教学目标\n1. 理解二次函数的概念和基本形式\n2. 掌握二次函数图像的特点\n3. 能够分析二次函数的性质\n\n## 教学重点\n- 二次函数的图像特征\n- 开口方向与系数a的关系\n- 对称轴和顶点坐标的求法\n\n## 教学内容\n\n### 1. 二次函数的基本形式\n二次函数的一般形式为：y = ax² + bx + c (a ≠ 0)\n\n### 2. 图像特征\n- 图像是一条抛物线\n- 开口方向由系数a决定：a > 0时开口向上，a < 0时开口向下\n- 有对称轴和顶点\n\n### 3. 重要性质\n- 对称轴：x = -b/(2a)\n- 顶点坐标：(-b/(2a), (4ac-b²)/(4a))\n- 最值：当a > 0时有最小值，当a < 0时有最大值\n\n## 教学方法\n1. 使用图形计算器或数学软件展示函数图像\n2. 通过改变参数值观察图像变化\n3. 结合实际问题理解函数意义\n\n## 练习题\n1. 画出函数 y = x² - 2x + 1 的图像\n2. 求函数 y = -2x² + 4x + 1 的对称轴和顶点\n3. 分析函数 y = 3x² - 6x + 2 的性质\n        `,\n        createdAt: '2024-01-15',\n        updatedAt: '2024-01-16',\n      },\n      {\n        id: 2,\n        title: '古诗词意境赏析',\n        author: '李老师',\n        subject: '语文',\n        grade: '初中',\n        description: '结合古诗词的创作背景，引导学生感受诗人的情感世界，提升文学鉴赏能力。',\n        thumbnail: '📜',\n        likes: 234,\n        uses: 156,\n        rating: 4.9,\n        tags: ['古诗词', '意境', '赏析'],\n        content: `\n# 古诗词意境赏析\n\n## 教学目标\n1. 理解古诗词的意境美\n2. 掌握赏析古诗词的方法\n3. 提升文学鉴赏能力\n\n## 教学重点\n- 意境的概念和特点\n- 诗词中情景交融的表现手法\n- 诗人情感的表达方式\n\n## 教学内容\n\n### 1. 什么是意境\n意境是诗词中情与景、主观与客观相融合而形成的艺术境界。\n\n### 2. 意境的特点\n- 情景交融\n- 虚实相生\n- 韵味无穷\n\n### 3. 赏析方法\n1. 抓住关键词语\n2. 分析表现手法\n3. 体会诗人情感\n4. 感受整体意境\n\n## 经典案例分析\n\n### 《静夜思》- 李白\n床前明月光，疑是地上霜。\n举头望明月，低头思故乡。\n\n**意境分析：**\n- 月光如霜，营造清冷氛围\n- 举头低头的动作，表现内心波动\n- 思乡之情在静夜中格外浓烈\n\n## 教学活动\n1. 朗读感悟\n2. 画面想象\n3. 情感体验\n4. 创作实践\n        `,\n        createdAt: '2024-01-14',\n        updatedAt: '2024-01-15',\n      },\n      {\n        id: 3,\n        title: '化学反应速率实验',\n        author: '王老师',\n        subject: '化学',\n        grade: '高中',\n        description: '通过实验现象和理论分析，帮助学生掌握化学反应速率的影响因素。',\n        thumbnail: '⚗️',\n        likes: 123,\n        uses: 67,\n        rating: 4.7,\n        tags: ['化学反应', '实验', '速率'],\n        content: `\n# 化学反应速率实验\n\n## 实验目标\n1. 观察化学反应速率的影响因素\n2. 理解反应速率的概念\n3. 掌握实验操作技能\n\n## 实验原理\n化学反应速率受多种因素影响：\n- 反应物浓度\n- 温度\n- 催化剂\n- 反应物接触面积\n\n## 实验内容\n\n### 实验一：浓度对反应速率的影响\n**实验材料：**\n- 不同浓度的盐酸溶液\n- 锌粒\n- 量筒、秒表\n\n**实验步骤：**\n1. 准备不同浓度的盐酸溶液\n2. 分别加入等量锌粒\n3. 观察并记录反应时间\n4. 分析浓度与反应速率的关系\n\n### 实验二：温度对反应速率的影响\n**实验设计：**\n- 控制其他条件不变\n- 改变反应温度\n- 观察反应速率变化\n\n### 实验三：催化剂的作用\n**对比实验：**\n- 有催化剂vs无催化剂\n- 观察反应速率差异\n- 分析催化剂的作用机理\n\n## 实验结果分析\n1. 浓度越大，反应速率越快\n2. 温度越高，反应速率越快\n3. 催化剂能显著提高反应速率\n\n## 安全注意事项\n1. 佩戴防护眼镜\n2. 通风良好的环境\n3. 正确处理废液\n4. 遵守实验室规则\n        `,\n        createdAt: '2024-01-13',\n        updatedAt: '2024-01-14',\n      },\n    ];\n\n    return (mockCases.find as any)(c => c.id === parseInt(id, 10)) || null;\n  };\n\n  const caseDetail = getCaseDetail(caseId);\n\n  if (!caseDetail) {\n    return (\n      <AppLayout>\n        <div className=\"modern-layout\">\n          <div className=\"modern-container\" style={{ padding: '80px 0', textAlign: 'center' }}>\n            <h1 style={{ fontSize: '48px', marginBottom: '16px' }}>😕</h1>\n            <h2 style={{ fontSize: '24px', marginBottom: '16px', color: 'var(--gray-900)' }}>\n              案例未找到\n            </h2>\n            <p style={{ color: 'var(--gray-600)', marginBottom: '32px' }}>\n              抱歉，您访问的案例不存在或已被删除。\n            </p>\n            <Link href=\"/\" className=\"modern-btn modern-btn-primary\">\n              返回首页\n            </Link>\n          </div>\n        </div>\n      </AppLayout>\n    );\n  }\n\n  return (\n    <AppLayout>\n      <div className=\"modern-layout\">\n      {/* 案例详情内容 */}\n      <div className=\"modern-container\" style={{ padding: '40px 0 80px' }}>\n        {/* 返回按钮 */}\n        <div style={{ marginBottom: '32px' }}>\n          <Link\n            href=\"/\"\n            className=\"modern-btn modern-btn-ghost\"\n            style={{\n              display: 'inline-flex',\n              alignItems: 'center',\n              gap: '8px',\n              padding: '8px 16px',\n            }}\n          >\n            ← 返回首页\n          </Link>\n        </div>\n\n        <div className=\"case-detail-grid\" style={{\n          display: 'grid',\n          gridTemplateColumns: '1fr 300px',\n          gap: '40px',\n        }}>\n          {/* 主要内容区域 */}\n          <div className=\"modern-card\">\n            <div className=\"modern-card-body\" style={{ padding: '40px' }}>\n              {/* 案例头部信息 */}\n              <div style={{ marginBottom: '32px' }}>\n                <div style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: '16px',\n                  marginBottom: '16px',\n                }}>\n                  <div style={{ fontSize: '64px' }}>{caseDetail.thumbnail}</div>\n                  <div>\n                    <h1 style={{\n                      fontSize: '32px',\n                      fontWeight: '700',\n                      color: 'var(--gray-900)',\n                      marginBottom: '8px',\n                    }}>\n                      {caseDetail.title}\n                    </h1>\n                    <div style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>\n                      <span style={{\n                        padding: '4px 12px',\n                        background: 'var(--primary-100)',\n                        color: 'var(--primary-700)',\n                        borderRadius: 'var(--radius-sm)',\n                        fontSize: '14px',\n                        fontWeight: '500',\n                      }}>\n                        {caseDetail.subject}\n                      </span>\n                      <span style={{\n                        padding: '4px 12px',\n                        background: 'var(--gray-100)',\n                        color: 'var(--gray-600)',\n                        borderRadius: 'var(--radius-sm)',\n                        fontSize: '14px',\n                      }}>\n                        {caseDetail.grade}\n                      </span>\n                      <span style={{ color: 'var(--gray-500)', fontSize: '14px' }}>\n                        by {caseDetail.author}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <p style={{\n                  fontSize: '18px',\n                  color: 'var(--gray-600)',\n                  lineHeight: '1.6',\n                  marginBottom: '24px',\n                }}>\n                  {caseDetail.description}\n                </p>\n\n                {/* 标签 */}\n                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\n                  {caseDetail.tags.map((tag, index) => (\n                    <span key={index} style={{\n                      padding: '4px 12px',\n                      background: 'var(--gray-100)',\n                      color: 'var(--gray-600)',\n                      fontSize: '14px',\n                      borderRadius: 'var(--radius-sm)',\n                    }}>\n                      #{tag}\n                    </span>\n                  ))}\n                </div>\n              </div>\n\n              {/* 案例内容 */}\n              <div style={{\n                borderTop: '1px solid var(--gray-200)',\n                paddingTop: '32px',\n              }}>\n                <div className=\"case-content\">\n                  {caseDetail.content ? (\n                    <div\n                      dangerouslySetInnerHTML={{\n                        __html: caseDetail.content\n                          .replace(/\\n/g, '<br>')\n                          .replace(/^# (.*$)/gm, '<h1>$1</h1>')\n                          .replace(/^## (.*$)/gm, '<h2>$1</h2>')\n                          .replace(/^### (.*$)/gm, '<h3>$1</h3>')\n                          .replace(/^\\*\\*(.*?)\\*\\*/gm, '<strong>$1</strong>')\n                          .replace(/^\\* (.*$)/gm, '<li>$1</li>')\n                          .replace(/^(\\d+)\\. (.*$)/gm, '<li>$1. $2</li>'),\n                      }}\n                    />\n                  ) : (\n                    <p style={{ color: 'var(--gray-500)', fontStyle: 'italic' }}>\n                      暂无详细内容\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* 侧边栏 */}\n          <div>\n            {/* 案例统计 */}\n            <div className=\"modern-card\" style={{ marginBottom: '24px' }}>\n              <div className=\"modern-card-body\">\n                <h3 style={{\n                  fontSize: '18px',\n                  fontWeight: '600',\n                  marginBottom: '16px',\n                  color: 'var(--gray-900)',\n                }}>\n                  案例数据\n                </h3>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                    <span style={{ color: 'var(--gray-600)' }}>❤️ 点赞数</span>\n                    <span style={{ fontWeight: '600' }}>{caseDetail.likes}</span>\n                  </div>\n                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                    <span style={{ color: 'var(--gray-600)' }}>🔄 使用数</span>\n                    <span style={{ fontWeight: '600' }}>{caseDetail.uses}</span>\n                  </div>\n                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                    <span style={{ color: 'var(--gray-600)' }}>⭐ 评分</span>\n                    <span style={{ fontWeight: '600' }}>{caseDetail.rating}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* 操作按钮 */}\n            <div className=\"modern-card\">\n              <div className=\"modern-card-body\">\n                <h3 style={{\n                  fontSize: '18px',\n                  fontWeight: '600',\n                  marginBottom: '16px',\n                  color: 'var(--gray-900)',\n                }}>\n                  操作\n                </h3>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n                  <button\n                    className=\"modern-btn modern-btn-primary\"\n                    style={{ width: '100%' }}\n                    onClick={() => {\n                      // 这里可以添加点赞功能\n                      alert('点赞功能开发中...');\n                    }}\n                  >\n                    ❤️ 点赞\n                  </button>\n                  <button\n                    className=\"modern-btn modern-btn-outline\"\n                    style={{ width: '100%' }}\n                    onClick={() => {\n                      // 这里可以添加收藏功能\n                      alert('收藏功能开发中...');\n                    }}\n                  >\n                    ⭐ 收藏\n                  </button>\n                  <button\n                    className=\"modern-btn modern-btn-ghost\"\n                    style={{ width: '100%' }}\n                    onClick={() => {\n                      // 这里可以添加分享功能\n                      if (navigator.share) {\n                        navigator.share({\n                          title: caseDetail.title,\n                          text: caseDetail.description,\n                          url: window.location.href,\n                        });\n                      } else {\n                        // 复制链接到剪贴板\n                        navigator.clipboard.writeText(window.location.href);\n                        alert('链接已复制到剪贴板');\n                      }\n                    }}\n                  >\n                    🔗 分享\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            {/* 作者信息 */}\n            <div className=\"modern-card\" style={{ marginTop: '24px' }}>\n              <div className=\"modern-card-body\">\n                <h3 style={{\n                  fontSize: '18px',\n                  fontWeight: '600',\n                  marginBottom: '16px',\n                  color: 'var(--gray-900)',\n                }}>\n                  作者信息\n                </h3>\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{\n                    width: '60px',\n                    height: '60px',\n                    borderRadius: '50%',\n                    background: 'var(--primary-100)',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontSize: '24px',\n                    margin: '0 auto 12px',\n                  }}>\n                    👨‍🏫\n                  </div>\n                  <div style={{ fontWeight: '600', marginBottom: '4px' }}>\n                    {caseDetail.author}\n                  </div>\n                  <div style={{ fontSize: '14px', color: 'var(--gray-500)' }}>\n                    {caseDetail.subject}教师\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 页脚 */}\n      <footer style={{\n        background: 'var(--gray-900)',\n        color: 'var(--gray-300)',\n        padding: '40px 0',\n        textAlign: 'center',\n      }}>\n        <div className=\"modern-container\">\n          <div className=\"modern-logo\" style={{ color: 'white', marginBottom: '16px' }}>\n            Inspi.AI\n          </div>\n          <p>© 2024 Inspi.AI. 让AI激发教学创意.</p>\n        </div>\n      </footer>\n      </div>\n    </AppLayout>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/demo/card-features/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/profile/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/robots.txt/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/share/card/[id]/page.tsx","messages":[],"suppressedMessages":[{"ruleId":"react/no-unknown-property","severity":2,"message":"Unknown property 'jsx' found","line":355,"column":14,"nodeType":"JSXAttribute","messageId":"unknownProp","endLine":355,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/sitemap.xml/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/square/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/square/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/subscription/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSubscriptionData'. Either include it or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadSubscriptionData, user]","fix":{"range":[1155,1161],"text":"[loadSubscriptionData, user]"}}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":56,"column":10,"nodeType":"CallExpression","messageId":"unexpected","endLine":56,"endColumn":47},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":69,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":69,"endColumn":35},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":73,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":73,"endColumn":28},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":88,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":88,"endColumn":21},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":92,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":92,"endColumn":26},{"ruleId":"max-len","severity":1,"message":"This line has a length of 160. Maximum allowed is 120.","line":207,"column":1,"nodeType":"Program","messageId":"max","endLine":207,"endColumn":161},{"ruleId":"max-len","severity":1,"message":"This line has a length of 128. Maximum allowed is 120.","line":258,"column":1,"nodeType":"Program","messageId":"max","endLine":258,"endColumn":129},{"ruleId":"max-len","severity":1,"message":"This line has a length of 160. Maximum allowed is 120.","line":268,"column":1,"nodeType":"Program","messageId":"max","endLine":268,"endColumn":161},{"ruleId":"max-len","severity":1,"message":"This line has a length of 134. Maximum allowed is 120.","line":438,"column":1,"nodeType":"Program","messageId":"max","endLine":438,"endColumn":135}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { paymentService } from '@/core/subscription/payment-service';\nimport { subscriptionService } from '@/core/subscription/subscription-service';\nimport { PaymentStatusIndicator, PaymentAmount } from '@/features/subscription/PaymentPage';\nimport { useAuthContext } from '@/shared/contexts/AuthContext';\nimport { Subscription, PaymentRecord } from '@/shared/types/subscription';\n\nexport default function SubscriptionManagePage() {\n  const { user } = useAuthContext();\n  const [currentSubscription, setCurrentSubscription] = useState<Subscription | null>(null);\n  const [paymentHistory, setPaymentHistory] = useState<PaymentRecord[]>([]);\n  const [subscriptionHistory, setSubscriptionHistory] = useState<Subscription[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [actionLoading, setActionLoading] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState<'overview' | 'payments' | 'history'>('overview');\n\n  useEffect(() => {\n    if (user) {\n      loadSubscriptionData();\n    }\n  }, [user]);\n\n  const loadSubscriptionData = async () => {\n    try {\n      setIsLoading(true);\n\n      const userId = (user?.id || (user as any)?._id) || 'test-user-123';\n\n      // 获取当前订阅\n      const subscription = await subscriptionService.getCurrentSubscription(userId);\n      setCurrentSubscription(subscription);\n\n      // 获取支付历史\n      const paymentsResult = await paymentService.getUserPaymentHistory(userId, 10);\n      setPaymentHistory(paymentsResult.payments);\n\n      // 获取订阅历史\n      const subscriptionsResult = await subscriptionService.getSubscriptionHistory(userId);\n      setSubscriptionHistory(subscriptionsResult.subscriptions);\n\n    } catch (error) {\n      console.error('加载订阅数据失败:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCancelSubscription = async () => {\n    if (!currentSubscription) return;\n\n    if (!confirm('确定要取消订阅吗？取消后将在当前计费周期结束后生效。')) {\n      return;\n    }\n\n    try {\n      setActionLoading('cancel');\n\n      const result = await subscriptionService.cancelSubscription(\n        currentSubscription.id,\n        '用户主动取消',\n      );\n\n      setCurrentSubscription(result);\n      alert('订阅已取消，将在当前计费周期结束后生效');\n\n    } catch (error) {\n      console.error('取消订阅失败:', error);\n      alert('取消订阅失败，请稍后重试');\n    } finally {\n      setActionLoading(null);\n    }\n  };\n\n  const handleRenewSubscription = async () => {\n    if (!currentSubscription) return;\n\n    try {\n      setActionLoading('renew');\n\n      const result = await subscriptionService.reactivateSubscription(currentSubscription.id);\n\n      setCurrentSubscription(result);\n      alert('续费成功！');\n\n    } catch (error) {\n      console.error('续费失败:', error);\n      alert('续费失败，请稍后重试');\n    } finally {\n      setActionLoading(null);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <AppLayout>\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">加载中...</p>\n          </div>\n        </div>\n      </AppLayout>\n    );\n  }\n\n  return (\n    <AppLayout>\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"max-w-6xl mx-auto px-4\">\n        {/* 页面标题 */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">订阅管理</h1>\n          <p className=\"text-gray-600\">管理您的订阅套餐和账单信息</p>\n        </div>\n\n        {/* 标签页导航 */}\n        <div className=\"bg-white rounded-lg shadow-sm mb-6\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"flex space-x-8 px-6\">\n              {[\n                { key: 'overview', label: '订阅概览', icon: '📊' },\n                { key: 'payments', label: '支付记录', icon: '💳' },\n                { key: 'history', label: '订阅历史', icon: '📋' },\n              ].map((tab) => (\n                <button\n                  key={tab.key}\n                  onClick={() => setActiveTab(tab.key as any)}\n                  className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                    activeTab === tab.key\n                      ? 'border-blue-500 text-blue-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <span className=\"mr-2\">{tab.icon}</span>\n                  {tab.label}\n                </button>\n              ))}\n            </nav>\n          </div>\n        </div>\n\n        {/* 订阅概览 */}\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {currentSubscription ? (\n              <>\n                {/* 当前订阅状态 */}\n                <div className=\"bg-white rounded-lg shadow-sm p-6\">\n                  <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">当前订阅</h2>\n\n                  <div className=\"grid md:grid-cols-2 gap-8\">\n                    {/* 订阅信息 */}\n                    <div>\n                      <div className=\"flex items-center mb-4\">\n                        <div className=\"bg-blue-100 rounded-full p-3 mr-4\">\n                          <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                          </svg>\n                        </div>\n                        <div>\n                          <h3 className=\"text-lg font-medium text-gray-900\">{currentSubscription.planName}</h3>\n                          <p className=\"text-sm text-gray-500\">\n                            状态: <span className={`font-medium ${\n                              currentSubscription.status === 'active' ? 'text-green-600' :\n                              currentSubscription.status === 'cancelled' ? 'text-red-600' : 'text-yellow-600'\n                            }`}>\n                              {currentSubscription.status === 'active' ? '活跃' :\n                               currentSubscription.status === 'cancelled' ? '已取消' :\n                               currentSubscription.status === 'expired' ? '已过期' :\n                               currentSubscription.status}\n                            </span>\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-3 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">月费:</span>\n                          <span className=\"font-medium\">¥{currentSubscription.monthlyPrice}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">开始日期:</span>\n                          <span className=\"font-medium\">{new Date(currentSubscription.startDate).toLocaleDateString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">到期日期:</span>\n                          <span className=\"font-medium\">{new Date(currentSubscription.endDate).toLocaleDateString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">下次扣费:</span>\n                          <span className=\"font-medium\">\n                            {currentSubscription.nextBillingDate\n                              ? new Date(currentSubscription.nextBillingDate).toLocaleDateString()\n                              : '未设置'\n                            }\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">剩余天数:</span>\n                          <span className=\"font-medium text-blue-600\">\n                            {currentSubscription.nextBillingDate\n                              ? Math.max(0, Math.ceil((new Date(currentSubscription.nextBillingDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)))\n                              : 0\n                            } 天\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* 配额信息 */}\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-4\">当前配额</h4>\n                      <div className=\"space-y-3 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">每日创建:</span>\n                          <span className=\"font-medium\">\n                            {currentSubscription.quotas.dailyCreateQuota === -1 ? '无限' : currentSubscription.quotas.dailyCreateQuota}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">每日复用:</span>\n                          <span className=\"font-medium\">\n                            {currentSubscription.quotas.dailyReuseQuota === -1 ? '无限' : currentSubscription.quotas.dailyReuseQuota}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">每日导出:</span>\n                          <span className=\"font-medium\">\n                            {currentSubscription.quotas.maxExportsPerDay === -1 ? '无限' : currentSubscription.quotas.maxExportsPerDay}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">知识图谱:</span>\n                          <span className=\"font-medium text-green-600\">无限</span>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-6\">\n                        <h4 className=\"font-medium text-gray-900 mb-3\">功能特性</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {currentSubscription.features.map((feature, index) => (\n                            <span key={index} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                              {feature}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* 到期提醒 */}\n                  {currentSubscription.nextBillingDate &&\n                   new Date(currentSubscription.nextBillingDate).getTime() - new Date().getTime() < 7 * 24 * 60 * 60 * 1000 && (\n                    <div className=\"mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                      <div className=\"flex\">\n                        <svg className=\"w-5 h-5 text-yellow-400 mr-3 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                        </svg>\n                        <div>\n                          <h4 className=\"text-yellow-800 font-medium\">订阅即将到期</h4>\n                          <p className=\"text-yellow-700 text-sm mt-1\">\n                            您的订阅将在 {currentSubscription.nextBillingDate\n                              ? Math.max(0, Math.ceil((new Date(currentSubscription.nextBillingDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)))\n                              : 0\n                            } 天后到期，请及时续费以免影响使用。\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* 操作按钮 */}\n                  <div className=\"mt-8 pt-6 border-t border-gray-200\">\n                    <div className=\"flex flex-wrap gap-4\">\n                      <button\n                        onClick={handleRenewSubscription}\n                        disabled={actionLoading === 'renew'}\n                        className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        {actionLoading === 'renew' ? '处理中...' : '立即续费'}\n                      </button>\n\n                      <button\n                        onClick={() => window.location.href = '/subscription/upgrade'}\n                        className=\"px-6 py-2 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50\"\n                      >\n                        升级套餐\n                      </button>\n\n                      <button\n                        onClick={handleCancelSubscription}\n                        disabled={actionLoading === 'cancel' || currentSubscription.status === 'cancelled'}\n                        className=\"px-6 py-2 border border-red-300 text-red-700 rounded-lg hover:bg-red-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        {actionLoading === 'cancel' ? '处理中...' : '取消订阅'}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </>\n            ) : (\n              /* 无订阅状态 */\n              <div className=\"bg-white rounded-lg shadow-sm p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无活跃订阅</h3>\n                <p className=\"text-gray-600 mb-6\">选择适合您的套餐，开始享受完整功能</p>\n                <button\n                  onClick={() => window.location.href = '/subscription/plans'}\n                  className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n                >\n                  查看套餐\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* 支付记录 */}\n        {activeTab === 'payments' && (\n          <div className=\"bg-white rounded-lg shadow-sm\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">支付记录</h2>\n            </div>\n\n            {paymentHistory.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        订单号\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        金额\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        状态\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        支付方式\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        创建时间\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {paymentHistory.map((payment) => (\n                      <tr key={payment.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900\">\n                          {payment.id}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <PaymentAmount amount={payment.amount} />\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <PaymentStatusIndicator status={payment.status} />\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {payment.paymentMethod === 'wechat_pay' ? '微信支付' : payment.paymentMethod}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {new Date(payment.createdAt).toLocaleString()}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无支付记录</h3>\n                <p className=\"text-gray-600\">您还没有任何支付记录</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* 订阅历史 */}\n        {activeTab === 'history' && (\n          <div className=\"bg-white rounded-lg shadow-sm\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">订阅历史</h2>\n            </div>\n\n            {subscriptionHistory.length > 0 ? (\n              <div className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {subscriptionHistory.map((subscription) => (\n                    <div key={subscription.id} className=\"border border-gray-200 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900\">{subscription.planName}</h4>\n                          <p className=\"text-sm text-gray-500\">订阅ID: {subscription.id}</p>\n                        </div>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                          subscription.status === 'active' ? 'bg-green-100 text-green-800' :\n                          subscription.status === 'cancelled' ? 'bg-red-100 text-red-800' :\n                          'bg-gray-100 text-gray-800'\n                        }`}>\n                          {subscription.status === 'active' ? '活跃' :\n                           subscription.status === 'cancelled' ? '已取消' :\n                           subscription.status === 'expired' ? '已过期' :\n                           subscription.status}\n                        </span>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-gray-600\">开始时间:</span>\n                          <p className=\"font-medium\">{new Date(subscription.startDate).toLocaleDateString()}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">结束时间:</span>\n                          <p className=\"font-medium\">{new Date(subscription.endDate).toLocaleDateString()}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">月费:</span>\n                          <p className=\"font-medium\">¥{subscription.monthlyPrice}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">使用天数:</span>\n                          <p className=\"font-medium\">\n                            {Math.ceil((new Date().getTime() - new Date(subscription.startDate).getTime()) / (1000 * 60 * 60 * 24))} 天\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无订阅历史</h3>\n                <p className=\"text-gray-600\">您还没有任何订阅历史记录</p>\n              </div>\n            )}\n          </div>\n        )}\n        </div>\n      </div>\n    </AppLayout>\n  );\n}\n\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/subscription/plans/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":22,"column":6,"nodeType":"ArrayExpression","endLine":22,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, user]","fix":{"range":[945,951],"text":"[loadData, user]"}}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":50,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":50,"endColumn":20},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":70,"column":11,"nodeType":"CallExpression","messageId":"unexpected","endLine":70,"endColumn":27},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":88,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":88,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { PlanConfig } from '@/core/subscription/plan-model';\nimport { planService } from '@/core/subscription/plan-service';\nimport { subscriptionService } from '@/core/subscription/subscription-service';\nimport { useAuthContext } from '@/shared/contexts/AuthContext';\nimport { UserTier, Subscription } from '@/shared/types/subscription';\n\nexport default function PricingPage() {\n  const { user } = useAuthContext();\n  const [plans, setPlans] = useState<PlanConfig[]>([]);\n  const [currentSubscription, setCurrentSubscription] = useState<Subscription | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);\n  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  useEffect(() => {\n    loadData();\n  }, [user]);\n\n  const loadData = async () => {\n    try {\n      setIsLoading(true);\n\n      // 获取所有套餐\n      const plansResult = await planService.queryPlans({\n        status: 'active',\n        sortBy: 'tier',\n      });\n      setPlans(plansResult.plans);\n\n      // 获取当前订阅\n      if (user) {\n        const subscription = await subscriptionService.getCurrentSubscription((user.id || (user as any)._id));\n        setCurrentSubscription(subscription);\n      }\n\n    } catch (error) {\n      console.error('加载数据失败:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSelectPlan = async (planId: string) => {\n    if (!user) {\n      alert('请先登录');\n      return;\n    }\n\n    try {\n      setIsProcessing(true);\n      setSelectedPlan(planId);\n\n      // 如果已有订阅，进行升级\n      if (currentSubscription) {\n        const result = await subscriptionService.upgradeSubscription(\n          currentSubscription.id,\n          planId,\n        );\n\n        if (result.paymentInfo) {\n          // 需要支付，跳转到支付页面\n          window.location.href = `/payment/${result.paymentInfo.paymentId}`;\n        } else {\n          // 无需支付，直接完成\n          alert('套餐升级成功！');\n          await loadData();\n        }\n      } else {\n        // 创建新订阅\n        const result = await subscriptionService.createSubscription({\n          userId: (user.id || (user as any)._id),\n          planId,\n          paymentMethod: 'wechat_pay',\n          billingCycle,\n        });\n\n        // 跳转到支付页面\n        window.location.href = `/payment/${result.paymentInfo.paymentId}`;\n      }\n\n    } catch (error) {\n      console.error('选择套餐失败:', error);\n      alert('操作失败，请稍后重试');\n    } finally {\n      setIsProcessing(false);\n      setSelectedPlan(null);\n    }\n  };\n\n  const formatPrice = (plan: PlanConfig) => {\n    if (plan.monthlyPrice === 0) return '免费';\n\n    const price = billingCycle === 'yearly' && plan.yearlyPrice\n      ? plan.yearlyPrice / 12\n      : plan.monthlyPrice;\n\n    return `¥${price}`;\n  };\n\n  const getSavings = (plan: PlanConfig) => {\n    if (!plan.yearlyPrice || plan.monthlyPrice === 0) return null;\n\n    const monthlyCost = plan.monthlyPrice * 12;\n    const savings = Math.round((1 - plan.yearlyPrice / monthlyCost) * 100);\n\n    return savings > 0 ? `节省${savings}%` : null;\n  };\n\n  const isCurrentPlan = (planId: string) => {\n    return currentSubscription?.planId === planId;\n  };\n\n  const canUpgrade = (tier: UserTier) => {\n    if (!currentSubscription) return true;\n\n    const tierOrder = { free: 0, basic: 1, pro: 2, admin: 3 };\n    const currentOrder = tierOrder[currentSubscription.tier];\n    const targetOrder = tierOrder[tier];\n\n    return targetOrder > currentOrder;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">加载中...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        {/* 页面标题 */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">选择适合您的套餐</h1>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            解锁更多功能，提升创作效率\n          </p>\n\n          {/* 计费周期切换 */}\n          <div className=\"inline-flex items-center bg-gray-100 rounded-lg p-1\">\n            <button\n              onClick={() => setBillingCycle('monthly')}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                billingCycle === 'monthly'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              按月付费\n            </button>\n            <button\n              onClick={() => setBillingCycle('yearly')}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                billingCycle === 'yearly'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              按年付费\n              <span className=\"ml-1 text-xs text-green-600 font-semibold\">省钱</span>\n            </button>\n          </div>\n        </div>\n\n        {/* 套餐卡片 */}\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n          {plans.map((plan) => {\n            const savings = billingCycle === 'yearly' ? getSavings(plan) : null;\n            const isCurrent = isCurrentPlan(plan.id);\n            const canSelect = canUpgrade(plan.tier);\n\n            return (\n              <div\n                key={plan.id}\n                className={`relative bg-white rounded-2xl shadow-lg overflow-hidden ${\n                  plan.popular ? 'ring-2 ring-blue-500' : ''\n                } ${isCurrent ? 'ring-2 ring-green-500' : ''}`}\n              >\n                {/* 推荐标签 */}\n                {plan.popular && !isCurrent && (\n                  <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <span className=\"bg-blue-500 text-white px-4 py-1 rounded-full text-sm font-medium\">\n                      最受欢迎\n                    </span>\n                  </div>\n                )}\n\n                {/* 当前套餐标签 */}\n                {isCurrent && (\n                  <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                    <span className=\"bg-green-500 text-white px-4 py-1 rounded-full text-sm font-medium\">\n                      当前套餐\n                    </span>\n                  </div>\n                )}\n\n                <div className=\"p-8\">\n                  {/* 套餐名称和价格 */}\n                  <div className=\"text-center mb-8\">\n                    <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                    <div className=\"mb-4\">\n                      <span className=\"text-4xl font-bold text-gray-900\">\n                        {formatPrice(plan)}\n                      </span>\n                      {plan.monthlyPrice > 0 && (\n                        <span className=\"text-gray-600 ml-1\">\n                          /{billingCycle === 'yearly' ? '月' : '月'}\n                        </span>\n                      )}\n                    </div>\n\n                    {savings && (\n                      <div className=\"inline-flex items-center px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium\">\n                        <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n                        </svg>\n                        {savings}\n                      </div>\n                    )}\n\n                    <p className=\"text-gray-600 mt-4\">{plan.description}</p>\n                  </div>\n\n                  {/* 功能列表 */}\n                  <div className=\"mb-8\">\n                    <h4 className=\"font-semibold text-gray-900 mb-4\">功能特性:</h4>\n                    <ul className=\"space-y-3\">\n                      {plan.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-center text-sm text-gray-600\">\n                          <svg className=\"w-5 h-5 text-green-500 mr-3 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                          </svg>\n                          {feature}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n\n                  {/* 配额信息 */}\n                  <div className=\"mb-8\">\n                    <h4 className=\"font-semibold text-gray-900 mb-4\">配额限制:</h4>\n                    <div className=\"space-y-2 text-sm text-gray-600\">\n                      <div className=\"flex justify-between\">\n                        <span>每日创建:</span>\n                        <span className=\"font-medium\">\n                          {plan.quotas.dailyCreateQuota === -1 ? '无限' : plan.quotas.dailyCreateQuota}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>每日复用:</span>\n                        <span className=\"font-medium\">\n                          {plan.quotas.dailyReuseQuota === -1 ? '无限' : plan.quotas.dailyReuseQuota}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>每日导出:</span>\n                        <span className=\"font-medium\">\n                          {plan.quotas.maxExportsPerDay === -1 ? '无限' : plan.quotas.maxExportsPerDay}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* 选择按钮 */}\n                  <button\n                    onClick={() => handleSelectPlan(plan.id)}\n                    disabled={!canSelect || isProcessing || isCurrent}\n                    className={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${\n                      isCurrent\n                        ? 'bg-green-100 text-green-800 cursor-default'\n                        : canSelect\n                        ? plan.popular\n                          ? 'bg-blue-600 text-white hover:bg-blue-700'\n                          : 'bg-gray-900 text-white hover:bg-gray-800'\n                        : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                    } ${isProcessing && selectedPlan === plan.id ? 'opacity-50' : ''}`}\n                  >\n                    {isProcessing && selectedPlan === plan.id ? (\n                      <span className=\"flex items-center justify-center\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        处理中...\n                      </span>\n                    ) : isCurrent ? (\n                      '当前套餐'\n                    ) : canSelect ? (\n                      currentSubscription ? '升级到此套餐' : '选择此套餐'\n                    ) : (\n                      '无法选择'\n                    )}\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* 常见问题 */}\n        <div className=\"mt-16 max-w-3xl mx-auto\">\n          <h2 className=\"text-2xl font-bold text-gray-900 text-center mb-8\">常见问题</h2>\n          <div className=\"space-y-6\">\n            <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n              <h3 className=\"font-semibold text-gray-900 mb-2\">可以随时取消订阅吗？</h3>\n              <p className=\"text-gray-600\">\n                是的，您可以随时取消订阅。取消后，您的订阅将在当前计费周期结束后停止，不会产生额外费用。\n              </p>\n            </div>\n\n            <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n              <h3 className=\"font-semibold text-gray-900 mb-2\">升级后立即生效吗？</h3>\n              <p className=\"text-gray-600\">\n                是的，升级后新的功能和配额将立即生效。您只需支付剩余时间的差价。\n              </p>\n            </div>\n\n            <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n              <h3 className=\"font-semibold text-gray-900 mb-2\">支持哪些支付方式？</h3>\n              <p className=\"text-gray-600\">\n                目前支持微信支付，后续会增加更多支付方式。\n              </p>\n            </div>\n\n            <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n              <h3 className=\"font-semibold text-gray-900 mb-2\">年付有什么优惠吗？</h3>\n              <p className=\"text-gray-600\">\n                选择年付可以享受相当于2个月免费的优惠，相比月付节省约17%的费用。\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* 联系支持 */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"bg-blue-50 rounded-lg p-8 max-w-2xl mx-auto\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">需要帮助？</h3>\n            <p className=\"text-gray-600 mb-4\">\n              如果您对套餐选择有任何疑问，我们的客服团队随时为您服务\n            </p>\n            <div className=\"flex justify-center space-x-4\">\n              <button className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\">\n                在线客服\n              </button>\n              <button className=\"px-6 py-2 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50\">\n                查看帮助文档\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/test/comprehensive/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/test/subscription/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/test/upgrade-prompt/page.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":156,"column":17,"nodeType":"CallExpression","messageId":"unexpected","endLine":156,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\n\nimport { QuotaType, UserTier } from '@/shared/types/subscription';\n\n// 升级提示组件（简化版，用于测试）\ninterface UpgradePromptProps {\n  isOpen: boolean;\n  onClose: () => void;\n  quotaType: QuotaType;\n  currentUsage: number;\n  limit: number;\n  currentTier: UserTier;\n}\n\nfunction UpgradePrompt({\n  isOpen,\n  onClose,\n  quotaType,\n  currentUsage,\n  limit,\n  currentTier,\n}: UpgradePromptProps) {\n  if (!isOpen) return null;\n\n  const quotaInfo = {\n    create: {\n      icon: '✨',\n      title: '今日创建配额已用完',\n      description: `您今天已经创建了 ${currentUsage} 张精美卡片！`,\n      benefits: [\n        '释放更大创作潜力',\n        '支持更多教学场景',\n        '提升工作效率',\n        '专业内容制作',\n      ],\n    },\n    reuse: {\n      icon: '🔄',\n      title: '今日复用配额已用完',\n      description: `您今天已经复用了 ${currentUsage} 张卡片模板！`,\n      benefits: [\n        '快速构建教学体系',\n        '积累个人知识库',\n        '提升创作效率 10 倍',\n        '知识复用最大化',\n      ],\n    },\n    export: {\n      icon: '📥',\n      title: '今日导出配额已用完',\n      description: `您今天已经导出了 ${currentUsage} 张图片！`,\n      benefits: [\n        '无限制图片导出',\n        '高清质量保证',\n        '批量导出功能',\n        '多格式支持',\n      ],\n    },\n    graph_nodes: {\n      icon: '🧠',\n      title: '知识图谱节点已达上限',\n      description: `您的知识图谱已有 ${currentUsage} 个节点！`,\n      benefits: [\n        '无限知识图谱节点',\n        '高级智能分析',\n        '学习路径规划',\n        '完整知识体系构建',\n      ],\n    },\n  };\n\n  const info = quotaInfo[quotaType];\n\n  const planInfo = {\n    free: { name: '免费版', price: 0, nextTier: 'basic' },\n    basic: { name: '基础版', price: 69, nextTier: 'pro' },\n    pro: { name: '专业版', price: 199, nextTier: 'pro' },\n    admin: { name: '管理员', price: 0, nextTier: 'admin' },\n  };\n\n  const current = planInfo[currentTier];\n  const recommended = planInfo[current.nextTier as UserTier];\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div\n        className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\n        onClick={onClose}\n      />\n\n      <div className=\"flex min-h-full items-center justify-center p-4\">\n        <div className=\"relative bg-white rounded-2xl shadow-2xl max-w-2xl w-full p-6\">\n          <button\n            onClick={onClose}\n            className=\"absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n\n          <div className=\"text-center mb-6\">\n            <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-gradient-to-r from-blue-100 to-purple-100 mb-4\">\n              <span className=\"text-3xl\">{info.icon}</span>\n            </div>\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              {info.title}\n            </h3>\n            <p className=\"text-gray-600 text-lg\">\n              {info.description}\n            </p>\n          </div>\n\n          <div className=\"bg-gray-50 rounded-xl p-4 mb-6\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 mb-2\">当前配额使用情况</p>\n              <div className=\"flex items-center justify-center space-x-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900\">{currentUsage}</div>\n                  <div className=\"text-sm text-gray-500\">已使用</div>\n                </div>\n                <div className=\"text-gray-400\">/</div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900\">{limit === -1 ? '无限' : limit}</div>\n                  <div className=\"text-sm text-gray-500\">总配额</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-4 mb-6\">\n            <h4 className=\"font-semibold text-gray-900 mb-3\">升级后您将获得：</h4>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {info.benefits.map((benefit, index) => (\n                <div key={index} className=\"flex items-center text-sm text-gray-700\">\n                  <svg className=\"w-4 h-4 text-green-500 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  {benefit}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={onClose}\n              className=\"flex-1 px-4 py-3 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 transition-colors\"\n            >\n              稍后升级\n            </button>\n            <button\n              onClick={() => {\n                alert(`升级到${recommended.name} - ¥${recommended.price}/月`);\n                onClose();\n              }}\n              className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-medium py-3 px-4 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-colors\"\n            >\n              立即升级到{recommended.name}\n            </button>\n          </div>\n\n          <div className=\"mt-4 text-center\">\n            <p className=\"text-xs text-gray-500\">\n              💡 升级用户平均每月创建 {recommended.nextTier === 'basic' ? '450+' : '2000+'} 张卡片\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function UpgradePromptTestPage() {\n  const [isPromptOpen, setIsPromptOpen] = useState(false);\n  const [selectedQuotaType, setSelectedQuotaType] = useState<QuotaType>('create');\n  const [selectedTier, setSelectedTier] = useState<UserTier>('free');\n  const [currentUsage, setCurrentUsage] = useState(3);\n  const [limit, setLimit] = useState(3);\n\n  const quotaTypes: { value: QuotaType; label: string }[] = [\n    { value: 'create', label: '创建配额' },\n    { value: 'reuse', label: '复用配额' },\n    { value: 'export', label: '导出配额' },\n    { value: 'graph_nodes', label: '图谱节点' },\n  ];\n\n  const userTiers: { value: UserTier; label: string }[] = [\n    { value: 'free', label: '免费版' },\n    { value: 'basic', label: '基础版' },\n    { value: 'pro', label: '专业版' },\n    { value: 'admin', label: '管理员' },\n  ];\n\n  const showPrompt = () => {\n    setIsPromptOpen(true);\n  };\n\n  const closePrompt = () => {\n    setIsPromptOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">\n            升级提示组件测试\n          </h1>\n\n          {/* 测试控制面板 */}\n          <div className=\"bg-gray-50 rounded-lg p-6 mb-6\">\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">测试参数设置</h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  配额类型\n                </label>\n                <select\n                  value={selectedQuotaType}\n                  onChange={(e) => setSelectedQuotaType(e.target.value as QuotaType)}\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2 bg-white\"\n                >\n                  {quotaTypes.map(type => (\n                    <option key={type.value} value={type.value}>\n                      {type.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  用户等级\n                </label>\n                <select\n                  value={selectedTier}\n                  onChange={(e) => setSelectedTier(e.target.value as UserTier)}\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2 bg-white\"\n                >\n                  {userTiers.map(tier => (\n                    <option key={tier.value} value={tier.value}>\n                      {tier.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  当前使用量\n                </label>\n                <input\n                  type=\"number\"\n                  value={currentUsage}\n                  onChange={(e) => setCurrentUsage(parseInt(e.target.value, 10) || 0)}\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2\"\n                  min=\"0\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  配额限制\n                </label>\n                <input\n                  type=\"number\"\n                  value={limit}\n                  onChange={(e) => setLimit(parseInt(e.target.value, 10) || 0)}\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2\"\n                  min=\"-1\"\n                  placeholder=\"-1 表示无限\"\n                />\n              </div>\n            </div>\n\n            <div className=\"mt-4\">\n              <button\n                onClick={showPrompt}\n                className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium\"\n              >\n                显示升级提示\n              </button>\n            </div>\n          </div>\n\n          {/* 当前配置显示 */}\n          <div className=\"bg-blue-50 rounded-lg p-4 mb-6\">\n            <h3 className=\"text-md font-semibold text-blue-800 mb-2\">\n              当前测试配置\n            </h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-blue-700\">\n              <div>\n                <strong>配额类型:</strong> {(quotaTypes.find as any)(t => t.value === selectedQuotaType)?.label}\n              </div>\n              <div>\n                <strong>用户等级:</strong> {(userTiers.find as any)(t => t.value === selectedTier)?.label}\n              </div>\n              <div>\n                <strong>使用情况:</strong> {currentUsage} / {limit === -1 ? '无限' : limit}\n              </div>\n              <div>\n                <strong>使用率:</strong> {limit === -1 ? '0%' : Math.round((currentUsage / limit) * 100)}%\n              </div>\n            </div>\n          </div>\n\n          {/* 功能说明 */}\n          <div className=\"bg-green-50 rounded-lg p-4\">\n            <h3 className=\"text-md font-semibold text-green-800 mb-2\">\n              测试说明\n            </h3>\n            <div className=\"text-sm text-green-700 space-y-2\">\n              <p>• 调整上方参数，然后点击\"显示升级提示\"按钮测试不同场景</p>\n              <p>• 升级提示会根据配额类型显示不同的图标、标题和描述</p>\n              <p>• 推荐的升级方案会根据当前用户等级自动计算</p>\n              <p>• 测试不同的使用量和限制组合，观察提示内容的变化</p>\n            </div>\n          </div>\n\n          {/* 测试场景快捷按钮 */}\n          <div className=\"mt-6\">\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">快速测试场景</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n              <button\n                onClick={() => {\n                  setSelectedQuotaType('create');\n                  setSelectedTier('free');\n                  setCurrentUsage(3);\n                  setLimit(3);\n                  setTimeout(() => setIsPromptOpen(true), 100);\n                }}\n                className=\"p-3 bg-red-100 text-red-800 rounded-lg hover:bg-red-200 transition-colors text-sm\"\n              >\n                免费用户创建配额用完\n              </button>\n\n              <button\n                onClick={() => {\n                  setSelectedQuotaType('reuse');\n                  setSelectedTier('basic');\n                  setCurrentUsage(5);\n                  setLimit(5);\n                  setTimeout(() => setIsPromptOpen(true), 100);\n                }}\n                className=\"p-3 bg-orange-100 text-orange-800 rounded-lg hover:bg-orange-200 transition-colors text-sm\"\n              >\n                基础用户复用配额用完\n              </button>\n\n              <button\n                onClick={() => {\n                  setSelectedQuotaType('export');\n                  setSelectedTier('free');\n                  setCurrentUsage(10);\n                  setLimit(10);\n                  setTimeout(() => setIsPromptOpen(true), 100);\n                }}\n                className=\"p-3 bg-yellow-100 text-yellow-800 rounded-lg hover:bg-yellow-200 transition-colors text-sm\"\n              >\n                免费用户导出配额用完\n              </button>\n\n              <button\n                onClick={() => {\n                  setSelectedQuotaType('graph_nodes');\n                  setSelectedTier('free');\n                  setCurrentUsage(50);\n                  setLimit(50);\n                  setTimeout(() => setIsPromptOpen(true), 100);\n                }}\n                className=\"p-3 bg-purple-100 text-purple-800 rounded-lg hover:bg-purple-200 transition-colors text-sm\"\n              >\n                免费用户图谱节点达上限\n              </button>\n\n              <button\n                onClick={() => {\n                  setSelectedQuotaType('create');\n                  setSelectedTier('basic');\n                  setCurrentUsage(20);\n                  setLimit(20);\n                  setTimeout(() => setIsPromptOpen(true), 100);\n                }}\n                className=\"p-3 bg-blue-100 text-blue-800 rounded-lg hover:bg-blue-200 transition-colors text-sm\"\n              >\n                基础用户创建配额用完\n              </button>\n\n              <button\n                onClick={() => {\n                  setSelectedQuotaType('create');\n                  setSelectedTier('pro');\n                  setCurrentUsage(100);\n                  setLimit(100);\n                  setTimeout(() => setIsPromptOpen(true), 100);\n                }}\n                className=\"p-3 bg-indigo-100 text-indigo-800 rounded-lg hover:bg-indigo-200 transition-colors text-sm\"\n              >\n                专业用户创建配额用完\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 升级提示组件 */}\n      <UpgradePrompt\n        isOpen={isPromptOpen}\n        onClose={closePrompt}\n        quotaType={selectedQuotaType}\n        currentUsage={currentUsage}\n        limit={limit}\n        currentTier={selectedTier}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/test/upgrade-system/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/app/works/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/admin/AdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/admin/InviteManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInvites'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [filters, loadInvites, pagination.page]","fix":{"range":[1259,1285],"text":"[filters, loadInvites, pagination.page]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport {\n  EyeIcon,\n  PlusIcon,\n  MagnifyingGlassIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from '@heroicons/react/24/outline';\nimport React, { useState, useEffect } from 'react';\n\n// 类型定义\ninterface InviteCode {\n  id: string;\n  code: string;\n  inviterName: string;\n  inviterEmail: string;\n  createdAt: Date;\n  usageCount: number;\n  maxUsage: number | null;\n  isActive: boolean;\n  expiresAt: Date | null;\n}\n\ninterface InviteFilters {\n  search: string;\n  status: 'all' | 'active' | 'inactive' | 'expired';\n  sortBy: 'createdAt' | 'usageCount' | 'code';\n  sortOrder: 'asc' | 'desc';\n}\n\ninterface PaginationInfo {\n  page: number;\n  limit: number;\n  totalPages: number;\n  totalCount: number;\n}\n\nexport function InviteManagement() {\n  const [invites, setInvites] = useState<InviteCode[]>([]);\n  const [filters, setFilters] = useState<InviteFilters>({\n    search: '',\n    status: 'all',\n    sortBy: 'createdAt',\n    sortOrder: 'desc',\n  });\n  const [pagination, setPagination] = useState<PaginationInfo>({\n    page: 1,\n    limit: 20,\n    totalPages: 1,\n    totalCount: 0,\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // 加载邀请码数据\n  useEffect(() => {\n    loadInvites();\n  }, [filters, pagination.page]);\n\n  const loadInvites = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // 模拟API调用\n      await new Promise(resolve => setTimeout(resolve, 800));\n\n      // 模拟数据\n      const mockInvites: InviteCode[] = [\n        {\n          id: '1',\n          code: 'INVITE2024001',\n          inviterName: '张三',\n          inviterEmail: 'zhangsan@example.com',\n          createdAt: new Date('2024-01-15'),\n          usageCount: 3,\n          maxUsage: 5,\n          isActive: true,\n          expiresAt: new Date('2024-12-31'),\n        },\n        {\n          id: '2',\n          code: 'INVITE2024002',\n          inviterName: '李四',\n          inviterEmail: 'lisi@example.com',\n          createdAt: new Date('2024-01-10'),\n          usageCount: 1,\n          maxUsage: 3,\n          isActive: true,\n          expiresAt: null,\n        },\n        {\n          id: '3',\n          code: 'INVITE2024003',\n          inviterName: '王五',\n          inviterEmail: 'wangwu@example.com',\n          createdAt: new Date('2024-01-05'),\n          usageCount: 5,\n          maxUsage: 5,\n          isActive: false,\n          expiresAt: new Date('2024-06-30'),\n        },\n      ];\n\n      // 应用过滤器\n      let filteredInvites = mockInvites;\n\n      if (filters.search) {\n        filteredInvites = filteredInvites.filter(invite =>\n          invite.code.toLowerCase().includes(filters.search.toLowerCase()) ||\n          invite.inviterName.toLowerCase().includes(filters.search.toLowerCase()) ||\n          invite.inviterEmail.toLowerCase().includes(filters.search.toLowerCase()),\n        );\n      }\n\n      if (filters.status !== 'all') {\n        filteredInvites = filteredInvites.filter(invite => {\n          switch (filters.status) {\n            case 'active':\n              return invite.isActive && (!invite.expiresAt || invite.expiresAt > new Date());\n            case 'inactive':\n              return !invite.isActive;\n            case 'expired':\n              return invite.expiresAt && invite.expiresAt <= new Date();\n            default:\n              return true;\n          }\n        });\n      }\n\n      setInvites(filteredInvites);\n      const newPagination = {\n        ...pagination,\n        totalCount: filteredInvites.length,\n        totalPages: Math.ceil(filteredInvites.length / pagination.limit),\n      };\n      setPagination(newPagination);\n\n    } catch (err) {\n      console.error('加载邀请码失败:', err);\n      setError('加载邀请码失败，请重试');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 处理搜索\n  const handleSearch = (value: string) => {\n    setFilters({ ...filters, search: value });\n    setPagination({ ...pagination, page: 1 });\n  };\n\n  // 处理状态过滤\n  const handleStatusFilter = (status: InviteFilters['status']) => {\n    setFilters({ ...filters, status });\n    setPagination({ ...pagination, page: 1 });\n  };\n\n  // 处理页面切换\n  const handlePageChange = (page: number) => {\n    setPagination({ ...pagination, page });\n  };\n\n  // 格式化日期\n  const formatDate = (date: Date | null) => {\n    if (!date) return '永不过期';\n    return date.toLocaleDateString('zh-CN');\n  };\n\n  // 获取状态标签\n  const getStatusBadge = (invite: InviteCode) => {\n    if (!invite.isActive) {\n      return <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">已停用</span>;\n    }\n    if (invite.expiresAt && invite.expiresAt <= new Date()) {\n      return <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800\">已过期</span>;\n    }\n    if (invite.maxUsage && invite.usageCount >= invite.maxUsage) {\n      return <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">已用完</span>;\n    }\n    return <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">活跃</span>;\n  };\n\n  // 计算使用率\n  const getUsagePercentage = (invite: InviteCode) => {\n    if (!invite.maxUsage) return 0;\n    return Math.min((invite.usageCount / invite.maxUsage) * 100, 100);\n  };\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-red-500\">\n          <p className=\"text-lg font-medium\">加载失败</p>\n          <p className=\"mt-1\">{error}</p>\n          <button\n            onClick={loadInvites}\n            className=\"mt-4 bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors\"\n          >\n            重新加载\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white shadow rounded-lg\">\n      {/* 头部 */}\n      <div className=\"px-4 py-5 sm:px-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n              邀请码管理\n            </h3>\n            <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">\n              管理和监控所有邀请码的使用情况\n            </p>\n          </div>\n          <button className=\"bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors flex items-center\">\n            <PlusIcon className=\"h-4 w-4 mr-2\" />\n            创建邀请码\n          </button>\n        </div>\n      </div>\n\n      {/* 过滤器 */}\n      <div className=\"px-4 py-4 sm:px-6 border-b border-gray-200\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0 sm:space-x-4\">\n          {/* 搜索框 */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n              </div>\n              <input\n                type=\"text\"\n                className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500\"\n                placeholder=\"搜索邀请码、邀请人姓名或邮箱...\"\n                value={filters.search}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </div>\n          </div>\n\n          {/* 状态过滤 */}\n          <div className=\"flex space-x-2\">\n            {[\n              { key: 'all', label: '全部' },\n              { key: 'active', label: '活跃' },\n              { key: 'inactive', label: '已停用' },\n              { key: 'expired', label: '已过期' },\n            ].map(({ key, label }) => (\n              <button\n                key={key}\n                onClick={() => handleStatusFilter(key as InviteFilters['status'])}\n                className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\n                  filters.status === key\n                    ? 'bg-indigo-100 text-indigo-700'\n                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'\n                }`}\n              >\n                {label}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* 表格 */}\n      {isLoading ? (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-500\">加载邀请码中...</p>\n        </div>\n      ) : invites.length > 0 ? (\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  邀请码\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  邀请人\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  使用情况\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  状态\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  过期时间\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  操作\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {invites.map((invite) => (\n                <tr key={invite.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {invite.code}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      创建于 {formatDate(invite.createdAt)}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {invite.inviterName}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      {invite.inviterEmail}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">\n                      {invite.usageCount} / {invite.maxUsage || '无限制'}\n                    </div>\n                    {invite.maxUsage && (\n                      <div className=\"w-full bg-gray-200 rounded-full h-2 mt-1\">\n                        <div\n                          className=\"bg-indigo-600 h-2 rounded-full\"\n                          style={{ width: `${getUsagePercentage(invite)}%` }}\n                        ></div>\n                      </div>\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {getStatusBadge(invite)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {formatDate(invite.expiresAt)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <button className=\"text-indigo-600 hover:text-indigo-900 mr-3\">\n                      <EyeIcon className=\"h-4 w-4\" />\n                    </button>\n                    <button className=\"text-gray-600 hover:text-gray-900\">\n                      编辑\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500\">没有找到邀请码</p>\n        </div>\n      )}\n\n      {/* 分页 */}\n      {pagination.totalPages > 1 && (\n        <div className=\"px-4 py-3 border-t border-gray-200 sm:px-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1 flex justify-between sm:hidden\">\n              <button\n                onClick={() => handlePageChange(pagination.page - 1)}\n                disabled={pagination.page <= 1}\n                className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                上一页\n              </button>\n              <button\n                onClick={() => handlePageChange(pagination.page + 1)}\n                disabled={pagination.page >= pagination.totalPages}\n                className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                下一页\n              </button>\n            </div>\n            <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-700\">\n                  显示第 <span className=\"font-medium\">{(pagination.page - 1) * pagination.limit + 1}</span> 到{' '}\n                  <span className=\"font-medium\">\n                    {Math.min(pagination.page * pagination.limit, pagination.totalCount)}\n                  </span>{' '}\n                  条，共 <span className=\"font-medium\">{pagination.totalCount}</span> 条记录\n                </p>\n              </div>\n              <div>\n                <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\">\n                  <button\n                    onClick={() => handlePageChange(pagination.page - 1)}\n                    disabled={pagination.page <= 1}\n                    className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <ChevronLeftIcon className=\"h-5 w-5\" />\n                  </button>\n                  {Array.from({ length: pagination.totalPages }, (_, i) => i + 1).map((page) => (\n                    <button\n                      key={page}\n                      onClick={() => handlePageChange(page)}\n                      className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${\n                        page === pagination.page\n                          ? 'z-10 bg-indigo-50 border-indigo-500 text-indigo-600'\n                          : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'\n                      }`}\n                    >\n                      {page}\n                    </button>\n                  ))}\n                  <button\n                    onClick={() => handlePageChange(pagination.page + 1)}\n                    disabled={pagination.page >= pagination.totalPages}\n                    className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <ChevronRightIcon className=\"h-5 w-5\" />\n                  </button>\n                </nav>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/auth/AuthProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/auth/ForgotPasswordForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/auth/LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/auth/LoginModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/auth/LoginPrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/auth/PasswordResetForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/auth/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/auth/RegisterForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/auth/RegisterModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/cards/CardEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/cards/ExportSharePanel.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":72,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":72,"endColumn":24},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":95,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":95,"endColumn":72},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":108,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":108,"endColumn":24},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":121,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":121,"endColumn":72},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":164,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":164,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef } from 'react';\n\nimport {\n  exportElementToImage,\n  downloadImage,\n  copyImageToClipboard,\n  exportPresets,\n  type ExportOptions,\n} from '@/lib/export/html-to-image';\nimport {\n  shareToSocial,\n  generateShareLink,\n  trackShareEvent,\n  sharePlatforms,\n  type ShareContent,\n  type SharePlatform,\n} from '@/lib/share/share-service';\n\ninterface ExportSharePanelProps {\n  cardElement: HTMLElement | null;\n  cardData: {\n    id: string;\n    title: string;\n    content: string;\n    type: string;\n  };\n  className?: string;\n}\n\nexport function ExportSharePanel({ cardElement, cardData, className = '' }: ExportSharePanelProps) {\n  const [isExporting, setIsExporting] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n  const [showExportOptions, setShowExportOptions] = useState(false);\n  const [showShareOptions, setShowShareOptions] = useState(false);\n  const [exportProgress, setExportProgress] = useState('');\n\n  // 导出格式选项\n  const exportFormats = [\n    {\n      key: 'social',\n      name: '社交媒体 (PNG)',\n      description: '800x800 高清正方形',\n      icon: '📱',\n    },\n    {\n      key: 'print',\n      name: '高清打印 (PNG)',\n      description: '3倍分辨率，适合打印',\n      icon: '🖨️',\n    },\n    {\n      key: 'web',\n      name: '网页使用 (JPG)',\n      description: '压缩文件，快速加载',\n      icon: '🌐',\n    },\n    {\n      key: 'transparent',\n      name: '透明背景 (PNG)',\n      description: '无背景，便于设计',\n      icon: '🎨',\n    },\n  ];\n\n  /**\n   * 导出图片\n   */\n  const handleExport = async (presetKey: keyof typeof exportPresets) => {\n    if (!cardElement) {\n      alert('请先生成卡片内容');\n      return;\n    }\n\n    setIsExporting(true);\n    setExportProgress('准备导出...');\n\n    try {\n      const options = exportPresets[presetKey];\n      setExportProgress('正在生成图片...');\n\n      const result = await exportElementToImage(cardElement, options);\n\n      setExportProgress('准备下载...');\n      downloadImage(result);\n\n      setExportProgress('导出完成！');\n\n      // 记录导出事件\n      console.log(`导出卡片: ${cardData.id}, 格式: ${presetKey}`);\n\n    } catch (error) {\n      console.error('导出失败:', error);\n      alert(`导出失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    } finally {\n      setIsExporting(false);\n      setShowExportOptions(false);\n      setTimeout(() => setExportProgress(''), 2000);\n    }\n  };\n\n  /**\n   * 复制图片到剪贴板\n   */\n  const handleCopyImage = async () => {\n    if (!cardElement) {\n      alert('请先生成卡片内容');\n      return;\n    }\n\n    setIsExporting(true);\n    setExportProgress('正在复制到剪贴板...');\n\n    try {\n      const result = await exportElementToImage(cardElement, exportPresets.social);\n      await copyImageToClipboard(result);\n      setExportProgress('已复制到剪贴板！');\n    } catch (error) {\n      console.error('复制失败:', error);\n      alert(`复制失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    } finally {\n      setIsExporting(false);\n      setTimeout(() => setExportProgress(''), 2000);\n    }\n  };\n\n  /**\n   * 分享到社交媒体\n   */\n  const handleShare = async (platform: SharePlatform) => {\n    setIsSharing(true);\n\n    try {\n      // 生成分享链接\n      const shareUrl = await generateShareLink(cardData.id, cardData);\n\n      // 准备分享内容\n      const shareContent: ShareContent = {\n        title: cardData.title || '我用AI创建了一张教学卡片',\n        description: `${cardData.content.substring(0, 100)}...`,\n        url: shareUrl,\n        hashtags: ['AI教学', '教育创新', 'InspiAI'],\n      };\n\n      // 如果需要图片，先导出\n      if (['weibo', 'qq'].includes(platform) && cardElement) {\n        setExportProgress('正在生成分享图片...');\n        const result = await exportElementToImage(cardElement, exportPresets.social);\n\n        // 这里需要上传图片到服务器获取公开URL\n        // 暂时使用本地DataURL (某些平台可能不支持)\n        shareContent.imageUrl = result.dataUrl;\n      }\n\n      // 执行分享\n      await shareToSocial({ platform, content: shareContent });\n\n      // 记录分享事件\n      await trackShareEvent(cardData.id, platform);\n\n    } catch (error) {\n      console.error('分享失败:', error);\n      alert(`分享失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    } finally {\n      setIsSharing(false);\n      setShowShareOptions(false);\n      setExportProgress('');\n    }\n  };\n\n  return (\n    <div className={`export-share-panel ${className}`}>\n      {/* 主要操作按钮 */}\n      <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>\n        {/* 快速导出按钮 */}\n        <button\n          onClick={() => handleExport('social')}\n          disabled={isExporting || !cardElement}\n          style={{\n            padding: '8px 16px',\n            backgroundColor: '#3b82f6',\n            color: 'white',\n            border: 'none',\n            borderRadius: '6px',\n            fontSize: '14px',\n            fontWeight: '500',\n            cursor: isExporting ? 'not-allowed' : 'pointer',\n            opacity: isExporting ? 0.6 : 1,\n            display: 'flex',\n            alignItems: 'center',\n            gap: '6px',\n          }}\n        >\n          {isExporting ? '⏳' : '📥'}\n          {isExporting ? '导出中...' : '下载图片'}\n        </button>\n\n\n        {/* 分享按钮 */}\n        <button\n          onClick={() => handleShare('wechat' as SharePlatform)}\n          disabled={isSharing}\n          style={{\n            padding: '8px 16px',\n            backgroundColor: '#10b981',\n            color: 'white',\n            border: 'none',\n            borderRadius: '6px',\n            fontSize: '14px',\n            fontWeight: '500',\n            cursor: isSharing ? 'not-allowed' : 'pointer',\n            opacity: isSharing ? 0.6 : 1,\n            display: 'flex',\n            alignItems: 'center',\n            gap: '6px',\n          }}\n        >\n          {isSharing ? '⏳' : '💬'}\n          {isSharing ? '分享中...' : '分享到微信'}\n        </button>\n      </div>\n\n      {/* 进度提示 */}\n      {exportProgress && (\n        <div style={{\n          marginTop: '8px',\n          padding: '8px 12px',\n          backgroundColor: '#f3f4f6',\n          borderRadius: '6px',\n          fontSize: '14px',\n          color: '#374151',\n        }}>\n          {exportProgress}\n        </div>\n      )}\n\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/cards/GeneratedCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/common/BackButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/community/CommentSection.tsx","messages":[{"ruleId":"import/order","severity":1,"message":"`@/shared/hooks/useAuth` type import should occur after import of `react`","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":52},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadComments, workId]","fix":{"range":[2219,2227],"text":"[loadComments, workId]"}}]},{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":242,"column":10,"nodeType":"CallExpression","messageId":"unexpected","endLine":242,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { User } from '@/shared/hooks/useAuth';\n/**\n * 评论区组件\n * 支持评论展示、发布、回复、点赞等功能\n */\n'use client';\n\nimport Image from 'next/image';\nimport React, { useState, useEffect } from 'react';\n\nimport { useAuth } from '@/shared/hooks/useAuth';\n\ninterface Comment {\n  _id: string\n  content: string\n  author: {\n    _id: string\n    name: string\n    avatar?: string\n  }\n  likesCount: number\n  repliesCount: number\n  isEdited: boolean\n  editedAt?: string\n  createdAt: string\n  replies?: Comment[]\n  userInteractions?: {\n    isLiked: boolean\n  }\n}\n\ninterface CommentSectionProps {\n  workId: string\n  allowComments: boolean\n  initialCommentsCount?: number\n  className?: string\n}\n\nexport function CommentSection({\n  workId,\n  allowComments,\n  initialCommentsCount = 0,\n  className = '',\n}: CommentSectionProps) {\n  const { user } = useAuth();\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [newComment, setNewComment] = useState('');\n  const [replyingTo, setReplyingTo] = useState<string | null>(null);\n  const [replyContent, setReplyContent] = useState('');\n  const [editingComment, setEditingComment] = useState<string | null>(null);\n  const [editContent, setEditContent] = useState('');\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [total, setTotal] = useState(initialCommentsCount);\n\n  // 加载评论\n  const loadComments = async (reset: boolean = false) => {\n    try {\n      setLoading(true);\n\n      const currentPage = reset ? 1 : page;\n      const response = await fetch(`/api/works/${workId}/comments?page=${currentPage}&limit=20`);\n      const result = await response.json();\n\n      if (result.success) {\n        if (reset) {\n          setComments(result.comments);\n          setPage(1);\n        } else {\n          setComments([...comments, ...result.comments]);\n        }\n\n        setTotal(result.total);\n        setHasMore(currentPage < result.totalPages);\n      }\n    } catch (error) {\n      console.error('Load comments error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 初始加载\n  useEffect(() => {\n    loadComments(true);\n  }, [workId]);\n\n  // 发布评论\n  const handleSubmitComment = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!user || !newComment.trim()) return;\n\n    try {\n      setSubmitting(true);\n\n      const response = await fetch(`/api/works/${workId}/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n        body: JSON.stringify({ content: newComment.trim() }),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        setComments([result.comment, ...comments]);\n        setNewComment('');\n        setTotal(total + 1);\n      }\n    } catch (error) {\n      console.error('Submit comment error:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // 发布回复\n  const handleSubmitReply = async (parentCommentId: string) => {\n    if (!user || !replyContent.trim()) return;\n\n    try {\n      setSubmitting(true);\n\n      const response = await fetch(`/api/works/${workId}/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n        body: JSON.stringify({\n          content: replyContent.trim(),\n          parentCommentId,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        // 更新评论列表，添加回复\n        const updatedComments = comments.map((comment: any) => {\n          if (comment._id === parentCommentId) {\n            return {\n              ...comment,\n              repliesCount: comment.repliesCount + 1,\n              replies: [...(comment.replies || []), result.comment],\n            };\n          }\n          return comment;\n        });\n        setComments(updatedComments);\n\n        setReplyContent('');\n        setReplyingTo(null);\n      }\n    } catch (error) {\n      console.error('Submit reply error:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // 点赞评论\n  const handleLikeComment = async (commentId: string) => {\n    if (!user) return;\n\n    try {\n      const response = await fetch(`/api/comments/${commentId}/like`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const updatedComments2 = comments.map((comment: any) => {\n          if (comment._id === commentId) {\n            const isLiked = comment.userInteractions?.isLiked;\n            return {\n              ...comment,\n              likesCount: isLiked ? comment.likesCount - 1 : comment.likesCount + 1,\n              userInteractions: {\n                ...comment.userInteractions,\n                isLiked: !isLiked,\n              },\n            };\n          }\n          return comment;\n        });\n        setComments(updatedComments2);\n      }\n    } catch (error) {\n      console.error('Like comment error:', error);\n    }\n  };\n\n  // 编辑评论\n  const handleEditComment = async (commentId: string) => {\n    if (!editContent.trim()) return;\n\n    try {\n      const response = await fetch(`/api/comments/${commentId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n        body: JSON.stringify({ content: editContent.trim() }),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        const updatedComments = comments.map((comment: any) => {\n          if (comment._id === commentId) {\n            return {\n              ...comment,\n              content: editContent.trim(),\n              isEdited: true,\n              editedAt: new Date().toISOString(),\n            };\n          }\n          return comment;\n        });\n        setComments(updatedComments);\n\n        setEditingComment(null);\n        setEditContent('');\n      }\n    } catch (error) {\n      console.error('Edit comment error:', error);\n    }\n  };\n\n  // 删除评论\n  const handleDeleteComment = async (commentId: string) => {\n    if (!confirm('确定要删除这条评论吗？')) return;\n\n    try {\n      const response = await fetch(`/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n\n      if (response.ok) {\n        setComments(comments.filter((comment: any) => comment._id !== commentId));\n        setTotal(total - 1);\n      }\n    } catch (error) {\n      console.error('Delete comment error:', error);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (minutes < 1) return '刚刚';\n    if (minutes < 60) return `${minutes}分钟前`;\n    if (hours < 24) return `${hours}小时前`;\n    if (days < 7) return `${days}天前`;\n    return date.toLocaleDateString();\n  };\n\n  const renderComment = (comment: Comment, isReply: boolean = false) => (\n    <div key={comment._id} className={`${isReply ? 'ml-8 mt-3' : 'mb-6'}`}>\n      <div className=\"flex space-x-3\">\n        <div className=\"flex-shrink-0\">\n          {comment.author.avatar ? (\n            <Image\n              src={comment.author.avatar}\n              alt={comment.author.name}\n              width={isReply ? 24 : 32}\n              height={isReply ? 24 : 32}\n              className=\"rounded-full\"\n            />\n          ) : (\n            <div className={`${isReply ? 'w-6 h-6' : 'w-8 h-8'} bg-gray-300 rounded-full flex items-center justify-center`}>\n              <span className={`${isReply ? 'text-xs' : 'text-sm'} text-gray-600`}>\n                {comment.author.name.charAt(0)}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-1\">\n            <span className={`${isReply ? 'text-sm' : 'text-base'} font-medium text-gray-900`}>\n              {comment.author.name}\n            </span>\n            <span className=\"text-xs text-gray-500\">\n              {formatDate(comment.createdAt)}\n            </span>\n            {comment.isEdited && (\n              <span className=\"text-xs text-gray-400\">(已编辑)</span>\n            )}\n          </div>\n\n          {editingComment === comment._id ? (\n            <div className=\"space-y-2\">\n              <textarea\n                value={editContent}\n                onChange={(e) => setEditContent(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={3}\n                maxLength={1000}\n              />\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={() => handleEditComment(comment._id)}\n                  className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700\"\n                >\n                  保存\n                </button>\n                <button\n                  onClick={() => {\n                    setEditingComment(null);\n                    setEditContent('');\n                  }}\n                  className=\"px-3 py-1 text-sm text-gray-600 hover:text-gray-800\"\n                >\n                  取消\n                </button>\n              </div>\n            </div>\n          ) : (\n            <>\n              <p className={`${isReply ? 'text-sm' : 'text-base'} text-gray-700 mb-2`}>\n                {comment.content}\n              </p>\n\n              <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                {user && (\n                  <>\n                    <button\n                      onClick={() => handleLikeComment(comment._id)}\n                      className={`flex items-center space-x-1 hover:text-red-500 ${\n                        comment.userInteractions?.isLiked ? 'text-red-500' : ''\n                      }`}\n                    >\n                      <svg className=\"w-4 h-4\" fill={comment.userInteractions?.isLiked ? 'currentColor' : 'none'} stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n                      </svg>\n                      <span>{comment.likesCount}</span>\n                    </button>\n\n                    {!isReply && (\n                      <button\n                        onClick={() => setReplyingTo(comment._id)}\n                        className=\"hover:text-blue-500\"\n                      >\n                        回复\n                      </button>\n                    )}\n\n                    {comment.author._id === ((user as any)?._id || '') && (\n                      <>\n                        <button\n                          onClick={() => {\n                            setEditingComment(comment._id);\n                            setEditContent(comment.content);\n                          }}\n                          className=\"hover:text-blue-500\"\n                        >\n                          编辑\n                        </button>\n                        <button\n                          onClick={() => handleDeleteComment(comment._id)}\n                          className=\"hover:text-red-500\"\n                        >\n                          删除\n                        </button>\n                      </>\n                    )}\n                  </>\n                )}\n              </div>\n            </>\n          )}\n\n          {/* 回复表单 */}\n          {replyingTo === comment._id && (\n            <div className=\"mt-3 space-y-2\">\n              <textarea\n                value={replyContent}\n                onChange={(e) => setReplyContent(e.target.value)}\n                placeholder={`回复 ${comment.author.name}...`}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={3}\n                maxLength={1000}\n              />\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={() => handleSubmitReply(comment._id)}\n                  disabled={submitting || !replyContent.trim()}\n                  className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50\"\n                >\n                  {submitting ? '发布中...' : '发布回复'}\n                </button>\n                <button\n                  onClick={() => {\n                    setReplyingTo(null);\n                    setReplyContent('');\n                  }}\n                  className=\"px-3 py-1 text-sm text-gray-600 hover:text-gray-800\"\n                >\n                  取消\n                </button>\n              </div>\n            </div>\n          )}\n\n          {/* 回复列表 */}\n          {comment.replies && comment.replies.length > 0 && (\n            <div className=\"mt-4 space-y-3\">\n              {comment.replies.map(reply => renderComment(reply, true))}\n\n              {comment.repliesCount > comment.replies.length && (\n                <button\n                  onClick={() => loadMoreReplies(comment._id)}\n                  className=\"ml-8 text-sm text-blue-600 hover:text-blue-800\"\n                >\n                  查看更多回复 ({comment.repliesCount - comment.replies.length})\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  const loadMoreReplies = async (commentId: string) => {\n    try {\n      const response = await fetch(`/api/comments/${commentId}/replies`);\n      const result = await response.json();\n\n      if (result.success) {\n        const updatedComments = comments.map((comment: any) => {\n          if (comment._id === commentId) {\n            return {\n              ...comment,\n              replies: result.comments,\n            };\n          }\n          return comment;\n        });\n        setComments(updatedComments);\n      }\n    } catch (error) {\n      console.error('Load more replies error:', error);\n    }\n  };\n\n  const handleLoadMore = () => {\n    setPage(page + 1);\n    loadComments(false);\n  };\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm ${className}`}>\n      <div className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          评论 ({total})\n        </h3>\n\n        {/* 发布评论表单 */}\n        {user && allowComments && (\n          <form onSubmit={handleSubmitComment} className=\"mb-6\">\n            <div className=\"flex space-x-3\">\n              <div className=\"flex-shrink-0\">\n                {user.avatar ? (\n                  <Image\n                    src={user.avatar}\n                    alt={user.name}\n                    width={32}\n                    height={32}\n                    className=\"rounded-full\"\n                  />\n                ) : (\n                  <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm text-gray-600\">\n                      {user.name.charAt(0)}\n                    </span>\n                  </div>\n                )}\n              </div>\n              <div className=\"flex-1 space-y-2\">\n                <textarea\n                  value={newComment}\n                  onChange={(e) => setNewComment(e.target.value)}\n                  placeholder=\"写下你的评论...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  rows={3}\n                  maxLength={1000}\n                />\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-gray-500\">\n                    {newComment.length}/1000\n                  </span>\n                  <button\n                    type=\"submit\"\n                    disabled={submitting || !newComment.trim()}\n                    className=\"px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n                  >\n                    {submitting ? '发布中...' : '发布评论'}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </form>\n        )}\n\n        {!user && allowComments && (\n          <div className=\"mb-6 p-4 bg-gray-50 rounded-lg text-center\">\n            <p className=\"text-gray-600 mb-2\">登录后可以发表评论</p>\n            <a\n              href=\"/auth/login\"\n              className=\"text-blue-600 hover:text-blue-800 font-medium\"\n            >\n              立即登录\n            </a>\n          </div>\n        )}\n\n        {!allowComments && (\n          <div className=\"mb-6 p-4 bg-yellow-50 rounded-lg text-center\">\n            <p className=\"text-yellow-800\">该作品暂不允许评论</p>\n          </div>\n        )}\n\n        {/* 评论列表 */}\n        <div className=\"space-y-6\">\n          {comments.map(comment => renderComment(comment))}\n        </div>\n\n        {/* 加载更多 */}\n        {hasMore && (\n          <div className=\"text-center mt-6\">\n            <button\n              onClick={handleLoadMore}\n              disabled={loading}\n              className=\"px-6 py-2 text-sm text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50\"\n            >\n              {loading ? '加载中...' : '加载更多评论'}\n            </button>\n          </div>\n        )}\n\n        {/* 空状态 */}\n        {comments.length === 0 && !loading && (\n          <div className=\"text-center py-8\">\n            <svg className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n            </svg>\n            <p className=\"text-gray-600\">\n              {allowComments ? '还没有评论，快来发表第一条评论吧！' : '该作品暂不允许评论'}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CommentSection;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/community/WorkEditor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadWork'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadWork, workId]","fix":{"range":[1753,1761],"text":"[loadWork, workId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 作品编辑器组件\n * 支持作品的创建和编辑功能\n */\n'use client';\n\nimport { useRouter } from 'next/navigation';\nimport React, { useState, useEffect } from 'react';\n\nimport { WorkService, CreateWorkRequest, UpdateWorkRequest } from '@/core/community/work-service';\nimport { useAuth } from '@/shared/hooks/useAuth';\n\ninterface WorkEditorProps {\n  workId?: string // 编辑模式时传入\n  onSave?: (work: any) => void\n  onCancel?: () => void\n  className?: string\n}\n\ninterface FormData extends CreateWorkRequest {\n  status?: 'draft' | 'published' | 'archived' | 'private'\n}\n\nexport function WorkEditor({ workId, onSave, onCancel, className = '' }: WorkEditorProps) {\n  const router = useRouter();\n  const { user } = useAuth();\n\n  const [formData, setFormData] = useState<FormData>({\n    title: '',\n    description: '',\n    knowledgePoint: '',\n    subject: '',\n    gradeLevel: '',\n    cards: [],\n    tags: [],\n    category: '',\n    difficulty: 'beginner',\n    estimatedTime: 30,\n    visibility: 'public',\n    allowReuse: true,\n    allowComments: true,\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [tagInput, setTagInput] = useState('');\n  const [previewMode, setPreviewMode] = useState(false);\n\n  // 学科和年级选项\n  const subjects = [\n    '数学', '语文', '英语', '物理', '化学', '生物',\n    '历史', '地理', '政治', '科学', '艺术', '体育',\n  ];\n\n  const gradeLevels = [\n    '小学一年级', '小学二年级', '小学三年级', '小学四年级', '小学五年级', '小学六年级',\n    '初中一年级', '初中二年级', '初中三年级',\n    '高中一年级', '高中二年级', '高中三年级',\n  ];\n\n  const categories = [\n    '概念解释', '例题讲解', '实验演示', '历史故事',\n    '生活应用', '思维训练', '复习总结', '拓展延伸',\n  ];\n\n  // 加载现有作品数据（编辑模式）\n  useEffect(() => {\n    if (workId) {\n      loadWork();\n    }\n  }, [workId]);\n\n  const loadWork = async () => {\n    if (!workId) return;\n\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/works/${workId}`);\n      const result = await response.json();\n\n      if (result.success && result.work) {\n        const work = result.work;\n        setFormData({\n          title: work.title,\n          description: work.description || '',\n          knowledgePoint: work.knowledgePoint,\n          subject: work.subject,\n          gradeLevel: work.gradeLevel,\n          cards: work.cards,\n          tags: work.tags,\n          category: work.category,\n          difficulty: work.difficulty,\n          estimatedTime: work.estimatedTime,\n          visibility: work.visibility,\n          allowReuse: work.allowReuse,\n          allowComments: work.allowComments,\n          status: work.status,\n        });\n      } else {\n        setErrors({ general: result.error || '加载作品失败' });\n      }\n    } catch (error) {\n      setErrors({ general: '加载作品失败' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    const checked = (e.target as HTMLInputElement).checked;\n\n    const newValue = type === 'checkbox' ? checked :\n                     type === 'number' ? parseInt(value, 10) || 0 : value;\n    setFormData({\n      ...formData,\n      [name]: newValue,\n    });\n\n    // 清除对应字段的错误\n    if (errors[name]) {\n      setErrors({ ...errors, [name]: '' });\n    }\n  };\n\n  const handleTagAdd = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && tagInput.trim()) {\n      e.preventDefault();\n      const newTag = tagInput.trim();\n\n      if (!formData.tags.includes(newTag) && formData.tags.length < 10) {\n        setFormData({\n          ...formData,\n          tags: [...formData.tags, newTag],\n        });\n      }\n\n      setTagInput('');\n    }\n  };\n\n  const handleTagRemove = (tagToRemove: string) => {\n    setFormData({\n      ...formData,\n      tags: formData.tags.filter(tag => tag !== tagToRemove),\n    });\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.title.trim()) {\n      newErrors.title = '请输入作品标题';\n    } else if (formData.title.length < 2 || formData.title.length > 100) {\n      newErrors.title = '标题长度应在2-100个字符之间';\n    }\n\n    if (!formData.knowledgePoint.trim()) {\n      newErrors.knowledgePoint = '请输入知识点';\n    }\n\n    if (!formData.subject) {\n      newErrors.subject = '请选择学科';\n    }\n\n    if (!formData.gradeLevel) {\n      newErrors.gradeLevel = '请选择年级';\n    }\n\n    if (!formData.category) {\n      newErrors.category = '请选择分类';\n    }\n\n    if (formData.cards.length === 0) {\n      newErrors.cards = '请至少添加一张教学卡片';\n    }\n\n    if (formData.description && formData.description.length > 500) {\n      newErrors.description = '描述长度不能超过500个字符';\n    }\n\n    if (formData.estimatedTime < 5 || formData.estimatedTime > 300) {\n      newErrors.estimatedTime = '预计学习时间应在5-300分钟之间';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSave = async (publish: boolean = false) => {\n    if (!validateForm()) return;\n\n    try {\n      setSaving(true);\n      setErrors({});\n\n      const saveData = { ...formData };\n      if (publish) {\n        saveData.status = 'published';\n      }\n\n      let result;\n      if (workId) {\n        // 更新作品\n        const response = await fetch(`/api/works/${workId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n          },\n          body: JSON.stringify(saveData),\n        });\n        result = await response.json();\n      } else {\n        // 创建作品\n        const response = await fetch('/api/works', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n          },\n          body: JSON.stringify(saveData),\n        });\n        result = await response.json();\n      }\n\n      if (result.success) {\n        onSave && onSave(result.work);\n\n        if (publish) {\n          router.push(`/works/${result.work._id}`);\n        } else {\n          router.push('/dashboard/works');\n        }\n      } else {\n        setErrors({ general: result.error || '保存失败' });\n      }\n    } catch (error) {\n      setErrors({ general: '保存失败，请稍后重试' });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleCancel = () => {\n    if (onCancel) {\n      onCancel();\n    } else {\n      router.back();\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`max-w-4xl mx-auto p-6 ${className}`}>\n      <div className=\"bg-white rounded-lg shadow-lg\">\n        {/* 头部 */}\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              {workId ? '编辑作品' : '创建作品'}\n            </h1>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setPreviewMode(!previewMode)}\n                className=\"px-4 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50\"\n              >\n                {previewMode ? '编辑模式' : '预览模式'}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* 错误提示 */}\n        {errors.general && (\n          <div className=\"mx-6 mt-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <p className=\"text-red-600 text-sm\">{errors.general}</p>\n          </div>\n        )}\n\n        <div className=\"p-6\">\n          {previewMode ? (\n            // 预览模式\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-900\">{formData.title || '未命名作品'}</h2>\n                {formData.description && (\n                  <p className=\"mt-2 text-gray-600\">{formData.description}</p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-gray-700\">学科：</span>\n                  <span className=\"text-gray-600\">{formData.subject || '-'}</span>\n                </div>\n                <div>\n                  <span className=\"font-medium text-gray-700\">年级：</span>\n                  <span className=\"text-gray-600\">{formData.gradeLevel || '-'}</span>\n                </div>\n                <div>\n                  <span className=\"font-medium text-gray-700\">难度：</span>\n                  <span className=\"text-gray-600\">\n                    {formData.difficulty === 'beginner' ? '初级' :\n                     formData.difficulty === 'intermediate' ? '中级' : '高级'}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"font-medium text-gray-700\">时长：</span>\n                  <span className=\"text-gray-600\">{formData.estimatedTime}分钟</span>\n                </div>\n              </div>\n\n              {formData.tags.length > 0 && (\n                <div>\n                  <span className=\"font-medium text-gray-700\">标签：</span>\n                  <div className=\"mt-2 flex flex-wrap gap-2\">\n                    {formData.tags.map(tag => (\n                      <span key={tag} className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              <div>\n                <h3 className=\"font-medium text-gray-700 mb-3\">教学卡片 ({formData.cards.length})</h3>\n                <div className=\"grid gap-4\">\n                  {formData.cards.map((card, index) => (\n                    <div key={index} className=\"p-4 border border-gray-200 rounded-lg\">\n                      <h4 className=\"font-medium text-gray-900\">{card.title}</h4>\n                      <p className=\"mt-2 text-gray-600\">{card.content}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ) : (\n            // 编辑模式\n            <form className=\"space-y-6\">\n              {/* 基本信息 */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    作品标题 *\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"title\"\n                    value={formData.title}\n                    onChange={handleChange}\n                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                      errors.title ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"请输入作品标题\"\n                    maxLength={100}\n                  />\n                  {errors.title && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.title}</p>\n                  )}\n                </div>\n\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    作品描述\n                  </label>\n                  <textarea\n                    name=\"description\"\n                    value={formData.description}\n                    onChange={handleChange}\n                    rows={3}\n                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                      errors.description ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"请简要描述作品内容和特色\"\n                    maxLength={500}\n                  />\n                  <div className=\"mt-1 flex justify-between\">\n                    {errors.description && (\n                      <p className=\"text-sm text-red-600\">{errors.description}</p>\n                    )}\n                    <p className=\"text-sm text-gray-500\">\n                      {formData.description?.length || 0}/500\n                    </p>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    知识点 *\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"knowledgePoint\"\n                    value={formData.knowledgePoint}\n                    onChange={handleChange}\n                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                      errors.knowledgePoint ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                    placeholder=\"如：二次函数\"\n                  />\n                  {errors.knowledgePoint && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.knowledgePoint}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    学科 *\n                  </label>\n                  <select\n                    name=\"subject\"\n                    value={formData.subject}\n                    onChange={handleChange}\n                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                      errors.subject ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                  >\n                    <option value=\"\">请选择学科</option>\n                    {subjects.map(subject => (\n                      <option key={subject} value={subject}>{subject}</option>\n                    ))}\n                  </select>\n                  {errors.subject && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.subject}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    年级 *\n                  </label>\n                  <select\n                    name=\"gradeLevel\"\n                    value={formData.gradeLevel}\n                    onChange={handleChange}\n                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                      errors.gradeLevel ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                  >\n                    <option value=\"\">请选择年级</option>\n                    {gradeLevels.map(grade => (\n                      <option key={grade} value={grade}>{grade}</option>\n                    ))}\n                  </select>\n                  {errors.gradeLevel && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.gradeLevel}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    分类 *\n                  </label>\n                  <select\n                    name=\"category\"\n                    value={formData.category}\n                    onChange={handleChange}\n                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                      errors.category ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                  >\n                    <option value=\"\">请选择分类</option>\n                    {categories.map(category => (\n                      <option key={category} value={category}>{category}</option>\n                    ))}\n                  </select>\n                  {errors.category && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.category}</p>\n                  )}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    难度等级\n                  </label>\n                  <select\n                    name=\"difficulty\"\n                    value={formData.difficulty}\n                    onChange={handleChange}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"beginner\">初级</option>\n                    <option value=\"intermediate\">中级</option>\n                    <option value=\"advanced\">高级</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    预计学习时间（分钟）\n                  </label>\n                  <input\n                    type=\"number\"\n                    name=\"estimatedTime\"\n                    value={formData.estimatedTime}\n                    onChange={handleChange}\n                    min={5}\n                    max={300}\n                    className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                      errors.estimatedTime ? 'border-red-300' : 'border-gray-300'\n                    }`}\n                  />\n                  {errors.estimatedTime && (\n                    <p className=\"mt-1 text-sm text-red-600\">{errors.estimatedTime}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* 标签 */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  标签\n                </label>\n                <div className=\"space-y-2\">\n                  <input\n                    type=\"text\"\n                    value={tagInput}\n                    onChange={(e) => setTagInput(e.target.value)}\n                    onKeyDown={handleTagAdd}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"输入标签后按回车添加（最多10个）\"\n                    maxLength={20}\n                  />\n                  {formData.tags.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {formData.tags.map(tag => (\n                        <span\n                          key={tag}\n                          className=\"inline-flex items-center px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full\"\n                        >\n                          {tag}\n                          <button\n                            type=\"button\"\n                            onClick={() => handleTagRemove(tag)}\n                            className=\"ml-1 text-blue-600 hover:text-blue-800\"\n                          >\n                            ×\n                          </button>\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* 权限设置 */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium text-gray-900\">权限设置</h3>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    可见性\n                  </label>\n                  <select\n                    name=\"visibility\"\n                    value={formData.visibility}\n                    onChange={handleChange}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"public\">公开 - 所有人可见</option>\n                    <option value=\"unlisted\">不公开 - 仅通过链接访问</option>\n                    <option value=\"private\">私有 - 仅自己可见</option>\n                  </select>\n                </div>\n\n                <div className=\"flex items-center space-x-6\">\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"allowReuse\"\n                      checked={formData.allowReuse}\n                      onChange={handleChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    />\n                    <span className=\"ml-2 text-sm text-gray-700\">允许他人复用</span>\n                  </label>\n\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"allowComments\"\n                      checked={formData.allowComments}\n                      onChange={handleChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    />\n                    <span className=\"ml-2 text-sm text-gray-700\">允许评论</span>\n                  </label>\n                </div>\n              </div>\n\n              {/* 教学卡片提示 */}\n              {formData.cards.length === 0 && (\n                <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <div className=\"flex\">\n                    <svg className=\"w-5 h-5 text-yellow-400 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                    </svg>\n                    <div className=\"ml-3\">\n                      <p className=\"text-sm text-yellow-800\">\n                        请使用AI生成功能创建教学卡片，或手动添加卡片内容。\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </form>\n          )}\n        </div>\n\n        {/* 底部操作栏 */}\n        <div className=\"px-6 py-4 border-t border-gray-200 bg-gray-50\">\n          <div className=\"flex items-center justify-between\">\n            <button\n              type=\"button\"\n              onClick={handleCancel}\n              className=\"px-4 py-2 text-sm text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50\"\n              disabled={saving}\n            >\n              取消\n            </button>\n\n            <div className=\"flex items-center space-x-3\">\n              <button\n                type=\"button\"\n                onClick={() => handleSave(false)}\n                disabled={saving}\n                className=\"px-4 py-2 text-sm text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50\"\n              >\n                {saving ? '保存中...' : '保存草稿'}\n              </button>\n\n              <button\n                type=\"button\"\n                onClick={() => handleSave(true)}\n                disabled={saving || formData.cards.length === 0}\n                className=\"px-6 py-2 text-sm text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {saving ? '发布中...' : '发布作品'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WorkEditor;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/community/WorkList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'initialWorks.length' and 'loadWorks'. Either include them or remove the dependency array.","line":150,"column":6,"nodeType":"ArrayExpression","endLine":150,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initialWorks.length, loadWorks]","fix":{"range":[3472,3474],"text":"[initialWorks.length, loadWorks]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadWorks'. Either include it or remove the dependency array.","line":155,"column":6,"nodeType":"ArrayExpression","endLine":155,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [searchInput, currentFilters, currentSort, loadWorks]","fix":{"range":[3542,3584],"text":"[searchInput, currentFilters, currentSort, loadWorks]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 作品列表组件\n * 支持网格和列表展示，搜索和筛选功能\n */\n'use client';\n\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport React, { useState, useEffect } from 'react';\n\nimport { useAuth } from '@/shared/hooks/useAuth';\n\ninterface Work {\n  _id: string\n  title: string\n  description?: string\n  knowledgePoint: string\n  subject: string\n  gradeLevel: string\n  category: string\n  difficulty: 'beginner' | 'intermediate' | 'advanced'\n  estimatedTime: number\n  tags: string[]\n  author: {\n    _id: string\n    name: string\n    avatar?: string\n  }\n  likesCount: number\n  views: number\n  reuseCount: number\n  commentsCount: number\n  qualityScore: number\n  publishedAt: string\n  userInteractions?: {\n    isLiked: boolean\n    isBookmarked: boolean\n    isFollowing: boolean\n  }\n}\n\ninterface WorkListProps {\n  initialWorks?: Work[]\n  searchQuery?: string\n  filters?: {\n    subject?: string\n    gradeLevel?: string\n    category?: string\n    difficulty?: string\n    tags?: string[]\n    author?: string\n  }\n  sortBy?: 'latest' | 'popular' | 'trending' | 'views'\n  viewMode?: 'grid' | 'list'\n  showFilters?: boolean\n  showSearch?: boolean\n  className?: string\n}\n\nexport function WorkList({\n  initialWorks = [],\n  searchQuery = '',\n  filters = {},\n  sortBy = 'latest',\n  viewMode = 'grid',\n  showFilters = true,\n  showSearch = true,\n  className = '',\n}: WorkListProps) {\n  const { user } = useAuth();\n\n  const [works, setWorks] = useState<Work[]>(initialWorks);\n  const [loading, setLoading] = useState(false);\n  const [searchInput, setSearchInput] = useState(searchQuery);\n  const [currentFilters, setCurrentFilters] = useState(filters);\n  const [currentSort, setCurrentSort] = useState(sortBy);\n  const [currentViewMode, setCurrentViewMode] = useState(viewMode);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [total, setTotal] = useState(0);\n\n  // 学科和年级选项\n  const subjects = [\n    '数学', '语文', '英语', '物理', '化学', '生物',\n    '历史', '地理', '政治', '科学', '艺术', '体育',\n  ];\n\n  const gradeLevels = [\n    '小学一年级', '小学二年级', '小学三年级', '小学四年级', '小学五年级', '小学六年级',\n    '初中一年级', '初中二年级', '初中三年级',\n    '高中一年级', '高中二年级', '高中三年级',\n  ];\n\n  const categories = [\n    '概念解释', '例题讲解', '实验演示', '历史故事',\n    '生活应用', '思维训练', '复习总结', '拓展延伸',\n  ];\n\n  // 加载作品列表\n  const loadWorks = async (reset: boolean = false) => {\n    try {\n      setLoading(true);\n\n      const params = new URLSearchParams({\n        page: reset ? '1' : page.toString(),\n        limit: '20',\n        sortBy: currentSort,\n      });\n\n      if (searchInput.trim()) {\n        params.append('query', searchInput.trim());\n      }\n\n      Object.entries(currentFilters).forEach(([key, value]) => {\n        if (value) {\n          if (Array.isArray(value)) {\n            value.forEach(v => params.append(key, v));\n          } else {\n            params.append(key, value);\n          }\n        }\n      });\n\n      const response = await fetch(`/api/works/search?${params}`);\n      const result = await response.json();\n\n      if (result.success) {\n        if (reset) {\n          setWorks(result.works);\n          setPage(1);\n        } else {\n          setWorks([...works, ...result.works]);\n        }\n\n        setTotal(result.total);\n        setHasMore(result.page < result.totalPages);\n      }\n    } catch (error) {\n      console.error('Load works error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 初始加载\n  useEffect(() => {\n    if (initialWorks.length === 0) {\n      loadWorks(true);\n    }\n  }, []);\n\n  // 搜索和筛选变化时重新加载\n  useEffect(() => {\n    loadWorks(true);\n  }, [searchInput, currentFilters, currentSort]);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    loadWorks(true);\n  };\n\n  const handleFilterChange = (key: string, value: any) => {\n    setCurrentFilters({\n      ...currentFilters,\n      [key]: value,\n    });\n  };\n\n  const handleLoadMore = () => {\n    setPage(page + 1);\n    loadWorks(false);\n  };\n\n  const handleLike = async (workId: string) => {\n    if (!user) return;\n\n    try {\n      const response = await fetch(`/api/works/${workId}/like`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const updatedWorks = works.map((work: any) => {\n          if (work._id === workId) {\n            const isLiked = work.userInteractions?.isLiked;\n            return {\n              ...work,\n              likesCount: isLiked ? work.likesCount - 1 : work.likesCount + 1,\n              userInteractions: {\n                ...work.userInteractions,\n                isLiked: !isLiked,\n              },\n            };\n          }\n          return work;\n        });\n        setWorks(updatedWorks);\n      }\n    } catch (error) {\n      console.error('Like error:', error);\n    }\n  };\n\n  const handleBookmark = async (workId: string) => {\n    if (!user) return;\n\n    try {\n      const response = await fetch(`/api/works/${workId}/bookmark`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n\n      if (response.ok) {\n        const updatedWorks = works.map((work: any) => {\n          if (work._id === workId) {\n            return {\n              ...work,\n              userInteractions: {\n                ...work.userInteractions,\n                isBookmarked: !work.userInteractions?.isBookmarked,\n              },\n            };\n          }\n          return work;\n        });\n        setWorks(updatedWorks);\n      }\n    } catch (error) {\n      console.error('Bookmark error:', error);\n    }\n  };\n\n  const getDifficultyLabel = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return '初级';\n      case 'intermediate': return '中级';\n      case 'advanced': return '高级';\n      default: return difficulty;\n    }\n  };\n\n  const getSortLabel = (sort: string) => {\n    switch (sort) {\n      case 'latest': return '最新发布';\n      case 'popular': return '最受欢迎';\n      case 'trending': return '热门趋势';\n      case 'views': return '浏览最多';\n      default: return sort;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (days === 0) return '今天';\n    if (days === 1) return '昨天';\n    if (days < 7) return `${days}天前`;\n    if (days < 30) return `${Math.floor(days / 7)}周前`;\n    if (days < 365) return `${Math.floor(days / 30)}个月前`;\n    return `${Math.floor(days / 365)}年前`;\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* 搜索栏 */}\n      {showSearch && (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <form onSubmit={handleSearch} className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <input\n                type=\"text\"\n                value={searchInput}\n                onChange={(e) => setSearchInput(e.target.value)}\n                placeholder=\"搜索作品标题、知识点、标签...\"\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            <button\n              type=\"submit\"\n              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            >\n              搜索\n            </button>\n          </form>\n        </div>\n      )}\n\n      {/* 筛选和排序 */}\n      {showFilters && (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">学科</label>\n              <select\n                value={currentFilters.subject || ''}\n                onChange={(e) => handleFilterChange('subject', e.target.value || undefined)}\n                className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">全部学科</option>\n                {subjects.map(subject => (\n                  <option key={subject} value={subject}>{subject}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">年级</label>\n              <select\n                value={currentFilters.gradeLevel || ''}\n                onChange={(e) => handleFilterChange('gradeLevel', e.target.value || undefined)}\n                className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">全部年级</option>\n                {gradeLevels.map(grade => (\n                  <option key={grade} value={grade}>{grade}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">分类</label>\n              <select\n                value={currentFilters.category || ''}\n                onChange={(e) => handleFilterChange('category', e.target.value || undefined)}\n                className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">全部分类</option>\n                {categories.map(category => (\n                  <option key={category} value={category}>{category}</option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">难度</label>\n              <select\n                value={currentFilters.difficulty || ''}\n                onChange={(e) => handleFilterChange('difficulty', e.target.value || undefined)}\n                className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">全部难度</option>\n                <option value=\"beginner\">初级</option>\n                <option value=\"intermediate\">中级</option>\n                <option value=\"advanced\">高级</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">排序</label>\n              <select\n                value={currentSort}\n                onChange={(e) => setCurrentSort(e.target.value as any)}\n                className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"latest\">最新发布</option>\n                <option value=\"popular\">最受欢迎</option>\n                <option value=\"trending\">热门趋势</option>\n                <option value=\"views\">浏览最多</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">视图</label>\n              <div className=\"flex border border-gray-300 rounded-lg overflow-hidden\">\n                <button\n                  onClick={() => setCurrentViewMode('grid')}\n                  className={`flex-1 px-3 py-2 text-sm ${\n                    currentViewMode === 'grid'\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-white text-gray-700 hover:bg-gray-50'\n                  }`}\n                >\n                  网格\n                </button>\n                <button\n                  onClick={() => setCurrentViewMode('list')}\n                  className={`flex-1 px-3 py-2 text-sm ${\n                    currentViewMode === 'list'\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-white text-gray-700 hover:bg-gray-50'\n                  }`}\n                >\n                  列表\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 结果统计 */}\n      <div className=\"flex items-center justify-between text-sm text-gray-600\">\n        <span>共找到 {total} 个作品</span>\n        <span>按{getSortLabel(currentSort)}排序</span>\n      </div>\n\n      {/* 作品列表 */}\n      <div className={\n        currentViewMode === 'grid'\n          ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6'\n          : 'space-y-4'\n      }>\n        {works.map(work => (\n          <div\n            key={work._id}\n            className={`bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow ${\n              currentViewMode === 'list' ? 'flex p-4' : 'overflow-hidden'\n            }`}\n          >\n            {currentViewMode === 'grid' ? (\n              // 网格视图\n              <>\n                <div className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <Link\n                        href={`/works/${work._id}`}\n                        className=\"text-lg font-semibold text-gray-900 hover:text-blue-600 line-clamp-2\"\n                      >\n                        {work.title}\n                      </Link>\n                      {work.description && (\n                        <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">\n                          {work.description}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2 text-xs text-gray-500 mb-3\">\n                    <span className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded-full\">\n                      {work.subject}\n                    </span>\n                    <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded-full\">\n                      {work.gradeLevel}\n                    </span>\n                    <span className=\"px-2 py-1 bg-purple-100 text-purple-800 rounded-full\">\n                      {getDifficultyLabel(work.difficulty)}\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    <div className=\"flex items-center space-x-1\">\n                      {work.author.avatar ? (\n                        <Image\n                          src={work.author.avatar}\n                          alt={work.author.name}\n                          width={20}\n                          height={20}\n                          className=\"rounded-full\"\n                        />\n                      ) : (\n                        <div className=\"w-5 h-5 bg-gray-300 rounded-full flex items-center justify-center\">\n                          <span className=\"text-xs text-gray-600\">\n                            {work.author.name.charAt(0)}\n                          </span>\n                        </div>\n                      )}\n                      <Link\n                        href={`/users/${work.author._id}`}\n                        className=\"text-sm text-gray-700 hover:text-blue-600\"\n                      >\n                        {work.author.name}\n                      </Link>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">•</span>\n                    <span className=\"text-xs text-gray-500\">\n                      {formatDate(work.publishedAt)}\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                    <div className=\"flex items-center space-x-4\">\n                      <span className=\"flex items-center space-x-1\">\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                        </svg>\n                        <span>{work.views}</span>\n                      </span>\n                      <span className=\"flex items-center space-x-1\">\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n                        </svg>\n                        <span>{work.likesCount}</span>\n                      </span>\n                      <span className=\"flex items-center space-x-1\">\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" />\n                        </svg>\n                        <span>{work.reuseCount}</span>\n                      </span>\n                    </div>\n\n                    {user && (\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => handleLike(work._id)}\n                          className={`p-1 rounded-full hover:bg-gray-100 ${\n                            work.userInteractions?.isLiked ? 'text-red-500' : 'text-gray-400'\n                          }`}\n                        >\n                          <svg className=\"w-4 h-4\" fill={work.userInteractions?.isLiked ? 'currentColor' : 'none'} stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n                          </svg>\n                        </button>\n                        <button\n                          onClick={() => handleBookmark(work._id)}\n                          className={`p-1 rounded-full hover:bg-gray-100 ${\n                            work.userInteractions?.isBookmarked ? 'text-yellow-500' : 'text-gray-400'\n                          }`}\n                        >\n                          <svg className=\"w-4 h-4\" fill={work.userInteractions?.isBookmarked ? 'currentColor' : 'none'} stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z\" />\n                          </svg>\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </>\n            ) : (\n              // 列表视图\n              <>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <Link\n                      href={`/works/${work._id}`}\n                      className=\"text-lg font-semibold text-gray-900 hover:text-blue-600\"\n                    >\n                      {work.title}\n                    </Link>\n                    <div className=\"flex items-center space-x-2 text-xs\">\n                      <span className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded-full\">\n                        {work.subject}\n                      </span>\n                      <span className=\"px-2 py-1 bg-green-100 text-green-800 rounded-full\">\n                        {getDifficultyLabel(work.difficulty)}\n                      </span>\n                    </div>\n                  </div>\n\n                  {work.description && (\n                    <p className=\"text-sm text-gray-600 mb-2 line-clamp-2\">\n                      {work.description}\n                    </p>\n                  )}\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                      <div className=\"flex items-center space-x-1\">\n                        {work.author.avatar ? (\n                          <Image\n                            src={work.author.avatar}\n                            alt={work.author.name}\n                            width={16}\n                            height={16}\n                            className=\"rounded-full\"\n                          />\n                        ) : (\n                          <div className=\"w-4 h-4 bg-gray-300 rounded-full flex items-center justify-center\">\n                            <span className=\"text-xs text-gray-600\">\n                              {work.author.name.charAt(0)}\n                            </span>\n                          </div>\n                        )}\n                        <Link\n                          href={`/users/${work.author._id}`}\n                          className=\"hover:text-blue-600\"\n                        >\n                          {work.author.name}\n                        </Link>\n                      </div>\n                      <span>•</span>\n                      <span>{formatDate(work.publishedAt)}</span>\n                      <span>•</span>\n                      <span>{work.views} 浏览</span>\n                      <span>•</span>\n                      <span>{work.likesCount} 点赞</span>\n                      <span>•</span>\n                      <span>{work.reuseCount} 复用</span>\n                    </div>\n\n                    {user && (\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => handleLike(work._id)}\n                          className={`p-1 rounded-full hover:bg-gray-100 ${\n                            work.userInteractions?.isLiked ? 'text-red-500' : 'text-gray-400'\n                          }`}\n                        >\n                          <svg className=\"w-4 h-4\" fill={work.userInteractions?.isLiked ? 'currentColor' : 'none'} stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n                          </svg>\n                        </button>\n                        <button\n                          onClick={() => handleBookmark(work._id)}\n                          className={`p-1 rounded-full hover:bg-gray-100 ${\n                            work.userInteractions?.isBookmarked ? 'text-yellow-500' : 'text-gray-400'\n                          }`}\n                        >\n                          <svg className=\"w-4 h-4\" fill={work.userInteractions?.isBookmarked ? 'currentColor' : 'none'} stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z\" />\n                          </svg>\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* 加载更多 */}\n      {hasMore && (\n        <div className=\"text-center\">\n          <button\n            onClick={handleLoadMore}\n            disabled={loading}\n            className=\"px-6 py-2 text-sm text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50\"\n          >\n            {loading ? '加载中...' : '加载更多'}\n          </button>\n        </div>\n      )}\n\n      {/* 空状态 */}\n      {works.length === 0 && !loading && (\n        <div className=\"text-center py-12\">\n          <svg className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无作品</h3>\n          <p className=\"text-gray-600\">\n            {searchInput || Object.values(currentFilters).some(v => v)\n              ? '没有找到符合条件的作品，试试调整搜索条件'\n              : '还没有发布的作品，快来创建第一个作品吧！'\n            }\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default WorkList;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/contribution/ContributionChart.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateMockData'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [userId, period, generateMockData]","fix":{"range":[1873,1889],"text":"[userId, period, generateMockData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'drawChart'. Either include it or remove the dependency array.","line":189,"column":6,"nodeType":"ArrayExpression","endLine":189,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [data, drawChart, loading]","fix":{"range":[4877,4892],"text":"[data, drawChart, loading]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 贡献度趋势图表组件\n */\n\n'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\n\ninterface ContributionChartProps {\n  userId: string;\n  className?: string;\n  period?: 'daily' | 'weekly' | 'monthly';\n}\n\ninterface ChartData {\n  date: string;\n  points: number;\n  cumulative: number;\n}\n\nconst ContributionChart: React.FC<ContributionChartProps> = ({\n  userId,\n  className = '',\n  period = 'weekly',\n}) => {\n  const [data, setData] = useState<ChartData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  // 模拟数据生成（实际应该从API获取）\n  const generateMockData = () => {\n    const days = period === 'daily' ? 7 : period === 'weekly' ? 4 : 12;\n    const mockData: ChartData[] = [];\n    let cumulative = 0;\n\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n\n      const points = Math.floor(Math.random() * 50) + 10;\n      cumulative += points;\n\n      mockData.push({\n        date: date.toISOString().split('T')[0],\n        points,\n        cumulative,\n      });\n    }\n\n    return mockData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // TODO: 实际的API调用\n        // const response = await fetch(`/api/contribution/trends?userId=${userId}&period=${period}`);\n        // const result = await response.json();\n\n        // 模拟API延迟\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        const mockData = generateMockData();\n        setData(mockData);\n      } catch (err) {\n        console.error('获取趋势数据失败:', err);\n        setError(err instanceof Error ? err.message : '获取趋势数据失败');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (userId) {\n      fetchData();\n    }\n  }, [userId, period]);\n\n  const drawChart = () => {\n    const canvas = canvasRef.current;\n    if (!canvas || data.length === 0) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const { width, height } = canvas;\n    const padding = 40;\n    const chartWidth = width - padding * 2;\n    const chartHeight = height - padding * 2;\n\n    // 清空画布\n    ctx.clearRect(0, 0, width, height);\n\n    // 计算数据范围\n    const maxPoints = Math.max(...data.map(d => d.points));\n    const maxCumulative = Math.max(...data.map(d => d.cumulative));\n\n    // 绘制背景网格\n    ctx.strokeStyle = '#f0f0f0';\n    ctx.lineWidth = 1;\n\n    // 垂直网格线\n    for (let i = 0; i <= data.length; i++) {\n      const x = padding + (i * chartWidth) / data.length;\n      ctx.beginPath();\n      ctx.moveTo(x, padding);\n      ctx.lineTo(x, height - padding);\n      ctx.stroke();\n    }\n\n    // 水平网格线\n    for (let i = 0; i <= 5; i++) {\n      const y = padding + (i * chartHeight) / 5;\n      ctx.beginPath();\n      ctx.moveTo(padding, y);\n      ctx.lineTo(width - padding, y);\n      ctx.stroke();\n    }\n\n    // 绘制每日积分柱状图\n    ctx.fillStyle = '#3B82F6';\n    data.forEach((point, index) => {\n      const x = padding + (index * chartWidth) / data.length;\n      const barWidth = chartWidth / data.length * 0.6;\n      const barHeight = (point.points / maxPoints) * chartHeight;\n      const y = height - padding - barHeight;\n\n      ctx.fillRect(x + barWidth * 0.2, y, barWidth, barHeight);\n    });\n\n    // 绘制累积积分折线图\n    ctx.strokeStyle = '#10B981';\n    ctx.lineWidth = 3;\n    ctx.beginPath();\n\n    data.forEach((point, index) => {\n      const x = padding + (index * chartWidth) / data.length + (chartWidth / data.length) / 2;\n      const y = height - padding - (point.cumulative / maxCumulative) * chartHeight;\n\n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n\n    ctx.stroke();\n\n    // 绘制累积积分数据点\n    ctx.fillStyle = '#10B981';\n    data.forEach((point, index) => {\n      const x = padding + (index * chartWidth) / data.length + (chartWidth / data.length) / 2;\n      const y = height - padding - (point.cumulative / maxCumulative) * chartHeight;\n\n      ctx.beginPath();\n      ctx.arc(x, y, 4, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n\n    // 绘制坐标轴标签\n    ctx.fillStyle = '#666';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n\n    // X轴标签（日期）\n    data.forEach((point, index) => {\n      const x = padding + (index * chartWidth) / data.length + (chartWidth / data.length) / 2;\n      const date = new Date(point.date);\n      const label = `${date.getMonth() + 1}/${date.getDate()}`;\n      ctx.fillText(label, x, height - 10);\n    });\n\n    // Y轴标签\n    ctx.textAlign = 'right';\n    for (let i = 0; i <= 5; i++) {\n      const y = padding + (i * chartHeight) / 5;\n      const value = Math.round((maxPoints * (5 - i)) / 5);\n      ctx.fillText(value.toString(), padding - 10, y + 4);\n    }\n  };\n\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      drawChart();\n    }\n  }, [data, loading]);\n\n  if (loading) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-gray-200 rounded mb-4 w-1/3\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"text-red-500 text-xl mr-3\">⚠️</div>\n              <div>\n                <h3 className=\"text-red-800 font-medium\">加载失败</h3>\n                <p className=\"text-red-600 text-sm mt-1\">{error}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className}`}>\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">贡献度趋势</h3>\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 bg-blue-500 rounded mr-2\"></div>\n              <span className=\"text-gray-600\">每日积分</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-2 bg-green-500 rounded mr-2\"></div>\n              <span className=\"text-gray-600\">累积积分</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"relative\">\n          <canvas\n            ref={canvasRef}\n            width={800}\n            height={300}\n            className=\"w-full h-auto border border-gray-200 rounded\"\n          />\n        </div>\n\n        {data.length > 0 && (\n          <div className=\"mt-4 grid grid-cols-3 gap-4 text-center\">\n            <div className=\"p-3 bg-blue-50 rounded-lg\">\n              <div className=\"text-lg font-semibold text-blue-600\">\n                {data[data.length - 1]?.points || 0}\n              </div>\n              <div className=\"text-sm text-blue-700\">最近积分</div>\n            </div>\n            <div className=\"p-3 bg-green-50 rounded-lg\">\n              <div className=\"text-lg font-semibold text-green-600\">\n                {data[data.length - 1]?.cumulative || 0}\n              </div>\n              <div className=\"text-sm text-green-700\">累积积分</div>\n            </div>\n            <div className=\"p-3 bg-purple-50 rounded-lg\">\n              <div className=\"text-lg font-semibold text-purple-600\">\n                {Math.round(data.reduce((sum, d) => sum + d.points, 0) / data.length)}\n              </div>\n              <div className=\"text-sm text-purple-700\">平均积分</div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ContributionChart;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/contribution/ContributionHistory.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchHistory'. Either include it or remove the dependency array.","line":197,"column":6,"nodeType":"ArrayExpression","endLine":197,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [userId, selectedType, fetchHistory]","fix":{"range":[5843,5865],"text":"[userId, selectedType, fetchHistory]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 贡献度历史记录组件\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { ContributionHistory, ContributionRecord, ContributionType } from '@/shared/types/contribution';\n\ninterface ContributionHistoryProps {\n  userId: string;\n  className?: string;\n  limit?: number;\n}\n\ninterface HistoryItemProps {\n  record: ContributionRecord;\n}\n\nconst HistoryItem: React.FC<HistoryItemProps> = ({ record }) => {\n  const getTypeIcon = (type: ContributionType) => {\n    switch (type) {\n      case ContributionType.WORK_CREATION:\n        return '📝';\n      case ContributionType.WORK_REUSED:\n        return '🔄';\n      case ContributionType.WORK_LIKED:\n        return '👍';\n      case ContributionType.WORK_SHARED:\n        return '📤';\n      case ContributionType.PROFILE_COMPLETED:\n        return '👤';\n      case ContributionType.FIRST_WORK:\n        return '🌟';\n      case ContributionType.MILESTONE_REACHED:\n        return '🏆';\n      default:\n        return '📊';\n    }\n  };\n\n  const getTypeColor = (type: ContributionType) => {\n    switch (type) {\n      case ContributionType.WORK_CREATION:\n        return 'text-green-600 bg-green-50';\n      case ContributionType.WORK_REUSED:\n        return 'text-purple-600 bg-purple-50';\n      case ContributionType.WORK_LIKED:\n        return 'text-blue-600 bg-blue-50';\n      case ContributionType.WORK_SHARED:\n        return 'text-orange-600 bg-orange-50';\n      case ContributionType.PROFILE_COMPLETED:\n        return 'text-indigo-600 bg-indigo-50';\n      case ContributionType.FIRST_WORK:\n        return 'text-yellow-600 bg-yellow-50';\n      case ContributionType.MILESTONE_REACHED:\n        return 'text-red-600 bg-red-50';\n      default:\n        return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getTypeName = (type: ContributionType) => {\n    switch (type) {\n      case ContributionType.WORK_CREATION:\n        return '创作作品';\n      case ContributionType.WORK_REUSED:\n        return '作品被复用';\n      case ContributionType.WORK_LIKED:\n        return '作品被点赞';\n      case ContributionType.WORK_SHARED:\n        return '作品被分享';\n      case ContributionType.PROFILE_COMPLETED:\n        return '完善资料';\n      case ContributionType.FIRST_WORK:\n        return '首次发布';\n      case ContributionType.MILESTONE_REACHED:\n        return '达成里程碑';\n      default:\n        return '未知操作';\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) return `${days}天前`;\n    if (hours > 0) return `${hours}小时前`;\n    if (minutes > 0) return `${minutes}分钟前`;\n    return '刚刚';\n  };\n\n  return (\n    <div className=\"flex items-start p-4 bg-white rounded-lg border border-gray-200 hover:shadow-md transition-shadow\">\n      {/* 类型图标 */}\n      <div className={`flex items-center justify-center w-10 h-10 rounded-full ${getTypeColor(record.type)}`}>\n        <span className=\"text-lg\">{getTypeIcon(record.type)}</span>\n      </div>\n\n      {/* 内容 */}\n      <div className=\"flex-1 ml-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"font-medium text-gray-900\">{getTypeName(record.type)}</h3>\n            <p className=\"text-sm text-gray-600 mt-1\">{record.description}</p>\n            {record.workId && record.metadata?.workTitle && (\n              <p className=\"text-xs text-gray-500 mt-1\">\n                作品: {record.metadata.workTitle}\n              </p>\n            )}\n          </div>\n          <div className=\"text-right ml-4\">\n            <div className={`text-lg font-semibold ${\n              record.points > 0 ? 'text-green-600' : 'text-red-600'\n            }`}>\n              {record.points > 0 ? '+' : ''}{record.points}\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              {formatDate(new Date(record.createdAt))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ContributionHistoryComponent: React.FC<ContributionHistoryProps> = ({\n  userId,\n  className = '',\n  limit = 20,\n}) => {\n  const [history, setHistory] = useState<ContributionHistory | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedType, setSelectedType] = useState<ContributionType | 'all'>('all');\n  const [hasMore, setHasMore] = useState(false);\n  const [loadingMore, setLoadingMore] = useState(false);\n\n  const fetchHistory = async (type: ContributionType | 'all' = 'all', offset = 0, append = false) => {\n    try {\n      if (!append) {\n        setLoading(true);\n        setError(null);\n      } else {\n        setLoadingMore(true);\n      }\n\n      const params = new URLSearchParams({\n        userId,\n        limit: limit.toString(),\n        offset: offset.toString(),\n      });\n\n      if (type !== 'all') {\n        params.append('type', type);\n      }\n\n      const response = await fetch(`/api/contribution/history?${params}`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || '获取历史记录失败');\n      }\n\n      if (data.success) {\n        if (append && history) {\n          setHistory({\n            ...data.data,\n            records: [...history.records, ...data.data.records],\n          });\n        } else {\n          setHistory(data.data);\n        }\n        setHasMore(data.data.hasMore);\n      } else {\n        throw new Error(data.error || '获取历史记录失败');\n      }\n    } catch (err) {\n      console.error('获取贡献度历史记录失败:', err);\n      setError(err instanceof Error ? err.message : '获取历史记录失败');\n    } finally {\n      setLoading(false);\n      setLoadingMore(false);\n    }\n  };\n\n  useEffect(() => {\n    if (userId) {\n      fetchHistory(selectedType);\n    }\n  }, [userId, selectedType]);\n\n  const handleTypeChange = (type: ContributionType | 'all') => {\n    setSelectedType(type);\n  };\n\n  const handleLoadMore = () => {\n    if (history && hasMore && !loadingMore) {\n      fetchHistory(selectedType, history.records.length, true);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-gray-200 rounded mb-4 w-1/3\"></div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3, 4, 5].map((i) => (\n                <div key={i} className=\"flex items-start p-4\">\n                  <div className=\"w-10 h-10 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1 ml-4\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2 w-1/3\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                  </div>\n                  <div className=\"w-16 h-6 bg-gray-200 rounded\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"text-red-500 text-xl mr-3\">⚠️</div>\n              <div>\n                <h3 className=\"text-red-800 font-medium\">加载失败</h3>\n                <p className=\"text-red-600 text-sm mt-1\">{error}</p>\n              </div>\n            </div>\n            <button\n              onClick={() => fetchHistory(selectedType)}\n              className=\"mt-3 px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors text-sm\"\n            >\n              重新加载\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className}`}>\n      <div className=\"bg-white rounded-lg shadow-md\">\n        {/* 头部 */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">贡献度历史</h2>\n\n          {/* 统计摘要 */}\n          {history && (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n              <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                <div className=\"text-xl font-bold text-blue-600\">\n                  {history.summary.totalPoints}\n                </div>\n                <div className=\"text-sm text-blue-700\">总积分</div>\n              </div>\n              <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                <div className=\"text-xl font-bold text-green-600\">\n                  {history.summary.thisWeek}\n                </div>\n                <div className=\"text-sm text-green-700\">本周</div>\n              </div>\n              <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                <div className=\"text-xl font-bold text-purple-600\">\n                  {history.summary.thisMonth}\n                </div>\n                <div className=\"text-sm text-purple-700\">本月</div>\n              </div>\n              <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\n                <div className=\"text-xl font-bold text-orange-600\">\n                  {history.records.length}\n                </div>\n                <div className=\"text-sm text-orange-700\">记录数</div>\n              </div>\n            </div>\n          )}\n\n          {/* 类型筛选 */}\n          <div className=\"flex flex-wrap gap-2\">\n            <button\n              onClick={() => handleTypeChange('all')}\n              className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                selectedType === 'all'\n                  ? 'bg-blue-100 text-blue-700'\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n            >\n              全部\n            </button>\n            {Object.values(ContributionType).map((type) => (\n              <button\n                key={type}\n                onClick={() => handleTypeChange(type)}\n                className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n                  selectedType === type\n                    ? 'bg-blue-100 text-blue-700'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                {type === ContributionType.WORK_CREATION && '创作'}\n                {type === ContributionType.WORK_REUSED && '复用'}\n                {type === ContributionType.WORK_LIKED && '点赞'}\n                {type === ContributionType.WORK_SHARED && '分享'}\n                {type === ContributionType.PROFILE_COMPLETED && '资料'}\n                {type === ContributionType.FIRST_WORK && '首发'}\n                {type === ContributionType.MILESTONE_REACHED && '里程碑'}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* 历史记录列表 */}\n        <div className=\"p-6\">\n          {history && history.records.length > 0 ? (\n            <div className=\"space-y-4\">\n              {history.records.map((record) => (\n                <HistoryItem key={record.id} record={record} />\n              ))}\n\n              {/* 加载更多按钮 */}\n              {hasMore && (\n                <div className=\"text-center pt-4\">\n                  <button\n                    onClick={handleLoadMore}\n                    disabled={loadingMore}\n                    className=\"px-6 py-2 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {loadingMore ? '加载中...' : '加载更多'}\n                  </button>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"text-gray-400 text-4xl mb-4\">📋</div>\n              <h3 className=\"text-gray-600 font-medium\">暂无历史记录</h3>\n              <p className=\"text-gray-500 text-sm mt-1\">开始创作或复用作品来获得贡献度吧！</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContributionHistoryComponent;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/contribution/ContributionStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/contribution/Leaderboard.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":66,"column":13,"nodeType":"JSXOpeningElement","endLine":70,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLeaderboard'. Either include it or remove the dependency array.","line":153,"column":6,"nodeType":"ArrayExpression","endLine":153,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [selectedType, limit, showUserRank, userId, fetchLeaderboard]","fix":{"range":[4320,4363],"text":"[selectedType, limit, showUserRank, userId, fetchLeaderboard]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-nocheck\n/**\n * 贡献度排行榜组件\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { LeaderboardResponse, LeaderboardEntry, LeaderboardType } from '@/shared/types/contribution';\n\ninterface LeaderboardProps {\n  className?: string;\n  limit?: number;\n  showUserRank?: boolean;\n  userId?: string;\n}\n\ninterface LeaderboardItemProps {\n  entry: LeaderboardEntry;\n  index: number;\n  isCurrentUser?: boolean;\n}\n\nconst LeaderboardItem: React.FC<LeaderboardItemProps> = ({\n  entry,\n  index,\n  isCurrentUser = false,\n}) => {\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1: return '🥇';\n      case 2: return '🥈';\n      case 3: return '🥉';\n      default: return `#${rank}`;\n    }\n  };\n\n  const getRankColor = (rank: number) => {\n    switch (rank) {\n      case 1: return 'text-yellow-600 bg-yellow-50';\n      case 2: return 'text-gray-600 bg-gray-50';\n      case 3: return 'text-orange-600 bg-orange-50';\n      default: return 'text-gray-700 bg-gray-50';\n    }\n  };\n\n  return (\n    <div className={`flex items-center p-4 rounded-lg transition-colors ${\n      isCurrentUser\n        ? 'bg-blue-50 border-2 border-blue-200'\n        : 'bg-white hover:bg-gray-50'\n    }`}>\n      {/* 排名 */}\n      <div className={`flex items-center justify-center w-12 h-12 rounded-full font-bold ${getRankColor(entry.rank)}`}>\n        {typeof getRankIcon(entry.rank) === 'string' && getRankIcon(entry.rank).startsWith('#')\n          ? getRankIcon(entry.rank)\n          : <span className=\"text-2xl\">{getRankIcon(entry.rank)}</span>\n        }\n      </div>\n\n      {/* 用户信息 */}\n      <div className=\"flex-1 ml-4\">\n        <div className=\"flex items-center\">\n          {entry.userAvatar && (\n            <img\n              src={entry.userAvatar}\n              alt={entry.userName}\n              className=\"w-8 h-8 rounded-full mr-3\"\n            />\n          )}\n          <div>\n            <h3 className={`font-semibold ${isCurrentUser ? 'text-blue-900' : 'text-gray-900'}`}>\n              {entry.userName}\n              {isCurrentUser && <span className=\"ml-2 text-blue-600 text-sm\">(你)</span>}\n            </h3>\n            <p className=\"text-sm text-gray-600\">\n              创作 {entry.creationCount} · 被复用 {entry.reuseCount}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* 积分 */}\n      <div className=\"text-right\">\n        <div className={`text-xl font-bold ${isCurrentUser ? 'text-blue-600' : 'text-gray-900'}`}>\n          {entry.totalPoints.toLocaleString()}\n        </div>\n        <div className=\"text-sm text-gray-500\">积分</div>\n      </div>\n\n      {/* 趋势指示器 */}\n      {entry.trend && (\n        <div className=\"ml-4\">\n          {entry.trend === 'up' && <span className=\"text-green-500\">📈</span>}\n          {entry.trend === 'down' && <span className=\"text-red-500\">📉</span>}\n          {entry.trend === 'stable' && <span className=\"text-gray-400\">➡️</span>}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst LeaderboardComponent: React.FC<LeaderboardProps> = ({\n  className = '',\n  limit = 50,\n  showUserRank = false,\n  userId,\n}) => {\n  const [leaderboard, setLeaderboard] = useState<LeaderboardResponse | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedType, setSelectedType] = useState<LeaderboardType>(LeaderboardType.TOTAL);\n\n  const fetchLeaderboard = async (type: LeaderboardType) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const params = new URLSearchParams({\n        type,\n        limit: limit.toString(),\n        offset: '0',\n      });\n\n      if (showUserRank && userId) {\n        params.append('includeUserRank', 'true');\n        params.append('userId', userId);\n      }\n\n      const response = await fetch(`/api/contribution/leaderboard?${params}`);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || '获取排行榜失败');\n      }\n\n      if (data.success) {\n        setLeaderboard(data.data);\n      } else {\n        throw new Error(data.error || '获取排行榜失败');\n      }\n    } catch (err) {\n      console.error('获取排行榜失败:', err);\n      setError(err instanceof Error ? err.message : '获取排行榜失败');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchLeaderboard(selectedType);\n  }, [selectedType, limit, showUserRank, userId]);\n\n  const handleTypeChange = (type: LeaderboardType) => {\n    setSelectedType(type);\n  };\n\n  if (loading) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-gray-200 rounded mb-4 w-1/3\"></div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3, 4, 5].map((i) => (\n                <div key={i} className=\"flex items-center p-4\">\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1 ml-4\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2 w-1/3\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/4\"></div>\n                  </div>\n                  <div className=\"w-16 h-6 bg-gray-200 rounded\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"text-red-500 text-xl mr-3\">⚠️</div>\n              <div>\n                <h3 className=\"text-red-800 font-medium\">加载失败</h3>\n                <p className=\"text-red-600 text-sm mt-1\">{error}</p>\n              </div>\n            </div>\n            <button\n              onClick={() => fetchLeaderboard(selectedType)}\n              className=\"mt-3 px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors text-sm\"\n            >\n              重新加载\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n    return (\n    <div className={`${className}`}>\n      <div className=\"bg-white rounded-lg shadow-md\">\n        {/* 头部 */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">贡献度排行榜</h2>\n            {leaderboard && (\n              <p className=\"text-sm text-gray-500\">\n                最后更新: {new Date(leaderboard.lastUpdated).toLocaleString('zh-CN')}\n              </p>\n            )}\n          </div>\n\n          {/* 类型切换 */}\n          <div className=\"flex space-x-2\">\n            {Object.values(LeaderboardType).map((type) => (\n              <button\n                key={type}\n                onClick={() => handleTypeChange(type)}\n                className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                  selectedType === type\n                    ? 'bg-blue-100 text-blue-700'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                {type === LeaderboardType.TOTAL && '总榜'}\n                {type === LeaderboardType.WEEKLY && '周榜'}\n                {type === LeaderboardType.MONTHLY && '月榜'}\n                {type === LeaderboardType.CREATION && '创作榜'}\n                {type === LeaderboardType.REUSE && '复用榜'}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* 排行榜列表 */}\n        <div className=\"p-6\">\n          {leaderboard && leaderboard.entries.length > 0 ? (\n            <div className=\"space-y-3\">\n              {leaderboard.entries.map((entry, index) => (\n                <LeaderboardItem\n                  key={entry.userId}\n                  entry={entry}\n                  index={index}\n                  isCurrentUser={showUserRank && userId === entry.userId}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"text-gray-400 text-4xl mb-4\">🏆</div>\n              <h3 className=\"text-gray-600 font-medium\">暂无排行榜数据</h3>\n              <p className=\"text-gray-500 text-sm mt-1\">快来创作作品，成为第一名吧！</p>\n            </div>\n          )}\n        </div>\n\n        {/* 用户排名（如果启用且不在列表中） */}\n        {showUserRank && leaderboard?.userRank && !(leaderboard.entries as any).find(e => e.userId === userId) && (\n          <div className=\"border-t border-gray-200 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">你的排名</h3>\n            <LeaderboardItem\n              entry={leaderboard.userRank}\n              index={-1}\n              isCurrentUser={true}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LeaderboardComponent;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/contribution/TrendingWorks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/contribution/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/demo/ResponsiveDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/DesktopButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/DesktopCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/DesktopGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/DesktopInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/DesktopLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/DesktopModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/DesktopNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/pages/DesktopCreatePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/pages/DesktopHomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/desktop/pages/DesktopSquarePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/errors/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/errors/ErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/errors/GlobalErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/errors/NetworkError.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleRetry'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [countdown, handleRetry, isRetrying]","fix":{"range":[2298,2321],"text":"[countdown, handleRetry, isRetrying]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\n/**\n * 网络错误组件属性\n */\ninterface NetworkErrorProps {\n  error?: Error;\n  onRetry?: () => void;\n  retryDelay?: number;\n  maxRetries?: number;\n  showDetails?: boolean;\n  className?: string;\n}\n\n/**\n * 网络状态Hook\n */\nfunction useNetworkStatus() {\n  const [isOnline, setIsOnline] = useState(true);\n  const [connectionType, setConnectionType] = useState<string>('unknown');\n\n  useEffect(() => {\n    // 检查初始网络状态\n    setIsOnline(navigator.onLine);\n\n    // 获取连接类型（如果支持）\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      setConnectionType(connection?.effectiveType || 'unknown');\n    }\n\n    // 监听网络状态变化\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // 监听连接变化\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      const handleConnectionChange = () => {\n        setConnectionType(connection?.effectiveType || 'unknown');\n      };\n      connection?.addEventListener('change', handleConnectionChange);\n\n      return () => {\n        window.removeEventListener('online', handleOnline);\n        window.removeEventListener('offline', handleOffline);\n        connection?.removeEventListener('change', handleConnectionChange);\n      };\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return { isOnline, connectionType };\n}\n\n/**\n * 网络错误组件\n */\nexport const NetworkError: React.FC<NetworkErrorProps> = ({\n  error,\n  onRetry,\n  retryDelay = 3000,\n  maxRetries = 3,\n  showDetails = false,\n  className = '',\n}) => {\n  const [retryCount, setRetryCount] = useState(0);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const { isOnline, connectionType } = useNetworkStatus();\n\n  // 自动重试倒计时\n  useEffect(() => {\n    if (countdown > 0) {\n      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (countdown === 0 && isRetrying) {\n      handleRetry();\n    }\n  }, [countdown, isRetrying]);\n\n  /**\n   * 处理重试\n   */\n  const handleRetry = async () => {\n    if (retryCount >= maxRetries) {\n      return;\n    }\n\n    setIsRetrying(true);\n    setRetryCount(retryCount + 1);\n\n    try {\n      if (onRetry) {\n        await onRetry();\n      }\n    } catch (error) {\n      console.error('Retry failed:', error);\n    } finally {\n      setIsRetrying(false);\n    }\n  };\n\n  /**\n   * 开始自动重试\n   */\n  const startAutoRetry = () => {\n    if (retryCount >= maxRetries) {\n      return;\n    }\n\n    setCountdown(Math.ceil(retryDelay / 1000));\n    setIsRetrying(true);\n  };\n\n  /**\n   * 取消自动重试\n   */\n  const cancelAutoRetry = () => {\n    setCountdown(0);\n    setIsRetrying(false);\n  };\n\n  /**\n   * 重置重试计数\n   */\n  const resetRetries = () => {\n    setRetryCount(0);\n    setIsRetrying(false);\n    setCountdown(0);\n  };\n\n  /**\n   * 获取错误类型\n   */\n  const getErrorType = () => {\n    if (!isOnline) {\n      return 'offline';\n    }\n\n    if (error?.message.includes('timeout')) {\n      return 'timeout';\n    }\n\n    if (error?.message.includes('fetch')) {\n      return 'fetch';\n    }\n\n    return 'network';\n  };\n\n  /**\n   * 获取错误信息\n   */\n  const getErrorInfo = () => {\n    const errorType = getErrorType();\n\n    switch (errorType) {\n      case 'offline':\n        return {\n          title: '网络连接已断开',\n          message: '请检查您的网络连接，然后重试。',\n          icon: (\n            <svg className=\"w-8 h-8 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M12 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          ),\n        };\n      case 'timeout':\n        return {\n          title: '请求超时',\n          message: '服务器响应时间过长，请稍后重试。',\n          icon: (\n            <svg className=\"w-8 h-8 text-yellow-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          ),\n        };\n      default:\n        return {\n          title: '网络请求失败',\n          message: '无法连接到服务器，请检查网络连接。',\n          icon: (\n            <svg className=\"w-8 h-8 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          ),\n        };\n    }\n  };\n\n  const errorInfo = getErrorInfo();\n  const canRetry = retryCount < maxRetries && onRetry;\n\n  return (\n    <div className={`bg-white border border-red-200 rounded-lg p-6 ${className}`}>\n      {/* 错误图标和标题 */}\n      <div className=\"flex items-center mb-4\">\n        <div className=\"flex-shrink-0 mr-3\">\n          {errorInfo.icon}\n        </div>\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900\">\n            {errorInfo.title}\n          </h3>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {errorInfo.message}\n          </p>\n        </div>\n      </div>\n\n      {/* 网络状态信息 */}\n      <div className=\"mb-4 p-3 bg-gray-50 rounded-md\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-gray-600\">网络状态:</span>\n          <span className={`font-medium ${isOnline ? 'text-green-600' : 'text-red-600'}`}>\n            {isOnline ? '已连接' : '已断开'}\n          </span>\n        </div>\n        {isOnline && connectionType !== 'unknown' && (\n          <div className=\"flex items-center justify-between text-sm mt-1\">\n            <span className=\"text-gray-600\">连接类型:</span>\n            <span className=\"font-medium text-gray-900\">\n              {connectionType.toUpperCase()}\n            </span>\n          </div>\n        )}\n        {retryCount > 0 && (\n          <div className=\"flex items-center justify-between text-sm mt-1\">\n            <span className=\"text-gray-600\">重试次数:</span>\n            <span className=\"font-medium text-gray-900\">\n              {retryCount}/{maxRetries}\n            </span>\n          </div>\n        )}\n      </div>\n\n      {/* 开发环境错误详情 */}\n      {showDetails && error && process.env.NODE_ENV === 'development' && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n          <h4 className=\"text-sm font-medium text-red-800 mb-2\">\n            错误详情 (开发环境)\n          </h4>\n          <pre className=\"text-xs text-red-700 whitespace-pre-wrap overflow-x-auto\">\n            {error.message}\n          </pre>\n          {error.stack && (\n            <pre className=\"text-xs text-red-600 whitespace-pre-wrap overflow-x-auto mt-2 max-h-32\">\n              {error.stack}\n            </pre>\n          )}\n        </div>\n      )}\n\n      {/* 操作按钮 */}\n      <div className=\"flex flex-col sm:flex-row gap-3\">\n        {canRetry && (\n          <button\n            onClick={handleRetry}\n            disabled={isRetrying || !isOnline}\n            className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors text-sm font-medium\"\n          >\n            {isRetrying ? '重试中...' : '立即重试'}\n          </button>\n        )}\n\n        {canRetry && !isRetrying && (\n          <button\n            onClick={startAutoRetry}\n            disabled={!isOnline}\n            className=\"flex-1 bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors text-sm font-medium\"\n          >\n            自动重试\n          </button>\n        )}\n\n        {isRetrying && countdown > 0 && (\n          <button\n            onClick={cancelAutoRetry}\n            className=\"flex-1 bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors text-sm font-medium\"\n          >\n            取消重试 ({countdown}s)\n          </button>\n        )}\n\n        {retryCount >= maxRetries && (\n          <button\n            onClick={resetRetries}\n            className=\"flex-1 bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors text-sm font-medium\"\n          >\n            重置重试\n          </button>\n        )}\n      </div>\n\n      {/* 帮助提示 */}\n      {!isOnline && (\n        <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n          <h4 className=\"text-sm font-medium text-blue-800 mb-2\">\n            网络连接故障排除\n          </h4>\n          <ul className=\"text-sm text-blue-700 space-y-1\">\n            <li>• 检查WiFi或移动数据连接</li>\n            <li>• 尝试访问其他网站确认网络状态</li>\n            <li>• 重启路由器或切换网络</li>\n            <li>• 检查防火墙或代理设置</li>\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * 网络错误Hook\n */\nexport function useNetworkError() {\n  const [networkError, setNetworkError] = useState<Error | null>(null);\n  const { isOnline } = useNetworkStatus();\n\n  const handleNetworkError = (error: Error) => {\n    setNetworkError(error);\n  };\n\n  const clearNetworkError = () => {\n    setNetworkError(null);\n  };\n\n  const isNetworkError = (error: Error): boolean => {\n    return (\n      error.message.includes('fetch') ||\n      error.message.includes('network') ||\n      error.message.includes('timeout') ||\n      error.name === 'NetworkError' ||\n      !isOnline\n    );\n  };\n\n  return {\n    networkError,\n    isOnline,\n    handleNetworkError,\n    clearNetworkError,\n    isNetworkError,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/errors/RetryButton.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleRetry'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [countdown, autoRetry, retryCount, maxRetries, handleRetry]","fix":{"range":[1253,1299],"text":"[countdown, autoRetry, retryCount, maxRetries, handleRetry]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\n/**\n * 重试按钮属性\n */\ninterface RetryButtonProps {\n  onRetry: () => Promise<void> | void;\n  maxRetries?: number;\n  retryDelay?: number;\n  autoRetry?: boolean;\n  disabled?: boolean;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n  variant?: 'primary' | 'secondary' | 'outline';\n  showCount?: boolean;\n  resetOnSuccess?: boolean;\n  children?: React.ReactNode;\n}\n\n/**\n * 重试按钮组件\n */\nexport const RetryButton: React.FC<RetryButtonProps> = ({\n  onRetry,\n  maxRetries = 3,\n  retryDelay = 3000,\n  autoRetry = false,\n  disabled = false,\n  className = '',\n  size = 'md',\n  variant = 'primary',\n  showCount = true,\n  resetOnSuccess = true,\n  children,\n}) => {\n  const [retryCount, setRetryCount] = useState(0);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const [lastError, setLastError] = useState<Error | null>(null);\n\n  // 自动重试倒计时\n  useEffect(() => {\n    if (countdown > 0) {\n      const timer = setTimeout(() => {\n        setCountdown(countdown - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else if (countdown === 0 && autoRetry && retryCount > 0 && retryCount < maxRetries) {\n      handleRetry();\n    }\n  }, [countdown, autoRetry, retryCount, maxRetries]);\n\n  const handleRetry = async () => {\n    if (isRetrying || retryCount >= maxRetries) {\n      return;\n    }\n\n    setIsRetrying(true);\n    setLastError(null);\n\n    try {\n      await onRetry();\n\n      // 成功后重置计数\n      if (resetOnSuccess) {\n        setRetryCount(0);\n      }\n    } catch (error) {\n      const newRetryCount = retryCount + 1;\n      setRetryCount(newRetryCount);\n      setLastError(error instanceof Error ? error : new Error('Retry failed'));\n\n      // 如果还有重试次数且启用自动重试，开始倒计时\n      if (autoRetry && newRetryCount < maxRetries) {\n        setCountdown(Math.floor(retryDelay / 1000));\n      }\n    } finally {\n      setIsRetrying(false);\n    }\n  };\n\n  const resetRetries = () => {\n    setRetryCount(0);\n    setCountdown(0);\n    setLastError(null);\n  };\n\n  // 样式配置\n  const sizeClasses = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-3 text-lg',\n  };\n\n  const variantClasses = {\n    primary: 'bg-blue-600 text-white hover:bg-blue-700 disabled:bg-blue-400',\n    secondary: 'bg-gray-600 text-white hover:bg-gray-700 disabled:bg-gray-400',\n    outline: 'border-2 border-blue-600 text-blue-600 hover:bg-blue-50 disabled:border-gray-300 disabled:text-gray-400',\n  };\n\n  const baseClasses = 'font-medium rounded-md transition-colors duration-200 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500';\n\n  const buttonClasses = `${baseClasses} ${sizeClasses[size]} ${variantClasses[variant]} ${className}`;\n\n  const canRetry = retryCount < maxRetries;\n  const isDisabled = disabled || isRetrying || !canRetry;\n\n  return (\n    <div className=\"inline-flex flex-col items-center space-y-2\">\n      {/* 主重试按钮 */}\n      <button\n        onClick={handleRetry}\n        disabled={isDisabled}\n        className={buttonClasses}\n      >\n        {isRetrying ? (\n          <span className=\"flex items-center justify-center\">\n            <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n            重试中...\n          </span>\n        ) : countdown > 0 ? (\n          `${countdown}秒后重试`\n        ) : (\n          children || (\n            <span>\n              重试\n              {showCount && retryCount > 0 && ` (${retryCount}/${maxRetries})`}\n            </span>\n          )\n        )}\n      </button>\n\n      {/* 重试状态信息 */}\n      {retryCount > 0 && (\n        <div className=\"text-center\">\n          {canRetry ? (\n            <p className=\"text-sm text-gray-600\">\n              已重试 {retryCount}/{maxRetries} 次\n              {countdown > 0 && autoRetry && (\n                <span className=\"block text-xs text-gray-500 mt-1\">\n                  {countdown} 秒后自动重试\n                </span>\n              )}\n            </p>\n          ) : (\n            <div className=\"text-center\">\n              <p className=\"text-sm text-red-600 mb-2\">\n                已达到最大重试次数 ({maxRetries})\n              </p>\n              <button\n                onClick={resetRetries}\n                className=\"text-xs text-blue-600 hover:text-blue-800 underline\"\n              >\n                重置重试\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* 错误信息 */}\n      {lastError && (\n        <div className=\"text-center max-w-xs\">\n          <p className=\"text-xs text-red-600\">\n            {lastError.message}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * 智能重试按钮（带指数退避）\n */\nexport const SmartRetryButton: React.FC<Omit<RetryButtonProps, 'retryDelay'> & {\n  baseDelay?: number;\n  maxDelay?: number;\n  backoffFactor?: number;\n}> = ({\n  baseDelay = 1000,\n  maxDelay = 30000,\n  backoffFactor = 2,\n  ...props\n}) => {\n  const [currentDelay, setCurrentDelay] = useState(baseDelay);\n\n  // 计算下次重试延迟（指数退避）\n  const calculateDelay = (retryCount: number): number => {\n    const delay = baseDelay * Math.pow(backoffFactor, retryCount);\n    return Math.min(delay, maxDelay);\n  };\n\n  const handleRetry = async () => {\n    try {\n      await props.onRetry();\n      // 成功后重置延迟\n      setCurrentDelay(baseDelay);\n    } catch (error) {\n      // 失败后增加延迟\n      setCurrentDelay(calculateDelay(Math.log(currentDelay / baseDelay) / Math.log(backoffFactor) + 1));\n      throw error;\n    }\n  };\n\n  return (\n    <RetryButton\n      {...props}\n      onRetry={handleRetry}\n      retryDelay={currentDelay}\n    />\n  );\n};\n\n/**\n * 重试按钮组（多个操作）\n */\nexport const RetryButtonGroup: React.FC<{\n  actions: Array<{\n    label: string;\n    action: () => Promise<void> | void;\n    variant?: 'primary' | 'secondary' | 'outline';\n  }>;\n  className?: string;\n}> = ({ actions, className = '' }) => {\n  return (\n    <div className={`flex flex-wrap gap-2 justify-center ${className}`}>\n      {actions.map((action, index) => (\n        <RetryButton\n          key={index}\n          onRetry={action.action}\n          variant={action.variant || (index === 0 ? 'primary' : 'secondary')}\n          size=\"sm\"\n          showCount={false}\n          maxRetries={1}\n        >\n          {action.label}\n        </RetryButton>\n      ))}\n    </div>\n  );\n};\n\n/**\n * 重试Hook\n */\nexport function useRetry({\n  maxRetries = 3,\n  baseDelay = 1000,\n  maxDelay = 30000,\n  backoffFactor = 2,\n}: {\n  maxRetries?: number;\n  baseDelay?: number;\n  maxDelay?: number;\n  backoffFactor?: number;\n} = {}) {\n  const [retryCount, setRetryCount] = useState(0);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const [lastError, setLastError] = useState<Error | null>(null);\n\n  const retry = async (fn: () => Promise<void> | void) => {\n    if (isRetrying || retryCount >= maxRetries) {\n      return;\n    }\n\n    setIsRetrying(true);\n    setLastError(null);\n\n    try {\n      await fn();\n      setRetryCount(0); // 成功后重置\n    } catch (error) {\n      const newRetryCount = retryCount + 1;\n      setRetryCount(newRetryCount);\n      setLastError(error instanceof Error ? error : new Error('Operation failed'));\n\n      // 如果还有重试次数，计算延迟后自动重试\n      if (newRetryCount < maxRetries) {\n        const delay = Math.min(baseDelay * Math.pow(backoffFactor, newRetryCount - 1), maxDelay);\n        setTimeout(() => {\n          retry(fn);\n        }, delay);\n      }\n    } finally {\n      setIsRetrying(false);\n    }\n  };\n\n  const reset = () => {\n    setRetryCount(0);\n    setLastError(null);\n    setIsRetrying(false);\n  };\n\n  return {\n    retry,\n    reset,\n    retryCount,\n    isRetrying,\n    lastError,\n    canRetry: retryCount < maxRetries,\n  };\n}\n\nexport default RetryButton;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/errors/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/invitation/ActivityList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadActivities'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadActivities]","fix":{"range":[1209,1211],"text":"[loadActivities]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 活动列表组件\n * 展示可参与的邀请活动列表\n */\n\n'use client';\n\nimport { formatDistanceToNow, format } from 'date-fns';\nimport { zhCN } from 'date-fns/locale';\nimport { CalendarDays, Trophy, Users, Target, Clock } from 'lucide-react';\nimport React, { useState, useEffect } from 'react';\n\nimport { InvitationActivity, ActivityType, ActivityStatus } from '@/lib/invitation/types';\nimport { Badge } from '@/shared/components/badge';\nimport { Button } from '@/shared/components/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/card';\nimport { Separator } from '@/shared/components/separator';\n\n\ninterface ActivityListProps {\n  onActivitySelect?: (activity: InvitationActivity) => void\n  onJoinActivity?: (activityId: string) => void\n  className?: string\n}\n\nexport function ActivityList({ onActivitySelect, onJoinActivity, className }: ActivityListProps) {\n  const [activities, setActivities] = useState<InvitationActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n\n  useEffect(() => {\n    loadActivities();\n  }, []);\n\n  const loadActivities = async (pageNum = 1) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/activities?page=${pageNum}&limit=10`);\n      const data = await response.json();\n\n      if (data.success) {\n        if (pageNum === 1) {\n          setActivities(data.data.activities);\n        } else {\n          setActivities([...activities, ...data.data.activities]);\n        }\n        setHasMore(data.data.activities.length === 10);\n      } else {\n        setError(data.error || '加载活动失败');\n      }\n    } catch (err) {\n      setError('网络错误，请稍后重试');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadMore = () => {\n    const nextPage = page + 1;\n    setPage(nextPage);\n    loadActivities(nextPage);\n  };\n\n  const getActivityTypeLabel = (type: ActivityType): string => {\n    const labels = {\n      [ActivityType.CHALLENGE]: '挑战活动',\n      [ActivityType.COMPETITION]: '竞赛活动',\n      [ActivityType.MILESTONE]: '里程碑活动',\n      [ActivityType.SEASONAL]: '季节活动',\n    };\n    return labels[type] || '未知类型';\n  };\n\n  const getActivityTypeColor = (type: ActivityType): string => {\n    const colors = {\n      [ActivityType.CHALLENGE]: 'bg-blue-100 text-blue-800',\n      [ActivityType.COMPETITION]: 'bg-red-100 text-red-800',\n      [ActivityType.MILESTONE]: 'bg-green-100 text-green-800',\n      [ActivityType.SEASONAL]: 'bg-purple-100 text-purple-800',\n    };\n    return colors[type] || 'bg-gray-100 text-gray-800';\n  };\n\n  const isActivityActive = (activity: InvitationActivity): boolean => {\n    const now = new Date();\n    return activity.status === ActivityStatus.ACTIVE &&\n           activity.startDate <= now &&\n           activity.endDate >= now;\n  };\n\n  const getTimeStatus = (activity: InvitationActivity): { label: string; color: string } => {\n    const now = new Date();\n\n    if (now < activity.startDate) {\n      return {\n        label: `${formatDistanceToNow(activity.startDate, { locale: zhCN })}后开始`,\n        color: 'text-orange-600',\n      };\n    } else if (now > activity.endDate) {\n      return {\n        label: '已结束',\n        color: 'text-gray-500',\n      };\n    } else {\n      return {\n        label: `还剩 ${formatDistanceToNow(activity.endDate, { locale: zhCN })}`,\n        color: 'text-green-600',\n      };\n    }\n  };\n\n  if (loading && activities.length === 0) {\n    return (\n      <div className={`space-y-4 ${className}`}>\n        {[...Array(3)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardHeader>\n              <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n              <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"h-3 bg-gray-200 rounded\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-5/6\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`text-center py-8 ${className}`}>\n        <p className=\"text-red-600 mb-4\">{error}</p>\n        <Button onClick={() => loadActivities()} variant=\"outline\">\n          重新加载\n        </Button>\n      </div>\n    );\n  }\n\n  if (activities.length === 0) {\n    return (\n      <div className={`text-center py-12 ${className}`}>\n        <Trophy className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无活动</h3>\n        <p className=\"text-gray-500\">目前没有可参与的邀请活动，请稍后再来查看</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <div className=\"space-y-4\">\n        {activities.map((activity) => {\n          const timeStatus = getTimeStatus(activity);\n          const isActive = isActivityActive(activity);\n\n          return (\n            <Card\n              key={activity.id}\n              className={`transition-all duration-200 hover:shadow-md cursor-pointer ${\n                !isActive ? 'opacity-75' : ''\n              }`}\n              onClick={() => onActivitySelect && onActivitySelect(activity)}\n            >\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <CardTitle className=\"text-lg\">{activity.name}</CardTitle>\n                      <Badge className={getActivityTypeColor(activity.type)}>\n                        {getActivityTypeLabel(activity.type)}\n                      </Badge>\n                    </div>\n                    <CardDescription className=\"text-sm\">\n                      {activity.description}\n                    </CardDescription>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={`text-sm font-medium ${timeStatus.color}`}>\n                      <Clock className=\"inline h-4 w-4 mr-1\" />\n                      {timeStatus.label}\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* 活动时间 */}\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <CalendarDays className=\"h-4 w-4 mr-2\" />\n                    <span>\n                      {format(activity.startDate, 'yyyy年MM月dd日', { locale: zhCN })} - {' '}\n                      {format(activity.endDate, 'yyyy年MM月dd日', { locale: zhCN })}\n                    </span>\n                  </div>\n\n                  {/* 奖励预览 */}\n                  {activity.rewards.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center text-sm font-medium text-gray-700\">\n                        <Trophy className=\"h-4 w-4 mr-2\" />\n                        活动奖励\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {activity.rewards.slice(0, 3).map((reward, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {reward.rankRange?.min === reward.rankRange?.max\n                              ? `第${reward.rankRange?.min}名`\n                              : `第${reward.rankRange?.min}-${reward.rankRange?.max}名`\n                            }: {reward.amount} {reward.description}\n                          </Badge>\n                        ))}\n                        {activity.rewards.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{activity.rewards.length - 3}个奖励\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* 目标指标 */}\n                  {activity.targetMetrics && Object.keys(activity.targetMetrics).length > 0 && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center text-sm font-medium text-gray-700\">\n                        <Target className=\"h-4 w-4 mr-2\" />\n                        活动目标\n                      </div>\n                      <div className=\"flex flex-wrap gap-2 text-xs text-gray-600\">\n                        {Object.entries(activity.targetMetrics).map(([key, value]) => (\n                          <span key={key}>\n                            {key === 'totalInvites' && `目标邀请: ${value}人`}\n                            {key === 'totalRegistrations' && `目标注册: ${value}人`}\n                            {key === 'totalActivations' && `目标激活: ${value}人`}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <Separator />\n\n                  {/* 操作按钮 */}\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <Users className=\"h-4 w-4 mr-1\" />\n                      <span>点击查看详情</span>\n                    </div>\n\n                    {isActive && (\n                      <Button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          onJoinActivity && onJoinActivity(activity.id);\n                        }}\n                        size=\"sm\"\n                        className=\"ml-auto\"\n                      >\n                        立即参与\n                      </Button>\n                    )}\n\n                    {!isActive && activity.status === ActivityStatus.COMPLETED && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        已结束\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* 加载更多 */}\n      {hasMore && (\n        <div className=\"text-center\">\n          <Button\n            onClick={loadMore}\n            variant=\"outline\"\n            disabled={loading}\n            className=\"w-full sm:w-auto\"\n          >\n            {loading ? '加载中...' : '加载更多'}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/invitation/ActivityRewardsClaim.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRewards'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [activityId, loadRewards, userId]","fix":{"range":[1461,1481],"text":"[activityId, loadRewards, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 活动奖励领取组件\n * 处理用户活动奖励的查看和领取\n */\n\n'use client';\n\nimport { format } from 'date-fns';\nimport { zhCN } from 'date-fns/locale';\nimport {\n  Gift,\n  Trophy,\n  Star,\n  Check,\n  Clock,\n  Award,\n  Sparkles,\n  Crown,\n  Zap,\n} from 'lucide-react';\nimport React, { useState, useEffect } from 'react';\n\nimport { ActivityResult, RewardType } from '@/lib/invitation/types';\nimport { Badge } from '@/shared/components/badge';\nimport { Button } from '@/shared/components/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/card';\nimport { Separator } from '@/shared/components/separator';\n\n\ninterface ActivityRewardsClaimProps {\n  activityId: string\n  userId: string\n  onRewardClaimed?: (rewardId: string) => void\n  className?: string\n}\n\ninterface RewardClaimStatus {\n  id: string\n  type: RewardType\n  amount: number\n  description: string\n  isClaimed: boolean\n  claimedAt?: Date\n  canClaim: boolean\n  claimDeadline?: Date\n}\n\nexport function ActivityRewardsClaim({\n  activityId,\n  userId,\n  onRewardClaimed,\n  className,\n}: ActivityRewardsClaimProps) {\n  const [rewards, setRewards] = useState<RewardClaimStatus[]>([]);\n  const [activityResult, setActivityResult] = useState<ActivityResult | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [claiming, setClaiming] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadRewards();\n  }, [activityId, userId]);\n\n  const loadRewards = async () => {\n    try {\n      setLoading(true);\n\n      // 获取用户活动结果\n      const resultResponse = await fetch(`/api/activities/${activityId}/results/${userId}`);\n      const resultData = await resultResponse.json();\n\n      if (resultData.success && resultData.data) {\n        setActivityResult(resultData.data);\n\n        // 获取奖励领取状态\n        const rewardsResponse = await fetch(`/api/activities/${activityId}/rewards/${userId}`);\n        const rewardsData = await rewardsResponse.json();\n\n        if (rewardsData.success) {\n          setRewards(rewardsData.data.rewards || []);\n        }\n      } else {\n        setError('您未参与此活动或活动尚未结束');\n      }\n    } catch (err) {\n      setError('加载奖励信息失败，请稍后重试');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const claimReward = async (rewardId: string) => {\n    try {\n      setClaiming(rewardId);\n\n      const response = await fetch(`/api/activities/${activityId}/rewards/${userId}/claim`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ rewardId }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        // 更新奖励状态\n        const updatedRewards = rewards.map(reward =>\n          reward.id === rewardId\n            ? { ...reward, isClaimed: true, claimedAt: new Date() }\n            : reward,\n        );\n        setRewards(updatedRewards);\n\n        onRewardClaimed && onRewardClaimed(rewardId);\n      } else {\n        setError(data.error || '领取奖励失败');\n      }\n    } catch (err) {\n      setError('网络错误，请稍后重试');\n    } finally {\n      setClaiming(null);\n    }\n  };\n\n  const getRewardIcon = (type: RewardType) => {\n    switch (type) {\n      case RewardType.AI_CREDITS:\n        return <Zap className=\"h-5 w-5 text-blue-500\" />;\n      case RewardType.BADGE:\n        return <Award className=\"h-5 w-5 text-purple-500\" />;\n      case RewardType.TITLE:\n        return <Crown className=\"h-5 w-5 text-yellow-500\" />;\n      case RewardType.PREMIUM_ACCESS:\n        return <Star className=\"h-5 w-5 text-green-500\" />;\n      case RewardType.TEMPLATE_UNLOCK:\n        return <Sparkles className=\"h-5 w-5 text-pink-500\" />;\n      default:\n        return <Gift className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getRewardTypeLabel = (type: RewardType): string => {\n    const labels = {\n      [RewardType.AI_CREDITS]: 'AI生成次数',\n      [RewardType.BADGE]: '专属徽章',\n      [RewardType.TITLE]: '专属称号',\n      [RewardType.PREMIUM_ACCESS]: '高级功能',\n      [RewardType.TEMPLATE_UNLOCK]: '模板解锁',\n    };\n    return labels[type] || '未知奖励';\n  };\n\n  const getRankBadgeColor = (rank: number): string => {\n    if (rank === 1) return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    if (rank === 2) return 'bg-gray-100 text-gray-800 border-gray-200';\n    if (rank === 3) return 'bg-amber-100 text-amber-800 border-amber-200';\n    if (rank <= 10) return 'bg-blue-100 text-blue-800 border-blue-200';\n    return 'bg-gray-50 text-gray-600 border-gray-200';\n  };\n\n  if (loading) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Gift className=\"h-5 w-5 mr-2\" />\n            我的奖励\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-4 animate-pulse\">\n                <div className=\"h-12 w-12 bg-gray-200 rounded-lg\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-gray-200 rounded w-1/3\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n                <div className=\"h-8 bg-gray-200 rounded w-20\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"text-center py-8\">\n          <Gift className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <Button onClick={loadRewards} variant=\"outline\">\n            重新加载\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!activityResult) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"text-center py-8\">\n          <Clock className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">活动进行中</h3>\n          <p className=\"text-gray-500\">活动结束后可查看奖励信息</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Trophy className=\"h-5 w-5 mr-2\" />\n            我的奖励\n          </div>\n          {activityResult.isWinner && (\n            <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\n              <Crown className=\"h-3 w-3 mr-1\" />\n              获奖者\n            </Badge>\n          )}\n        </CardTitle>\n        <CardDescription>\n          活动结果和奖励领取\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* 活动结果概览 */}\n        <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-lg\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-blue-600\">{activityResult.rank}</div>\n              <div className=\"text-sm text-gray-600\">最终排名</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-purple-600\">{activityResult.score}</div>\n              <div className=\"text-sm text-gray-600\">最终积分</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-green-600\">{rewards.length}</div>\n              <div className=\"text-sm text-gray-600\">获得奖励</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {rewards.filter(r => r.isClaimed).length}\n              </div>\n              <div className=\"text-sm text-gray-600\">已领取</div>\n            </div>\n          </div>\n        </div>\n\n        {/* 奖励列表 */}\n        {rewards.length > 0 ? (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium\">奖励详情</h3>\n              <Badge\n                variant=\"outline\"\n                className={getRankBadgeColor(activityResult.rank)}\n              >\n                第 {activityResult.rank} 名\n              </Badge>\n            </div>\n\n            {rewards.map((reward) => (\n              <div\n                key={reward.id}\n                className={`flex items-center space-x-4 p-4 rounded-lg border transition-colors ${\n                  reward.isClaimed\n                    ? 'bg-green-50 border-green-200'\n                    : 'bg-white border-gray-200 hover:border-gray-300'\n                }`}\n              >\n                {/* 奖励图标 */}\n                <div className=\"flex-shrink-0\">\n                  <div className={`p-3 rounded-lg ${\n                    reward.isClaimed ? 'bg-green-100' : 'bg-gray-100'\n                  }`}>\n                    {getRewardIcon(reward.type)}\n                  </div>\n                </div>\n\n                {/* 奖励信息 */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <h4 className=\"text-sm font-medium text-gray-900\">\n                      {getRewardTypeLabel(reward.type)}\n                    </h4>\n                    {reward.isClaimed && (\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                        <Check className=\"h-3 w-3 mr-1\" />\n                        已领取\n                      </Badge>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-gray-600\">{reward.description}</p>\n                  {reward.claimedAt && (\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      领取时间：{format(reward.claimedAt, 'yyyy年MM月dd日 HH:mm', { locale: zhCN })}\n                    </p>\n                  )}\n                  {reward.claimDeadline && !reward.isClaimed && (\n                    <p className=\"text-xs text-orange-600 mt-1\">\n                      <Clock className=\"inline h-3 w-3 mr-1\" />\n                      领取截止：{format(reward.claimDeadline, 'yyyy年MM月dd日', { locale: zhCN })}\n                    </p>\n                  )}\n                </div>\n\n                {/* 奖励数量和操作 */}\n                <div className=\"flex-shrink-0 text-right\">\n                  <div className=\"text-lg font-bold text-primary mb-2\">\n                    {reward.amount}\n                  </div>\n\n                  {!reward.isClaimed && reward.canClaim && (\n                    <Button\n                      onClick={() => claimReward(reward.id)}\n                      disabled={claiming === reward.id}\n                      size=\"sm\"\n                    >\n                      {claiming === reward.id ? '领取中...' : '立即领取'}\n                    </Button>\n                  )}\n\n                  {!reward.isClaimed && !reward.canClaim && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      暂不可领取\n                    </Badge>\n                  )}\n\n                  {reward.isClaimed && (\n                    <div className=\"text-green-600\">\n                      <Check className=\"h-5 w-5\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <Gift className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无奖励</h3>\n            <p className=\"text-gray-500\">\n              {activityResult.isWinner\n                ? '奖励正在准备中，请稍后查看'\n                : '很遗憾，您未获得奖励，下次继续努力！'\n              }\n            </p>\n          </div>\n        )}\n\n        {/* 活动完成信息 */}\n        {activityResult.completedAt && (\n          <>\n            <Separator />\n            <div className=\"text-center text-sm text-gray-500\">\n              活动于 {format(activityResult.completedAt, 'yyyy年MM月dd日 HH:mm', { locale: zhCN })} 结束\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/invitation/InvitationManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInvitationData'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadInvitationData, userId]","fix":{"range":[2426,2434],"text":"[loadInvitationData, userId]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":552,"column":17,"nodeType":"JSXOpeningElement","endLine":556,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 邀请管理页面\n * 实现邀请码展示和生成界面、分享按钮和分享弹窗、二维码显示功能、邀请链接复制功能\n */\n\n'use client';\n\nimport {\n  Copy,\n  Share2,\n  QrCode,\n  RefreshCw,\n  Users,\n  Gift,\n  TrendingUp,\n  Calendar,\n  ExternalLink,\n  Check,\n  X,\n} from 'lucide-react';\nimport QRCode from 'qrcode';\nimport React, { useState, useEffect } from 'react';\n\nimport { Badge } from '@/shared/components/badge';\nimport { Button } from '@/shared/components/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/shared/components/card';\nimport { Input } from '@/shared/components/input';\nimport { Separator } from '@/shared/components/separator';\nimport { useToast } from '@/shared/hooks/use-toast';\n\n\ninterface InviteCode {\n  id: string\n  code: string\n  inviterId: string\n  createdAt: Date\n  expiresAt: Date\n  isActive: boolean\n  usageCount: number\n  maxUsage: number\n  inviteLink: string\n}\n\ninterface InviteStats {\n  totalInvites: number\n  successfulRegistrations: number\n  activeInvitees: number\n  totalRewardsEarned: number\n  conversionRate: number\n}\n\ninterface SharePlatform {\n  id: string\n  name: string\n  icon: string\n  color: string\n  available: boolean\n}\n\ninterface InvitationManagementProps {\n  userId: string\n}\n\nconst InvitationManagement: React.FC<InvitationManagementProps> = ({ userId }) => {\n  const [inviteCode, setInviteCode] = useState<InviteCode | null>(null);\n  const [inviteStats, setInviteStats] = useState<InviteStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [generating, setGenerating] = useState(false);\n  const [showQRCode, setShowQRCode] = useState(false);\n  const [showShareModal, setShowShareModal] = useState(false);\n  const [qrCodeDataUrl, setQrCodeDataUrl] = useState<string>('');\n  const [copiedStates, setCopiedStates] = useState<Record<string, boolean>>({});\n\n  const { toast } = useToast();\n\n  const sharePlatforms: SharePlatform[] = [\n    { id: 'wechat', name: '微信', icon: '💬', color: 'bg-green-500', available: true },\n    { id: 'qq', name: 'QQ', icon: '🐧', color: 'bg-blue-500', available: true },\n    { id: 'dingtalk', name: '钉钉', icon: '📱', color: 'bg-blue-600', available: true },\n    { id: 'wework', name: '企业微信', icon: '💼', color: 'bg-green-600', available: true },\n    { id: 'email', name: '邮件', icon: '📧', color: 'bg-red-500', available: true },\n    { id: 'link', name: '复制链接', icon: '🔗', color: 'bg-gray-500', available: true },\n  ];\n\n  useEffect(() => {\n    loadInvitationData();\n  }, [userId]);\n\n  const loadInvitationData = async () => {\n    try {\n      setLoading(true);\n\n      // 获取邀请码信息\n      const inviteResponse = await fetch(`/api/invite/user/${userId}`);\n      if (inviteResponse.ok) {\n        const inviteData = await inviteResponse.json();\n        setInviteCode(inviteData.data);\n      }\n\n      // 获取邀请统计\n      const statsResponse = await fetch(`/api/invite/stats/${userId}`);\n      if (statsResponse.ok) {\n        const statsData = await statsResponse.json();\n        setInviteStats(statsData.data);\n      }\n    } catch (error) {\n      console.error('Failed to load invitation data:', error);\n      toast({\n        title: '加载失败',\n        description: '无法加载邀请数据，请稍后重试',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateNewInviteCode = async () => {\n    try {\n      setGenerating(true);\n\n      const response = await fetch('/api/invite/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setInviteCode(data.data);\n        toast({\n          title: '生成成功',\n          description: '新的邀请码已生成',\n        });\n      } else {\n        throw new Error('Failed to generate invite code');\n      }\n    } catch (error) {\n      console.error('Failed to generate invite code:', error);\n      toast({\n        title: '生成失败',\n        description: '无法生成邀请码，请稍后重试',\n        variant: 'destructive',\n      });\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  const copyToClipboard = async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedStates({ ...copiedStates, [type]: true });\n\n      toast({\n        title: '复制成功',\n        description: `${type}已复制到剪贴板`,\n      });\n\n      // 重置复制状态\n      setTimeout(() => {\n        setCopiedStates({ ...copiedStates, [type]: false });\n      }, 2000);\n    } catch (error) {\n      console.error('Failed to copy to clipboard:', error);\n      toast({\n        title: '复制失败',\n        description: '无法复制到剪贴板',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const generateQRCode = async () => {\n    if (!inviteCode) return;\n\n    try {\n      const qrCodeDataUrl = await QRCode.toDataURL(inviteCode.inviteLink, {\n        width: 256,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF',\n        },\n      });\n\n      setQrCodeDataUrl(qrCodeDataUrl);\n      setShowQRCode(true);\n    } catch (error) {\n      console.error('Failed to generate QR code:', error);\n      toast({\n        title: '生成失败',\n        description: '无法生成二维码',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleShare = async (platform: SharePlatform) => {\n    if (!inviteCode) return;\n\n    try {\n      const shareData = {\n        title: '邀请您使用 Inspi.AI',\n        text: `我在使用 Inspi.AI 创作，邀请您一起体验！使用我的邀请码 ${inviteCode.code} 注册，我们都能获得额外的AI生成次数！`,\n        url: inviteCode.inviteLink,\n      };\n\n      switch (platform.id) {\n        case 'wechat':\n          // 微信分享逻辑\n          if (typeof window !== 'undefined' && (window as any).wx) {\n            (window as any).wx.ready(() => {\n              (window as any).wx.onMenuShareAppMessage({\n                title: shareData.title,\n                desc: shareData.text,\n                link: shareData.url,\n              });\n            });\n          } else {\n            // 降级到复制链接\n            await copyToClipboard(inviteCode.inviteLink, '邀请链接');\n          }\n          break;\n\n        case 'qq':\n          // QQ分享逻辑\n          const qqUrl = `https://connect.qq.com/widget/shareqq/index.html?url=${encodeURIComponent(shareData.url)}&title=${encodeURIComponent(shareData.title)}&desc=${encodeURIComponent(shareData.text)}`;\n          window.open(qqUrl, '_blank');\n          break;\n\n        case 'email':\n          // 邮件分享\n          const emailUrl = `mailto:?subject=${encodeURIComponent(shareData.title)}&body=${encodeURIComponent(shareData.text + '\\n\\n' + shareData.url)}`;\n          window.location.href = emailUrl;\n          break;\n\n        case 'link':\n          // 复制链接\n          await copyToClipboard(inviteCode.inviteLink, '邀请链接');\n          break;\n\n        default:\n          // 其他平台暂时复制链接\n          await copyToClipboard(inviteCode.inviteLink, '邀请链接');\n          break;\n      }\n\n      setShowShareModal(false);\n\n      // 记录分享事件\n      await fetch('/api/invite/share', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          inviteCodeId: inviteCode.id,\n          platform: platform.id,\n          userId,\n        }),\n      });\n\n    } catch (error) {\n      console.error('Failed to share:', error);\n      toast({\n        title: '分享失败',\n        description: '无法分享邀请链接',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('zh-CN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(new Date(date));\n  };\n\n  const getStatusBadge = (isActive: boolean, expiresAt: Date) => {\n    const now = new Date();\n    const expired = new Date(expiresAt) < now;\n\n    if (!isActive) {\n      return <Badge variant=\"secondary\">已停用</Badge>;\n    }\n    if (expired) {\n      return <Badge variant=\"destructive\">已过期</Badge>;\n    }\n    return <Badge variant=\"default\" className=\"bg-green-500\">有效</Badge>;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">邀请管理</h1>\n        <Button\n          onClick={generateNewInviteCode}\n          disabled={generating}\n          className=\"flex items-center gap-2\"\n        >\n          <RefreshCw className={`h-4 w-4 ${generating ? 'animate-spin' : ''}`} />\n          {generating ? '生成中...' : '生成新邀请码'}\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* 邀请码信息卡片 */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              我的邀请码\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {inviteCode ? (\n              <>\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div>\n                    <div className=\"text-2xl font-mono font-bold text-blue-600\">\n                      {inviteCode.code}\n                    </div>\n                    <div className=\"text-sm text-gray-500 mt-1\">\n                      {getStatusBadge(inviteCode.isActive, inviteCode.expiresAt)}\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(inviteCode.code, '邀请码')}\n                    className=\"flex items-center gap-2\"\n                  >\n                    {copiedStates['邀请码'] ? (\n                      <Check className=\"h-4 w-4 text-green-500\" />\n                    ) : (\n                      <Copy className=\"h-4 w-4\" />\n                    )}\n                    复制\n                  </Button>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-600\">使用次数</span>\n                    <span className=\"font-medium\">\n                      {inviteCode.usageCount} / {inviteCode.maxUsage}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-600\">创建时间</span>\n                    <span className=\"font-medium\">\n                      {formatDate(inviteCode.createdAt)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-600\">过期时间</span>\n                    <span className=\"font-medium\">\n                      {formatDate(inviteCode.expiresAt)}\n                    </span>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">邀请链接</span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(inviteCode.inviteLink, '邀请链接')}\n                      className=\"flex items-center gap-2\"\n                    >\n                      {copiedStates['邀请链接'] ? (\n                        <Check className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <Copy className=\"h-4 w-4\" />\n                      )}\n                      复制链接\n                    </Button>\n                  </div>\n\n                  <Input\n                    value={inviteCode.inviteLink}\n                    readOnly\n                    className=\"text-xs bg-gray-50\"\n                  />\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => setShowShareModal(true)}\n                      className=\"flex-1 flex items-center gap-2\"\n                    >\n                      <Share2 className=\"h-4 w-4\" />\n                      分享邀请\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={generateQRCode}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <QrCode className=\"h-4 w-4\" />\n                      二维码\n                    </Button>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500 mb-4\">您还没有邀请码</p>\n                <Button onClick={generateNewInviteCode} disabled={generating}>\n                  {generating ? '生成中...' : '生成邀请码'}\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* 邀请统计卡片 */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              邀请统计\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {inviteStats ? (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {inviteStats.totalInvites}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">总邀请数</div>\n                </div>\n\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {inviteStats.successfulRegistrations}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">成功注册</div>\n                </div>\n\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {inviteStats.activeInvitees}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">活跃用户</div>\n                </div>\n\n                <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {inviteStats.totalRewardsEarned}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">获得奖励</div>\n                </div>\n\n                <div className=\"col-span-2 text-center p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"text-xl font-bold text-gray-700\">\n                    {(inviteStats.conversionRate * 100).toFixed(1)}%\n                  </div>\n                  <div className=\"text-sm text-gray-600\">转化率</div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <TrendingUp className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">暂无统计数据</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* 分享弹窗 */}\n      {showShareModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">分享邀请</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowShareModal(false)}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-3\">\n              {sharePlatforms.map((platform) => (\n                <button\n                  key={platform.id}\n                  onClick={() => handleShare(platform)}\n                  disabled={!platform.available}\n                  className={`\n                    flex flex-col items-center p-4 rounded-lg border-2 border-transparent\n                    hover:border-blue-200 hover:bg-blue-50 transition-colors\n                    ${!platform.available ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n                  `}\n                >\n                  <div className={`w-12 h-12 rounded-full ${platform.color} flex items-center justify-center text-white text-xl mb-2`}>\n                    {platform.icon}\n                  </div>\n                  <span className=\"text-sm font-medium\">{platform.name}</span>\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 二维码弹窗 */}\n      {showQRCode && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-sm mx-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">邀请二维码</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowQRCode(false)}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            <div className=\"text-center\">\n              {qrCodeDataUrl && (\n                <img\n                  src={qrCodeDataUrl}\n                  alt=\"邀请二维码\"\n                  className=\"mx-auto mb-4 border rounded-lg\"\n                />\n              )}\n              <p className=\"text-sm text-gray-600 mb-4\">\n                扫描二维码或分享给朋友\n              </p>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    const link = document.createElement('a');\n                    link.download = `invite-qr-${inviteCode?.code}.png`;\n                    link.href = qrCodeDataUrl;\n                    link.click();\n                  }}\n                  className=\"flex-1\"\n                >\n                  下载二维码\n                </Button>\n                <Button\n                  onClick={() => copyToClipboard(inviteCode?.inviteLink || '', '邀请链接')}\n                  className=\"flex-1\"\n                >\n                  复制链接\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default InvitationManagement;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/invitation/SharePanel.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":168,"column":13,"nodeType":"JSXOpeningElement","endLine":172,"endColumn":15}],"suppressedMessages":[{"ruleId":"react/no-unknown-property","severity":2,"message":"Unknown property 'jsx' found","line":191,"column":14,"nodeType":"JSXAttribute","messageId":"unknownProp","endLine":191,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 分享面板组件\n * 提供完整的邀请分享界面\n */\n\nimport React, { useState, useEffect } from 'react';\n\nimport { ShareService } from '../../lib/invitation/services/ShareService';\nimport { SharePlatform } from '../../lib/invitation/types';\nimport { useShare, getPlatformConfig } from '../../shared/hooks/useShare';\n\ninterface SharePanelProps {\n  inviteCode: string\n  shareService: ShareService\n  className?: string\n  onShareSuccess?: (platform: SharePlatform) => void\n  onShareError?: (platform: SharePlatform, error: string) => void\n}\n\nexport const SharePanel: React.FC<SharePanelProps> = ({\n  inviteCode,\n  shareService,\n  className = '',\n  onShareSuccess,\n  onShareError,\n}) => {\n  const [qrCodeUrl, setQrCodeUrl] = useState<string | null>(null);\n  const [showQRCode, setShowQRCode] = useState(false);\n\n  const {\n    isSharing,\n    shareError,\n    shareWithSDK,\n    shareWithUrl,\n    copyShareUrl,\n    isPlatformAvailable,\n    getAvailablePlatforms,\n    generateQRCode,\n    clearError,\n  } = useShare(shareService, {\n    onShareSuccess: (platform, result) => {\n      console.log(`Share success on ${platform}:`, result);\n      onShareSuccess && onShareSuccess(platform);\n    },\n    onShareError: (platform, error) => {\n      console.error(`Share error on ${platform}:`, error);\n      onShareError && onShareError(platform, error);\n    },\n  });\n\n  // 生成二维码\n  useEffect(() => {\n    const loadQRCode = async () => {\n      const qrCode = await generateQRCode(inviteCode);\n      setQrCodeUrl(qrCode);\n    };\n    loadQRCode();\n  }, [inviteCode, generateQRCode]);\n\n  // 处理平台分享\n  const handlePlatformShare = async (platform: SharePlatform) => {\n    clearError();\n\n    if (platform === SharePlatform.LINK) {\n      await copyShareUrl(inviteCode);\n      return;\n    }\n\n    // 优先使用SDK分享，如果不可用则使用URL分享\n    if (isPlatformAvailable(platform)) {\n      await shareWithSDK(inviteCode, platform);\n    } else {\n      await shareWithUrl(inviteCode, platform);\n    }\n  };\n\n  // 获取可分享的平台\n  const availablePlatforms = getAvailablePlatforms();\n  const allPlatforms = Object.values(SharePlatform);\n\n  return (\n    <div className={`share-panel ${className}`}>\n      <div className=\"share-panel__header\">\n        <h3 className=\"share-panel__title\">分享邀请</h3>\n        <p className=\"share-panel__subtitle\">\n          邀请朋友注册可获得额外奖励\n        </p>\n      </div>\n\n      {/* 错误提示 */}\n      {shareError && (\n        <div className=\"share-panel__error\">\n          <span className=\"share-panel__error-icon\">⚠️</span>\n          <span className=\"share-panel__error-text\">{shareError}</span>\n          <button\n            className=\"share-panel__error-close\"\n            onClick={clearError}\n          >\n            ✕\n          </button>\n        </div>\n      )}\n\n      {/* 邀请码显示 */}\n      <div className=\"share-panel__invite-code\">\n        <label className=\"share-panel__label\">邀请码</label>\n        <div className=\"share-panel__code-container\">\n          <input\n            type=\"text\"\n            value={inviteCode}\n            readOnly\n            className=\"share-panel__code-input\"\n          />\n          <button\n            className=\"share-panel__copy-button\"\n            onClick={() => copyShareUrl(inviteCode)}\n            disabled={isSharing}\n          >\n            {isSharing ? '复制中...' : '复制链接'}\n          </button>\n        </div>\n      </div>\n\n      {/* 分享平台按钮 */}\n      <div className=\"share-panel__platforms\">\n        <label className=\"share-panel__label\">选择分享方式</label>\n        <div className=\"share-panel__platform-grid\">\n          {allPlatforms.map((platform) => {\n            const config = getPlatformConfig(platform);\n            const isAvailable = availablePlatforms.includes(platform) || platform === SharePlatform.LINK;\n\n            return (\n              <button\n                key={platform}\n                className={`share-panel__platform-button ${\n                  isAvailable ? 'share-panel__platform-button--available' : 'share-panel__platform-button--unavailable'\n                }`}\n                onClick={() => handlePlatformShare(platform)}\n                disabled={isSharing || !isAvailable}\n                style={{ borderColor: config.color }}\n              >\n                <span className=\"share-panel__platform-icon\">{config.icon}</span>\n                <span className=\"share-panel__platform-name\">{config.name}</span>\n                {!isAvailable && (\n                  <span className=\"share-panel__platform-unavailable\">不可用</span>\n                )}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* 二维码分享 */}\n      <div className=\"share-panel__qrcode\">\n        <button\n          className=\"share-panel__qrcode-toggle\"\n          onClick={() => setShowQRCode(!showQRCode)}\n        >\n          <span className=\"share-panel__qrcode-icon\">📱</span>\n          <span>显示二维码</span>\n          <span className={`share-panel__qrcode-arrow ${showQRCode ? 'share-panel__qrcode-arrow--up' : ''}`}>\n            ▼\n          </span>\n        </button>\n\n        {showQRCode && qrCodeUrl && (\n          <div className=\"share-panel__qrcode-container\">\n            <img\n              src={qrCodeUrl}\n              alt=\"邀请二维码\"\n              className=\"share-panel__qrcode-image\"\n            />\n            <p className=\"share-panel__qrcode-text\">\n              扫描二维码分享邀请链接\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* 分享提示 */}\n      <div className=\"share-panel__tips\">\n        <h4 className=\"share-panel__tips-title\">💡 分享提示</h4>\n        <ul className=\"share-panel__tips-list\">\n          <li>好友通过您的邀请注册，您将获得10次AI生成次数</li>\n          <li>好友完成首次创作，您将额外获得5次生成次数</li>\n          <li>累计邀请5人注册可获得\"社区建设者\"称号</li>\n        </ul>\n      </div>\n\n      {/* eslint-disable-next-line react/no-unknown-property */}\n      <style jsx>{`\n        .share-panel {\n          background: white;\n          border-radius: 12px;\n          padding: 24px;\n          box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n          max-width: 480px;\n          margin: 0 auto;\n        }\n\n        .share-panel__header {\n          text-align: center;\n          margin-bottom: 24px;\n        }\n\n        .share-panel__title {\n          font-size: 20px;\n          font-weight: 600;\n          color: #1a1a1a;\n          margin: 0 0 8px 0;\n        }\n\n        .share-panel__subtitle {\n          font-size: 14px;\n          color: #666;\n          margin: 0;\n        }\n\n        .share-panel__error {\n          display: flex;\n          align-items: center;\n          background: #fef2f2;\n          border: 1px solid #fecaca;\n          border-radius: 8px;\n          padding: 12px;\n          margin-bottom: 16px;\n        }\n\n        .share-panel__error-icon {\n          margin-right: 8px;\n        }\n\n        .share-panel__error-text {\n          flex: 1;\n          font-size: 14px;\n          color: #dc2626;\n        }\n\n        .share-panel__error-close {\n          background: none;\n          border: none;\n          color: #dc2626;\n          cursor: pointer;\n          padding: 4px;\n        }\n\n        .share-panel__invite-code {\n          margin-bottom: 24px;\n        }\n\n        .share-panel__label {\n          display: block;\n          font-size: 14px;\n          font-weight: 500;\n          color: #374151;\n          margin-bottom: 8px;\n        }\n\n        .share-panel__code-container {\n          display: flex;\n          gap: 8px;\n        }\n\n        .share-panel__code-input {\n          flex: 1;\n          padding: 12px;\n          border: 1px solid #d1d5db;\n          border-radius: 8px;\n          font-size: 16px;\n          font-family: monospace;\n          background: #f9fafb;\n        }\n\n        .share-panel__copy-button {\n          padding: 12px 16px;\n          background: #3b82f6;\n          color: white;\n          border: none;\n          border-radius: 8px;\n          font-size: 14px;\n          cursor: pointer;\n          white-space: nowrap;\n        }\n\n        .share-panel__copy-button:hover {\n          background: #2563eb;\n        }\n\n        .share-panel__copy-button:disabled {\n          background: #9ca3af;\n          cursor: not-allowed;\n        }\n\n        .share-panel__platforms {\n          margin-bottom: 24px;\n        }\n\n        .share-panel__platform-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n          gap: 12px;\n          margin-top: 8px;\n        }\n\n        .share-panel__platform-button {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          padding: 16px 8px;\n          border: 2px solid #e5e7eb;\n          border-radius: 12px;\n          background: white;\n          cursor: pointer;\n          transition: all 0.2s;\n          position: relative;\n        }\n\n        .share-panel__platform-button--available:hover {\n          transform: translateY(-2px);\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        }\n\n        .share-panel__platform-button--unavailable {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n\n        .share-panel__platform-button:disabled {\n          cursor: not-allowed;\n        }\n\n        .share-panel__platform-icon {\n          font-size: 24px;\n          margin-bottom: 8px;\n        }\n\n        .share-panel__platform-name {\n          font-size: 12px;\n          font-weight: 500;\n          color: #374151;\n        }\n\n        .share-panel__platform-unavailable {\n          position: absolute;\n          top: 4px;\n          right: 4px;\n          font-size: 10px;\n          color: #ef4444;\n          background: #fef2f2;\n          padding: 2px 4px;\n          border-radius: 4px;\n        }\n\n        .share-panel__qrcode {\n          margin-bottom: 24px;\n        }\n\n        .share-panel__qrcode-toggle {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 100%;\n          padding: 12px;\n          background: #f3f4f6;\n          border: 1px solid #d1d5db;\n          border-radius: 8px;\n          cursor: pointer;\n          gap: 8px;\n        }\n\n        .share-panel__qrcode-toggle:hover {\n          background: #e5e7eb;\n        }\n\n        .share-panel__qrcode-arrow {\n          transition: transform 0.2s;\n        }\n\n        .share-panel__qrcode-arrow--up {\n          transform: rotate(180deg);\n        }\n\n        .share-panel__qrcode-container {\n          text-align: center;\n          padding: 16px;\n          margin-top: 12px;\n          background: #f9fafb;\n          border-radius: 8px;\n        }\n\n        .share-panel__qrcode-image {\n          max-width: 200px;\n          height: auto;\n          border-radius: 8px;\n        }\n\n        .share-panel__qrcode-text {\n          margin: 12px 0 0 0;\n          font-size: 14px;\n          color: #6b7280;\n        }\n\n        .share-panel__tips {\n          background: #f0f9ff;\n          border: 1px solid #bae6fd;\n          border-radius: 8px;\n          padding: 16px;\n        }\n\n        .share-panel__tips-title {\n          font-size: 14px;\n          font-weight: 500;\n          color: #0369a1;\n          margin: 0 0 8px 0;\n        }\n\n        .share-panel__tips-list {\n          margin: 0;\n          padding-left: 16px;\n          font-size: 13px;\n          color: #0369a1;\n        }\n\n        .share-panel__tips-list li {\n          margin-bottom: 4px;\n        }\n\n        .share-panel__tips-list li:last-child {\n          margin-bottom: 0;\n        }\n\n        @media (max-width: 640px) {\n          .share-panel {\n            padding: 16px;\n            margin: 0 16px;\n          }\n\n          .share-panel__platform-grid {\n            grid-template-columns: repeat(2, 1fr);\n          }\n\n          .share-panel__code-container {\n            flex-direction: column;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/knowledge-graph/KnowledgeGraphEditor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'mergedLayoutConfig' object makes the dependencies of useCallback Hook (at line 284) change on every render. To fix this, wrap the initialization of 'mergedLayoutConfig' in its own useMemo() Hook.","line":84,"column":9,"nodeType":"VariableDeclarator","endLine":89,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'bindEventHandlers'. Either include it or remove the dependency array.","line":130,"column":6,"nodeType":"ArrayExpression","endLine":130,"endColumn":87,"suggestions":[{"desc":"Update the dependencies array to be: [graph, mergedLayoutConfig, mergedVisualConfig, mergedInteractionConfig, bindEventHandlers, onError]","fix":{"range":[3449,3530],"text":"[graph, mergedLayoutConfig, mergedVisualConfig, mergedInteractionConfig, bindEventHandlers, onError]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 知识图谱编辑器\n * 集成了可视化、编辑、交互等完整功能的图谱编辑器组件\n */\n'use client';\n\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\n\nimport {\n  D3GraphRenderer,\n  GraphDataManager,\n  GraphInteractionManager,\n  layoutManager,\n  LayoutConfig,\n  VisualConfig,\n  InteractionConfig,\n  SelectionState,\n  FilterState,\n  EditingState,\n  DEFAULT_LAYOUT_CONFIG,\n  DEFAULT_VISUAL_CONFIG,\n  DEFAULT_INTERACTION_CONFIG,\n} from '@/core/graph';\nimport { KnowledgeGraph, GraphNode, GraphEdge, NodeType, EdgeType } from '@/shared/types/knowledgeGraph';\n\ninterface KnowledgeGraphEditorProps {\n  graph: KnowledgeGraph\n  width?: number\n  height?: number\n  readonly?: boolean\n  layoutConfig?: Partial<LayoutConfig>\n  visualConfig?: Partial<VisualConfig>\n  interactionConfig?: Partial<InteractionConfig>\n  className?: string\n  onGraphChange?: (graph: KnowledgeGraph) => void\n  onSelectionChange?: (selection: SelectionState) => void\n  onError?: (error: string) => void\n}\n\nexport function KnowledgeGraphEditor({\n  graph,\n  width = 1000,\n  height = 700,\n  readonly = false,\n  layoutConfig = {},\n  visualConfig = {},\n  interactionConfig = {},\n  className = '',\n  onGraphChange,\n  onSelectionChange,\n  onError,\n}: KnowledgeGraphEditorProps) {\n  // DOM引用\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<D3GraphRenderer | null>(null);\n  const dataManagerRef = useRef<GraphDataManager | null>(null);\n  const interactionManagerRef = useRef<GraphInteractionManager | null>(null);\n\n  // 状态\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [currentSelection, setCurrentSelection] = useState<SelectionState>({\n    nodes: [],\n    edges: [],\n    lastSelected: null,\n  });\n  const [filterState, setFilterState] = useState<FilterState>({\n    nodeTypes: [],\n    edgeTypes: [],\n    levels: [],\n    hasWorks: null,\n    searchQuery: '',\n    showHidden: false,\n  });\n  const [editState, setEditState] = useState<EditingState>({\n    mode: readonly ? 'view' : 'view',\n    activeNode: null,\n    activeEdge: null,\n    pendingEdge: null,\n  });\n  const [showToolbar, setShowToolbar] = useState(true);\n  const [showSidebar, setShowSidebar] = useState(true);\n\n  // 合并配置\n  const mergedLayoutConfig: LayoutConfig = {\n    ...DEFAULT_LAYOUT_CONFIG,\n    width,\n    height,\n    ...layoutConfig,\n  };\n\n  const mergedVisualConfig: VisualConfig = {\n    ...DEFAULT_VISUAL_CONFIG,\n    ...visualConfig,\n  };\n\n  const mergedInteractionConfig: InteractionConfig = {\n    ...DEFAULT_INTERACTION_CONFIG,\n    ...interactionConfig,\n  };\n\n  // 初始化管理器\n  const initializeManagers = useCallback(() => {\n    if (!containerRef.current) return;\n\n    try {\n      // 创建数据管理器\n      dataManagerRef.current = new GraphDataManager(graph);\n\n      // 创建交互管理器\n      interactionManagerRef.current = new GraphInteractionManager(dataManagerRef.current);\n\n      // 创建渲染器\n      const visualizationData = dataManagerRef.current.getVisualizationData();\n      rendererRef.current = new D3GraphRenderer({\n        container: containerRef.current,\n        layout: mergedLayoutConfig,\n        visual: mergedVisualConfig,\n        interaction: mergedInteractionConfig,\n        data: visualizationData,\n      });\n\n      // 绑定事件处理器\n      bindEventHandlers();\n\n      setIsInitialized(true);\n    } catch (error) {\n      console.error('Failed to initialize graph editor:', error);\n      onError && onError(error instanceof Error ? error.message : 'Failed to initialize graph editor');\n    }\n  }, [graph, mergedLayoutConfig, mergedVisualConfig, mergedInteractionConfig, onError]);\n\n  // 绑定事件处理器\n  const bindEventHandlers = useCallback(() => {\n    if (!rendererRef.current || !interactionManagerRef.current) return;\n\n    const renderer = rendererRef.current;\n    const interactionManager = interactionManagerRef.current;\n\n    // 渲染器事件\n    renderer.on('node:click', (event) => {\n      if (event.target && interactionManager) {\n        if (editState.mode === 'create_edge' && editState.pendingEdge) {\n          // 完成创建边\n          interactionManager.finishCreateEdge(event.target.id);\n        } else {\n          // 普通点击选择\n          interactionManager.toggleNodeSelection(event.target.id);\n        }\n      }\n    });\n\n    renderer.on('node:dblclick', (event) => {\n      if (event.target && !readonly) {\n        interactionManager.startEditNode(event.target.id);\n      }\n    });\n\n    renderer.on('edge:click', (event) => {\n      if (event.target && interactionManager) {\n        interactionManager.toggleEdgeSelection(event.target.id);\n      }\n    });\n\n    renderer.on('canvas:click', () => {\n      if (editState.mode === 'create_node') {\n        // 在点击位置创建节点\n        const position = { x: 100, y: 100 }; // 这里应该从事件中获取实际位置\n        interactionManager.startCreateNode(position);\n      } else if (editState.mode === 'create_edge') {\n        // 取消创建边\n        interactionManager.cancelCreateEdge();\n      } else {\n        interactionManager.clearSelection();\n      }\n    });\n\n    // 交互管理器事件\n    interactionManager.on('selection:changed', (selection: SelectionState) => {\n      setCurrentSelection(selection);\n      onSelectionChange && onSelectionChange(selection);\n    });\n\n    interactionManager.on('graph:changed', (updatedGraph: KnowledgeGraph) => {\n      onGraphChange && onGraphChange(updatedGraph);\n      // 更新渲染器\n      if (dataManagerRef.current) {\n        const visualizationData = dataManagerRef.current.getVisualizationData();\n        renderer.update(visualizationData);\n      }\n    });\n\n    interactionManager.on('edit:mode:changed', (mode: EditingState['mode']) => {\n      setEditState({ ...editState, mode });\n    });\n\n    interactionManager.on('filter:changed', (filter: FilterState) => {\n      setFilterState(filter);\n      // 更新渲染器显示过滤后的数据\n      const filteredData = interactionManager.getFilteredData();\n      renderer.update(filteredData);\n    });\n\n  }, [editState, readonly, onSelectionChange, onGraphChange]);\n\n  // 初始化\n  useEffect(() => {\n    initializeManagers();\n\n    return () => {\n      // 清理\n      if (rendererRef.current) {\n        rendererRef.current.destroy();\n      }\n      if (interactionManagerRef.current) {\n        interactionManagerRef.current.destroy();\n      }\n    };\n  }, [initializeManagers]);\n\n  // 工具栏操作\n  const handleCreateNode = useCallback(() => {\n    if (interactionManagerRef.current) {\n      interactionManagerRef.current.setEditMode('create_node');\n    }\n  }, []);\n\n  const handleCreateEdge = useCallback(() => {\n    if (interactionManagerRef.current && currentSelection.nodes.length === 1) {\n      interactionManagerRef.current.startCreateEdge(currentSelection.nodes[0]);\n    }\n  }, [currentSelection.nodes]);\n\n  const handleDeleteSelected = useCallback(() => {\n    if (interactionManagerRef.current) {\n      interactionManagerRef.current.deleteSelected();\n    }\n  }, []);\n\n  const handleCopySelected = useCallback(() => {\n    if (interactionManagerRef.current) {\n      interactionManagerRef.current.copySelected();\n    }\n  }, []);\n\n  const handlePaste = useCallback(() => {\n    if (interactionManagerRef.current) {\n      interactionManagerRef.current.paste();\n    }\n  }, []);\n\n  const handleSelectAll = useCallback(() => {\n    if (interactionManagerRef.current) {\n      interactionManagerRef.current.selectAll();\n    }\n  }, []);\n\n  const handleZoomToFit = useCallback(() => {\n    if (rendererRef.current) {\n      rendererRef.current.zoomToFit();\n    }\n  }, []);\n\n  const handleCenterView = useCallback(() => {\n    if (rendererRef.current) {\n      rendererRef.current.centerView();\n    }\n  }, []);\n\n  const handleLayoutChange = useCallback((layoutType: string) => {\n    if (dataManagerRef.current && rendererRef.current) {\n      const nodes = dataManagerRef.current.getVisualizationData().nodes;\n      const links = dataManagerRef.current.getVisualizationData().links;\n\n      layoutManager.applyLayout(layoutType, nodes, links, {\n        ...mergedLayoutConfig,\n        type: layoutType as any,\n      });\n\n      rendererRef.current.setLayout({\n        ...mergedLayoutConfig,\n        type: layoutType as any,\n      });\n    }\n  }, [mergedLayoutConfig]);\n\n  const handleSearch = useCallback((query: string) => {\n    if (interactionManagerRef.current) {\n      const results = interactionManagerRef.current.searchNodes(query);\n      if (results.length > 0) {\n        const nodeIds = results.map(node => node.id);\n        interactionManagerRef.current.selectNodes(nodeIds);\n        if (rendererRef.current) {\n          rendererRef.current.zoomToNodes(nodeIds);\n        }\n      }\n    }\n  }, []);\n\n  const handleFilterChange = useCallback((filter: Partial<FilterState>) => {\n    if (interactionManagerRef.current) {\n      interactionManagerRef.current.setFilter(filter);\n    }\n  }, []);\n\n  // 渲染工具栏\n  const renderToolbar = () => {\n    if (!showToolbar || readonly) return null;\n\n    return (\n      <div className=\"absolute top-4 left-4 bg-white rounded-lg shadow-lg p-2 flex items-center space-x-2 z-10\">\n        {/* 编辑工具 */}\n        <div className=\"flex items-center space-x-1 border-r pr-2\">\n          <button\n            onClick={handleCreateNode}\n            className={`p-2 rounded hover:bg-gray-100 ${editState.mode === 'create_node' ? 'bg-blue-100 text-blue-600' : ''}`}\n            title=\"创建节点\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n            </svg>\n          </button>\n\n          <button\n            onClick={handleCreateEdge}\n            disabled={currentSelection.nodes.length !== 1}\n            className={`p-2 rounded hover:bg-gray-100 disabled:opacity-50 ${editState.mode === 'create_edge' ? 'bg-blue-100 text-blue-600' : ''}`}\n            title=\"创建连线\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1\" />\n            </svg>\n          </button>\n\n          <button\n            onClick={handleDeleteSelected}\n            disabled={currentSelection.nodes.length === 0 && currentSelection.edges.length === 0}\n            className=\"p-2 rounded hover:bg-gray-100 disabled:opacity-50 text-red-600\"\n            title=\"删除选中\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* 选择工具 */}\n        <div className=\"flex items-center space-x-1 border-r pr-2\">\n          <button\n            onClick={handleSelectAll}\n            className=\"p-2 rounded hover:bg-gray-100\"\n            title=\"全选\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </button>\n\n          <button\n            onClick={handleCopySelected}\n            disabled={currentSelection.nodes.length === 0}\n            className=\"p-2 rounded hover:bg-gray-100 disabled:opacity-50\"\n            title=\"复制\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" />\n            </svg>\n          </button>\n\n          <button\n            onClick={handlePaste}\n            className=\"p-2 rounded hover:bg-gray-100\"\n            title=\"粘贴\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* 视图工具 */}\n        <div className=\"flex items-center space-x-1 border-r pr-2\">\n          <button\n            onClick={handleZoomToFit}\n            className=\"p-2 rounded hover:bg-gray-100\"\n            title=\"适应窗口\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4\" />\n            </svg>\n          </button>\n\n          <button\n            onClick={handleCenterView}\n            className=\"p-2 rounded hover:bg-gray-100\"\n            title=\"居中显示\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* 布局选择 */}\n        <div className=\"flex items-center space-x-1\">\n          <select\n            onChange={(e) => handleLayoutChange(e.target.value)}\n            className=\"text-sm border rounded px-2 py-1\"\n            title=\"选择布局\"\n          >\n            <option value=\"force\">力导向</option>\n            <option value=\"hierarchical\">层次布局</option>\n            <option value=\"circular\">环形布局</option>\n            <option value=\"tree\">树形布局</option>\n            <option value=\"grid\">网格布局</option>\n            <option value=\"radial\">径向布局</option>\n          </select>\n        </div>\n      </div>\n    );\n  };\n\n  // 渲染侧边栏\n  const renderSidebar = () => {\n    if (!showSidebar) return null;\n\n    return (\n      <div className=\"absolute top-4 right-4 w-64 bg-white rounded-lg shadow-lg p-4 z-10\">\n        {/* 搜索 */}\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">搜索节点</label>\n          <input\n            type=\"text\"\n            placeholder=\"输入关键词...\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm\"\n            onChange={(e) => handleSearch(e.target.value)}\n          />\n        </div>\n\n        {/* 过滤器 */}\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">节点类型</label>\n          <div className=\"space-y-1\">\n            {Object.values(NodeType).map(type => (\n              <label key={type} className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  className=\"mr-2\"\n                  checked={filterState.nodeTypes.includes(type)}\n                  onChange={(e) => {\n                    const newTypes = e.target.checked\n                      ? [...filterState.nodeTypes, type]\n                      : filterState.nodeTypes.filter(t => t !== type);\n                    handleFilterChange({ nodeTypes: newTypes });\n                  }}\n                />\n                <span className=\"text-sm\">{type}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        {/* 选择信息 */}\n        {(currentSelection.nodes.length > 0 || currentSelection.edges.length > 0) && (\n          <div className=\"mb-4 p-3 bg-blue-50 rounded-lg\">\n            <h4 className=\"text-sm font-medium text-blue-900 mb-2\">当前选择</h4>\n            {currentSelection.nodes.length > 0 && (\n              <p className=\"text-sm text-blue-700\">节点: {currentSelection.nodes.length}</p>\n            )}\n            {currentSelection.edges.length > 0 && (\n              <p className=\"text-sm text-blue-700\">边: {currentSelection.edges.length}</p>\n            )}\n          </div>\n        )}\n\n        {/* 图谱统计 */}\n        {dataManagerRef.current && (\n          <div className=\"p-3 bg-gray-50 rounded-lg\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-2\">图谱统计</h4>\n            {(() => {\n              const stats = dataManagerRef.current!.getStatistics();\n              return (\n                <div className=\"space-y-1 text-sm text-gray-600\">\n                  <p>节点: {stats.nodeCount}</p>\n                  <p>边: {stats.edgeCount}</p>\n                  <p>最大深度: {stats.maxDepth}</p>\n                  <p>平均度数: {stats.averageDegree.toFixed(2)}</p>\n                  <p>密度: {(stats.density * 100).toFixed(1)}%</p>\n                </div>\n              );\n            })()}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // 渲染状态指示器\n  const renderStatusBar = () => {\n    return (\n      <div className=\"absolute bottom-4 left-4 bg-white rounded-lg shadow-lg px-3 py-2 z-10\">\n        <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n          <span>模式: {editState.mode === 'view' ? '查看' : editState.mode === 'edit' ? '编辑' : editState.mode === 'create_node' ? '创建节点' : '创建连线'}</span>\n          {editState.pendingEdge && (\n            <span className=\"text-blue-600\">等待选择目标节点...</span>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  if (!isInitialized) {\n    return (\n      <div\n        className={`flex items-center justify-center bg-gray-50 ${className}`}\n        style={{ width, height }}\n      >\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n          <p className=\"text-gray-600\">初始化图谱编辑器...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`} style={{ width, height }}>\n      {/* 图谱容器 */}\n      <div\n        ref={containerRef}\n        className=\"w-full h-full border border-gray-200 rounded-lg overflow-hidden bg-white\"\n        style={{ width, height }}\n      />\n\n      {/* 工具栏 */}\n      {renderToolbar()}\n\n      {/* 侧边栏 */}\n      {renderSidebar()}\n\n      {/* 状态栏 */}\n      {renderStatusBar()}\n\n      {/* 工具栏切换按钮 */}\n      <button\n        onClick={() => setShowToolbar(!showToolbar)}\n        className=\"absolute top-4 left-1/2 transform -translate-x-1/2 bg-white rounded-full p-2 shadow-lg hover:bg-gray-50 z-20\"\n        title={showToolbar ? '隐藏工具栏' : '显示工具栏'}\n      >\n        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n        </svg>\n      </button>\n\n      {/* 侧边栏切换按钮 */}\n      <button\n        onClick={() => setShowSidebar(!showSidebar)}\n        className=\"absolute top-16 right-4 bg-white rounded-full p-2 shadow-lg hover:bg-gray-50 z-20\"\n        title={showSidebar ? '隐藏侧边栏' : '显示侧边栏'}\n      >\n        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n        </svg>\n      </button>\n    </div>\n  );\n}\n\nexport default KnowledgeGraphEditor;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/layout/AppLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/layout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/leaderboard/LeaderboardCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/leaderboard/RankingList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLeaderboard'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [type, currentUserId, fetchLeaderboard]","fix":{"range":[2231,2252],"text":"[type, currentUserId, fetchLeaderboard]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 排名列表组件\n * 显示排行榜列表\n */\n'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport LoadingSpinner from '@/shared/components/LoadingSpinner';\nimport { LeaderboardEntry, LeaderboardResponse } from '@/shared/types/contribution';\n\nimport { LeaderboardCard } from './LeaderboardCard';\n\ninterface RankingListProps {\n  type: 'total' | 'weekly' | 'monthly' | 'creation' | 'reuse';\n  currentUserId?: string;\n  limit?: number;\n  className?: string;\n}\n\nexport function RankingList({\n  type,\n  currentUserId,\n  limit = 20,\n  className = '',\n}: RankingListProps) {\n  const [leaderboard, setLeaderboard] = useState<LeaderboardResponse | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n\n  // 获取排行榜数据\n  const fetchLeaderboard = async (offset = 0, append = false) => {\n    try {\n      if (offset === 0) setLoading(true);\n      else setLoadingMore(true);\n\n      const params = new URLSearchParams({\n        type,\n        limit: limit.toString(),\n        offset: offset.toString(),\n        includeUserRank: currentUserId ? 'true' : 'false',\n        ...(currentUserId && { userId: currentUserId }),\n      });\n\n      const response = await fetch(`/api/leaderboard?${params}`);\n      const result = await response.json();\n\n      if (!result.success) {\n        throw new Error(result.error || '获取排行榜失败');\n      }\n\n      const newData = result.data as LeaderboardResponse;\n\n      if (append && leaderboard) {\n        setLeaderboard({\n          ...newData,\n          entries: [...leaderboard.entries, ...newData.entries],\n        });\n      } else {\n        setLeaderboard(newData);\n      }\n\n      // 检查是否还有更多数据\n      setHasMore(newData.entries.length === limit);\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : '获取排行榜失败');\n    } finally {\n      setLoading(false);\n      setLoadingMore(false);\n    }\n  };\n\n  // 加载更多数据\n  const loadMore = () => {\n    if (!loadingMore && hasMore && leaderboard) {\n      fetchLeaderboard(leaderboard.entries.length, true);\n    }\n  };\n\n  // 初始加载和类型变化时重新加载\n  useEffect(() => {\n    fetchLeaderboard();\n  }, [type, currentUserId]);\n\n  // 获取类型标题\n  const getTypeTitle = (type: string) => {\n    switch (type) {\n      case 'total':\n        return '总贡献度排行榜';\n      case 'weekly':\n        return '本周贡献度排行榜';\n      case 'monthly':\n        return '本月贡献度排行榜';\n      case 'creation':\n        return '创作排行榜';\n      case 'reuse':\n        return '复用排行榜';\n      default:\n        return '排行榜';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`flex items-center justify-center py-12 ${className}`}>\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`text-center py-12 ${className}`}>\n        <div className=\"text-red-600 mb-4\">\n          <svg className=\"w-12 h-12 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n          </svg>\n          <p className=\"font-medium\">加载失败</p>\n          <p className=\"text-sm text-gray-600 mt-1\">{error}</p>\n        </div>\n        <button\n          onClick={() => fetchLeaderboard()}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n        >\n          重试\n        </button>\n      </div>\n    );\n  }\n\n  if (!leaderboard || leaderboard.entries.length === 0) {\n    return (\n      <div className={`text-center py-12 ${className}`}>\n        <div className=\"text-gray-500\">\n          <svg className=\"w-12 h-12 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          <p className=\"font-medium\">暂无排行榜数据</p>\n          <p className=\"text-sm mt-1\">还没有用户获得贡献度积分</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      {/* 标题和统计信息 */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n          {getTypeTitle(type)}\n        </h2>\n        <div className=\"flex items-center space-x-6 text-sm text-gray-600\">\n          <span>共 {leaderboard.entries.length} 位用户</span>\n          <span>更新时间: {new Date(leaderboard.lastUpdated).toLocaleString()}</span>\n        </div>\n      </div>\n\n      {/* 当前用户排名（如果不在前列表中） */}\n      {leaderboard.userRank && leaderboard.userRank.rank > limit && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">您的排名</h3>\n          <LeaderboardCard\n            entry={leaderboard.userRank}\n            isCurrentUser={true}\n            showRankChange={true}\n          />\n        </div>\n      )}\n\n      {/* 排行榜列表 */}\n      <div className=\"space-y-3\">\n        {leaderboard.entries.map((entry, index) => (\n          <LeaderboardCard\n            key={entry.userId}\n            entry={entry}\n            isCurrentUser={entry.userId === currentUserId}\n            showRankChange={type !== 'total'}\n            className={index < 3 ? 'ring-2 ring-yellow-200' : ''}\n          />\n        ))}\n      </div>\n\n      {/* 加载更多按钮 */}\n      {hasMore && (\n        <div className=\"text-center mt-6\">\n          <button\n            onClick={loadMore}\n            disabled={loadingMore}\n            className=\"px-6 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {loadingMore ? (\n              <span className=\"flex items-center\">\n                <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                加载中...\n              </span>\n            ) : (\n              '加载更多'\n            )}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RankingList;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/leaderboard/TrendingWorks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/leaderboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/payment/PaymentForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/profile/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/providers/KeyboardNavigationProvider.tsx","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 127. Maximum allowed is 120.","line":30,"column":1,"nodeType":"Program","messageId":"max","endLine":30,"endColumn":128}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { createContext, useContext, useRef } from 'react';\n\nimport { useKeyboardNavigation, useFocusManagement } from '@/shared/hooks/useKeyboardNavigation';\n\ninterface KeyboardNavigationContextType {\n  containerRef: React.RefObject<HTMLElement>;\n  focusFirst: () => void;\n  focusLast: () => void;\n  focusNext: () => void;\n  focusPrevious: () => void;\n}\n\nconst KeyboardNavigationContext = createContext<KeyboardNavigationContextType | null>(null);\n\nexport function useKeyboardNavigationContext() {\n  const context = useContext(KeyboardNavigationContext);\n  if (!context) {\n    throw new Error('useKeyboardNavigationContext must be used within KeyboardNavigationProvider');\n  }\n  return context;\n}\n\ninterface KeyboardNavigationProviderProps {\n  children: React.ReactNode;\n}\n\nexport function KeyboardNavigationProvider({ children }: KeyboardNavigationProviderProps) {\n  const containerRef = useRef<HTMLElement>(null!);\n  const { focusFirst, focusLast, focusNext, focusPrevious } = useFocusManagement(containerRef as React.RefObject<HTMLElement>);\n\n  // 设置全局键盘导航\n  useKeyboardNavigation({\n    shortcuts: [\n      {\n        key: 'ArrowUp',\n        action: focusPrevious,\n        description: '上一个焦点',\n      },\n      {\n        key: 'ArrowDown',\n        action: focusNext,\n        description: '下一个焦点',\n      },\n    ],\n    disabled: false,\n  });\n\n  const value = {\n    containerRef,\n    focusFirst,\n    focusLast,\n    focusNext,\n    focusPrevious,\n  };\n\n  return (\n    <KeyboardNavigationContext.Provider value={value}>\n      <div ref={containerRef as React.RefObject<HTMLDivElement>}>\n        {children}\n      </div>\n    </KeyboardNavigationContext.Provider>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/quota/QuotaStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/reuse/AttributionDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/reuse/ReuseButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/reuse/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/seo/SEOHead.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/subscription/SubscriptionPlans.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/support/ContactForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/support/FAQSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/works/DraftsList.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":47,"column":10,"nodeType":"CallExpression","messageId":"unexpected","endLine":47,"endColumn":40},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":62,"column":9,"nodeType":"CallExpression","messageId":"unexpected","endLine":62,"endColumn":38},{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":65,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":65,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport { WorkDocument } from '@/lib/models/Work';\n\ninterface DraftsListProps {\n  onSelectDraft?: (draft: WorkDocument) => void;\n  onDeleteDraft?: (draftId: string) => void;\n  className?: string;\n}\n\nexport default function DraftsList({\n  onSelectDraft,\n  onDeleteDraft,\n  className = '',\n}: DraftsListProps) {\n  const [drafts, setDrafts] = useState<WorkDocument[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchDrafts();\n  }, []);\n\n  const fetchDrafts = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/works/drafts');\n      const data = await response.json();\n\n      if (data.success) {\n        setDrafts(data.data);\n      } else {\n        setError(data.message || '获取草稿失败');\n      }\n    } catch (err) {\n      setError('网络错误，请稍后重试');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDelete = async (draftId: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    if (!confirm('确定要删除这个草稿吗？此操作不可恢复。')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/works/${draftId}`, {\n        method: 'DELETE',\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setDrafts(drafts.filter(draft => String(draft._id) !== draftId));\n        onDeleteDraft && onDeleteDraft(draftId);\n      } else {\n        alert(data.message || '删除失败');\n      }\n    } catch (err) {\n      alert('删除失败，请稍后重试');\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleString('zh-CN', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"animate-pulse space-y-3\">\n          {[1, 2, 3].map(i => (\n            <div key={i} className=\"bg-gray-200 h-20 rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"text-center py-8\">\n          <div className=\"text-red-600 mb-2\">{error}</div>\n          <button\n            onClick={fetchDrafts}\n            className=\"text-blue-600 hover:text-blue-800 text-sm\"\n          >\n            重新加载\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (drafts.length === 0) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"text-center py-8 text-gray-500\">\n          <svg className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          <p className=\"text-sm\">暂无草稿</p>\n          <p className=\"text-xs text-gray-400 mt-1\">创建的草稿会自动保存在这里</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className}`}>\n      <div className=\"space-y-3\">\n        {drafts.map((draft) => (\n          <div\n            key={String(draft._id)}\n            onClick={() => onSelectDraft && onSelectDraft(draft)}\n            className=\"bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer group\"\n          >\n            <div className=\"flex justify-between items-start\">\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-medium text-gray-900 truncate group-hover:text-blue-600\">\n                  {draft.title || '未命名作品'}\n                </h3>\n                <p className=\"text-sm text-gray-600 mt-1 truncate\">\n                  {draft.knowledgePoint || '暂无知识点'}\n                </p>\n\n                <div className=\"flex items-center mt-2 text-xs text-gray-500 space-x-3\">\n                  <span>{draft.subject || '未选择学科'}</span>\n                  <span>•</span>\n                  <span>{draft.gradeLevel || '未选择学段'}</span>\n                  <span>•</span>\n                  <span>{draft.cards?.length || 0} 张卡片</span>\n                </div>\n\n                <div className=\"flex items-center justify-between mt-2\">\n                  <span className=\"text-xs text-gray-400\">\n                    更新于 {formatDate(draft.updatedAt)}\n                  </span>\n\n                  <div className=\"flex items-center space-x-1\">\n                    <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">\n                      草稿\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"ml-3 flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                <button\n                  onClick={(e) => handleDelete(String(draft._id), e)}\n                  className=\"p-1 text-gray-400 hover:text-red-600 rounded\"\n                  title=\"删除草稿\"\n                >\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {drafts.length > 0 && (\n        <div className=\"text-center mt-4\">\n          <p className=\"text-xs text-gray-500\">\n            共 {drafts.length} 个草稿\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/works/PublishModal.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":53,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":53,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\n\nimport { TeachingCard } from '@/shared/types/teaching';\n\ninterface PublishModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: (data: PublishData) => void;\n  workData: {\n    title: string;\n    knowledgePoint: string;\n    subject: string;\n    gradeLevel: string;\n    cards: TeachingCard[];\n    tags: string[];\n  };\n  isLoading?: boolean;\n}\n\ninterface PublishData {\n  title: string;\n  knowledgePoint: string;\n  subject: string;\n  gradeLevel: string;\n  cards: TeachingCard[];\n  tags: string[];\n  description?: string;\n}\n\nconst CARD_TYPE_NAMES = {\n  visualization: '可视化卡',\n  analogy: '类比延展卡',\n  thinking: '启发思考卡',\n  interaction: '互动氛围卡',\n};\n\nexport default function PublishModal({\n  isOpen,\n  onClose,\n  onConfirm,\n  workData,\n  isLoading = false,\n}: PublishModalProps) {\n  const [description, setDescription] = useState('');\n  const [agreedToTerms, setAgreedToTerms] = useState(false);\n\n  if (!isOpen) return null;\n\n  const handleConfirm = () => {\n    if (!agreedToTerms) {\n      alert('请先同意发布协议');\n      return;\n    }\n\n    onConfirm({\n      ...workData,\n      description: description.trim(),\n    });\n  };\n\n  const handleBackdropClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\n      onClick={handleBackdropClick}\n    >\n      <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* 头部 */}\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">发布作品预览</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n            disabled={isLoading}\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* 内容 */}\n        <div className=\"p-6 space-y-6\">\n          {/* 作品基本信息 */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-900 mb-3\">作品信息</h3>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-600\">标题：</span>\n                <span className=\"font-medium\">{workData.title}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">知识点：</span>\n                <span className=\"font-medium\">{workData.knowledgePoint}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">学科：</span>\n                <span className=\"font-medium\">{workData.subject}</span>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">学段：</span>\n                <span className=\"font-medium\">{workData.gradeLevel}</span>\n              </div>\n            </div>\n\n            {workData.tags.length > 0 && (\n              <div className=\"mt-3\">\n                <span className=\"text-gray-600 text-sm\">标签：</span>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {workData.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* 教学卡片预览 */}\n          <div>\n            <h3 className=\"font-semibold text-gray-900 mb-3\">\n              教学卡片 ({workData.cards.length}张)\n            </h3>\n            <div className=\"space-y-3\">\n              {workData.cards.map((card, index) => (\n                <div key={card.id} className=\"border rounded-lg p-3\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-blue-600\">\n                      {CARD_TYPE_NAMES[card.type] || card.type}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">#{index + 1}</span>\n                  </div>\n                  <h4 className=\"font-medium text-gray-900 mb-1\">{card.title}</h4>\n                  <p className=\"text-sm text-gray-600 line-clamp-2\">{card.content}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* 作品描述 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              作品描述 (可选)\n            </label>\n            <textarea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"简单介绍一下这个作品的特色和使用场景...\"\n              rows={3}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              disabled={isLoading}\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              {description.length}/200 字符\n            </p>\n          </div>\n\n          {/* 发布协议 */}\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n            <h4 className=\"font-medium text-gray-900 mb-2\">发布协议</h4>\n            <div className=\"text-sm text-gray-600 space-y-1\">\n              <p>• 发布的作品将在智慧广场公开展示，供其他教师学习和复用</p>\n              <p>• 您保留作品的原创权，其他教师复用时会自动标注归属</p>\n              <p>• 作品被复用时，您将获得贡献度积分奖励</p>\n              <p>• 请确保作品内容健康、积极，符合教育价值观</p>\n              <p>• 平台有权对不当内容进行审核和处理</p>\n            </div>\n\n            <label className=\"flex items-center mt-3\">\n              <input\n                type=\"checkbox\"\n                checked={agreedToTerms}\n                onChange={(e) => setAgreedToTerms(e.target.checked)}\n                className=\"mr-2\"\n                disabled={isLoading}\n              />\n              <span className=\"text-sm text-gray-700\">\n                我已阅读并同意以上发布协议\n              </span>\n            </label>\n          </div>\n\n          {/* 发布提示 */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-start\">\n              <svg className=\"w-5 h-5 text-blue-600 mt-0.5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <div className=\"text-sm text-blue-800\">\n                <p className=\"font-medium mb-1\">发布后您将获得：</p>\n                <ul className=\"list-disc list-inside space-y-0.5\">\n                  <li>+10 贡献度积分（创作奖励）</li>\n                  <li>作品在智慧广场展示机会</li>\n                  <li>每次被复用额外获得 +50 积分</li>\n                  <li>提升个人教学影响力</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 底部按钮 */}\n        <div className=\"flex justify-end gap-3 p-6 border-t bg-gray-50\">\n          <button\n            onClick={onClose}\n            disabled={isLoading}\n            className=\"px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50\"\n          >\n            取消\n          </button>\n          <button\n            onClick={handleConfirm}\n            disabled={!agreedToTerms || isLoading}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {isLoading ? (\n              <div className=\"flex items-center\">\n                <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                发布中...\n              </div>\n            ) : (\n              '确认发布'\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/works/WorkEditor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":58,"column":29,"nodeType":"Identifier","endLine":58,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport CardEditor from '@/features/magic/CardEditor';\nimport { TeachingCard } from '@/shared/types/teaching';\n\ninterface WorkEditorProps {\n  initialData?: {\n    id?: string;\n    title?: string;\n    knowledgePoint?: string;\n    subject?: string;\n    gradeLevel?: string;\n    cards?: TeachingCard[];\n    tags?: string[];\n    status?: 'draft' | 'published';\n  };\n  onSave?: (data: any) => void;\n  onPublish?: (data: any) => void;\n  onAutoSave?: (data: any) => void;\n  isLoading?: boolean;\n}\n\nconst SUBJECTS = [\n  '数学', '语文', '英语', '物理', '化学', '生物',\n  '历史', '地理', '政治', '音乐', '美术', '体育',\n];\n\nconst GRADE_LEVELS = [\n  '小学一年级', '小学二年级', '小学三年级', '小学四年级', '小学五年级', '小学六年级',\n  '初中一年级', '初中二年级', '初中三年级',\n  '高中一年级', '高中二年级', '高中三年级',\n];\n\nexport default function WorkEditor({\n  initialData,\n  onSave,\n  onPublish,\n  onAutoSave,\n  isLoading = false,\n}: WorkEditorProps) {\n  const [formData, setFormData] = useState({\n    title: initialData?.title || '',\n    knowledgePoint: initialData?.knowledgePoint || '',\n    subject: initialData?.subject || '',\n    gradeLevel: initialData?.gradeLevel || '',\n    cards: initialData?.cards || [],\n    tags: initialData?.tags || [],\n    status: initialData?.status || 'draft',\n  });\n\n  const [tagInput, setTagInput] = useState('');\n  const [hasChanges, setHasChanges] = useState(false);\n  const [autoSaveStatus, setAutoSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n\n  // 自动保存逻辑\n  const debouncedAutoSave = useCallback(\n    debounce((data: any) => {\n      if (onAutoSave && hasChanges) {\n        setAutoSaveStatus('saving');\n        try {\n          const result = onAutoSave(data) as any;\n          if (result && typeof result?.then === 'function') {\n            result\n              .then(() => {\n                setAutoSaveStatus('saved');\n                setHasChanges(false);\n                setTimeout(() => setAutoSaveStatus('idle'), 2000);\n              })\n              .catch(() => {\n                setAutoSaveStatus('error');\n                setTimeout(() => setAutoSaveStatus('idle'), 3000);\n              });\n          } else {\n            setAutoSaveStatus('saved');\n            setHasChanges(false);\n            setTimeout(() => setAutoSaveStatus('idle'), 2000);\n          }\n        } catch (error) {\n          setAutoSaveStatus('error');\n          setTimeout(() => setAutoSaveStatus('idle'), 3000);\n        }\n      }\n    }, 2000),\n    [onAutoSave, hasChanges],\n  );\n\n  // 监听数据变化，触发自动保存\n  useEffect(() => {\n    if (hasChanges) {\n      debouncedAutoSave(formData);\n    }\n  }, [formData, hasChanges, debouncedAutoSave]);\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData({ ...formData, [field]: value });\n    setHasChanges(true);\n  };\n\n  const handleCardUpdate = (cardIndex: number, updatedCard: TeachingCard) => {\n    const newCards = [...formData.cards];\n    newCards[cardIndex] = updatedCard;\n    handleInputChange('cards', newCards);\n  };\n\n  const handleCardDelete = (cardIndex: number) => {\n    const newCards = formData.cards.filter((_, index) => index !== cardIndex);\n    handleInputChange('cards', newCards);\n  };\n\n  const handleAddTag = () => {\n    if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {\n      handleInputChange('tags', [...formData.tags, tagInput.trim()]);\n      setTagInput('');\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    handleInputChange('tags', formData.tags.filter(tag => tag !== tagToRemove));\n  };\n\n  const handleSave = () => {\n    if (onSave) {\n      onSave(formData);\n      setHasChanges(false);\n    }\n  };\n\n  const handlePublish = () => {\n    if (onPublish) {\n      onPublish({ ...formData, status: 'published' });\n      setHasChanges(false);\n    }\n  };\n\n  const isFormValid = formData.title.trim() &&\n                     formData.knowledgePoint.trim() &&\n                     formData.subject &&\n                     formData.gradeLevel &&\n                     formData.cards.length > 0;\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      {/* 自动保存状态指示器 */}\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">\n          {initialData?.id ? '编辑作品' : '创建作品'}\n        </h1>\n        <div className=\"flex items-center space-x-2 text-sm\">\n          {autoSaveStatus === 'saving' && (\n            <span className=\"text-blue-600\">保存中...</span>\n          )}\n          {autoSaveStatus === 'saved' && (\n            <span className=\"text-green-600\">已自动保存</span>\n          )}\n          {autoSaveStatus === 'error' && (\n            <span className=\"text-red-600\">保存失败</span>\n          )}\n          {hasChanges && autoSaveStatus === 'idle' && (\n            <span className=\"text-orange-600\">有未保存的更改</span>\n          )}\n        </div>\n      </div>\n\n      {/* 基本信息表单 */}\n      <div className=\"bg-white rounded-lg shadow-sm border p-6 space-y-4\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">基本信息</h2>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              作品标题 *\n            </label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={(e) => handleInputChange('title', e.target.value)}\n              placeholder=\"请输入作品标题\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              知识点 *\n            </label>\n            <input\n              type=\"text\"\n              value={formData.knowledgePoint}\n              onChange={(e) => handleInputChange('knowledgePoint', e.target.value)}\n              placeholder=\"请输入知识点\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              学科 *\n            </label>\n            <select\n              value={formData.subject}\n              onChange={(e) => handleInputChange('subject', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">请选择学科</option>\n              {SUBJECTS.map(subject => (\n                <option key={subject} value={subject}>{subject}</option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              学段 *\n            </label>\n            <select\n              value={formData.gradeLevel}\n              onChange={(e) => handleInputChange('gradeLevel', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">请选择学段</option>\n              {GRADE_LEVELS.map(grade => (\n                <option key={grade} value={grade}>{grade}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* 标签管理 */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n            标签\n          </label>\n          <div className=\"flex flex-wrap gap-2 mb-2\">\n            {formData.tags.map((tag, index) => (\n              <span\n                key={index}\n                className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\"\n              >\n                {tag}\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemoveTag(tag)}\n                  className=\"ml-1 text-blue-600 hover:text-blue-800\"\n                >\n                  ×\n                </button>\n              </span>\n            ))}\n          </div>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              value={tagInput}\n              onChange={(e) => setTagInput(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && handleAddTag()}\n              placeholder=\"输入标签后按回车添加\"\n              className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <button\n              type=\"button\"\n              onClick={handleAddTag}\n              className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200\"\n            >\n              添加\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* 教学卡片编辑 */}\n      <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">教学卡片</h2>\n\n        {formData.cards.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p>暂无教学卡片</p>\n            <p className=\"text-sm\">请先使用AI魔法师生成卡片</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {formData.cards.map((card, index) => (\n              <div key={card.id} className=\"border rounded-lg p-4\">\n                <div className=\"flex justify-between items-start mb-3\">\n                  <h4 className=\"font-medium text-gray-900\">{card.title}</h4>\n                  {formData.cards.length > 1 && (\n                    <button\n                      onClick={() => handleCardDelete(index)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      删除\n                    </button>\n                  )}\n                </div>\n                <div className=\"space-y-3\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      标题\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={card.title}\n                      onChange={(e) => handleCardUpdate(index, { ...card, title: e.target.value })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      内容\n                    </label>\n                    <textarea\n                      value={card.content}\n                      onChange={(e) => handleCardUpdate(index, { ...card, content: e.target.value })}\n                      rows={4}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 操作按钮 */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"text-sm text-gray-500\">\n          {formData.cards.length} 张卡片\n        </div>\n\n        <div className=\"flex gap-3\">\n          <button\n            onClick={handleSave}\n            disabled={!hasChanges || isLoading}\n            className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {isLoading ? '保存中...' : '保存草稿'}\n          </button>\n\n          <button\n            onClick={handlePublish}\n            disabled={!isFormValid || isLoading}\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {isLoading ? '发布中...' : '发布作品'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// 防抖函数\nfunction debounce<T extends(...args: any[]) => any>(\n  func: T,\n  wait: number,\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/components/works/WorkPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/config/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/contexts/AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/ai/card-generator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/ai/content-safety.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/ai/enhanced-gemini-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/ai/geminiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/ai/promptTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/MockAuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/__tests__/permission-middleware.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/auth-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/context.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/google.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":190,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":194,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { OAuth2Client } from 'google-auth-library';\n\nimport ContributionLog from '@/lib/models/ContributionLog';\nimport User, { UserDocument } from '@/lib/models/User';\nimport connectDB from '@/lib/mongodb';\n\nimport { generateToken, generateRefreshToken } from './jwt';\n\nconst client = new OAuth2Client(\n  process.env.GOOGLE_CLIENT_ID,\n  process.env.GOOGLE_CLIENT_SECRET,\n  process.env.GOOGLE_REDIRECT_URI,\n);\n\nexport interface GoogleAuthResponse {\n  success: boolean;\n  user?: Omit<UserDocument, 'password'>;\n  token?: string;\n  refreshToken?: string;\n  error?: string;\n}\n\n/**\n * Verify Google ID token and authenticate user\n */\nexport async function verifyGoogleToken(idToken: string): Promise<GoogleAuthResponse> {\n  try {\n    await connectDB();\n\n    // Verify the token with Google\n    const ticket = await client.verifyIdToken({\n      idToken,\n      audience: process.env.GOOGLE_CLIENT_ID,\n    });\n\n    const payload = ticket.getPayload();\n    if (!payload) {\n      return {\n        success: false,\n        error: 'Invalid Google token',\n      };\n    }\n\n    const { email, name, picture, sub: googleId } = payload;\n\n    if (!email) {\n      return {\n        success: false,\n        error: 'Email not provided by Google',\n      };\n    }\n\n    // Check if user already exists\n    let user = await (User.findOne as any)({ email: email.toLowerCase() });\n\n    if (user) {\n      // Update Google ID if not set\n      if (!user.googleId) {\n        user.googleId = googleId;\n        user.avatar = picture || user.avatar;\n        await user.save();\n      }\n\n      // Reset daily usage if needed\n      user.resetDailyUsage();\n      await user.save();\n    } else {\n      // Create new user\n      user = new User({\n        email: email.toLowerCase(),\n        name: name || 'Google User',\n        googleId,\n        avatar: picture,\n        subscription: {\n          plan: 'free',\n          startDate: new Date(),\n          isActive: true,\n        },\n        usage: {\n          dailyGenerations: 0,\n          dailyReuses: 0,\n          lastResetDate: new Date(),\n        },\n        settings: {\n          emailNotifications: true,\n          publicProfile: false,\n        },\n      });\n\n      const savedUser = await user.save();\n\n      // Log registration contribution\n      await (ContributionLog.create as any)({\n        user: savedUser._id,\n        action: 'create',\n        target: {\n          type: 'user',\n          id: savedUser._id.toString(),\n          title: 'Google OAuth Registration',\n        },\n        points: 10, // Welcome bonus\n        metadata: {\n          description: 'User registration via Google OAuth',\n          category: 'account',\n        },\n      });\n\n      user = savedUser;\n    }\n\n    // Generate tokens\n    const token = generateToken(user);\n    const refreshToken = generateRefreshToken(user);\n\n    // Remove password from response\n    const userResponse = user.toObject();\n    delete userResponse.password;\n\n    return {\n      success: true,\n      user: userResponse,\n      token,\n      refreshToken,\n    };\n  } catch (error) {\n    console.error('Google auth error:', error);\n    return {\n      success: false,\n      error: 'Google authentication failed',\n    };\n  }\n}\n\n/**\n * Get Google OAuth URL for authentication\n */\nexport function getGoogleAuthUrl(state?: string): string {\n  const scopes = [\n    'https://www.googleapis.com/auth/userinfo.email',\n    'https://www.googleapis.com/auth/userinfo.profile',\n  ];\n\n  const authOptions: Parameters<typeof client.generateAuthUrl>[0] = {\n    access_type: 'offline',\n    scope: scopes,\n    include_granted_scopes: true,\n    prompt: 'consent',\n  };\n\n  if (state) {\n    authOptions.state = state;\n  }\n\n  const url = client.generateAuthUrl(authOptions);\n\n  return url;\n}\n\n/**\n * Exchange authorization code for tokens\n */\nexport async function exchangeCodeForTokens(code: string): Promise<{\n  success: boolean;\n  idToken?: string;\n  error?: string;\n}> {\n  try {\n    const { tokens } = await client.getToken(code);\n\n    if (!tokens.id_token) {\n      return {\n        success: false,\n        error: 'No ID token received from Google',\n      };\n    }\n\n    return {\n      success: true,\n      idToken: tokens.id_token,\n    };\n  } catch (error) {\n    console.error('Token exchange error:', error);\n    return {\n      success: false,\n      error: 'Failed to exchange code for tokens',\n    };\n  }\n}\n\nexport default {\n  verifyGoogleToken,\n  getGoogleAuthUrl,\n  exchangeCodeForTokens,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/jwt.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":84,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":91,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jwt, { SignOptions } from 'jsonwebtoken';\n\nimport { UserDocument } from '@/lib/models/User';\n\nconst BASE_SECRET = process.env.JWT_SECRET ?? process.env.NEXTAUTH_SECRET ?? 'your-secret-key';\nconst REFRESH_SECRET = process.env.JWT_REFRESH_SECRET ?? BASE_SECRET;\nconst ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_EXPIRES_IN ?? '7d';\nconst REFRESH_TOKEN_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN ?? '30d';\n\nexport interface JWTPayload {\n  userId: string;\n  email: string;\n  name?: string;\n  [key: string]: any;\n  iat?: number;\n  exp?: number;\n}\n\ntype TokenInput = JWTPayload | Pick<UserDocument, '_id' | 'email' | 'name'> & {\n  [key: string]: any;\n};\n\nfunction toPayload(input: TokenInput): JWTPayload {\n  if ('userId' in input) {\n    return {\n      ...input,\n      userId: input.userId,\n      email: input.email,\n      name: input.name,\n    };\n  }\n\n  return {\n    userId: (input._id as any)?.toString?.() ?? '',\n    email: input.email,\n    name: input.name,\n  };\n}\n\nfunction signToken(payload: JWTPayload, secret: string, expiresIn: string | number): string {\n  const options: SignOptions = { expiresIn: expiresIn as SignOptions['expiresIn'] };\n  return jwt.sign(payload, secret, options);\n}\n\nexport function generateToken(input: TokenInput, expiresIn: string | number = ACCESS_TOKEN_EXPIRES_IN): string {\n  const payload = toPayload(input);\n  return signToken(payload, BASE_SECRET, expiresIn);\n}\n\nexport function generateRefreshToken(input: TokenInput, expiresIn: string | number = REFRESH_TOKEN_EXPIRES_IN): string {\n  const payload = toPayload(input);\n  return signToken(payload, REFRESH_SECRET, expiresIn);\n}\n\nexport function verifyToken(token: string, secret: string = BASE_SECRET): JWTPayload | null {\n  try {\n    return jwt.verify(token, secret) as JWTPayload;\n  } catch (error) {\n    console.error('JWT verification failed:', error);\n    return null;\n  }\n}\n\nexport function verifyRefreshToken(token: string): JWTPayload | null {\n  return verifyToken(token, REFRESH_SECRET);\n}\n\nexport function extractTokenFromHeader(authHeader: string | undefined): string | null {\n  if (!authHeader) return null;\n  const parts = authHeader.split(' ');\n  if (parts.length !== 2 || parts[0] !== 'Bearer') return null;\n  return parts[1];\n}\n\nexport function decodeToken(token: string): JWTPayload | null {\n  try {\n    return jwt.decode(token) as JWTPayload;\n  } catch (error) {\n    console.error('JWT decode failed:', error);\n    return null;\n  }\n}\n\nexport default {\n  generateToken,\n  generateRefreshToken,\n  verifyToken,\n  verifyRefreshToken,\n  extractTokenFromHeader,\n  decodeToken,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/middleware.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":240,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":246,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport User from '@/lib/models/User';\nimport connectDB from '@/lib/mongodb';\n\nimport { verifyToken, extractTokenFromHeader, JWTPayload } from './jwt';\n\nexport interface AuthenticatedRequest extends NextRequest {\n  user?: JWTPayload & {\n    dbUser?: any;\n  };\n}\n\n/**\n * Authentication middleware for API routes\n */\nexport async function authenticateToken(request: NextRequest): Promise<{\n  success: boolean;\n  user?: JWTPayload & { dbUser?: any };\n  error?: string;\n}> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    let token = extractTokenFromHeader(authHeader || '');\n\n    if (!token) {\n      token = request.cookies.get('token')?.value ||\n        request.cookies.get('auth-token')?.value || null;\n    }\n\n    if (!token) {\n      return {\n        success: false,\n        error: 'No token provided',\n      };\n    }\n\n    const payload = verifyToken(token);\n    if (!payload) {\n      return {\n        success: false,\n        error: 'Invalid or expired token',\n      };\n    }\n\n    // In development mode with demo login enabled, skip database lookup\n    if (\n      process.env.NODE_ENV === 'development' &&\n      process.env.DEMO_LOGIN_ENABLED === 'true'\n    ) {\n      // Create mock dbUser for demo mode\n      const mockDbUser = {\n        _id: payload.userId,\n        email: payload.email,\n        name: 'Demo User',\n        subscription: {\n          plan: 'pro',\n          status: 'active',\n        },\n        usage: {\n          dailyGenerations: 0,\n          dailyReuses: 0,\n        },\n      };\n\n      return {\n        success: true,\n        user: {\n          ...payload,\n          dbUser: mockDbUser,\n        },\n      };\n    }\n\n    // Production mode: fetch user from database\n    try {\n      await connectDB();\n      const dbUser = await (User.findById as any)(payload.userId).select('-password');\n\n      if (!dbUser) {\n        return {\n          success: false,\n          error: 'User not found',\n        };\n      }\n\n      return {\n        success: true,\n        user: {\n          ...payload,\n          dbUser: dbUser.toObject(),\n        },\n      };\n    } catch (dbError) {\n      console.error('Database connection error:', dbError);\n\n      // Fallback for dev mode if DB fails\n      if (process.env.NODE_ENV === 'development') {\n        const fallbackUser = {\n          _id: payload.userId,\n          email: payload.email,\n          name: 'Demo User',\n          subscription: {\n            plan: 'pro',\n            status: 'active',\n          },\n          usage: {\n            dailyGenerations: 0,\n            dailyReuses: 0,\n          },\n        };\n\n        return {\n          success: true,\n          user: {\n            ...payload,\n            dbUser: fallbackUser,\n          },\n        };\n      }\n\n      return {\n        success: false,\n        error: 'Database connection failed',\n      };\n    }\n  } catch (error) {\n    console.error('Authentication middleware error:', error);\n    return {\n      success: false,\n      error: 'Authentication failed',\n    };\n  }\n}\n\n/**\n * Require authentication middleware\n */\nexport function requireAuth(handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\n  return async (request: NextRequest) => {\n    const authResult = await authenticateToken(request);\n\n    if (!authResult.success) {\n      return NextResponse.json(\n        { error: authResult.error },\n        { status: 401 },\n      );\n    }\n\n    // Add user to request object\n    (request as AuthenticatedRequest).user = authResult.user;\n\n    return handler(request as AuthenticatedRequest);\n  };\n}\n\n/**\n * Optional authentication middleware (doesn't fail if no token)\n */\nexport function optionalAuth(handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\n  return async (request: NextRequest) => {\n    const authResult = await authenticateToken(request);\n\n    // Add user to request object if authentication succeeded\n    if (authResult.success) {\n      (request as AuthenticatedRequest).user = authResult.user;\n    }\n\n    return handler(request as AuthenticatedRequest);\n  };\n}\n\n/**\n * Check if user has required subscription level\n */\nexport function requireSubscription(requiredLevel: 'free' | 'pro' | 'super') {\n  return (handler: (req: AuthenticatedRequest) => Promise<NextResponse>) => {\n    return requireAuth(async (request: AuthenticatedRequest) => {\n      const user = request.user;\n\n      if (!user?.dbUser) {\n        return NextResponse.json(\n          { error: 'User data not available' },\n          { status: 500 },\n        );\n      }\n\n      const userSubscription = user.dbUser.subscription?.plan || 'free';\n      const levels = ['free', 'pro', 'super'];\n      const userLevel = levels.indexOf(userSubscription);\n      const requiredLevelIndex = levels.indexOf(requiredLevel);\n\n      if (userLevel < requiredLevelIndex) {\n        return NextResponse.json(\n          {\n            error: 'Insufficient subscription level',\n            required: requiredLevel,\n            current: userSubscription,\n          },\n          { status: 403 },\n        );\n      }\n\n      return handler(request);\n    });\n  };\n}\n\n/**\n * Rate limiting middleware (basic implementation)\n */\nexport function rateLimit(maxRequests: number = 100, windowMs: number = 15 * 60 * 1000) {\n  const requests = new Map<string, { count: number; resetTime: number }>();\n\n  return (handler: (req: NextRequest) => Promise<NextResponse>) => {\n    return async (request: NextRequest) => {\n      const ip = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';\n      const now = Date.now();\n\n      const userRequests = requests.get(ip);\n\n      if (!userRequests || now > userRequests.resetTime) {\n        requests.set(ip, { count: 1, resetTime: now + windowMs });\n      } else {\n        userRequests.count++;\n\n        if (userRequests.count > maxRequests) {\n          return NextResponse.json(\n            { error: 'Too many requests' },\n            { status: 429 },\n          );\n        }\n      }\n\n      return handler(request);\n    };\n  };\n}\n\nexport default {\n  authenticateToken,\n  requireAuth,\n  optionalAuth,\n  requireSubscription,\n  rateLimit,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/next-auth-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/operation-guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/password.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":99,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":104,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import bcrypt from 'bcryptjs';\n\nconst SALT_ROUNDS = 12;\n\n/**\n * Hash password using bcrypt\n */\nexport async function hashPassword(password: string): Promise<string> {\n  try {\n    const salt = await bcrypt.genSalt(SALT_ROUNDS);\n    const hashedPassword = await bcrypt.hash(password, salt);\n    return hashedPassword;\n  } catch (error) {\n    console.error('Password hashing failed:', error);\n    throw new Error('Failed to hash password');\n  }\n}\n\n/**\n * Compare password with hash\n */\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  try {\n    const isMatch = await bcrypt.compare(password, hash);\n    return isMatch;\n  } catch (error) {\n    console.error('Password comparison failed:', error);\n    return false;\n  }\n}\n\n/**\n * Validate password strength\n */\nexport function validatePassword(password: string): {\n  isValid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n\n  if (password.length < 8) {\n    errors.push('Password must be at least 8 characters long');\n  }\n\n  if (password.length > 128) {\n    errors.push('Password must be less than 128 characters long');\n  }\n\n  if (!/[a-z]/.test(password)) {\n    errors.push('Password must contain at least one lowercase letter');\n  }\n\n  if (!/[A-Z]/.test(password)) {\n    errors.push('Password must contain at least one uppercase letter');\n  }\n\n  if (!/\\d/.test(password)) {\n    errors.push('Password must contain at least one number');\n  }\n\n  if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n    errors.push('Password must contain at least one special character');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Generate random password\n */\nexport function generateRandomPassword(length: number = 12): string {\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const numbers = '0123456789';\n  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n\n  const allChars = lowercase + uppercase + numbers + symbols;\n\n  let password = '';\n\n  // Ensure at least one character from each category\n  password += lowercase[Math.floor(Math.random() * lowercase.length)];\n  password += uppercase[Math.floor(Math.random() * uppercase.length)];\n  password += numbers[Math.floor(Math.random() * numbers.length)];\n  password += symbols[Math.floor(Math.random() * symbols.length)];\n\n  // Fill the rest randomly\n  for (let i = 4; i < length; i++) {\n    password += allChars[Math.floor(Math.random() * allChars.length)];\n  }\n\n  // Shuffle the password\n  return password.split('').sort(() => Math.random() - 0.5).join('');\n}\n\nexport default {\n  hashPassword,\n  comparePassword,\n  validatePassword,\n  generateRandomPassword,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/permission-middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/roles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/auth/service.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":330,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":336,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import ContributionLog from '@/lib/models/ContributionLog';\nimport User, { UserDocument } from '@/lib/models/User';\nimport connectDB from '@/lib/mongodb';\n\nimport { generateToken, generateRefreshToken } from './jwt';\nimport { hashPassword, comparePassword, validatePassword } from './password';\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  name: string;\n}\n\nexport interface LoginData {\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  success: boolean;\n  user?: Omit<UserDocument, 'password'>;\n  token?: string;\n  refreshToken?: string;\n  error?: string;\n}\n\n/**\n * Register new user\n */\nexport async function registerUser(data: RegisterData): Promise<AuthResponse> {\n  try {\n    await connectDB();\n\n    // Validate input\n    if (!data.email || !data.password || !data.name) {\n      return {\n        success: false,\n        error: 'Email, password, and name are required',\n      };\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(data.email)) {\n      return {\n        success: false,\n        error: 'Invalid email format',\n      };\n    }\n\n    // Validate password strength\n    const passwordValidation = validatePassword(data.password);\n    if (!passwordValidation.isValid) {\n      return {\n        success: false,\n        error: passwordValidation.errors.join(', '),\n      };\n    }\n\n    // Check if user already exists\n    const existingUser = await (User.findOne as any)({ email: data.email.toLowerCase() });\n    if (existingUser) {\n      return {\n        success: false,\n        error: 'User with this email already exists',\n      };\n    }\n\n    // Hash password\n    const hashedPassword = await hashPassword(data.password);\n\n    // Create user\n    const user = new User({\n      email: data.email.toLowerCase(),\n      name: data.name.trim(),\n      password: hashedPassword,\n      subscription: {\n        plan: 'free',\n        startDate: new Date(),\n        isActive: true,\n      },\n      usage: {\n        dailyGenerations: 0,\n        dailyReuses: 0,\n        lastResetDate: new Date(),\n      },\n      settings: {\n        emailNotifications: true,\n        publicProfile: false,\n      },\n    });\n\n    const savedUser = await user.save();\n\n    // Log registration contribution\n    await (ContributionLog.create as any)({\n      user: savedUser._id,\n      action: 'create',\n      target: {\n        type: 'user',\n        id: savedUser._id.toString(),\n        title: 'User Registration',\n      },\n      points: 10, // Welcome bonus\n      metadata: {\n        description: 'User registration',\n        category: 'account',\n      },\n    });\n\n    // Generate tokens\n    const token = generateToken(savedUser);\n    const refreshToken = generateRefreshToken(savedUser);\n\n    // Remove password from response\n    const userResponse = savedUser.toObject();\n    delete userResponse.password;\n\n    return {\n      success: true,\n      user: userResponse,\n      token,\n      refreshToken,\n    };\n  } catch (error) {\n    console.error('Registration error:', error);\n    return {\n      success: false,\n      error: 'Registration failed. Please try again.',\n    };\n  }\n}\n\n/**\n * Login user\n */\nexport async function loginUser(data: LoginData): Promise<AuthResponse> {\n  try {\n    await connectDB();\n\n    // Validate input\n    if (!data.email || !data.password) {\n      return {\n        success: false,\n        error: 'Email and password are required',\n      };\n    }\n\n    // Find user\n    const user = await (User.findOne as any)({ email: data.email.toLowerCase() });\n    if (!user) {\n      return {\n        success: false,\n        error: 'Invalid email or password',\n      };\n    }\n\n    // Check password\n    const isPasswordValid = await comparePassword(data.password, user.password);\n    if (!isPasswordValid) {\n      return {\n        success: false,\n        error: 'Invalid email or password',\n      };\n    }\n\n    // Reset daily usage if needed\n    user.resetDailyUsage();\n    await user.save();\n\n    // Generate tokens\n    const token = generateToken(user);\n    const refreshToken = generateRefreshToken(user);\n\n    // Remove password from response\n    const userResponse = user.toObject();\n    delete userResponse.password;\n\n    return {\n      success: true,\n      user: userResponse,\n      token,\n      refreshToken,\n    };\n  } catch (error) {\n    console.error('Login error:', error);\n    return {\n      success: false,\n      error: 'Login failed. Please try again.',\n    };\n  }\n}\n\n/**\n * Get user profile\n */\nexport async function getUserProfile(userId: string): Promise<{\n  success: boolean;\n  user?: Omit<UserDocument, 'password'>;\n  error?: string;\n}> {\n  try {\n    await connectDB();\n\n    const user = await (User.findById as any)(userId).select('-password');\n    if (!user) {\n      return {\n        success: false,\n        error: 'User not found',\n      };\n    }\n\n    // Reset daily usage if needed\n    user.resetDailyUsage();\n    await user.save();\n\n    return {\n      success: true,\n      user: user.toObject(),\n    };\n  } catch (error) {\n    console.error('Get profile error:', error);\n    return {\n      success: false,\n      error: 'Failed to get user profile',\n    };\n  }\n}\n\n/**\n * Update user profile\n */\nexport async function updateUserProfile(\n  userId: string,\n  updates: Partial<Pick<UserDocument, 'name'>>,\n): Promise<{\n  success: boolean;\n  user?: Omit<UserDocument, 'password'>;\n  error?: string;\n}> {\n  try {\n    await connectDB();\n\n    const user = await (User.findByIdAndUpdate as any)(\n      userId,\n      { $set: updates },\n      { new: true, runValidators: true },\n    ).select('-password');\n\n    if (!user) {\n      return {\n        success: false,\n        error: 'User not found',\n      };\n    }\n\n    return {\n      success: true,\n      user: user.toObject(),\n    };\n  } catch (error) {\n    console.error('Update profile error:', error);\n    return {\n      success: false,\n      error: 'Failed to update profile',\n    };\n  }\n}\n\n/**\n * Change user password\n */\nexport async function changePassword(\n  userId: string,\n  currentPassword: string,\n  newPassword: string,\n): Promise<{\n  success: boolean;\n  error?: string;\n}> {\n  try {\n    await connectDB();\n\n    // Find user with password\n    const user = await (User.findById as any)(userId);\n    if (!user) {\n      return {\n        success: false,\n        error: 'User not found',\n      };\n    }\n\n    // Verify current password\n    const isCurrentPasswordValid = await comparePassword(currentPassword, user.password);\n    if (!isCurrentPasswordValid) {\n      return {\n        success: false,\n        error: 'Current password is incorrect',\n      };\n    }\n\n    // Validate new password\n    const passwordValidation = validatePassword(newPassword);\n    if (!passwordValidation.isValid) {\n      return {\n        success: false,\n        error: passwordValidation.errors.join(', '),\n      };\n    }\n\n    // Hash new password\n    const hashedNewPassword = await hashPassword(newPassword);\n\n    // Update password\n    user.password = hashedNewPassword;\n    await user.save();\n\n    return {\n      success: true,\n    };\n  } catch (error) {\n    console.error('Change password error:', error);\n    return {\n      success: false,\n      error: 'Failed to change password',\n    };\n  }\n}\n\nexport default {\n  registerUser,\n  loginUser,\n  getUserProfile,\n  updateUserProfile,\n  changePassword,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/community/comment-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/community/work-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/graph/KnowledgeGraphViewer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'mergedLayoutConfig' object makes the dependencies of useEffect Hook (at line 205) change on every render. To fix this, wrap the initialization of 'mergedLayoutConfig' in its own useMemo() Hook.","line":87,"column":9,"nodeType":"VariableDeclarator","endLine":92,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'mergedVisualConfig' object makes the dependencies of useEffect Hook (at line 205) change on every render. To fix this, wrap the initialization of 'mergedVisualConfig' in its own useMemo() Hook.","line":94,"column":9,"nodeType":"VariableDeclarator","endLine":97,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'mergedInteractionConfig' object makes the dependencies of useEffect Hook (at line 205) change on every render. To fix this, wrap the initialization of 'mergedInteractionConfig' in its own useMemo() Hook.","line":99,"column":9,"nodeType":"VariableDeclarator","endLine":102,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'bindEventHandlers'. Either include it or remove the dependency array.","line":126,"column":6,"nodeType":"ArrayExpression","endLine":126,"endColumn":97,"suggestions":[{"desc":"Update the dependencies array to be: [currentVisualizationData, mergedLayoutConfig, mergedVisualConfig, mergedInteractionConfig, bindEventHandlers]","fix":{"range":[3259,3350],"text":"[currentVisualizationData, mergedLayoutConfig, mergedVisualConfig, mergedInteractionConfig, bindEventHandlers]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 知识图谱查看器组件\n * 主要的图谱可视化组件，集成D3.js渲染器\n */\n'use client';\n\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\n\nimport { transformGraphData } from '@/core/graph/d3-utils';\nimport { D3GraphRenderer } from '@/core/graph/graph-renderer';\nimport {\n  GraphVisualizationData,\n  LayoutConfig,\n  VisualConfig,\n  InteractionConfig,\n  GraphEvent,\n  DEFAULT_LAYOUT_CONFIG,\n  DEFAULT_VISUAL_CONFIG,\n  DEFAULT_INTERACTION_CONFIG,\n} from '@/core/graph/types';\nimport useKnowledgeGraph from '@/shared/hooks/useKnowledgeGraph';\nimport { KnowledgeGraph } from '@/shared/types/knowledgeGraph';\n\ninterface KnowledgeGraphViewerProps {\n  graphId?: string\n  graph?: KnowledgeGraph\n  width?: number\n  height?: number\n  layoutConfig?: Partial<LayoutConfig>\n  visualConfig?: Partial<VisualConfig>\n  interactionConfig?: Partial<InteractionConfig>\n  className?: string\n  onNodeClick?: (nodeId: string, event: GraphEvent) => void\n  onNodeDoubleClick?: (nodeId: string, event: GraphEvent) => void\n  onEdgeClick?: (edgeId: string, event: GraphEvent) => void\n  onSelectionChange?: (selection: { nodes: string[]; edges: string[] }) => void\n  onError?: (error: string) => void\n}\n\nexport function KnowledgeGraphViewer({\n  graphId,\n  graph: externalGraph,\n  width = 800,\n  height = 600,\n  layoutConfig = {},\n  visualConfig = {},\n  interactionConfig = {},\n  className = '',\n  onNodeClick,\n  onNodeDoubleClick,\n  onEdgeClick,\n  onSelectionChange,\n  onError,\n}: KnowledgeGraphViewerProps) {\n  // DOM引用\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<D3GraphRenderer | null>(null);\n\n  // 状态\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [currentSelection, setCurrentSelection] = useState<{ nodes: string[]; edges: string[] }>({\n    nodes: [],\n    edges: [],\n  });\n\n  // 使用Hook获取图谱数据（仅当没有外部图谱时）\n  const {\n    graph: hookGraph,\n    visualizationData: hookVisualizationData,\n    loading,\n    error,\n  } = useKnowledgeGraph({\n    graphId: externalGraph ? undefined : graphId,\n    autoFetch: !externalGraph && !!graphId,\n  });\n\n  // 确定使用的图谱数据\n  const currentGraph = externalGraph || hookGraph;\n  const currentVisualizationData = externalGraph\n    ? transformGraphData(externalGraph.nodes, externalGraph.edges, {\n        ...DEFAULT_VISUAL_CONFIG,\n        ...visualConfig,\n      })\n    : hookVisualizationData;\n\n  // 合并配置\n  const mergedLayoutConfig: LayoutConfig = {\n    ...DEFAULT_LAYOUT_CONFIG,\n    width,\n    height,\n    ...layoutConfig,\n  };\n\n  const mergedVisualConfig: VisualConfig = {\n    ...DEFAULT_VISUAL_CONFIG,\n    ...visualConfig,\n  };\n\n  const mergedInteractionConfig: InteractionConfig = {\n    ...DEFAULT_INTERACTION_CONFIG,\n    ...interactionConfig,\n  };\n\n  // 初始化渲染器\n  const initializeRenderer = useCallback(() => {\n    if (!containerRef.current || !currentVisualizationData) return;\n\n    // 清理现有渲染器\n    if (rendererRef.current) {\n      rendererRef.current.destroy();\n    }\n\n    // 创建新渲染器\n    rendererRef.current = new D3GraphRenderer({\n      container: containerRef.current,\n      layout: mergedLayoutConfig,\n      visual: mergedVisualConfig,\n      interaction: mergedInteractionConfig,\n      data: currentVisualizationData,\n    });\n\n    // 绑定事件处理器\n    bindEventHandlers();\n\n    setIsInitialized(true);\n  }, [currentVisualizationData, mergedLayoutConfig, mergedVisualConfig, mergedInteractionConfig]);\n\n  // 绑定事件处理器\n  const bindEventHandlers = useCallback(() => {\n    if (!rendererRef.current) return;\n\n    const renderer = rendererRef.current;\n\n    // 节点点击事件\n    renderer.on('node:click', (event) => {\n      if (event.target && onNodeClick) {\n        onNodeClick(event.target.id, event);\n      }\n    });\n\n    // 节点双击事件\n    renderer.on('node:dblclick', (event) => {\n      if (event.target && onNodeDoubleClick) {\n        onNodeDoubleClick(event.target.id, event);\n      }\n    });\n\n    // 边点击事件\n    renderer.on('edge:click', (event) => {\n      if (event.target && onEdgeClick) {\n        onEdgeClick(event.target.id, event);\n      }\n    });\n\n    // 选择变化事件\n    renderer.on('selection:change', (event) => {\n      const selection = event.data as { nodes: string[]; edges: string[] };\n      setCurrentSelection(selection);\n      if (onSelectionChange) {\n        onSelectionChange(selection);\n      }\n    });\n\n    // 画布点击事件（清除选择）\n    renderer.on('canvas:click', () => {\n      setCurrentSelection({ nodes: [], edges: [] });\n      if (onSelectionChange) {\n        onSelectionChange({ nodes: [], edges: [] });\n      }\n    });\n  }, [onNodeClick, onNodeDoubleClick, onEdgeClick, onSelectionChange]);\n\n  // 更新渲染器数据\n  const updateRenderer = useCallback(() => {\n    if (!rendererRef.current || !currentVisualizationData) return;\n\n    rendererRef.current.update(currentVisualizationData);\n  }, [currentVisualizationData]);\n\n  // 处理错误\n  useEffect(() => {\n    if (error && onError) {\n      onError(error);\n    }\n  }, [error, onError]);\n\n  // 初始化和数据变化时重新渲染\n  useEffect(() => {\n    if (currentVisualizationData) {\n      if (isInitialized) {\n        updateRenderer();\n      } else {\n        initializeRenderer();\n      }\n    }\n  }, [currentVisualizationData, isInitialized, initializeRenderer, updateRenderer]);\n\n  // 配置变化时更新渲染器\n  useEffect(() => {\n    if (rendererRef.current) {\n      rendererRef.current.setLayout(mergedLayoutConfig);\n      rendererRef.current.setVisualConfig(mergedVisualConfig);\n      rendererRef.current.enableInteraction(mergedInteractionConfig);\n    }\n  }, [mergedLayoutConfig, mergedVisualConfig, mergedInteractionConfig]);\n\n  // 清理\n  useEffect(() => {\n    return () => {\n      if (rendererRef.current) {\n        rendererRef.current.destroy();\n      }\n    };\n  }, []);\n\n  // 公开的方法\n  const zoomToFit = useCallback((padding?: number) => {\n    if (rendererRef.current) {\n      rendererRef.current.zoomToFit(padding);\n    }\n  }, []);\n\n  const zoomToNodes = useCallback((nodeIds: string[], padding?: number) => {\n    if (rendererRef.current) {\n      rendererRef.current.zoomToNodes(nodeIds, padding);\n    }\n  }, []);\n\n  const centerView = useCallback(() => {\n    if (rendererRef.current) {\n      rendererRef.current.centerView();\n    }\n  }, []);\n\n  const selectNodes = useCallback((nodeIds: string[]) => {\n    if (rendererRef.current) {\n      rendererRef.current.selectNodes(nodeIds);\n    }\n  }, []);\n\n  const selectEdges = useCallback((edgeIds: string[]) => {\n    if (rendererRef.current) {\n      rendererRef.current.selectEdges(edgeIds);\n    }\n  }, []);\n\n  const clearSelection = useCallback(() => {\n    if (rendererRef.current) {\n      rendererRef.current.clearSelection();\n    }\n  }, []);\n\n  const getSelection = useCallback(() => {\n    return rendererRef.current ? rendererRef.current.getSelection() : { nodes: [], edges: [] };\n  }, []);\n\n  // 暴露方法给父组件（通过ref）\n  // 注意：这里需要配合forwardRef使用，暂时注释掉\n  // React.useImperativeHandle(ref, () => ({\n  //   zoomToFit,\n  //   zoomToNodes,\n  //   centerView,\n  //   selectNodes,\n  //   selectEdges,\n  //   clearSelection,\n  //   getSelection,\n  //   getRenderer: () => rendererRef.current\n  // }))\n\n  // 渲染加载状态\n  if (loading) {\n    return (\n      <div\n        className={`flex items-center justify-center bg-gray-50 ${className}`}\n        style={{ width, height }}\n      >\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n          <p className=\"text-gray-600\">加载知识图谱中...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // 渲染错误状态\n  if (error) {\n    return (\n      <div\n        className={`flex items-center justify-center bg-red-50 border border-red-200 rounded-lg ${className}`}\n        style={{ width, height }}\n      >\n        <div className=\"text-center\">\n          <div className=\"text-red-600 mb-2\">\n            <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n            </svg>\n          </div>\n          <p className=\"text-red-800 font-medium\">加载图谱失败</p>\n          <p className=\"text-red-600 text-sm mt-1\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  // 渲染空状态\n  if (!currentGraph || !currentVisualizationData) {\n    return (\n      <div\n        className={`flex items-center justify-center bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg ${className}`}\n        style={{ width, height }}\n      >\n        <div className=\"text-center\">\n          <div className=\"text-gray-400 mb-2\">\n            <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n            </svg>\n          </div>\n          <p className=\"text-gray-600 font-medium\">暂无图谱数据</p>\n          <p className=\"text-gray-500 text-sm mt-1\">请选择一个知识图谱进行查看</p>\n        </div>\n      </div>\n    );\n  }\n\n  // 主要渲染\n  return (\n    <div className={`relative ${className}`}>\n      {/* 图谱容器 */}\n      <div\n        ref={containerRef}\n        className=\"w-full h-full border border-gray-200 rounded-lg overflow-hidden bg-white\"\n        style={{ width, height }}\n      />\n\n      {/* 图谱信息覆盖层 */}\n      <div className=\"absolute top-4 left-4 bg-white bg-opacity-90 rounded-lg px-3 py-2 shadow-sm\">\n        <h3 className=\"font-medium text-gray-900 text-sm\">{currentGraph.name}</h3>\n        <div className=\"flex items-center space-x-4 text-xs text-gray-600 mt-1\">\n          <span>{currentGraph.nodes.length} 节点</span>\n          <span>{currentGraph.edges.length} 边</span>\n          {currentSelection.nodes.length > 0 && (\n            <span className=\"text-blue-600\">\n              已选择 {currentSelection.nodes.length} 节点\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* 控制按钮 */}\n      <div className=\"absolute top-4 right-4 flex flex-col space-y-2\">\n        <button\n          onClick={() => zoomToFit()}\n          className=\"p-2 bg-white bg-opacity-90 rounded-lg shadow-sm hover:bg-opacity-100 transition-all\"\n          title=\"适应窗口\"\n        >\n          <svg className=\"w-4 h-4 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4\" />\n          </svg>\n        </button>\n\n        <button\n          onClick={() => centerView()}\n          className=\"p-2 bg-white bg-opacity-90 rounded-lg shadow-sm hover:bg-opacity-100 transition-all\"\n          title=\"居中显示\"\n        >\n          <svg className=\"w-4 h-4 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\" />\n          </svg>\n        </button>\n\n        {currentSelection.nodes.length > 0 && (\n          <button\n            onClick={() => zoomToNodes(currentSelection.nodes)}\n            className=\"p-2 bg-blue-600 bg-opacity-90 rounded-lg shadow-sm hover:bg-opacity-100 transition-all text-white\"\n            title=\"缩放到选中节点\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n            </svg>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default KnowledgeGraphViewer;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/graph/d3-utils.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":365,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":378,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * D3.js 工具函数\n * 提供图谱可视化的基础工具和辅助函数\n */\nimport * as d3 from 'd3';\n\nimport { GraphNode, GraphEdge } from '@/shared/types/knowledgeGraph';\n\nimport {\n  D3Node,\n  D3Edge,\n  GraphVisualizationData,\n  VisualConfig,\n  DEFAULT_VISUAL_CONFIG,\n} from './types';\n\n/**\n * 将图谱数据转换为D3可视化数据\n */\nexport function transformGraphData(\n  nodes: GraphNode[],\n  edges: GraphEdge[],\n  visualConfig: VisualConfig = DEFAULT_VISUAL_CONFIG,\n): GraphVisualizationData {\n  // 转换节点数据\n  const d3Nodes: D3Node[] = nodes.map(node => ({\n    id: node.id,\n    label: node.label,\n    type: node.type,\n    level: node.level,\n    x: node.position?.x || 0,\n    y: node.position?.y || 0,\n    fx: null,\n    fy: null,\n    // 可视化属性\n    radius: calculateNodeRadius(node, visualConfig),\n    color: getNodeColor(node.type, visualConfig),\n    strokeColor: visualConfig.colors.nodes[node.type] || '#666',\n    strokeWidth: visualConfig.node.strokeWidth,\n    opacity: visualConfig.node.opacity,\n    // 原始数据\n    originalData: node,\n    // 状态\n    selected: false,\n    hovered: false,\n    dragging: false,\n  }));\n\n  // 创建节点ID映射\n  const nodeMap = new Map(d3Nodes.map(node => [node.id, node]));\n\n  // 转换边数据\n  const d3Links: D3Edge[] = edges\n    .filter(edge => nodeMap.has(edge.source) && nodeMap.has(edge.target))\n    .map(edge => ({\n      id: edge.id,\n      source: nodeMap.get(edge.source)!,\n      target: nodeMap.get(edge.target)!,\n      type: edge.type,\n      weight: edge.weight,\n      // 可视化属性\n      color: getEdgeColor(edge.type, visualConfig),\n      strokeWidth: calculateEdgeWidth(edge, visualConfig),\n      strokeDasharray: getEdgeStyle(edge.type),\n      opacity: visualConfig.edge.opacity,\n      // 原始数据\n      originalData: edge,\n      // 状态\n      selected: false,\n      hovered: false,\n    }));\n\n  // 计算边界\n  const bounds = calculateBounds(d3Nodes);\n\n  return {\n    nodes: d3Nodes,\n    links: d3Links,\n    bounds,\n  };\n}\n\n/**\n * 计算节点半径\n */\nfunction calculateNodeRadius(node: GraphNode, config: VisualConfig): number {\n  const { defaultRadius, minRadius, maxRadius } = config.node;\n\n  // 基于节点类型和重要性计算半径\n  let radius = defaultRadius;\n\n  // 根据节点类型调整\n  switch (node.type) {\n    case 'subject':\n      radius = defaultRadius * 1.5;\n      break;\n    case 'chapter':\n      radius = defaultRadius * 1.2;\n      break;\n    case 'topic':\n      radius = defaultRadius;\n      break;\n    case 'concept':\n      radius = defaultRadius * 0.8;\n      break;\n    case 'skill':\n      radius = defaultRadius * 0.9;\n      break;\n  }\n\n  // 根据重要性调整\n  if (node.metadata.importance) {\n    radius *= (0.7 + node.metadata.importance * 0.6);\n  }\n\n  // 根据作品数量调整\n  if (node.metadata.workCount > 0) {\n    radius *= (1 + Math.log(node.metadata.workCount + 1) * 0.1);\n  }\n\n  return Math.max(minRadius, Math.min(maxRadius, radius));\n}\n\n/**\n * 获取节点颜色\n */\nfunction getNodeColor(nodeType: string, config: VisualConfig): string {\n  return config.colors.nodes[nodeType] || '#666666';\n}\n\n/**\n * 计算边宽度\n */\nfunction calculateEdgeWidth(edge: GraphEdge, config: VisualConfig): number {\n  const { defaultStrokeWidth, minStrokeWidth, maxStrokeWidth } = config.edge;\n\n  let width = defaultStrokeWidth;\n\n  // 根据权重调整\n  width *= edge.weight;\n\n  // 根据关系强度调整\n  if (edge.metadata?.strength) {\n    width *= edge.metadata.strength;\n  }\n\n  return Math.max(minStrokeWidth, Math.min(maxStrokeWidth, width));\n}\n\n/**\n * 获取边颜色\n */\nfunction getEdgeColor(edgeType: string, config: VisualConfig): string {\n  return config.colors.edges[edgeType] || '#999999';\n}\n\n/**\n * 获取边样式\n */\nfunction getEdgeStyle(edgeType: string): string | undefined {\n  switch (edgeType) {\n    case 'prerequisite':\n      return '5,5';\n    case 'related':\n      return '2,3';\n    default:\n      return undefined;\n  }\n}\n\n/**\n * 计算图谱边界\n */\nfunction calculateBounds(nodes: D3Node[]): { minX: number; maxX: number; minY: number; maxY: number } {\n  if (nodes.length === 0) {\n    return { minX: 0, maxX: 0, minY: 0, maxY: 0 };\n  }\n\n  let minX = Infinity, maxX = -Infinity;\n  let minY = Infinity, maxY = -Infinity;\n\n  nodes.forEach(node => {\n    const x = node.x || 0;\n    const y = node.y || 0;\n    const r = node.radius;\n\n    minX = Math.min(minX, x - r);\n    maxX = Math.max(maxX, x + r);\n    minY = Math.min(minY, y - r);\n    maxY = Math.max(maxY, y + r);\n  });\n\n  return { minX, maxX, minY, maxY };\n}\n\n/**\n * 创建缩放行为\n */\nexport function createZoomBehavior(\n  svg: d3.Selection<SVGSVGElement, unknown, null, undefined>,\n  container: d3.Selection<SVGGElement, unknown, null, undefined>,\n  scaleExtent: [number, number] = [0.1, 3],\n) {\n  const zoom = d3.zoom<SVGSVGElement, unknown>()\n    .scaleExtent(scaleExtent)\n    .on('zoom', (event) => {\n      container.attr('transform', event.transform);\n    });\n\n  svg.call(zoom);\n\n  return zoom;\n}\n\n/**\n * 创建拖拽行为\n */\nexport function createDragBehavior(\n  simulation: d3.Simulation<D3Node, D3Edge>,\n  onDragStart?: (node: D3Node) => void,\n  onDrag?: (node: D3Node) => void,\n  onDragEnd?: (node: D3Node) => void,\n) {\n  return d3.drag<SVGCircleElement, D3Node>()\n    .on('start', (event, d) => {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n      d.dragging = true;\n      onDragStart && onDragStart(d);\n    })\n    .on('drag', (event, d) => {\n      d.fx = event.x;\n      d.fy = event.y;\n      onDrag && onDrag(d);\n    })\n    .on('end', (event, d) => {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n      d.dragging = false;\n      onDragEnd && onDragEnd(d);\n    });\n}\n\n/**\n * 创建工具提示\n */\nexport function createTooltip() {\n  return d3.select('body')\n    .append('div')\n    .attr('class', 'graph-tooltip')\n    .style('position', 'absolute')\n    .style('visibility', 'hidden')\n    .style('background', 'rgba(0, 0, 0, 0.8)')\n    .style('color', 'white')\n    .style('padding', '8px 12px')\n    .style('border-radius', '4px')\n    .style('font-size', '12px')\n    .style('pointer-events', 'none')\n    .style('z-index', '1000');\n}\n\n/**\n * 显示工具提示\n */\nexport function showTooltip(\n  tooltip: d3.Selection<HTMLDivElement, unknown, HTMLElement, any>,\n  content: string,\n  event: MouseEvent,\n  offset: { x: number; y: number } = { x: 10, y: -10 },\n) {\n  tooltip\n    .style('visibility', 'visible')\n    .html(content)\n    .style('left', (event.pageX + offset.x) + 'px')\n    .style('top', (event.pageY + offset.y) + 'px');\n}\n\n/**\n * 隐藏工具提示\n */\nexport function hideTooltip(\n  tooltip: d3.Selection<HTMLDivElement, unknown, HTMLElement, any>,\n) {\n  tooltip.style('visibility', 'hidden');\n}\n\n/**\n * 计算两点之间的距离\n */\nexport function distance(p1: { x: number; y: number }, p2: { x: number; y: number }): number {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n/**\n * 限制点在矩形范围内\n */\nexport function constrainToRect(\n  point: { x: number; y: number },\n  rect: { x: number; y: number; width: number; height: number },\n): { x: number; y: number } {\n  return {\n    x: Math.max(rect.x, Math.min(rect.x + rect.width, point.x)),\n    y: Math.max(rect.y, Math.min(rect.y + rect.height, point.y)),\n  };\n}\n\n/**\n * 将点对齐到网格\n */\nexport function snapToGrid(\n  point: { x: number; y: number },\n  gridSize: number,\n): { x: number; y: number } {\n  return {\n    x: Math.round(point.x / gridSize) * gridSize,\n    y: Math.round(point.y / gridSize) * gridSize,\n  };\n}\n\n/**\n * 插值颜色\n */\nexport function interpolateColor(color1: string, color2: string, t: number): string {\n  const interpolator = d3.interpolate(color1, color2);\n  return interpolator(t);\n}\n\n/**\n * 生成节点工具提示内容\n */\nexport function generateNodeTooltip(node: D3Node): string {\n  const { originalData } = node;\n  return `\n    <div>\n      <strong>${node.label}</strong><br/>\n      类型: ${node.type}<br/>\n      层级: ${node.level}<br/>\n      作品数: ${originalData.metadata.workCount}<br/>\n      ${originalData.metadata.description ? `描述: ${originalData.metadata.description}` : ''}\n    </div>\n  `;\n}\n\n/**\n * 生成边工具提示内容\n */\nexport function generateEdgeTooltip(edge: D3Edge): string {\n  const sourceLabel = typeof edge.source === 'object' ? edge.source.label : edge.source;\n  const targetLabel = typeof edge.target === 'object' ? edge.target.label : edge.target;\n\n  return `\n    <div>\n      <strong>${sourceLabel} → ${targetLabel}</strong><br/>\n      关系: ${edge.type}<br/>\n      权重: ${edge.weight}<br/>\n      ${edge.originalData.metadata?.description ? `描述: ${edge.originalData.metadata.description}` : ''}\n    </div>\n  `;\n}\n\nexport default {\n  transformGraphData,\n  createZoomBehavior,\n  createDragBehavior,\n  createTooltip,\n  showTooltip,\n  hideTooltip,\n  distance,\n  constrainToRect,\n  snapToGrid,\n  interpolateColor,\n  generateNodeTooltip,\n  generateEdgeTooltip,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/graph/data-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/graph/graph-renderer.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":26},{"ruleId":"max-len","severity":1,"message":"This line has a length of 121. Maximum allowed is 120.","line":298,"column":1,"nodeType":"Program","messageId":"max","endLine":298,"endColumn":122}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as d3 from 'd3';\n\n// D3.js v6+ 类型兼容性修复\ntype D3Selection = d3.Selection<any, any, any, any>;\ntype D3Simulation = d3.Simulation<any, any>;\ntype D3Force = d3.Force<any, any>;\ntype D3Zoom = d3.ZoomBehavior<any, any>;\ntype D3Drag = d3.DragBehavior<any, any, any>;\n\n\nimport { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force';\n\ninterface GraphNode extends SimulationNodeDatum {\n  id: string;\n  label: string;\n  radius?: number;\n  color?: string;\n}\n\ninterface GraphLink extends SimulationLinkDatum<GraphNode> {\n  source: string | GraphNode;\n  target: string | GraphNode;\n}\n\n/**\n * D3.js 图谱渲染器\n * 核心渲染引擎，负责图谱的可视化渲染和交互\n */\n\nimport {\n  createZoomBehavior,\n  createDragBehavior,\n  createTooltip,\n  showTooltip,\n  hideTooltip,\n  generateNodeTooltip,\n  generateEdgeTooltip,\n} from './d3-utils';\nimport {\n  GraphRenderer,\n  GraphRendererConfig,\n  GraphVisualizationData,\n  LayoutConfig,\n  VisualConfig,\n  InteractionConfig,\n  D3Node,\n  D3Edge,\n  GraphEvent,\n  GraphEventType,\n  GraphEventHandler,\n  DEFAULT_LAYOUT_CONFIG,\n  DEFAULT_VISUAL_CONFIG,\n  DEFAULT_INTERACTION_CONFIG,\n} from './types';\n\nexport class D3GraphRenderer implements GraphRenderer {\n  private container: HTMLElement;\n  private svg: d3.Selection<SVGSVGElement, unknown, null, undefined>;\n  private g: d3.Selection<SVGGElement, unknown, null, undefined>;\n  private simulation: d3.Simulation<D3Node, D3Edge>;\n  private tooltip: d3.Selection<HTMLDivElement, unknown, HTMLElement, any>;\n  private zoom: d3.ZoomBehavior<SVGSVGElement, unknown>;\n\n  private layoutConfig: LayoutConfig;\n  private visualConfig: VisualConfig;\n  private interactionConfig: InteractionConfig;\n  private data: GraphVisualizationData;\n\n  private eventHandlers: Map<GraphEventType, GraphEventHandler[]> = new Map();\n  private selection: { nodes: string[]; edges: string[] } = { nodes: [], edges: [] };\n\n  // DOM元素选择器\n  private nodeSelection!: d3.Selection<SVGCircleElement, D3Node, SVGGElement, unknown>;\n  private linkSelection!: d3.Selection<SVGLineElement, D3Edge, SVGGElement, unknown>;\n  private labelSelection!: d3.Selection<SVGTextElement, D3Node, SVGGElement, unknown>;\n\n  constructor(config: GraphRendererConfig) {\n    this.container = config.container;\n    this.layoutConfig = { ...DEFAULT_LAYOUT_CONFIG, ...config.layout };\n    this.visualConfig = { ...DEFAULT_VISUAL_CONFIG, ...config.visual };\n    this.interactionConfig = { ...DEFAULT_INTERACTION_CONFIG, ...config.interaction };\n    this.data = config.data;\n\n    this.initializeSVG();\n    this.initializeSimulation();\n    this.initializeTooltip();\n    this.render(this.data);\n  }\n\n  /**\n   * 初始化SVG容器\n   */\n  private initializeSVG(): void {\n    // 清理现有内容\n    d3.select<any, any>(this.container).selectAll('*').remove();\n\n    // 创建SVG\n    this.svg = d3.select<any, any>(this.container)\n      .append('svg')\n      .attr('width', this.layoutConfig.width)\n      .attr('height', this.layoutConfig.height)\n      .style('background-color', this.visualConfig.colors.background);\n\n    // 创建主容器组\n    this.g = this.svg.append('g')\n      .attr('class', 'graph-container');\n\n    // 创建图层\n    this.g.append('g').attr('class', 'links');\n    this.g.append('g').attr('class', 'nodes');\n    this.g.append('g').attr('class', 'labels');\n\n    // 初始化缩放行为\n    if (this.interactionConfig.zoom.enabled) {\n      this.zoom = createZoomBehavior(\n        this.svg,\n        this.g,\n        this.interactionConfig.zoom.scaleExtent,\n      );\n    }\n\n    // 绑定画布点击事件\n    this.svg.on('click', (event: any) => {\n      if (event.target === event.currentTarget) {\n        this.clearSelection();\n        this.emit({\n          type: 'canvas:click',\n          target: null,\n          originalEvent: event,\n          position: { x: d3.pointer(event)[0], y: d3.pointer(event)[1] },\n        });\n      }\n    });\n  }\n\n  /**\n   * 初始化力导向仿真\n   */\n  private initializeSimulation(): void {\n    this.simulation = d3.forceSimulation<D3Node>()\n      .force('link', d3.forceLink<D3Node, D3Edge>()\n        .id(d => d.id)\n        .distance(this.layoutConfig.options.linkDistance || 80)\n        .strength(this.layoutConfig.options.linkStrength || 0.5),\n      )\n      .force('charge', d3.forceManyBody()\n        .strength(this.layoutConfig.options.chargeStrength || -300),\n      )\n      .force('center', d3.forceCenter(\n        this.layoutConfig.width / 2,\n        this.layoutConfig.height / 2,\n      ).strength(this.layoutConfig.options.centerStrength || 0.1))\n      .force('collision', d3.forceCollide<D3Node>()\n        .radius(d => d.radius + (this.layoutConfig.options.collisionRadius || 5)),\n      )\n      .alpha(this.layoutConfig.options.alpha || 0.3)\n      .alphaDecay(this.layoutConfig.options.alphaDecay || 0.02)\n      .velocityDecay(this.layoutConfig.options.velocityDecay || 0.4);\n\n    // 绑定tick事件\n    this.simulation.on('tick', () => this.tick());\n  }\n\n  /**\n   * 初始化工具提示\n   */\n  private initializeTooltip(): void {\n    if (this.interactionConfig.tooltip.enabled) {\n      this.tooltip = createTooltip();\n    }\n  }\n\n  /**\n   * 渲染图谱\n   */\n  render(data: GraphVisualizationData): void {\n    this.data = data;\n    this.updateLinks();\n    this.updateNodes();\n    this.updateLabels();\n    this.updateSimulation();\n  }\n\n  /**\n   * 更新图谱数据\n   */\n  update(data: GraphVisualizationData): void {\n    this.render(data);\n  }\n\n  /**\n   * 清空图谱\n   */\n  clear(): void {\n    this.g.selectAll('.links line').remove();\n    this.g.selectAll('.nodes circle').remove();\n    this.g.selectAll('.labels text').remove();\n    this.simulation.nodes([]);\n    this.simulation.force('link', d3.forceLink([]));\n  }\n\n  /**\n   * 更新连线\n   */\n  private updateLinks(): void {\n    const linkSelection = this.g\n      .select<SVGGElement>('g.links')\n      .selectAll<SVGLineElement, D3Edge>('line')\n      .data(this.data.links, (d: D3Edge) => d.id);\n\n    // 移除旧连线\n    linkSelection.exit().remove();\n\n    // 添加新连线\n    const linkEnter = linkSelection.enter()\n      .append('line')\n      .attr('class', 'link')\n      .style('cursor', 'pointer');\n\n    // 合并选择\n    this.linkSelection = linkEnter.merge(linkSelection) as d3.Selection<SVGLineElement, D3Edge, SVGGElement, unknown>;\n\n    // 设置连线样式\n    this.linkSelection\n      .attr('stroke', d => d.color)\n      .attr('stroke-width', d => d.strokeWidth)\n      .attr('stroke-opacity', d => d.opacity)\n      .attr('stroke-dasharray', d => d.strokeDasharray || null);\n\n    // 绑定连线事件\n    this.bindLinkEvents();\n  }\n\n  /**\n   * 更新节点\n   */\n  private updateNodes(): void {\n    const nodeSelection = this.g\n      .select<SVGGElement>('g.nodes')\n      .selectAll<SVGCircleElement, D3Node>('circle')\n      .data(this.data.nodes, (d: D3Node) => d.id);\n\n    // 移除旧节点\n    nodeSelection.exit().remove();\n\n    // 添加新节点\n    const nodeEnter = nodeSelection.enter()\n      .append('circle')\n      .attr('class', 'node')\n      .style('cursor', 'pointer');\n\n    // 合并选择\n    this.nodeSelection = nodeEnter.merge(nodeSelection) as d3.Selection<SVGCircleElement, D3Node, SVGGElement, unknown>;\n\n    // 设置节点样式\n    this.nodeSelection\n      .attr('r', d => d.radius)\n      .attr('fill', d => d.color)\n      .attr('stroke', d => d.strokeColor)\n      .attr('stroke-width', d => d.strokeWidth)\n      .attr('fill-opacity', d => d.opacity);\n\n    // 绑定拖拽行为\n    if (this.interactionConfig.drag.enabled) {\n      const drag = createDragBehavior(\n        this.simulation,\n        (node) => this.onNodeDragStart(node),\n        (node) => this.onNodeDrag(node),\n        (node) => this.onNodeDragEnd(node),\n      );\n      this.nodeSelection.call(drag);\n    }\n\n    // 绑定节点事件\n    this.bindNodeEvents();\n  }\n\n  /**\n   * 更新标签\n   */\n  private updateLabels(): void {\n    const labelSelection = this.g\n      .select<SVGGElement>('g.labels')\n      .selectAll<SVGTextElement, D3Node>('text')\n      .data(this.data.nodes, (d: D3Node) => d.id);\n\n    // 移除旧标签\n    labelSelection.exit().remove();\n\n    // 添加新标签\n    const labelEnter = labelSelection.enter()\n      .append('text')\n      .attr('class', 'label')\n      .style('pointer-events', 'none')\n      .style('user-select', 'none');\n\n    // 合并选择\n    this.labelSelection = labelEnter.merge(labelSelection) as d3.Selection<SVGTextElement, D3Node, SVGGElement, unknown>;\n\n    // 设置标签样式和内容\n    this.labelSelection\n      .text(d => d.label)\n      .attr('text-anchor', 'middle')\n      .attr('dominant-baseline', 'central')\n      .style('font-size', '12px')\n      .style('font-family', 'Arial, sans-serif')\n      .style('fill', '#333')\n      .style('font-weight', 'bold');\n  }\n\n  /**\n   * 更新仿真\n   */\n  private updateSimulation(): void {\n    this.simulation.nodes(this.data.nodes);\n\n    const linkForce = this.simulation.force('link') as d3.ForceLink<D3Node, D3Edge>;\n    if (linkForce) {\n      linkForce.links(this.data.links);\n    }\n\n    this.simulation.alpha(0.3).restart();\n  }\n\n  /**\n   * 仿真tick事件处理\n   */\n  private tick(): void {\n    // 更新连线位置\n    this.linkSelection\n      .attr('x1', d => (d.source as D3Node).x!)\n      .attr('y1', d => (d.source as D3Node).y!)\n      .attr('x2', d => (d.target as D3Node).x!)\n      .attr('y2', d => (d.target as D3Node).y!);\n\n    // 更新节点位置\n    this.nodeSelection\n      .attr('cx', d => d.x!)\n      .attr('cy', d => d.y!);\n\n    // 更新标签位置\n    this.labelSelection\n      .attr('x', d => d.x!)\n      .attr('y', d => d.y!);\n  }\n\n  /**\n   * 绑定节点事件\n   */\n  private bindNodeEvents(): void {\n    this.nodeSelection\n      .on('click', (event: any, d) => {\n        event.stopPropagation();\n        this.handleNodeClick(event, d);\n      })\n      .on('dblclick', (event: any, d) => {\n        event.stopPropagation();\n        this.emit({\n          type: 'node:dblclick',\n          target: d,\n          originalEvent: event,\n          position: { x: d3.pointer(event)[0], y: d3.pointer(event)[1] },\n        });\n      })\n      .on('mouseenter', (event: any, d) => {\n        this.handleNodeMouseEnter(event, d);\n      })\n      .on('mouseleave', (event: any, d) => {\n        this.handleNodeMouseLeave(event, d);\n      });\n  }\n\n  /**\n   * 绑定连线事件\n   */\n  private bindLinkEvents(): void {\n    this.linkSelection\n      .on('click', (event: any, d) => {\n        event.stopPropagation();\n        this.handleEdgeClick(event, d);\n      })\n      .on('mouseenter', (event: any, d) => {\n        this.handleEdgeMouseEnter(event, d);\n      })\n      .on('mouseleave', (event: any, d) => {\n        this.handleEdgeMouseLeave(event, d);\n      });\n  }\n\n  /**\n   * 处理节点点击\n   */\n  private handleNodeClick(event: MouseEvent, node: D3Node): void {\n    if (this.interactionConfig.selection.enabled) {\n      if (this.interactionConfig.selection.multiSelect && event.ctrlKey) {\n        // 多选模式\n        this.toggleNodeSelection(node.id);\n      } else {\n        // 单选模式\n        this.selectNodes([node.id]);\n      }\n    }\n\n    this.emit({\n      type: 'node:click',\n      target: node,\n      originalEvent: event,\n      position: { x: d3.pointer(event)[0], y: d3.pointer(event)[1] },\n    });\n  }\n\n  /**\n   * 处理节点鼠标进入\n   */\n  private handleNodeMouseEnter(event: MouseEvent, node: D3Node): void {\n    node.hovered = true;\n    this.updateNodeStyle(node);\n\n    if (this.tooltip && this.interactionConfig.tooltip.enabled) {\n      const content = generateNodeTooltip(node);\n      showTooltip(this.tooltip, content, event, this.interactionConfig.tooltip.offset);\n    }\n\n    this.emit({\n      type: 'node:mouseenter',\n      target: node,\n      originalEvent: event,\n      position: { x: d3.pointer(event)[0], y: d3.pointer(event)[1] },\n    });\n  }\n\n  /**\n   * 处理节点鼠标离开\n   */\n  private handleNodeMouseLeave(event: MouseEvent, node: D3Node): void {\n    node.hovered = false;\n    this.updateNodeStyle(node);\n\n    if (this.tooltip) {\n      hideTooltip(this.tooltip);\n    }\n\n    this.emit({\n      type: 'node:mouseleave',\n      target: node,\n      originalEvent: event,\n      position: { x: d3.pointer(event)[0], y: d3.pointer(event)[1] },\n    });\n  }\n\n  /**\n   * 处理边点击\n   */\n  private handleEdgeClick(event: MouseEvent, edge: D3Edge): void {\n    if (this.interactionConfig.selection.enabled) {\n      if (this.interactionConfig.selection.multiSelect && event.ctrlKey) {\n        this.toggleEdgeSelection(edge.id);\n      } else {\n        this.selectEdges([edge.id]);\n      }\n    }\n\n    this.emit({\n      type: 'edge:click',\n      target: edge,\n      originalEvent: event,\n      position: { x: d3.pointer(event)[0], y: d3.pointer(event)[1] },\n    });\n  }\n\n  /**\n   * 处理边鼠标进入\n   */\n  private handleEdgeMouseEnter(event: MouseEvent, edge: D3Edge): void {\n    edge.hovered = true;\n    this.updateEdgeStyle(edge);\n\n    if (this.tooltip && this.interactionConfig.tooltip.enabled) {\n      const content = generateEdgeTooltip(edge);\n      showTooltip(this.tooltip, content, event, this.interactionConfig.tooltip.offset);\n    }\n\n    this.emit({\n      type: 'edge:mouseenter',\n      target: edge,\n      originalEvent: event,\n      position: { x: d3.pointer(event)[0], y: d3.pointer(event)[1] },\n    });\n  }\n\n  /**\n   * 处理边鼠标离开\n   */\n  private handleEdgeMouseLeave(event: MouseEvent, edge: D3Edge): void {\n    edge.hovered = false;\n    this.updateEdgeStyle(edge);\n\n    if (this.tooltip) {\n      hideTooltip(this.tooltip);\n    }\n\n    this.emit({\n      type: 'edge:mouseleave',\n      target: edge,\n      originalEvent: event,\n      position: { x: d3.pointer(event)[0], y: d3.pointer(event)[1] },\n    });\n  }\n\n  /**\n   * 节点拖拽开始\n   */\n  private onNodeDragStart(node: D3Node): void {\n    this.emit({\n      type: 'node:dragstart',\n      target: node,\n      originalEvent: event,\n      position: { x: node.x!, y: node.y! },\n    });\n  }\n\n  /**\n   * 节点拖拽中\n   */\n  private onNodeDrag(node: D3Node): void {\n    this.emit({\n      type: 'node:drag',\n      target: node,\n      originalEvent: event,\n      position: { x: node.x!, y: node.y! },\n    });\n  }\n\n  /**\n   * 节点拖拽结束\n   */\n  private onNodeDragEnd(node: D3Node): void {\n    this.emit({\n      type: 'node:dragend',\n      target: node,\n      originalEvent: event,\n      position: { x: node.x!, y: node.y! },\n    });\n  }\n\n  /**\n   * 更新节点样式\n   */\n  private updateNodeStyle(node: D3Node): void {\n    const nodeElement = this.nodeSelection.filter(d => d.id === node.id);\n\n    let opacity = this.visualConfig.node.opacity;\n    if (node.selected) {\n      opacity = this.visualConfig.node.selectedOpacity;\n    } else if (node.hovered) {\n      opacity = this.visualConfig.node.hoveredOpacity;\n    }\n\n    nodeElement\n      .transition()\n      .duration(this.visualConfig.animation.duration)\n      .attr('fill-opacity', opacity)\n      .attr('stroke', node.selected ? this.visualConfig.colors.selection : node.strokeColor)\n      .attr('stroke-width', node.selected ? node.strokeWidth * 2 : node.strokeWidth);\n  }\n\n  /**\n   * 更新边样式\n   */\n  private updateEdgeStyle(edge: D3Edge): void {\n    const edgeElement = this.linkSelection.filter(d => d.id === edge.id);\n\n    let opacity = this.visualConfig.edge.opacity;\n    if (edge.selected) {\n      opacity = this.visualConfig.edge.selectedOpacity;\n    } else if (edge.hovered) {\n      opacity = this.visualConfig.edge.hoveredOpacity;\n    }\n\n    edgeElement\n      .transition()\n      .duration(this.visualConfig.animation.duration)\n      .attr('stroke-opacity', opacity)\n      .attr('stroke', edge.selected ? this.visualConfig.colors.selection : edge.color)\n      .attr('stroke-width', edge.selected ? edge.strokeWidth * 1.5 : edge.strokeWidth);\n  }\n\n  /**\n   * 切换节点选择状态\n   */\n  private toggleNodeSelection(nodeId: string): void {\n    const index = this.selection.nodes.indexOf(nodeId);\n    if (index > -1) {\n      this.selection.nodes.splice(index, 1);\n    } else {\n      this.selection.nodes.push(nodeId);\n    }\n    this.updateSelectionStyles();\n    this.emitSelectionChange();\n  }\n\n  /**\n   * 切换边选择状态\n   */\n  private toggleEdgeSelection(edgeId: string): void {\n    const index = this.selection.edges.indexOf(edgeId);\n    if (index > -1) {\n      this.selection.edges.splice(index, 1);\n    } else {\n      this.selection.edges.push(edgeId);\n    }\n    this.updateSelectionStyles();\n    this.emitSelectionChange();\n  }\n\n  /**\n   * 更新选择样式\n   */\n  private updateSelectionStyles(): void {\n    // 更新节点选择状态\n    this.data.nodes.forEach(node => {\n      node.selected = this.selection.nodes.includes(node.id);\n      this.updateNodeStyle(node);\n    });\n\n    // 更新边选择状态\n    this.data.links.forEach(edge => {\n      edge.selected = this.selection.edges.includes(edge.id);\n      this.updateEdgeStyle(edge);\n    });\n  }\n\n  /**\n   * 发出选择变化事件\n   */\n  private emitSelectionChange(): void {\n    this.emit({\n      type: 'selection:change',\n      target: null,\n      originalEvent: new Event('selection:change'),\n      position: { x: 0, y: 0 },\n      data: { ...this.selection },\n    });\n  }\n\n  // 公共接口实现\n\n  setLayout(config: LayoutConfig): void {\n    this.layoutConfig = { ...this.layoutConfig, ...config };\n    this.applyLayout();\n  }\n\n  applyLayout(): void {\n    // 重新配置仿真力\n    const linkForce = this.simulation.force('link') as d3.ForceLink<D3Node, D3Edge>;\n    if (linkForce) {\n      linkForce\n        .distance(this.layoutConfig.options.linkDistance || 80)\n        .strength(this.layoutConfig.options.linkStrength || 0.5);\n    }\n\n    const chargeForce = this.simulation.force('charge') as d3.ForceManyBody<D3Node>;\n    if (chargeForce) {\n      chargeForce.strength(this.layoutConfig.options.chargeStrength || -300);\n    }\n\n    const centerForce = this.simulation.force('center') as d3.ForceCenter<D3Node>;\n    if (centerForce) {\n      centerForce.strength(this.layoutConfig.options.centerStrength || 0.1);\n    }\n\n    this.simulation\n      .alpha(this.layoutConfig.options.alpha || 0.3)\n      .alphaDecay(this.layoutConfig.options.alphaDecay || 0.02)\n      .velocityDecay(this.layoutConfig.options.velocityDecay || 0.4)\n      .restart();\n  }\n\n  setVisualConfig(config: VisualConfig): void {\n    this.visualConfig = { ...this.visualConfig, ...config };\n    this.updateNodeStyles([]);\n    this.updateEdgeStyles([]);\n  }\n\n  updateNodeStyles(nodeIds: string[]): void {\n    const targetNodes = nodeIds.length > 0\n      ? this.data.nodes.filter(node => nodeIds.includes(node.id))\n      : this.data.nodes;\n\n    targetNodes.forEach(node => this.updateNodeStyle(node));\n  }\n\n  updateEdgeStyles(edgeIds: string[]): void {\n    const targetEdges = edgeIds.length > 0\n      ? this.data.links.filter(edge => edgeIds.includes(edge.id))\n      : this.data.links;\n\n    targetEdges.forEach(edge => this.updateEdgeStyle(edge));\n  }\n\n  enableInteraction(config: InteractionConfig): void {\n    this.interactionConfig = { ...this.interactionConfig, ...config };\n    // 重新初始化交互\n    this.initializeSVG();\n    this.render(this.data);\n  }\n\n  disableInteraction(): void {\n    this.interactionConfig = {\n      zoom: { enabled: false, scaleExtent: [1, 1] },\n      drag: { enabled: false, constrainToCanvas: false, snapToGrid: false, gridSize: 20 },\n      selection: { enabled: false, multiSelect: false, selectOnClick: false },\n      tooltip: { enabled: false, delay: 0, offset: { x: 0, y: 0 } },\n    };\n  }\n\n  selectNodes(nodeIds: string[]): void {\n    this.selection.nodes = [...nodeIds];\n    this.updateSelectionStyles();\n    this.emitSelectionChange();\n  }\n\n  selectEdges(edgeIds: string[]): void {\n    this.selection.edges = [...edgeIds];\n    this.updateSelectionStyles();\n    this.emitSelectionChange();\n  }\n\n  clearSelection(): void {\n    this.selection = { nodes: [], edges: [] };\n    this.updateSelectionStyles();\n    this.emitSelectionChange();\n  }\n\n  getSelection(): { nodes: string[]; edges: string[] } {\n    return { ...this.selection };\n  }\n\n  zoomToFit(padding: number = 50): void {\n    if (!this.zoom) return;\n\n    const bounds = this.data.bounds;\n    const width = this.layoutConfig.width;\n    const height = this.layoutConfig.height;\n\n    const dx = bounds.maxX - bounds.minX;\n    const dy = bounds.maxY - bounds.minY;\n    const x = (bounds.minX + bounds.maxX) / 2;\n    const y = (bounds.minY + bounds.maxY) / 2;\n\n    const scale = Math.min(\n      (width - padding * 2) / dx,\n      (height - padding * 2) / dy,\n    );\n\n    const transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(scale)\n      .translate(-x, -y);\n\n    this.svg.transition()\n      .duration(750)\n      .call(this.zoom.transform, transform);\n  }\n\n  zoomToNodes(nodeIds: string[], padding: number = 50): void {\n    if (!this.zoom || nodeIds.length === 0) return;\n\n    const targetNodes = this.data.nodes.filter(node => nodeIds.includes(node.id));\n    if (targetNodes.length === 0) return;\n\n    let minX = Infinity, maxX = -Infinity;\n    let minY = Infinity, maxY = -Infinity;\n\n    targetNodes.forEach(node => {\n      const x = node.x || 0;\n      const y = node.y || 0;\n      const r = node.radius;\n\n      minX = Math.min(minX, x - r);\n      maxX = Math.max(maxX, x + r);\n      minY = Math.min(minY, y - r);\n      maxY = Math.max(maxY, y + r);\n    });\n\n    const width = this.layoutConfig.width;\n    const height = this.layoutConfig.height;\n    const dx = maxX - minX;\n    const dy = maxY - minY;\n    const x = (minX + maxX) / 2;\n    const y = (minY + maxY) / 2;\n\n    const scale = Math.min(\n      (width - padding * 2) / dx,\n      (height - padding * 2) / dy,\n    );\n\n    const transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(scale)\n      .translate(-x, -y);\n\n    this.svg.transition()\n      .duration(750)\n      .call(this.zoom.transform, transform);\n  }\n\n  centerView(): void {\n    if (!this.zoom) return;\n\n    const transform = d3.zoomIdentity\n      .translate(this.layoutConfig.width / 2, this.layoutConfig.height / 2)\n      .scale(1);\n\n    this.svg.transition()\n      .duration(500)\n      .call(this.zoom.transform, transform);\n  }\n\n  on(event: GraphEventType, handler: GraphEventHandler): void {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, []);\n    }\n    this.eventHandlers.get(event)!.push(handler);\n  }\n\n  off(event: GraphEventType, handler?: GraphEventHandler): void {\n    if (!this.eventHandlers.has(event)) return;\n\n    if (handler) {\n      const handlers = this.eventHandlers.get(event)!;\n      const index = handlers.indexOf(handler);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    } else {\n      this.eventHandlers.set(event, []);\n    }\n  }\n\n  emit(event: GraphEvent): void {\n    const handlers = this.eventHandlers.get(event.type);\n    if (handlers) {\n      handlers.forEach(handler => handler(event));\n    }\n  }\n\n  destroy(): void {\n    // 停止仿真\n    this.simulation.stop();\n\n    // 移除工具提示\n    if (this.tooltip) {\n      this.tooltip.remove();\n    }\n\n    // 清理事件处理器\n    this.eventHandlers.clear();\n\n    // 清理DOM\n    d3.select<any, any>(this.container).selectAll('*').remove();\n  }\n}\n\nexport default D3GraphRenderer;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/graph/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/graph/interaction-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/graph/layout-algorithms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/graph/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/monitoring/error-tracker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/monitoring/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/monitoring/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/monitoring/performance-monitor.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 152. Maximum allowed is 120.","line":141,"column":1,"nodeType":"Program","messageId":"max","endLine":141,"endColumn":153}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type MonitoringMetadataValue =\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | Date\n  | MonitoringMetadataValue[]\n  | { [key: string]: MonitoringMetadataValue };\n\nexport type MonitoringMetadata = Record<string, MonitoringMetadataValue>;\n\nexport interface PerformanceMetric {\n  name: string;\n  value: number;\n  unit?: string;\n  timestamp: Date;\n  tags?: Record<string, string>;\n}\n\nexport interface UserAction {\n  action: string;\n  type?: string;\n  target?: string;\n  timestamp: Date;\n  metadata?: MonitoringMetadata;\n  userId?: string;\n  sessionId?: string;\n  duration?: number;\n}\n\nexport interface BusinessMetric {\n  name: string;\n  value: number;\n  period?: string;\n  comparison?: {\n    previous: number;\n    change: number;\n  };\n  metric?: string;\n  category?: string;\n  tags?: Record<string, string>;\n  timestamp: Date;\n}\n\nexport interface PerformanceAlert {\n  id: string;\n  type: 'error' | 'warning' | 'info' | 'high' | 'low';\n  message: string;\n  timestamp: Date;\n  resolved?: boolean;\n  metric?: string;\n  value?: number;\n  threshold?: { min?: number; max?: number };\n  severity?: 'low' | 'medium' | 'high' | 'critical';\n  tags?: Record<string, string>;\n}\n\n\nexport type Alert = PerformanceAlert;\n\n\n/**\n * 应用性能监控系统\n * 实现APM功能，监控应用性能指标\n */\n\ntype InternalPerformanceMetric = PerformanceMetric;\ntype InternalUserAction = UserAction;\ntype InternalBusinessMetric = BusinessMetric;\n\ninterface MetricSummary {\n  count: number;\n  avg: number;\n  min: number;\n  max: number;\n  latest: number;\n}\n\nexport type PerformanceSummary = Record<string, MetricSummary>;\n\nexport interface PerformanceReport {\n  metrics: PerformanceMetric[];\n  userActions: UserAction[];\n  businessMetrics: BusinessMetric[];\n  summary: PerformanceSummary;\n}\n\ninterface PerformanceWithMemory extends Performance {\n  memory?: {\n    usedJSHeapSize: number;\n    totalJSHeapSize: number;\n    jsHeapSizeLimit: number;\n  };\n}\n\ninterface NavigatorConnection {\n  downlink?: number;\n  effectiveType?: string;\n}\n\ntype NavigatorWithConnection = Navigator & {\n  connection?: NavigatorConnection;\n};\n\n/**\n * 性能监控管理器\n */\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metrics: InternalPerformanceMetric[] = [];\n  private userActions: InternalUserAction[] = [];\n  private businessMetrics: InternalBusinessMetric[] = [];\n  private observers: PerformanceObserver[] = [];\n  private isEnabled = true;\n\n  private constructor() {\n    this.initializeObservers();\n    this.startMetricsCollection();\n  }\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  /**\n   * 初始化性能观察器\n   */\n  private initializeObservers() {\n    if (typeof window === 'undefined') return;\n\n    try {\n      // 监控导航性能\n      const navObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          if (entry.entryType === 'navigation') {\n            const navEntry = entry as PerformanceNavigationTiming;\n            const navigationStart = (navEntry as PerformanceNavigationTiming & { navigationStart?: number }).navigationStart ?? navEntry.startTime ?? 0;\n            const loadEventEnd = navEntry.loadEventEnd ?? navEntry.responseEnd ?? navigationStart;\n            const domContentLoadedEnd = navEntry.domContentLoadedEventEnd ?? loadEventEnd;\n            const responseStart = navEntry.responseStart ?? navigationStart;\n\n            this.recordMetric('page_load_time', loadEventEnd - navigationStart, undefined, 'ms');\n            this.recordMetric('dom_content_loaded', domContentLoadedEnd - navigationStart, undefined, 'ms');\n            this.recordMetric('first_paint', responseStart - navigationStart, undefined, 'ms');\n          }\n        }\n      });\n      navObserver.observe({ entryTypes: ['navigation'] });\n      this.observers.push(navObserver);\n\n      // 监控资源加载性能\n      const resourceObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          if (entry.entryType === 'resource') {\n            const resourceEntry = entry as PerformanceResourceTiming;\n            this.recordMetric('resource_load_time', resourceEntry.responseEnd - resourceEntry.startTime, {\n              resource_name: resourceEntry.name,\n              resource_type: resourceEntry.initiatorType,\n            });\n          }\n        }\n      });\n      resourceObserver.observe({ entryTypes: ['resource'] });\n      this.observers.push(resourceObserver);\n\n      // 监控用户交互性能\n      const measureObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          if (entry.entryType === 'measure') {\n            this.recordMetric('custom_measure', entry.duration, {\n              measure_name: entry.name,\n            });\n          }\n        }\n      });\n      measureObserver.observe({ entryTypes: ['measure'] });\n      this.observers.push(measureObserver);\n\n    } catch (error) {\n      console.warn('Performance Observer not supported:', error);\n    }\n  }\n\n  /**\n   * 开始指标收集\n   */\n  private startMetricsCollection() {\n    if (typeof window === 'undefined') return;\n\n    // 收集内存使用情况\n    setInterval(() => {\n      const memoryInfo = (performance as PerformanceWithMemory).memory;\n      if (memoryInfo) {\n        this.recordMetric('memory_used', memoryInfo.usedJSHeapSize);\n        this.recordMetric('memory_total', memoryInfo.totalJSHeapSize);\n        this.recordMetric('memory_limit', memoryInfo.jsHeapSizeLimit);\n      }\n    }, 30000); // 每30秒收集一次\n\n    // 收集网络连接信息\n    if ('connection' in navigator) {\n      const connection = (navigator as NavigatorWithConnection).connection;\n      if (connection) {\n        this.recordMetric('network_downlink', connection.downlink ?? 0, {\n          connection_type: connection.effectiveType ?? 'unknown',\n        });\n      }\n    }\n  }\n\n  /**\n   * 记录性能指标\n   */\n  recordMetric(name: string, value: number, tags?: Record<string, string>, unit?: string) {\n    if (!this.isEnabled) return;\n\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      timestamp: new Date(),\n      tags,\n      unit,\n    };\n\n    this.metrics.push(metric);\n    this.sendMetricToBackend(metric);\n\n    // 保持内存中的指标数量在合理范围内\n    if (this.metrics.length > 1000) {\n      this.metrics = this.metrics.slice(-500);\n    }\n  }\n\n  /**\n   * 记录用户行为\n   */\n  recordUserAction(action: string, metadata?: MonitoringMetadata, userId?: string) {\n    if (!this.isEnabled) return;\n\n    const userAction: UserAction = {\n      action,\n      type: action,\n      userId,\n      sessionId: this.getSessionId(),\n      timestamp: new Date(),\n      metadata,\n    };\n\n    this.userActions.push(userAction);\n    this.sendUserActionToBackend(userAction);\n\n    // 保持内存中的用户行为数量在合理范围内\n    if (this.userActions.length > 500) {\n      this.userActions = this.userActions.slice(-250);\n    }\n  }\n\n  /**\n   * 记录业务指标\n   */\n  recordBusinessMetric(metric: string, value: number, category: string, tags?: Record<string, string>) {\n    if (!this.isEnabled) return;\n\n    const businessMetric: BusinessMetric = {\n      name: metric,\n      metric,\n      value,\n      timestamp: new Date(),\n      category,\n      tags,\n    };\n\n    this.businessMetrics.push(businessMetric);\n    this.sendBusinessMetricToBackend(businessMetric);\n\n    // 保持内存中的业务指标数量在合理范围内\n    if (this.businessMetrics.length > 500) {\n      this.businessMetrics = this.businessMetrics.slice(-250);\n    }\n  }\n\n  /**\n   * 测量函数执行时间\n   */\n  async measureFunction<T>(name: string, fn: () => Promise<T> | T): Promise<T> {\n    const startTime = performance.now();\n\n    try {\n      const result = await fn();\n      const duration = performance.now() - startTime;\n      this.recordMetric('function_execution_time', duration, { function_name: name }, 'ms');\n      return result;\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      this.recordMetric('function_execution_time', duration, {\n        function_name: name,\n        error: 'true',\n      }, 'ms');\n      throw error;\n    }\n  }\n\n  /**\n   * 测量API调用性能\n   */\n  async measureApiCall<T>(url: string, fn: () => Promise<T>): Promise<T> {\n    const startTime = performance.now();\n\n    try {\n      const result = await fn();\n      const duration = performance.now() - startTime;\n      this.recordMetric('api_call_duration', duration, {\n        url: this.sanitizeUrl(url),\n        status: 'success',\n      }, 'ms');\n      return result;\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      this.recordMetric('api_call_duration', duration, {\n        url: this.sanitizeUrl(url),\n        status: 'error',\n      }, 'ms');\n      throw error;\n    }\n  }\n\n  /**\n   * 获取性能报告\n   */\n  getPerformanceReport(): PerformanceReport {\n    return {\n      metrics: this.metrics.slice(-100), // 最近100个指标\n      userActions: this.userActions.slice(-50), // 最近50个用户行为\n      businessMetrics: this.businessMetrics.slice(-50), // 最近50个业务指标\n      summary: this.generateSummary(),\n    };\n  }\n\n  /**\n   * 生成性能摘要\n   */\n  private generateSummary(): PerformanceSummary {\n    const recentMetrics = this.metrics.slice(-100);\n    const summary: PerformanceSummary = {};\n\n    // 按指标名称分组并计算统计信息\n    const metricGroups = recentMetrics.reduce((groups, metric) => {\n      if (!groups[metric.name]) {\n        groups[metric.name] = [];\n      }\n      groups[metric.name].push(metric.value);\n      return groups;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(metricGroups).forEach(([name, values]) => {\n      const safeValues = values.length > 0 ? values : [0];\n      summary[name] = {\n        count: values.length,\n        avg: safeValues.reduce((sum, val) => sum + val, 0) / safeValues.length,\n        min: Math.min(...safeValues),\n        max: Math.max(...safeValues),\n        latest: safeValues[safeValues.length - 1],\n      };\n    });\n\n    return summary;\n  }\n\n  /**\n   * 发送指标到后端\n   */\n  private async sendMetricToBackend(metric: PerformanceMetric) {\n    try {\n      // 批量发送以减少网络请求\n      if (this.metrics.length % 10 === 0) {\n        await fetch('/api/monitoring/metrics', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            metrics: this.metrics.slice(-10),\n          }),\n        });\n      }\n    } catch (error) {\n      console.warn('Failed to send metrics to backend:', error);\n    }\n  }\n\n  /**\n   * 发送用户行为到后端\n   */\n  private async sendUserActionToBackend(userAction: UserAction) {\n    try {\n      await fetch('/api/monitoring/user-actions', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userAction),\n      });\n    } catch (error) {\n      console.warn('Failed to send user action to backend:', error);\n    }\n  }\n\n  /**\n   * 发送业务指标到后端\n   */\n  private async sendBusinessMetricToBackend(businessMetric: BusinessMetric) {\n    try {\n      await fetch('/api/monitoring/business-metrics', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(businessMetric),\n      });\n    } catch (error) {\n      console.warn('Failed to send business metric to backend:', error);\n    }\n  }\n\n  /**\n   * 获取会话ID\n   */\n  private getSessionId(): string {\n    if (typeof window === 'undefined') return 'server-session';\n\n    let sessionId = sessionStorage.getItem('monitoring_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('monitoring_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  /**\n   * 清理URL中的敏感信息\n   */\n  private sanitizeUrl(url: string): string {\n    try {\n      const urlObj = new URL(url, window.location.origin);\n      // 移除查询参数中的敏感信息\n      urlObj.searchParams.delete('token');\n      urlObj.searchParams.delete('key');\n      urlObj.searchParams.delete('password');\n      return urlObj.pathname;\n    } catch {\n      return url.split('?')[0]; // 简单处理，只保留路径部分\n    }\n  }\n\n  /**\n   * 启用/禁用监控\n   */\n  setEnabled(enabled: boolean) {\n    this.isEnabled = enabled;\n  }\n\n  /**\n   * 清理资源\n   */\n  destroy() {\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers = [];\n    this.metrics = [];\n    this.userActions = [];\n    this.businessMetrics = [];\n  }\n}\n\n/**\n * 异常检测和告警\n */\nexport class AlertManager {\n  private static instance: AlertManager;\n  private thresholds: Record<string, { min?: number; max?: number; }> = {};\n  private alertCallbacks: Array<(alert: PerformanceAlert) => void> = [];\n\n  private constructor() {\n    this.setupDefaultThresholds();\n  }\n\n  static getInstance(): AlertManager {\n    if (!AlertManager.instance) {\n      AlertManager.instance = new AlertManager();\n    }\n    return AlertManager.instance;\n  }\n\n  /**\n   * 设置默认阈值\n   */\n  private setupDefaultThresholds() {\n    this.thresholds = {\n      'page_load_time': { max: 3000 }, // 页面加载时间不超过3秒\n      'api_call_duration': { max: 5000 }, // API调用不超过5秒\n      'memory_used': { max: 100 * 1024 * 1024 }, // 内存使用不超过100MB\n      'error_rate': { max: 0.05 }, // 错误率不超过5%\n    };\n  }\n\n  /**\n   * 设置阈值\n   */\n  setThreshold(metric: string, threshold: { min?: number; max?: number; }) {\n    this.thresholds[metric] = threshold;\n  }\n\n  /**\n   * 检查指标是否超出阈值\n   */\n  checkMetric(name: string, value: number) {\n    const threshold = this.thresholds[name];\n    if (!threshold) return;\n\n    let alertTriggered = false;\n    let alertType: 'high' | 'low' = 'high';\n    let message = '';\n\n    if (threshold.max !== undefined && value > threshold.max) {\n      alertTriggered = true;\n      alertType = 'high';\n      message = `${name} 超出最大阈值: ${value} > ${threshold.max}`;\n    } else if (threshold.min !== undefined && value < threshold.min) {\n      alertTriggered = true;\n      alertType = 'low';\n      message = `${name} 低于最小阈值: ${value} < ${threshold.min}`;\n    }\n\n    if (alertTriggered) {\n      const alert: PerformanceAlert = {\n        id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        metric: name,\n        value,\n        threshold: threshold,\n        type: alertType,\n        message,\n        timestamp: new Date(),\n        severity: this.calculateSeverity(name, value, threshold),\n        resolved: false,\n      };\n\n      this.triggerAlert(alert);\n    }\n  }\n\n  /**\n   * 计算告警严重程度\n   */\n  private calculateSeverity(name: string, value: number, threshold: { min?: number; max?: number; }): 'low' | 'medium' | 'high' | 'critical' {\n    if (threshold.max !== undefined) {\n      const ratio = value / threshold.max;\n      if (ratio > 2) return 'critical';\n      if (ratio > 1.5) return 'high';\n      if (ratio > 1.2) return 'medium';\n      return 'low';\n    }\n\n    if (threshold.min !== undefined) {\n      const ratio = threshold.min / value;\n      if (ratio > 2) return 'critical';\n      if (ratio > 1.5) return 'high';\n      if (ratio > 1.2) return 'medium';\n      return 'low';\n    }\n\n    return 'low';\n  }\n\n  /**\n   * 触发告警\n   */\n  private triggerAlert(alert: PerformanceAlert) {\n    console.warn('Performance Alert:', alert);\n\n    // 调用所有注册的告警回调\n    this.alertCallbacks.forEach(callback => {\n      try {\n        callback(alert);\n      } catch (error) {\n        console.error('Alert callback error:', error);\n      }\n    });\n\n    // 发送告警到后端\n    this.sendAlertToBackend(alert);\n  }\n\n  /**\n   * 注册告警回调\n   */\n  onAlert(callback: (alert: PerformanceAlert) => void) {\n    this.alertCallbacks.push(callback);\n  }\n\n  /**\n   * 发送告警到后端\n   */\n  private async sendAlertToBackend(alert: PerformanceAlert) {\n    try {\n      await fetch('/api/monitoring/alerts', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(alert),\n      });\n    } catch (error) {\n      console.warn('Failed to send alert to backend:', error);\n    }\n  }\n}\n\n// 导出单例实例\nexport const performanceMonitor = PerformanceMonitor.getInstance();\nexport const alertManager = AlertManager.getInstance();\n\n// 自动监控常见指标\nif (typeof window !== 'undefined') {\n  // 监控页面可见性变化\n  document.addEventListener('visibilitychange', () => {\n    performanceMonitor.recordUserAction('page_visibility_change', {\n      hidden: document.hidden,\n    });\n  });\n\n  // 监控页面卸载\n  window.addEventListener('beforeunload', () => {\n    performanceMonitor.recordUserAction('page_unload');\n  });\n\n  // 监控错误\n  window.addEventListener('error', (event) => {\n    performanceMonitor.recordUserAction('javascript_error', {\n      message: event.message,\n      filename: event.filename,\n      lineno: event.lineno,\n      colno: event.colno,\n    });\n  });\n\n  // 监控未处理的Promise拒绝\n  window.addEventListener('unhandledrejection', (event) => {\n    performanceMonitor.recordUserAction('unhandled_promise_rejection', {\n      reason: event.reason?.toString(),\n    });\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/monitoring/user-analytics.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 126. Maximum allowed is 120.","line":163,"column":1,"nodeType":"Program","messageId":"max","endLine":163,"endColumn":127}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport interface UserEvent {\n  userId?: string;\n  eventType: string;\n  timestamp: number;\n  properties?: Record<string, any>;\n}\n\nexport interface UserSession {\n  sessionId: string;\n  userId?: string;\n  startTime: number;\n  endTime?: number;\n  events: UserEvent[];\n}\n\nexport interface FunnelStep {\n  name: string;\n  count: number;\n  conversionRate: number;\n}\n\nexport interface Funnel {\n  name: string;\n  steps: FunnelStep[];\n  totalConversion: number;\n}\n\n\n/**\n * 用户行为分析系统\n * 追踪和分析用户行为数据\n */\n\ninterface TrackedEvent {\n  eventType: string;\n  userId?: string;\n  sessionId: string;\n  timestamp: number;\n  properties: Record<string, any>;\n  context: {\n    page: string;\n    userAgent: string;\n    referrer: string;\n    viewport: { width: number; height: number };\n    device: 'desktop' | 'tablet' | 'mobile';\n  };\n}\n\ninterface TrackedSession {\n  sessionId: string;\n  userId?: string;\n  startTime: number;\n  lastActivity: number;\n  events: TrackedEvent[];\n  duration: number;\n  pageViews: number;\n  isActive: boolean;\n}\n\ninterface TrackedFunnelStep {\n  name: string;\n  condition: (event: TrackedEvent) => boolean;\n  required: boolean;\n}\n\ninterface TrackedFunnel {\n  name: string;\n  steps: TrackedFunnelStep[];\n}\n\n/**\n * 用户分析管理器\n */\nexport class UserAnalytics {\n  private static instance: UserAnalytics;\n  private events: TrackedEvent[] = [];\n  private currentSession: TrackedSession | null = null;\n  private funnels: Map<string, TrackedFunnel> = new Map();\n  private isEnabled = true;\n  private batchSize = 10;\n  private flushInterval = 30000; // 30秒\n  private flushTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    this.initializeSession();\n    this.setupEventListeners();\n    this.startPeriodicFlush();\n    this.setupDefaultFunnels();\n  }\n\n  static getInstance(): UserAnalytics {\n    if (!UserAnalytics.instance) {\n      UserAnalytics.instance = new UserAnalytics();\n    }\n    return UserAnalytics.instance;\n  }\n\n  /**\n   * 初始化用户会话\n   */\n  private initializeSession() {\n    if (typeof window === 'undefined') return;\n\n    const sessionId = this.getOrCreateSessionId();\n    const userId = this.getUserId();\n\n    this.currentSession = {\n      sessionId,\n      userId,\n      startTime: Date.now(),\n      lastActivity: Date.now(),\n      events: [],\n      duration: 0,\n      pageViews: 0,\n      isActive: true,\n    };\n\n    // 记录会话开始事件\n    this.track('session_start', {\n      sessionId,\n      userId,\n      timestamp: Date.now(),\n    });\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  private setupEventListeners() {\n    if (typeof window === 'undefined') return;\n\n    // 页面浏览事件\n    this.track('page_view', {\n      page: window.location.pathname,\n      title: document.title,\n      referrer: document.referrer,\n    });\n\n    // 点击事件\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      this.track('click', {\n        element: target.tagName.toLowerCase(),\n        id: target.id,\n        className: target.className,\n        text: target.textContent?.slice(0, 100),\n        x: event.clientX,\n        y: event.clientY,\n      });\n    });\n\n    // 滚动事件（节流）\n    let scrollTimeout: NodeJS.Timeout;\n    document.addEventListener('scroll', () => {\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        this.track('scroll', {\n          scrollY: window.scrollY,\n          scrollX: window.scrollX,\n          documentHeight: document.documentElement.scrollHeight,\n          viewportHeight: window.innerHeight,\n          scrollPercentage: Math.round((window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100),\n        });\n      }, 1000);\n    });\n\n    // 表单提交事件\n    document.addEventListener('submit', (event) => {\n      const form = event.target as HTMLFormElement;\n      this.track('form_submit', {\n        formId: form.id,\n        formAction: form.action,\n        formMethod: form.method,\n        fieldCount: form.elements.length,\n      });\n    });\n\n    // 输入事件（节流）\n    let inputTimeout: NodeJS.Timeout;\n    document.addEventListener('input', (event) => {\n      clearTimeout(inputTimeout);\n      inputTimeout = setTimeout(() => {\n        const target = event.target as HTMLInputElement;\n        this.track('input', {\n          inputType: target.type,\n          inputId: target.id,\n          inputName: target.name,\n          valueLength: target.value.length,\n        });\n      }, 2000);\n    });\n\n    // 页面可见性变化\n    document.addEventListener('visibilitychange', () => {\n      this.track('visibility_change', {\n        hidden: document.hidden,\n        visibilityState: document.visibilityState,\n      });\n\n      if (this.currentSession) {\n        this.currentSession.isActive = !document.hidden;\n        this.currentSession.lastActivity = Date.now();\n      }\n    });\n\n    // 页面卸载\n    window.addEventListener('beforeunload', () => {\n      this.track('page_unload', {\n        timeOnPage: Date.now() - (this.currentSession?.startTime || Date.now()),\n      });\n      this.flushEvents();\n    });\n\n    // 错误事件\n    window.addEventListener('error', (event) => {\n      this.track('javascript_error', {\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        stack: event.error?.stack,\n      });\n    });\n  }\n\n  /**\n   * 追踪用户事件\n   */\n  track(eventType: string, properties: Record<string, any> = {}, userId?: string) {\n    if (!this.isEnabled) return;\n\n    const event: TrackedEvent = {\n      eventType,\n      userId: userId || this.getUserId(),\n      sessionId: this.getSessionId(),\n      timestamp: Date.now(),\n      properties,\n      context: this.getContext(),\n    };\n\n    this.events.push(event);\n\n    // 更新当前会话\n    if (this.currentSession) {\n      this.currentSession.events.push(event);\n      this.currentSession.lastActivity = Date.now();\n      this.currentSession.duration = Date.now() - this.currentSession.startTime;\n\n      if (eventType === 'page_view') {\n        this.currentSession.pageViews++;\n      }\n    }\n\n    // 检查漏斗转化\n    this.checkFunnelConversion(event);\n\n    // 批量发送事件\n    if (this.events.length >= this.batchSize) {\n      this.flushEvents();\n    }\n  }\n\n  /**\n   * 设置用户ID\n   */\n  setUserId(userId: string) {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('analytics_user_id', userId);\n    }\n\n    if (this.currentSession) {\n      this.currentSession.userId = userId;\n    }\n\n    this.track('user_identify', { userId });\n  }\n\n  /**\n   * 设置用户属性\n   */\n  setUserProperties(properties: Record<string, any>) {\n    this.track('user_properties_update', properties);\n  }\n\n  /**\n   * 追踪页面浏览\n   */\n  trackPageView(page?: string, title?: string) {\n    this.track('page_view', {\n      page: page || (typeof window !== 'undefined' ? window.location.pathname : ''),\n      title: title || (typeof document !== 'undefined' ? document.title : ''),\n      referrer: typeof document !== 'undefined' ? document.referrer : '',\n    });\n  }\n\n  /**\n   * 追踪转化事件\n   */\n  trackConversion(conversionType: string, value?: number, currency?: string) {\n    this.track('conversion', {\n      conversionType,\n      value,\n      currency: currency || 'CNY',\n    });\n  }\n\n  /**\n   * 追踪业务事件\n   */\n  trackBusinessEvent(eventName: string, properties: Record<string, any> = {}) {\n    this.track('business_event', {\n      eventName,\n      ...properties,\n    });\n  }\n\n  /**\n   * 定义转化漏斗\n   */\n  defineFunnel(name: string, steps: TrackedFunnelStep[]) {\n    this.funnels.set(name, { name, steps });\n  }\n\n  /**\n   * 设置默认漏斗\n   */\n  private setupDefaultFunnels() {\n    // 用户注册漏斗\n    this.defineFunnel('user_registration', [\n      {\n        name: 'visit_signup_page',\n        condition: (event) => event.eventType === 'page_view' && event.properties.page?.includes('/register'),\n        required: true,\n      },\n      {\n        name: 'start_registration',\n        condition: (event) => event.eventType === 'click' && event.properties.id?.includes('register'),\n        required: true,\n      },\n      {\n        name: 'complete_registration',\n        condition: (event) => event.eventType === 'form_submit' && event.properties.formAction?.includes('/register'),\n        required: true,\n      },\n    ]);\n\n    // 作品创建漏斗\n    this.defineFunnel('work_creation', [\n      {\n        name: 'visit_create_page',\n        condition: (event) => event.eventType === 'page_view' && event.properties.page?.includes('/create'),\n        required: true,\n      },\n      {\n        name: 'start_editing',\n        condition: (event) => event.eventType === 'input' && event.properties.inputId?.includes('work'),\n        required: true,\n      },\n      {\n        name: 'publish_work',\n        condition: (event) => event.eventType === 'click' && event.properties.text?.includes('发布'),\n        required: true,\n      },\n    ]);\n\n    // 订阅转化漏斗\n    this.defineFunnel('subscription_conversion', [\n      {\n        name: 'view_pricing',\n        condition: (event) => event.eventType === 'page_view' && event.properties.page?.includes('/pricing'),\n        required: true,\n      },\n      {\n        name: 'select_plan',\n        condition: (event) => event.eventType === 'click' && event.properties.className?.includes('plan'),\n        required: true,\n      },\n      {\n        name: 'complete_payment',\n        condition: (event) => event.eventType === 'conversion' && event.properties.conversionType === 'subscription',\n        required: true,\n      },\n    ]);\n  }\n\n  /**\n   * 检查漏斗转化\n   */\n  private checkFunnelConversion(event: TrackedEvent) {\n    this.funnels.forEach((funnel) => {\n      const userEvents = this.currentSession?.events || [];\n      const completedSteps: string[] = [];\n\n      funnel.steps.forEach((step) => {\n        const stepCompleted = userEvents.some((userEvent) => step.condition(userEvent));\n        if (stepCompleted) {\n          completedSteps.push(step.name);\n        }\n      });\n\n      // 如果完成了所有步骤，记录转化事件\n      if (completedSteps.length === funnel.steps.length) {\n        this.track('funnel_conversion', {\n          funnelName: funnel.name,\n          completedSteps,\n          conversionTime: Date.now() - (this.currentSession?.startTime || Date.now()),\n        });\n      }\n    });\n  }\n\n  /**\n   * 获取用户行为报告\n   */\n  getAnalyticsReport() {\n    return {\n      session: this.currentSession,\n      recentEvents: this.events.slice(-50),\n      eventSummary: this.generateEventSummary(),\n      funnelAnalysis: this.generateFunnelAnalysis(),\n    };\n  }\n\n  /**\n   * 生成事件摘要\n   */\n  private generateEventSummary() {\n    const eventCounts: Record<string, number> = {};\n    const recentEvents = this.events.slice(-100);\n\n    recentEvents.forEach((event) => {\n      eventCounts[event.eventType] = (eventCounts[event.eventType] || 0) + 1;\n    });\n\n    return {\n      totalEvents: recentEvents.length,\n      eventTypes: eventCounts,\n      sessionDuration: this.currentSession?.duration || 0,\n      pageViews: this.currentSession?.pageViews || 0,\n    };\n  }\n\n  /**\n   * 生成漏斗分析\n   */\n  private generateFunnelAnalysis() {\n    const analysis: Record<string, any> = {};\n\n    this.funnels.forEach((funnel, name) => {\n      const userEvents = this.currentSession?.events || [];\n      const stepCompletion: Record<string, boolean> = {};\n\n      funnel.steps.forEach((step) => {\n        stepCompletion[step.name] = userEvents.some((event) => step.condition(event));\n      });\n\n      analysis[name] = {\n        steps: stepCompletion,\n        completionRate: Object.values(stepCompletion).filter(Boolean).length / funnel.steps.length,\n      };\n    });\n\n    return analysis;\n  }\n\n  /**\n   * 刷新事件到后端\n   */\n  private async flushEvents() {\n    if (this.events.length === 0) return;\n\n    const eventsToSend = [...this.events];\n    this.events = [];\n\n    try {\n      await fetch('/api/analytics/events', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          events: eventsToSend,\n          session: this.currentSession,\n        }),\n      });\n    } catch (error) {\n      console.warn('Failed to send analytics events:', error);\n      // 如果发送失败，将事件重新加入队列\n      this.events.unshift(...eventsToSend);\n    }\n  }\n\n  /**\n   * 开始定期刷新\n   */\n  private startPeriodicFlush() {\n    this.flushTimer = setInterval(() => {\n      this.flushEvents();\n    }, this.flushInterval);\n  }\n\n  /**\n   * 获取或创建会话ID\n   */\n  private getOrCreateSessionId(): string {\n    if (typeof window === 'undefined') return 'server-session';\n\n    let sessionId = sessionStorage.getItem('analytics_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('analytics_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  /**\n   * 获取会话ID\n   */\n  private getSessionId(): string {\n    return this.currentSession?.sessionId || this.getOrCreateSessionId();\n  }\n\n  /**\n   * 获取用户ID\n   */\n  private getUserId(): string | undefined {\n    if (typeof window === 'undefined') return undefined;\n    return localStorage.getItem('analytics_user_id') || undefined;\n  }\n\n  /**\n   * 获取上下文信息\n   */\n  private getContext() {\n    if (typeof window === 'undefined') {\n      return {\n        page: '',\n        userAgent: '',\n        referrer: '',\n        viewport: { width: 0, height: 0 },\n        device: 'desktop' as const,\n      };\n    }\n\n    const viewport = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n\n    const device = this.detectDevice(viewport.width);\n\n    return {\n      page: window.location.pathname,\n      userAgent: navigator.userAgent,\n      referrer: document.referrer,\n      viewport,\n      device,\n    };\n  }\n\n  /**\n   * 检测设备类型\n   */\n  private detectDevice(width: number): 'desktop' | 'tablet' | 'mobile' {\n    if (width < 768) return 'mobile';\n    if (width < 1024) return 'tablet';\n    return 'desktop';\n  }\n\n  /**\n   * 启用/禁用分析\n   */\n  setEnabled(enabled: boolean) {\n    this.isEnabled = enabled;\n  }\n\n  /**\n   * 清理资源\n   */\n  destroy() {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n      this.flushTimer = null;\n    }\n    this.flushEvents();\n    this.events = [];\n    this.currentSession = null;\n  }\n}\n\n// 导出单例实例\nexport const userAnalytics = UserAnalytics.getInstance();\n\n// 自动初始化\nif (typeof window !== 'undefined') {\n  // 页面加载完成后开始追踪\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      userAnalytics.trackPageView();\n    });\n  } else {\n    userAnalytics.trackPageView();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/performance/app-performance-init.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`react` import should occur before import of `./cache-strategy`","line":476,"column":1,"nodeType":"ImportDeclaration","endLine":476,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 应用性能初始化\n * 在应用启动时初始化所有性能优化功能\n */\n\nimport { CacheFactory, MemoryCache, RedisCache } from './cache-strategy';\nimport { QueryOptimizer, ConnectionPoolManager } from './database-optimization';\n\nimport { PerformanceOptimizer, defaultPerformanceConfig } from './index';\n\n/**\n * 性能初始化配置\n */\ninterface PerformanceInitConfig {\n  // 缓存配置\n  cache: {\n    memory: {\n      enabled: boolean;\n      maxSize: number;\n      ttl: number;\n    };\n    redis: {\n      enabled: boolean;\n      url?: string;\n      keyPrefix: string;\n    };\n  };\n\n  // 数据库优化配置\n  database: {\n    queryOptimization: boolean;\n    connectionPooling: boolean;\n    slowQueryThreshold: number;\n  };\n\n  // 监控配置\n  monitoring: {\n    enabled: boolean;\n    reportInterval: number;\n    logLevel: 'error' | 'warn' | 'info' | 'debug';\n  };\n}\n\n/**\n * 默认性能初始化配置\n */\nconst defaultInitConfig: PerformanceInitConfig = {\n  cache: {\n    memory: {\n      enabled: true,\n      maxSize: 100 * 1024 * 1024, // 100MB\n      ttl: 3600, // 1小时\n    },\n    redis: {\n      enabled: process.env.REDIS_URL !== undefined,\n      url: process.env.REDIS_URL,\n      keyPrefix: 'inspi:',\n    },\n  },\n  database: {\n    queryOptimization: true,\n    connectionPooling: true,\n    slowQueryThreshold: 1000, // 1秒\n  },\n  monitoring: {\n    enabled: process.env.NODE_ENV === 'production',\n    reportInterval: 30000, // 30秒\n    logLevel: process.env.NODE_ENV === 'production' ? 'warn' : 'info',\n  },\n};\n\n/**\n * 应用性能管理器\n */\nexport class AppPerformanceManager {\n  private static instance: AppPerformanceManager;\n  private optimizer: PerformanceOptimizer;\n  private queryOptimizer: QueryOptimizer;\n  private connectionPoolManager: ConnectionPoolManager;\n  private initialized = false;\n  private config: PerformanceInitConfig;\n\n  constructor(config: Partial<PerformanceInitConfig> = {}) {\n    this.config = { ...defaultInitConfig, ...config };\n    this.optimizer = PerformanceOptimizer.getInstance(defaultPerformanceConfig);\n    this.queryOptimizer = new QueryOptimizer();\n    this.connectionPoolManager = new ConnectionPoolManager();\n  }\n\n  static getInstance(config?: Partial<PerformanceInitConfig>): AppPerformanceManager {\n    if (!this.instance) {\n      this.instance = new AppPerformanceManager(config);\n    }\n    return this.instance;\n  }\n\n  /**\n   * 初始化应用性能优化\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      console.log('⚠️ Performance manager already initialized');\n      return;\n    }\n\n    console.log('🚀 Initializing application performance optimizations...');\n\n    try {\n      // 1. 初始化缓存系统\n      await this.initializeCaching();\n\n      // 2. 初始化数据库优化\n      await this.initializeDatabaseOptimization();\n\n      // 3. 初始化性能监控\n      await this.initializeMonitoring();\n\n      // 4. 初始化前端性能优化\n      await this.optimizer.initialize();\n\n      // 5. 设置性能报告\n      this.setupPerformanceReporting();\n\n      this.initialized = true;\n      console.log('✅ Application performance optimizations initialized successfully');\n\n      // 输出初始化摘要\n      this.logInitializationSummary();\n    } catch (error) {\n      console.error('❌ Failed to initialize performance optimizations:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 初始化缓存系统\n   */\n  private async initializeCaching(): Promise<void> {\n    console.log('📦 Initializing caching system...');\n\n    // 创建内存缓存\n    if (this.config.cache.memory.enabled) {\n      CacheFactory.createMemoryCache('app-cache', {\n        maxSize: this.config.cache.memory.maxSize,\n        ttl: this.config.cache.memory.ttl,\n        strategy: 'LRU',\n      });\n      console.log('  ✓ Memory cache initialized');\n    }\n\n    // 创建Redis缓存\n    if (this.config.cache.redis.enabled && this.config.cache.redis.url) {\n      try {\n        // 这里需要实际的Redis客户端\n        // const redis = new Redis(this.config.cache.redis.url);\n        // CacheFactory.createRedisCache('redis-cache', redis, {\n        //   ttl: this.config.cache.memory.ttl\n        // }, this.config.cache.redis.keyPrefix);\n        console.log('  ✓ Redis cache configured');\n      } catch (error) {\n        console.warn('  ⚠️ Redis cache initialization failed:', error);\n      }\n    }\n\n    // 创建多层缓存\n    const memoryCache = CacheFactory.getInstance<MemoryCache<any>>('app-cache');\n    const redisCache = CacheFactory.getInstance<RedisCache<any>>('redis-cache');\n\n    if (memoryCache) {\n      CacheFactory.createMultiLevelCache('multi-cache', {\n        maxSize: this.config.cache.memory.maxSize / 2, // L1缓存使用一半内存\n        ttl: this.config.cache.memory.ttl,\n        strategy: 'LRU',\n      }, redisCache);\n      console.log('  ✓ Multi-level cache initialized');\n    }\n  }\n\n  /**\n   * 初始化数据库优化\n   */\n  private async initializeDatabaseOptimization(): Promise<void> {\n    console.log('🗄️ Initializing database optimization...');\n\n    if (this.config.database.queryOptimization) {\n      this.queryOptimizer.setSlowQueryThreshold(this.config.database.slowQueryThreshold);\n      console.log('  ✓ Query optimization enabled');\n    }\n\n    if (this.config.database.connectionPooling) {\n      // 创建默认数据库连接池\n      this.connectionPoolManager.createPool('default', async () => {\n        // 这里需要实际的数据库连接逻辑\n        // return await createDatabaseConnection();\n        return { id: Math.random() }; // 模拟连接\n      }, {\n        min: 2,\n        max: 10,\n        acquireTimeoutMillis: 30000,\n        idleTimeoutMillis: 30000,\n      });\n      console.log('  ✓ Connection pooling configured');\n    }\n  }\n\n  /**\n   * 初始化性能监控\n   */\n  private async initializeMonitoring(): Promise<void> {\n    if (!this.config.monitoring.enabled) {\n      console.log('📊 Performance monitoring disabled');\n      return;\n    }\n\n    console.log('📊 Initializing performance monitoring...');\n\n    // 设置全局错误处理\n    if (typeof window !== 'undefined') {\n      window.addEventListener('error', (event) => {\n        this.logPerformanceEvent('error', {\n          message: event.error?.message,\n          filename: event.filename,\n          lineno: event.lineno,\n          colno: event.colno,\n        });\n      });\n\n      window.addEventListener('unhandledrejection', (event) => {\n        this.logPerformanceEvent('unhandled-rejection', {\n          reason: event.reason,\n        });\n      });\n    }\n\n    // 监控资源加载\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      try {\n        const observer = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry) => {\n            if (entry.duration > 1000) { // 超过1秒的资源\n              this.logPerformanceEvent('slow-resource', {\n                name: entry.name,\n                duration: entry.duration,\n                size: (entry as any).transferSize,\n              });\n            }\n          });\n        });\n\n        observer.observe({ entryTypes: ['resource'] });\n        console.log('  ✓ Resource monitoring enabled');\n      } catch (error) {\n        console.warn('  ⚠️ Resource monitoring not supported:', error);\n      }\n    }\n\n    console.log('  ✓ Performance monitoring initialized');\n  }\n\n  /**\n   * 设置性能报告\n   */\n  private setupPerformanceReporting(): void {\n    if (!this.config.monitoring.enabled) return;\n\n    // 定期生成性能报告\n    setInterval(() => {\n      this.generatePerformanceReport();\n    }, this.config.monitoring.reportInterval);\n\n    console.log('📈 Performance reporting scheduled');\n  }\n\n  /**\n   * 生成性能报告\n   */\n  private generatePerformanceReport(): void {\n    try {\n      const report = {\n        timestamp: new Date().toISOString(),\n        frontend: this.optimizer.getPerformanceReport(),\n        database: this.queryOptimizer.getQueryStats(),\n        connectionPools: this.connectionPoolManager.getAllPoolStats(),\n        cache: this.getCacheStats(),\n      };\n\n      // 在开发环境下输出到控制台\n      if (process.env.NODE_ENV === 'development') {\n        console.log('📊 Performance Report:', report);\n      }\n\n      // 在生产环境下发送到监控服务\n      if (process.env.NODE_ENV === 'production') {\n        this.sendToMonitoringService(report);\n      }\n    } catch (error) {\n      console.error('Failed to generate performance report:', error);\n    }\n  }\n\n  /**\n   * 获取缓存统计\n   */\n  private getCacheStats(): any {\n    const stats: any = {};\n\n    const memoryCache = CacheFactory.getInstance<MemoryCache<any>>('app-cache');\n    if (memoryCache) {\n      stats.memory = memoryCache.getStats();\n    }\n\n    const multiCache = CacheFactory.getInstance<any>('multi-cache');\n    if (multiCache && typeof multiCache.getStats === 'function') {\n      stats.multiLevel = multiCache.getStats();\n    }\n\n    return stats;\n  }\n\n  /**\n   * 发送到监控服务\n   */\n  private async sendToMonitoringService(report: any): Promise<void> {\n    try {\n      // 这里可以集成第三方监控服务\n      await fetch('/api/monitoring/performance', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(report),\n      });\n    } catch (error) {\n      console.error('Failed to send performance report:', error);\n    }\n  }\n\n  /**\n   * 记录性能事件\n   */\n  private logPerformanceEvent(type: string, data: any): void {\n    const event = {\n      type,\n      timestamp: Date.now(),\n      data,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'server',\n      url: typeof window !== 'undefined' ? window.location.href : 'server',\n    };\n\n    if (this.config.monitoring.logLevel === 'debug' ||\n        (this.config.monitoring.logLevel === 'info' && ['error', 'slow-resource'].includes(type))) {\n      console.log(`Performance Event [${type}]:`, event);\n    }\n\n    // 发送到监控服务\n    if (process.env.NODE_ENV === 'production') {\n      this.sendEventToMonitoring(event);\n    }\n  }\n\n  /**\n   * 发送事件到监控服务\n   */\n  private async sendEventToMonitoring(event: any): Promise<void> {\n    try {\n      await fetch('/api/monitoring/events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(event),\n      });\n    } catch (error) {\n      // 静默失败，避免影响应用性能\n    }\n  }\n\n  /**\n   * 输出初始化摘要\n   */\n  private logInitializationSummary(): void {\n    console.log('\\n🎯 Performance Optimization Summary:');\n    console.log(`  Memory Cache: ${this.config.cache.memory.enabled ? '✅' : '❌'}`);\n    console.log(`  Redis Cache: ${this.config.cache.redis.enabled ? '✅' : '❌'}`);\n    console.log(`  Query Optimization: ${this.config.database.queryOptimization ? '✅' : '❌'}`);\n    console.log(`  Connection Pooling: ${this.config.database.connectionPooling ? '✅' : '❌'}`);\n    console.log(`  Performance Monitoring: ${this.config.monitoring.enabled ? '✅' : '❌'}`);\n    console.log(`  Slow Query Threshold: ${this.config.database.slowQueryThreshold}ms`);\n    console.log(`  Report Interval: ${this.config.monitoring.reportInterval / 1000}s\\n`);\n  }\n\n  /**\n   * 获取性能统计\n   */\n  getPerformanceStats(): any {\n    return {\n      initialized: this.initialized,\n      config: this.config,\n      frontend: this.optimizer.getPerformanceReport(),\n      database: this.queryOptimizer.getQueryStats(),\n      connectionPools: this.connectionPoolManager.getAllPoolStats(),\n      cache: this.getCacheStats(),\n    };\n  }\n\n  /**\n   * 清理资源\n   */\n  async cleanup(): Promise<void> {\n    console.log('🧹 Cleaning up performance optimizations...');\n\n    try {\n      await this.optimizer.cleanup();\n      await this.connectionPoolManager.destroyAllPools();\n      CacheFactory.cleanup();\n\n      this.initialized = false;\n      console.log('✅ Performance optimizations cleaned up');\n    } catch (error) {\n      console.error('❌ Error during cleanup:', error);\n    }\n  }\n\n  /**\n   * 热重载配置\n   */\n  async reloadConfig(newConfig: Partial<PerformanceInitConfig>): Promise<void> {\n    console.log('🔄 Reloading performance configuration...');\n\n    this.config = { ...this.config, ...newConfig };\n\n    // 重新初始化相关组件\n    if (this.initialized) {\n      await this.cleanup();\n      await this.initialize();\n    }\n\n    console.log('✅ Performance configuration reloaded');\n  }\n}\n\n/**\n * 全局性能初始化函数\n */\nexport async function initializeAppPerformance(\n  config?: Partial<PerformanceInitConfig>,\n): Promise<AppPerformanceManager> {\n  const manager = AppPerformanceManager.getInstance(config);\n  await manager.initialize();\n  return manager;\n}\n\n/**\n * React Hook for app performance\n */\nexport function useAppPerformance() {\n  const [manager] = React.useState(() => AppPerformanceManager.getInstance());\n  const [stats, setStats] = React.useState<any>(null);\n\n  React.useEffect(() => {\n    const updateStats = () => {\n      setStats(manager.getPerformanceStats());\n    };\n\n    updateStats();\n    const interval = setInterval(updateStats, 10000); // 每10秒更新一次\n\n    return () => clearInterval(interval);\n  }, [manager]);\n\n  return { manager, stats };\n}\n\n// React import\nimport React from 'react';\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/performance/cache-strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/performance/code-splitting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/performance/database-optimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/performance/image-optimization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/performance/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/performance/lazy-loading.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":133,"column":6,"nodeType":"Identifier","endLine":133,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has a missing dependency: 'loadFn'. Either include it or remove the dependency array. If 'loadFn' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":133,"column":6,"nodeType":"Identifier","endLine":133,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [loadFn]","fix":{"range":[3005,3009],"text":"[loadFn]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 懒加载工具类\n * 实现组件和资源的懒加载功能\n */\n\nimport React, { lazy, ComponentType, LazyExoticComponent, Suspense, ReactNode } from 'react';\n\n/**\n * 懒加载组件配置\n */\ninterface LazyComponentConfig {\n  fallback?: ReactNode;\n  retryCount?: number;\n  retryDelay?: number;\n}\n\n/**\n * 创建懒加载组件\n */\nexport function createLazyComponent<T extends ComponentType<any>>(\n  importFn: () => Promise<{ default: T }>,\n  config: LazyComponentConfig = {},\n): LazyExoticComponent<T> {\n  const { retryCount = 3, retryDelay = 1000 } = config;\n\n  const retryImport = async (attempt = 1): Promise<{ default: T }> => {\n    try {\n      return await importFn();\n    } catch (error) {\n      if (attempt < retryCount) {\n        await new Promise(resolve => setTimeout(resolve, retryDelay * attempt));\n        return retryImport(attempt + 1);\n      }\n      throw error;\n    }\n  };\n\n  return lazy(() => retryImport());\n}\n\n/**\n * 懒加载包装器组件\n */\ninterface LazyWrapperProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  errorBoundary?: ComponentType<{ children: ReactNode }>;\n}\n\nexport function LazyWrapper({\n  children,\n  fallback = <div className=\"loading-spinner\">加载中...</div>,\n  errorBoundary: ErrorBoundary }: LazyWrapperProps) {\n  if (ErrorBoundary) {\n    return (\n      <ErrorBoundary>\n        <Suspense fallback={fallback}>\n          {children}\n        </Suspense>\n      </ErrorBoundary>\n    );\n  }\n\n  return (\n    <Suspense fallback={fallback}>\n      {children}\n    </Suspense>\n  );\n}\n\n/**\n * 图片懒加载Hook\n */\nexport function useImageLazyLoading() {\n  const observerRef = React.useRef<IntersectionObserver | null>(null);\n\n  React.useEffect(() => {\n    observerRef.current = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const img = entry.target as HTMLImageElement;\n            const src = img.dataset.src;\n            if (src) {\n              img.src = src;\n              img.classList.remove('lazy');\n              observerRef.current?.unobserve(img);\n            }\n          }\n        });\n      },\n      {\n        rootMargin: '50px 0px',\n        threshold: 0.01 },\n    );\n\n    return () => {\n      observerRef.current?.disconnect();\n    };\n  }, []);\n\n  const observeImage = React.useCallback((img: HTMLImageElement | null) => {\n    if (img && observerRef.current) {\n      observerRef.current.observe(img);\n    }\n  }, []);\n\n  return { observeImage };\n}\n\n/**\n * 内容懒加载Hook\n */\nexport function useContentLazyLoading<T>(\n  loadFn: () => Promise<T>,\n  deps: React.DependencyList = [],\n) {\n  const [data, setData] = React.useState<T | null>(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<Error | null>(null);\n\n  const load = React.useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await loadFn();\n      setData(result);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('加载失败'));\n    } finally {\n      setLoading(false);\n    }\n  }, deps);\n\n  React.useEffect(() => {\n    load();\n  }, [load]);\n\n  return { data, loading, error, reload: load };\n}\n\n/**\n * 路由懒加载配置\n */\nexport const lazyRoutes = {\n  // 认证相关页面\n  Login: createLazyComponent(async () => {\n    const moduleExports = await import('@/components/auth/LoginForm');\n    return { default: moduleExports.LoginForm };\n  }),\n  Register: createLazyComponent(async () => {\n    const moduleExports = await import('@/components/auth/RegisterForm');\n    return { default: moduleExports.RegisterForm };\n  }),\n\n  // 社区相关页面\n  WorkList: createLazyComponent(async () => {\n    const moduleExports = await import('@/components/community/WorkList');\n    return { default: moduleExports.WorkList };\n  }),\n  WorkEditor: createLazyComponent(async () => {\n    const moduleExports = await import('@/components/community/WorkEditor');\n    return { default: moduleExports.WorkEditor };\n  }),\n\n  // 知识图谱相关页面\n  KnowledgeGraph: createLazyComponent(async () => {\n    const moduleExports = await import('@/components/knowledge-graph/KnowledgeGraphEditor');\n    return { default: moduleExports.KnowledgeGraphEditor };\n  }),\n\n  // 订阅相关页面\n  SubscriptionPlans: createLazyComponent(async () => {\n    const moduleExports = await import('@/components/subscription/SubscriptionPlans');\n    return { default: moduleExports.SubscriptionPlans };\n  }),\n\n  // 管理相关页面\n  AdminDashboard: createLazyComponent(async () => {\n    const moduleExports = await import('@/components/admin/AdminDashboard');\n    return { default: moduleExports.AdminDashboard };\n  }) };\n\n/**\n * 预加载工具\n */\nexport class PreloadManager {\n  private static preloadedComponents = new Set<string>();\n  private static preloadPromises = new Map<string, Promise<any>>();\n\n  /**\n   * 预加载组件\n   */\n  static async preloadComponent(\n    name: keyof typeof lazyRoutes,\n    priority: 'high' | 'low' = 'low',\n  ) {\n    if (this.preloadedComponents.has(name)) {\n      return null;\n    }\n\n    const component = lazyRoutes[name];\n    if (!component) {\n      return null;\n    }\n\n    // 根据优先级决定预加载时机\n    const delay = priority === 'high' ? 0 : 2000;\n\n    if (!this.preloadPromises.has(name)) {\n      const preloadPromise = new Promise(resolve => {\n        setTimeout(async () => {\n          try {\n            // 触发组件加载\n            await (component as any)._payload?._result;\n            this.preloadedComponents.add(name);\n            resolve(true);\n          } catch (error) {\n            console.warn(`预加载组件 ${name} 失败:`, error);\n            resolve(false);\n          }\n        }, delay);\n      });\n\n      this.preloadPromises.set(name, preloadPromise);\n    }\n\n    return this.preloadPromises.get(name);\n  }\n\n  /**\n   * 批量预加载\n   */\n  static async preloadComponents(\n    components: Array<{ name: keyof typeof lazyRoutes; priority?: 'high' | 'low' }>,\n  ) {\n    const promises = components.map(({ name, priority }) =>\n      this.preloadComponent(name, priority),\n    );\n\n    return Promise.allSettled(promises);\n  }\n\n  /**\n   * 根据路由预加载相关组件\n   */\n  static preloadByRoute(currentRoute: string) {\n    const routePreloadMap: Record<string, Array<keyof typeof lazyRoutes>> = {\n      '/': ['WorkList', 'KnowledgeGraph'],\n      '/auth': ['Login', 'Register'],\n      '/community': ['WorkList', 'WorkEditor'],\n      '/subscription': ['SubscriptionPlans'],\n      '/admin': ['AdminDashboard'] };\n\n    const componentsToPreload = routePreloadMap[currentRoute] || [];\n\n    componentsToPreload.forEach(name => {\n      this.preloadComponent(name, 'high');\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/performance/performance-monitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/performance/virtual-scroll.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'itemHeight'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [itemHeight, items.length, getItemHeight]","fix":{"range":[1673,1702],"text":"[itemHeight, items.length, getItemHeight]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'itemHeight'. Either include it or remove the dependency array.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":73,"suggestions":[{"desc":"Update the dependencies array to be: [itemHeight, scrollTop, containerHeight, items.length, overscan, getItemHeight]","fix":{"range":[2978,3045],"text":"[itemHeight, scrollTop, containerHeight, items.length, overscan, getItemHeight]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'itemHeight'. Either include it or remove the dependency array.","line":190,"column":6,"nodeType":"ArrayExpression","endLine":190,"endColumn":81,"suggestions":[{"desc":"Update the dependencies array to be: [itemHeight, totalHeight, containerHeight, config.enableSmoothScrolling, getItemHeight]","fix":{"range":[4923,4998],"text":"[itemHeight, totalHeight, containerHeight, config.enableSmoothScrolling, getItemHeight]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'items'. Either include it or remove the dependency array. You can also do a functional update 'setItems(i => ...)' if you only need 'items' in the 'setItems' call.","line":420,"column":6,"nodeType":"ArrayExpression","endLine":420,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [loading, hasMore, enabled, loadMore, page, pageSize, items]","fix":{"range":[10511,10564],"text":"[loading, hasMore, enabled, loadMore, page, pageSize, items]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 虚拟滚动组件\n * 优化大列表渲染性能\n */\n\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\n\n/**\n * 虚拟滚动配置\n */\ninterface VirtualScrollConfig {\n  itemHeight: number | ((index: number) => number);\n  containerHeight: number;\n  overscan?: number; // 预渲染的额外项目数\n  scrollThreshold?: number; // 滚动阈值\n  enableSmoothScrolling?: boolean;\n}\n\n/**\n * 虚拟滚动项目接口\n */\ninterface VirtualScrollItem {\n  index: number;\n  style: React.CSSProperties;\n  data: any;\n}\n\n/**\n * 虚拟滚动Props\n */\ninterface VirtualScrollProps<T> {\n  items: T[];\n  config: VirtualScrollConfig;\n  renderItem: (item: VirtualScrollItem & { data: T }) => React.ReactNode;\n  className?: string;\n  onScroll?: (scrollTop: number, scrollDirection: 'up' | 'down') => void;\n  onEndReached?: () => void;\n  endReachedThreshold?: number;\n}\n\n/**\n * 虚拟滚动Hook\n */\nexport function useVirtualScroll<T>(\n  items: T[],\n  config: VirtualScrollConfig,\n) {\n  const [scrollTop, setScrollTop] = useState(0);\n  const [containerHeight, setContainerHeight] = useState(config.containerHeight);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lastScrollTop = useRef(0);\n  const scrollDirection = useRef<'up' | 'down'>('down');\n\n  const { itemHeight, overscan = 5 } = config;\n\n  // 计算项目高度\n  const getItemHeight = useCallback((index: number): number => {\n    return typeof itemHeight === 'function' ? itemHeight(index) : itemHeight;\n  }, [itemHeight]);\n\n  // 计算总高度\n  const totalHeight = useMemo(() => {\n    if (typeof itemHeight === 'number') {\n      return items.length * itemHeight;\n    }\n\n    let height = 0;\n    for (let i = 0; i < items.length; i++) {\n      height += getItemHeight(i);\n    }\n    return height;\n  }, [items.length, getItemHeight]);\n\n  // 计算可见范围\n  const visibleRange = useMemo(() => {\n    if (typeof itemHeight === 'number') {\n      const startIndex = Math.floor(scrollTop / itemHeight);\n      const endIndex = Math.min(\n        startIndex + Math.ceil(containerHeight / itemHeight),\n        items.length - 1,\n      );\n\n      return {\n        startIndex: Math.max(0, startIndex - overscan),\n        endIndex: Math.min(items.length - 1, endIndex + overscan),\n        offsetY: startIndex * itemHeight,\n      };\n    }\n\n    // 动态高度计算\n    let accumulatedHeight = 0;\n    let startIndex = 0;\n    let endIndex = 0;\n    let offsetY = 0;\n\n    // 找到开始索引\n    for (let i = 0; i < items.length; i++) {\n      const height = getItemHeight(i);\n      if (accumulatedHeight + height > scrollTop) {\n        startIndex = Math.max(0, i - overscan);\n        offsetY = accumulatedHeight;\n        break;\n      }\n      accumulatedHeight += height;\n    }\n\n    // 找到结束索引\n    accumulatedHeight = offsetY;\n    for (let i = startIndex; i < items.length; i++) {\n      const height = getItemHeight(i);\n      if (accumulatedHeight > scrollTop + containerHeight) {\n        endIndex = Math.min(items.length - 1, i + overscan);\n        break;\n      }\n      accumulatedHeight += height;\n    }\n\n    return { startIndex, endIndex, offsetY };\n  }, [scrollTop, containerHeight, items.length, getItemHeight, overscan]);\n\n  // 可见项目\n  const visibleItems = useMemo(() => {\n    const result: Array<VirtualScrollItem & { data: T }> = [];\n    let currentOffset = visibleRange.offsetY;\n\n    for (let i = visibleRange.startIndex; i <= visibleRange.endIndex; i++) {\n      if (i >= items.length) break;\n\n      const height = getItemHeight(i);\n      result.push({\n        index: i,\n        data: items[i],\n        style: {\n          position: 'absolute',\n          top: currentOffset,\n          left: 0,\n          right: 0,\n          height: height,\n        },\n      });\n\n      currentOffset += height;\n    }\n\n    return result;\n  }, [visibleRange, items, getItemHeight]);\n\n  // 滚动处理\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const newScrollTop = event.currentTarget.scrollTop;\n\n    // 确定滚动方向\n    scrollDirection.current = newScrollTop > lastScrollTop.current ? 'down' : 'up';\n    lastScrollTop.current = newScrollTop;\n\n    setScrollTop(newScrollTop);\n  }, []);\n\n  // 滚动到指定索引\n  const scrollToIndex = useCallback((index: number, align: 'start' | 'center' | 'end' = 'start') => {\n    if (!containerRef.current) return;\n\n    let targetScrollTop = 0;\n\n    if (typeof itemHeight === 'number') {\n      targetScrollTop = index * itemHeight;\n    } else {\n      for (let i = 0; i < index; i++) {\n        targetScrollTop += getItemHeight(i);\n      }\n    }\n\n    // 根据对齐方式调整\n    if (align === 'center') {\n      targetScrollTop -= containerHeight / 2;\n    } else if (align === 'end') {\n      targetScrollTop -= containerHeight - getItemHeight(index);\n    }\n\n    targetScrollTop = Math.max(0, Math.min(targetScrollTop, totalHeight - containerHeight));\n\n    if (config.enableSmoothScrolling) {\n      containerRef.current.scrollTo({\n        top: targetScrollTop,\n        behavior: 'smooth',\n      });\n    } else {\n      containerRef.current.scrollTop = targetScrollTop;\n    }\n  }, [containerHeight, totalHeight, getItemHeight, config.enableSmoothScrolling]);\n\n  return {\n    containerRef,\n    visibleItems,\n    totalHeight,\n    scrollTop,\n    scrollDirection: scrollDirection.current,\n    handleScroll,\n    scrollToIndex,\n    visibleRange,\n  };\n}\n\n/**\n * 虚拟滚动组件\n */\nexport function VirtualScroll<T>({\n  items,\n  config,\n  renderItem,\n  className = '',\n  onScroll,\n  onEndReached,\n  endReachedThreshold = 0.8,\n}: VirtualScrollProps<T>) {\n  const {\n    containerRef,\n    visibleItems,\n    totalHeight,\n    scrollTop,\n    scrollDirection,\n    handleScroll,\n    scrollToIndex,\n    visibleRange,\n  } = useVirtualScroll(items, config);\n\n  // 滚动事件处理\n  const handleScrollWithCallback = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    handleScroll(event);\n    onScroll && onScroll(scrollTop, scrollDirection);\n\n    // 检查是否到达底部\n    if (onEndReached) {\n      const { scrollTop, scrollHeight, clientHeight } = event.currentTarget;\n      const scrollPercentage = (scrollTop + clientHeight) / scrollHeight;\n\n      if (scrollPercentage >= endReachedThreshold) {\n        onEndReached();\n      }\n    }\n  }, [handleScroll, onScroll, scrollTop, scrollDirection, onEndReached, endReachedThreshold]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`virtual-scroll-container ${className}`}\n      style={{\n        height: config.containerHeight,\n        overflow: 'auto',\n        position: 'relative',\n      }}\n      onScroll={handleScrollWithCallback}\n    >\n      <div\n        className=\"virtual-scroll-content\"\n        style={{\n          height: totalHeight,\n          position: 'relative',\n        }}\n      >\n        {visibleItems.map((item) => (\n          <div key={item.index} style={item.style}>\n            {renderItem(item)}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n/**\n * 虚拟网格组件\n */\ninterface VirtualGridProps<T> {\n  items: T[];\n  itemWidth: number;\n  itemHeight: number;\n  containerWidth: number;\n  containerHeight: number;\n  gap?: number;\n  renderItem: (item: { index: number; data: T; style: React.CSSProperties }) => React.ReactNode;\n  className?: string;\n}\n\nexport function VirtualGrid<T>({\n  items,\n  itemWidth,\n  itemHeight,\n  containerWidth,\n  containerHeight,\n  gap = 0,\n  renderItem,\n  className = '',\n}: VirtualGridProps<T>) {\n  const [scrollTop, setScrollTop] = useState(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // 计算列数\n  const columnsCount = Math.floor((containerWidth + gap) / (itemWidth + gap));\n\n  // 计算行数\n  const rowsCount = Math.ceil(items.length / columnsCount);\n\n  // 计算总高度\n  const totalHeight = rowsCount * (itemHeight + gap) - gap;\n\n  // 计算可见范围\n  const visibleRange = useMemo(() => {\n    const startRow = Math.floor(scrollTop / (itemHeight + gap));\n    const endRow = Math.min(\n      startRow + Math.ceil(containerHeight / (itemHeight + gap)) + 1,\n      rowsCount - 1,\n    );\n\n    return {\n      startRow: Math.max(0, startRow),\n      endRow: Math.max(0, endRow),\n    };\n  }, [scrollTop, containerHeight, itemHeight, gap, rowsCount]);\n\n  // 可见项目\n  const visibleItems = useMemo(() => {\n    const result: Array<{ index: number; data: T; style: React.CSSProperties }> = [];\n\n    for (let row = visibleRange.startRow; row <= visibleRange.endRow; row++) {\n      for (let col = 0; col < columnsCount; col++) {\n        const index = row * columnsCount + col;\n        if (index >= items.length) break;\n\n        result.push({\n          index,\n          data: items[index],\n          style: {\n            position: 'absolute',\n            left: col * (itemWidth + gap),\n            top: row * (itemHeight + gap),\n            width: itemWidth,\n            height: itemHeight,\n          },\n        });\n      }\n    }\n\n    return result;\n  }, [visibleRange, items, columnsCount, itemWidth, itemHeight, gap]);\n\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    setScrollTop(event.currentTarget.scrollTop);\n  }, []);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`virtual-grid-container ${className}`}\n      style={{\n        width: containerWidth,\n        height: containerHeight,\n        overflow: 'auto',\n        position: 'relative',\n      }}\n      onScroll={handleScroll}\n    >\n      <div\n        className=\"virtual-grid-content\"\n        style={{\n          height: totalHeight,\n          position: 'relative',\n        }}\n      >\n        {visibleItems.map((item) => (\n          <div key={item.index} style={item.style}>\n            {renderItem(item)}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n/**\n * 无限滚动Hook\n */\nexport function useInfiniteScroll<T>(\n  initialItems: T[],\n  loadMore: (page: number) => Promise<T[]>,\n  options: {\n    threshold?: number;\n    pageSize?: number;\n    enabled?: boolean;\n  } = {},\n) {\n  const { threshold = 0.8, pageSize = 20, enabled = true } = options;\n\n  const [items, setItems] = useState<T[]>(initialItems);\n  const [loading, setLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(1);\n  const [error, setError] = useState<Error | null>(null);\n\n  const loadMoreItems = useCallback(async () => {\n    if (loading || !hasMore || !enabled) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const newItems = await loadMore(page);\n\n      if (newItems.length === 0 || newItems.length < pageSize) {\n        setHasMore(false);\n      }\n\n      setItems([...items, ...newItems]);\n      setPage(page + 1);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('加载失败'));\n    } finally {\n      setLoading(false);\n    }\n  }, [loading, hasMore, enabled, page, loadMore, pageSize]);\n\n  const reset = useCallback(() => {\n    setItems(initialItems);\n    setPage(1);\n    setHasMore(true);\n    setLoading(false);\n    setError(null);\n  }, [initialItems]);\n\n  return {\n    items,\n    loading,\n    hasMore,\n    error,\n    loadMore: loadMoreItems,\n    reset,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/quality/code-quality-checker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/quality/code-refactoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/quality/code-review-automation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/quality/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/quality/type-safety-enhancer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/__tests__/payment-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/__tests__/plan-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/__tests__/subscription-service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/payment-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/plan-mapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/plan-model.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/plan-schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/plan-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/quota-checker.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 125. Maximum allowed is 120.","line":25,"column":1,"nodeType":"Program","messageId":"max","endLine":25,"endColumn":126},{"ruleId":"max-len","severity":1,"message":"This line has a length of 131. Maximum allowed is 120.","line":80,"column":1,"nodeType":"Program","messageId":"max","endLine":80,"endColumn":132}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 增强版配额检查系统 - 支持新的订阅系统\n */\n\nimport {\n  QuotaType,\n  UserTier,\n  Subscription,\n  QuotaLimits,\n} from '@/shared/types/subscription';\n\nimport { DEFAULT_PLANS, QUOTA_THRESHOLDS } from './constants';\nimport {\n  formatQuota,\n  calculateQuotaUsagePercentage,\n  getQuotaWarningLevel,\n  getQuotaTypeIcon,\n} from './utils';\n\ntype DailyQuotaType = 'create' | 'reuse' | 'export';\n\nexport interface QuotaDataSource {\n  getDailyUsage(userId: string, type: DailyQuotaType, isoDate: string): Promise<number>;\n  getTotalGraphNodes(userId: string): Promise<number>;\n  consumeQuota(input: { userId: string; type: QuotaType; amount: number; subscriptionId?: string | null }): Promise<boolean>;\n  resetDailyQuotas(userId: string): Promise<boolean>;\n}\n\nexport interface QuotaDataSourceOptions {\n  baseUrl?: string;\n  fetcher?: typeof fetch;\n}\n\nexport interface EnhancedQuotaCheckerOptions {\n  dataSource?: QuotaDataSource;\n  dataSourceOptions?: QuotaDataSourceOptions;\n}\n\nconst defaultQuotaDataSource = createDefaultQuotaDataSource();\n\nexport interface QuotaUsage {\n  type: QuotaType;\n  used: number;\n  limit: number;\n  resetTime: Date;\n  isUnlimited: boolean;\n  percentage: number;\n  warningLevel: 'safe' | 'warning' | 'critical' | 'exceeded';\n}\n\nexport interface QuotaCheckResult {\n  allowed: boolean;\n  usage: QuotaUsage;\n  requestedAmount: number;\n  reason?: 'quota_exceeded' | 'subscription_expired' | 'subscription_suspended' | 'permission_denied';\n  upgradePrompt?: {\n    title: string;\n    description: string;\n    icon: string;\n    currentPlan: string;\n    recommendedPlan: string;\n    benefits: string[];\n    priceIncrease: number;\n    urgency: 'low' | 'medium' | 'high';\n  };\n}\n\n/**\n * 增强版配额检查器\n */\nexport class EnhancedQuotaChecker {\n  private dataSource: QuotaDataSource;\n\n  constructor(\n    private userId: string,\n    private subscription: Subscription | null,\n    options: EnhancedQuotaCheckerOptions = {},\n  ) {\n    const { dataSource, dataSourceOptions } = options;\n    this.dataSource = dataSource ?? (dataSourceOptions ? createDefaultQuotaDataSource(dataSourceOptions) : defaultQuotaDataSource);\n  }\n\n  /**\n   * 检查指定类型的配额\n   */\n  async checkQuota(type: QuotaType, amount: number = 1): Promise<QuotaCheckResult> {\n    const requestedAmount = Number.isFinite(amount) && amount > 0 ? amount : 0;\n    // 获取用户配额限制\n    const quotaLimits = this.getQuotaLimits();\n    const usage = await this.getQuotaUsage(type, quotaLimits);\n\n    // 检查订阅状态\n    if (this.subscription && this.subscription.status === 'suspended') {\n      return {\n        allowed: false,\n        usage,\n        requestedAmount,\n        reason: 'subscription_suspended',\n      };\n    }\n\n    if (this.subscription && this.subscription.status === 'expired') {\n      return {\n        allowed: false,\n        usage,\n        requestedAmount,\n        reason: 'subscription_expired',\n      };\n    }\n\n    // 检查是否有无限配额\n    if (usage.isUnlimited) {\n      return {\n        allowed: true,\n        usage,\n        requestedAmount,\n      };\n    }\n\n    // 检查是否超出配额\n    if (usage.used + requestedAmount > usage.limit) {\n      return {\n        allowed: false,\n        usage,\n        requestedAmount,\n        reason: 'quota_exceeded',\n        upgradePrompt: this.generateUpgradePrompt(type, usage),\n      };\n    }\n\n    return {\n      allowed: true,\n      usage,\n      requestedAmount,\n    };\n  }\n\n  /**\n   * 获取配额限制\n   */\n  private getQuotaLimits(): QuotaLimits {\n    if (this.subscription && this.subscription.status === 'active') {\n      return this.subscription.quotas;\n    }\n\n    // 默认使用免费套餐配额\n    const freePlan = (DEFAULT_PLANS.find as any)(p => p.tier === 'free');\n    return freePlan?.quotas || {\n      dailyCreateQuota: 3,\n      dailyReuseQuota: 1,\n      maxExportsPerDay: 10,\n      maxGraphNodes: 50,\n    };\n  }\n\n  /**\n   * 获取配额使用情况\n   */\n  private async getQuotaUsage(type: QuotaType, quotaLimits: QuotaLimits): Promise<QuotaUsage> {\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(0, 0, 0, 0);\n\n    let limit: number;\n    let used: number;\n    let isUnlimited: boolean;\n    let resetTime: Date;\n\n    switch (type) {\n      case 'create':\n        limit = quotaLimits.dailyCreateQuota;\n        used = await this.getDailyUsage('create');\n        isUnlimited = limit === -1;\n        resetTime = tomorrow;\n        break;\n      case 'reuse':\n        limit = quotaLimits.dailyReuseQuota;\n        used = await this.getDailyUsage('reuse');\n        isUnlimited = limit === -1;\n        resetTime = tomorrow;\n        break;\n      case 'export':\n        limit = quotaLimits.maxExportsPerDay;\n        used = await this.getDailyUsage('export');\n        isUnlimited = limit === -1;\n        resetTime = tomorrow;\n        break;\n      case 'graph_nodes':\n        limit = quotaLimits.maxGraphNodes;\n        used = await this.getTotalGraphNodes();\n        isUnlimited = limit === -1;\n        resetTime = new Date(0); // 不重置\n        break;\n      default:\n        throw new Error(`Unknown quota type: ${type}`);\n    }\n\n    const percentage = isUnlimited ? 0 : calculateQuotaUsagePercentage(used, limit);\n    const warningLevel = isUnlimited ? 'safe' : getQuotaWarningLevel(used, limit);\n\n    return {\n      type,\n      used: isUnlimited ? 0 : used,\n      limit: isUnlimited ? Infinity : limit,\n      resetTime,\n      isUnlimited,\n      percentage,\n      warningLevel,\n    };\n  }\n\n  /**\n   * 获取每日使用量\n   */\n  private async getDailyUsage(type: DailyQuotaType): Promise<number> {\n    const today = new Date().toISOString().split('T')[0];\n\n    try {\n      return await this.dataSource.getDailyUsage(this.userId, type, today);\n    } catch (error) {\n      console.error('Failed to get daily usage:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 获取知识图谱节点总数\n   */\n  private async getTotalGraphNodes(): Promise<number> {\n    try {\n      return await this.dataSource.getTotalGraphNodes(this.userId);\n    } catch (error) {\n      console.error('Failed to get graph nodes count:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * 生成升级提示\n   */\n  private generateUpgradePrompt(type: QuotaType, usage: QuotaUsage): {\n    title: string;\n    description: string;\n    icon: string;\n    currentPlan: string;\n    recommendedPlan: string;\n    benefits: string[];\n    priceIncrease: number;\n    urgency: 'low' | 'medium' | 'high';\n  } {\n    const currentTier = this.subscription?.plan || 'free';\n\n    // 推荐升级方案\n    let recommendedTier: UserTier;\n    if (currentTier === 'free') {\n      recommendedTier = 'basic';\n    } else if (currentTier === 'basic') {\n      recommendedTier = 'pro';\n    } else {\n      recommendedTier = 'pro'; // 已经是最高级\n    }\n\n    const currentPlan = (DEFAULT_PLANS.find as any)(p => p.tier === currentTier);\n    const recommendedPlan = (DEFAULT_PLANS.find as any)(p => p.tier === recommendedTier);\n\n    if (!currentPlan || !recommendedPlan) {\n      throw new Error('Plan configuration not found');\n    }\n\n    const prompts = {\n      create: {\n        title: '今日创建配额已用完',\n        description: `您今天已经创建了 ${usage.used} 张精美卡片！`,\n        benefits: [\n          `每日创建 ${formatQuota(recommendedPlan.quotas.dailyCreateQuota)} 张卡片`,\n          '释放更大创作潜力',\n          '支持更多教学场景',\n          '提升工作效率',\n        ],\n      },\n      reuse: {\n        title: '今日复用配额已用完',\n        description: `您今天已经复用了 ${usage.used} 张卡片模板！`,\n        benefits: [\n          `每日复用 ${formatQuota(recommendedPlan.quotas.dailyReuseQuota)} 张模板`,\n          '快速构建教学体系',\n          '积累个人知识库',\n          '提升创作效率 10 倍',\n        ],\n      },\n      export: {\n        title: '今日导出配额已用完',\n        description: `您今天已经导出了 ${usage.used} 张图片！`,\n        benefits: [\n          `每日导出 ${formatQuota(recommendedPlan.quotas.maxExportsPerDay)} 张图片`,\n          '无限制图片导出',\n          '高清质量保证',\n          '批量导出功能',\n        ],\n      },\n      graph_nodes: {\n        title: '知识图谱节点已达上限',\n        description: `您的知识图谱已有 ${usage.used} 个节点！`,\n        benefits: [\n          `支持 ${formatQuota(recommendedPlan.quotas.maxGraphNodes)} 个节点`,\n          '无限知识图谱节点',\n          '高级智能分析',\n          '完整知识体系构建',\n        ],\n      },\n    };\n\n    const prompt = prompts[type];\n    const urgency = usage.warningLevel === 'exceeded' ? 'high' : 'medium';\n\n    return {\n      title: prompt.title,\n      description: prompt.description,\n      icon: getQuotaTypeIcon(type),\n      currentPlan: currentPlan.displayName,\n      recommendedPlan: recommendedPlan.displayName,\n      benefits: prompt.benefits,\n      priceIncrease: recommendedPlan.monthlyPrice - currentPlan.monthlyPrice,\n      urgency,\n    };\n  }\n\n  /**\n   * 消费配额\n   */\n  async consumeQuota(type: QuotaType, amount: number = 1): Promise<boolean> {\n    const checkResult = await this.checkQuota(type, amount);\n\n    if (!checkResult.allowed) {\n      return false;\n    }\n\n    // 如果是无限配额，直接返回成功\n    if (checkResult.usage.isUnlimited) {\n      return true;\n    }\n\n    try {\n      return await this.dataSource.consumeQuota({\n        userId: this.userId,\n        type,\n        amount,\n        subscriptionId: this.subscription?.id ?? null,\n      });\n    } catch (error) {\n      console.error('Failed to consume quota:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取所有配额状态\n   */\n  async getAllQuotaStatus(): Promise<Record<QuotaType, QuotaUsage>> {\n    const types: QuotaType[] = ['create', 'reuse', 'export', 'graph_nodes'];\n    const results: Record<QuotaType, QuotaUsage> = {} as any;\n    const quotaLimits = this.getQuotaLimits();\n\n    for (const type of types) {\n      const usage = await this.getQuotaUsage(type, quotaLimits);\n      results[type] = usage;\n    }\n\n    return results;\n  }\n\n  /**\n   * 检查是否需要显示升级提示\n   */\n  async shouldShowUpgradePrompt(type: QuotaType): Promise<boolean> {\n    const usage = await this.getQuotaUsage(type, this.getQuotaLimits());\n\n    // 如果是无限配额，不显示升级提示\n    if (usage.isUnlimited) {\n      return false;\n    }\n\n    // 如果已经是最高级套餐，不显示升级提示\n    if (this.subscription?.plan === 'pro') {\n      return false;\n    }\n\n    // 如果配额使用率超过80%，显示升级提示\n    return usage.percentage >= QUOTA_THRESHOLDS.WARNING * 100;\n  }\n\n  /**\n   * 重置每日配额（系统调用）\n   */\n  async resetDailyQuotas(): Promise<boolean> {\n    try {\n      return await this.dataSource.resetDailyQuotas(this.userId);\n    } catch (error) {\n      console.error('Failed to reset daily quotas:', error);\n      return false;\n    }\n  }\n}\n\nexport function createDefaultQuotaDataSource(options: QuotaDataSourceOptions = {}): QuotaDataSource {\n  const fetcher = options.fetcher ?? (typeof fetch === 'function' ? fetch.bind(globalThis) : undefined);\n  const baseUrlOverride = options.baseUrl;\n  let missingBaseUrlWarned = false;\n\n  const warnMissingBaseUrl = () => {\n    if (!missingBaseUrlWarned) {\n      console.warn('[QuotaDataSource] 服务器环境缺少 API 基础地址，已回退为本地空结果。请设置 INTERNAL_API_BASE_URL。');\n      missingBaseUrlWarned = true;\n    }\n  };\n\n  const buildUrl = (path: string, params?: Record<string, string | number | undefined>): string | null => {\n    const query = params\n      ? Object.entries(params)\n          .filter(([, value]) => value !== undefined && value !== null)\n          .reduce((search, [key, value]) => {\n            search.append(key, String(value));\n            return search;\n          }, new URLSearchParams())\n      : null;\n\n    if (typeof window !== 'undefined') {\n      const url = new URL(path, window.location.origin);\n      if (query) {\n        query.forEach((value, key) => url.searchParams.set(key, value));\n      }\n      return url.toString();\n    }\n\n    const base = normalizeBaseUrl(baseUrlOverride);\n    if (!base) {\n      warnMissingBaseUrl();\n      return null;\n    }\n\n    const url = new URL(path, base);\n    if (query) {\n      query.forEach((value, key) => url.searchParams.set(key, value));\n    }\n    return url.toString();\n  };\n\n  const safeFetch: typeof fetch | undefined = fetcher;\n\n  return {\n    async getDailyUsage(userId, type, isoDate) {\n      if (!safeFetch) {\n        return 0;\n      }\n\n      const url = buildUrl('/api/subscription/quota/daily-usage', {\n        userId,\n        type,\n        date: isoDate,\n      });\n\n      if (!url) {\n        return 0;\n      }\n\n      try {\n        const response = await safeFetch(url);\n        if (!response.ok) {\n          return 0;\n        }\n        const result = await response.json();\n        return typeof result.usage === 'number' ? result.usage : 0;\n      } catch (error) {\n        console.error('Failed to fetch daily quota usage:', error);\n        return 0;\n      }\n    },\n\n    async getTotalGraphNodes(userId) {\n      if (!safeFetch) {\n        return 0;\n      }\n\n      const url = buildUrl('/api/subscription/quota/graph-nodes', { userId });\n      if (!url) {\n        return 0;\n      }\n\n      try {\n        const response = await safeFetch(url);\n        if (!response.ok) {\n          return 0;\n        }\n        const result = await response.json();\n        return typeof result.count === 'number' ? result.count : 0;\n      } catch (error) {\n        console.error('Failed to fetch graph nodes count:', error);\n        return 0;\n      }\n    },\n\n    async consumeQuota({ userId, type, amount, subscriptionId }) {\n      if (!safeFetch) {\n        return false;\n      }\n\n      const url = buildUrl('/api/subscription/quota/consume');\n      if (!url) {\n        return false;\n      }\n\n      try {\n        const response = await safeFetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            userId,\n            type,\n            amount,\n            subscriptionId: subscriptionId ?? undefined,\n          }),\n        });\n\n        return response.ok;\n      } catch (error) {\n        console.error('Failed to consume quota via data source:', error);\n        return false;\n      }\n    },\n\n    async resetDailyQuotas(userId) {\n      if (!safeFetch) {\n        return false;\n      }\n\n      const url = buildUrl('/api/subscription/quota/reset-daily');\n      if (!url) {\n        return false;\n      }\n\n      try {\n        const response = await safeFetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ userId }),\n        });\n\n        return response.ok;\n      } catch (error) {\n        console.error('Failed to reset quotas via data source:', error);\n        return false;\n      }\n    },\n  };\n}\n\nfunction normalizeBaseUrl(baseUrl?: string | null): string | null {\n  if (!baseUrl) {\n    const envUrl = process.env.INTERNAL_API_BASE_URL\n      || process.env.API_BASE_URL\n      || process.env.NEXT_PUBLIC_APP_URL\n      || process.env.APP_BASE_URL\n      || null;\n\n    baseUrl = envUrl || null;\n  }\n\n  if (!baseUrl) {\n    return null;\n  }\n\n  try {\n    return new URL(baseUrl).toString();\n  } catch (error) {\n    try {\n      return new URL(`http://${baseUrl}`).toString();\n    } catch {\n      console.warn('[QuotaDataSource] 无法解析提供的 API 基础地址:', baseUrl);\n      return null;\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/quota-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/quota-monitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/quota-usage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/subscription-manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/subscription-service.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 122. Maximum allowed is 120.","line":522,"column":1,"nodeType":"Program","messageId":"max","endLine":522,"endColumn":123}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 订阅管理服务\n * 处理订阅的创建、更新、取消等核心业务逻辑\n */\n\nimport {\n  Subscription,\n  SubscriptionPlan,\n  PaymentRecord,\n  SubscriptionUsage,\n  UserTier,\n  SubscriptionStatus,\n  CreatePlanRequest,\n} from '@/shared/types/subscription';\n\nimport { DEFAULT_PLANS } from './constants';\nimport { validatePlanData, validateSubscriptionData } from './validators';\n\nexport interface CreateSubscriptionRequest {\n  userId: string;\n  planId: string;\n  paymentMethod: 'wechat_pay';\n  billingCycle: 'monthly' | 'yearly';\n}\n\nexport interface UpdateSubscriptionRequest {\n  planId?: string;\n  status?: SubscriptionStatus;\n  endDate?: Date;\n  metadata?: Record<string, any>;\n}\n\nexport interface SubscriptionServiceOptions {\n  enableAutoRenewal?: boolean;\n  enableProration?: boolean;\n  gracePeriodDays?: number;\n}\n\n/**\n * 订阅管理服务类\n */\nexport class SubscriptionService {\n  private options: SubscriptionServiceOptions;\n\n  constructor(options: SubscriptionServiceOptions = {}) {\n    this.options = {\n      enableAutoRenewal: true,\n      enableProration: true,\n      gracePeriodDays: 3,\n      ...options,\n    };\n  }\n\n  /**\n   * 获取用户当前订阅\n   */\n  async getCurrentSubscription(userId: string): Promise<Subscription | null> {\n    try {\n      const response = await fetch(`/api/subscription/current?userId=${userId}`);\n      if (response.ok) {\n        const result = await response.json();\n        return result.subscription || null;\n      }\n      return null;\n    } catch (error) {\n      console.error('Failed to get current subscription:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 获取所有可用套餐\n   */\n  async getAvailablePlans(): Promise<SubscriptionPlan[]> {\n    try {\n      const response = await fetch('/api/subscription/plans');\n      if (response.ok) {\n        const result = await response.json();\n        return result.plans || DEFAULT_PLANS;\n      }\n      return DEFAULT_PLANS;\n    } catch (error) {\n      console.error('Failed to get available plans:', error);\n      return DEFAULT_PLANS;\n    }\n  }\n\n  /**\n   * 根据等级获取套餐\n   */\n  async getPlanByTier(tier: UserTier): Promise<SubscriptionPlan | null> {\n    const plans = await this.getAvailablePlans();\n    return (plans.find as any)(plan => plan.tier === tier) || null;\n  }\n\n  /**\n   * 创建新订阅\n   */\n  async createSubscription(request: CreateSubscriptionRequest): Promise<{\n    subscription: Subscription;\n    paymentInfo: any;\n  }> {\n    // 验证请求数据\n    if (!request.userId || !request.planId) {\n      throw new Error('用户ID和套餐ID不能为空');\n    }\n\n    // 获取套餐信息\n    const plans = await this.getAvailablePlans();\n    const plan = (plans.find as any)(p => p.id === request.planId);\n    if (!plan) {\n      throw new Error('套餐不存在');\n    }\n\n    // 检查用户是否已有活跃订阅\n    const existingSubscription = await this.getCurrentSubscription(request.userId);\n    if (existingSubscription && existingSubscription.status === 'active') {\n      throw new Error('用户已有活跃订阅，请先取消现有订阅');\n    }\n\n    // 计算订阅时间\n    const startDate = new Date();\n    const endDate = new Date();\n    if (request.billingCycle === 'yearly') {\n      endDate.setFullYear(endDate.getFullYear() + 1);\n    } else {\n      endDate.setMonth(endDate.getMonth() + 1);\n    }\n\n    // 创建订阅对象\n    const subscription: Subscription = {\n      id: `sub_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      userId: request.userId,\n      planId: request.planId,\n      planName: plan.displayName,\n      tier: plan.tier,\n      status: 'pending',\n      monthlyPrice: plan.monthlyPrice,\n      currency: 'CNY',\n      startDate,\n      endDate,\n      nextBillingDate: endDate,\n      paymentMethod: request.paymentMethod,\n      quotas: { ...plan.quotas },\n      features: [...plan.features],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    // 验证订阅数据\n    const validation = validateSubscriptionData(subscription);\n    if (!validation.isValid) {\n      throw new Error(`订阅数据验证失败: ${validation.errors.join(', ')}`);\n    }\n\n    try {\n      // 调用API创建订阅\n      const response = await fetch('/api/subscription/create', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ subscription, billingCycle: request.billingCycle }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || '创建订阅失败');\n      }\n\n      const result = await response.json();\n      return {\n        subscription: result.subscription,\n        paymentInfo: result.paymentInfo,\n      };\n    } catch (error) {\n      console.error('Failed to create subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 更新订阅\n   */\n  async updateSubscription(\n    subscriptionId: string,\n    updates: UpdateSubscriptionRequest,\n  ): Promise<Subscription> {\n    if (!subscriptionId) {\n      throw new Error('订阅ID不能为空');\n    }\n\n    try {\n      const response = await fetch(`/api/subscription/${subscriptionId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || '更新订阅失败');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to update subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 取消订阅\n   */\n  async cancelSubscription(\n    subscriptionId: string,\n    reason?: string,\n    immediate: boolean = false,\n  ): Promise<Subscription> {\n    if (!subscriptionId) {\n      throw new Error('订阅ID不能为空');\n    }\n\n    const cancelDate = immediate ? new Date() : undefined;\n\n    try {\n      const response = await fetch(`/api/subscription/${subscriptionId}/cancel`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          reason,\n          immediate,\n          cancelDate: cancelDate?.toISOString(),\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || '取消订阅失败');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to cancel subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 升级订阅\n   */\n  async upgradeSubscription(\n    subscriptionId: string,\n    newPlanId: string,\n    prorationMode: 'immediate' | 'next_cycle' = 'immediate',\n  ): Promise<{\n    subscription: Subscription;\n    paymentInfo?: any;\n    prorationAmount?: number;\n  }> {\n    if (!subscriptionId || !newPlanId) {\n      throw new Error('订阅ID和新套餐ID不能为空');\n    }\n\n    // 获取当前订阅\n    const currentSubscription = await this.getSubscriptionById(subscriptionId);\n    if (!currentSubscription) {\n      throw new Error('订阅不存在');\n    }\n\n    // 获取新套餐信息\n    const plans = await this.getAvailablePlans();\n    const newPlan = (plans.find as any)(p => p.id === newPlanId);\n    if (!newPlan) {\n      throw new Error('新套餐不存在');\n    }\n\n    // 检查是否为升级（价格更高）\n    const currentPlan = (plans.find as any)(p => p.id === currentSubscription.planId);\n    if (!currentPlan) {\n      throw new Error('当前套餐信息不存在');\n    }\n\n    if (newPlan.monthlyPrice <= currentPlan.monthlyPrice) {\n      throw new Error('只能升级到更高价格的套餐');\n    }\n\n    // 计算按比例退费金额\n    let prorationAmount = 0;\n    if (this.options.enableProration && prorationMode === 'immediate') {\n      prorationAmount = this.calculateProrationAmount(\n        currentSubscription,\n        currentPlan,\n        newPlan,\n      );\n    }\n\n    try {\n      const response = await fetch(`/api/subscription/${subscriptionId}/upgrade`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          newPlanId,\n          prorationMode,\n          prorationAmount,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || '升级订阅失败');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to upgrade subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 降级订阅\n   */\n  async downgradeSubscription(\n    subscriptionId: string,\n    newPlanId: string,\n    effectiveDate: 'immediate' | 'next_cycle' = 'next_cycle',\n  ): Promise<Subscription> {\n    if (!subscriptionId || !newPlanId) {\n      throw new Error('订阅ID和新套餐ID不能为空');\n    }\n\n    try {\n      const response = await fetch(`/api/subscription/${subscriptionId}/downgrade`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          newPlanId,\n          effectiveDate,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || '降级订阅失败');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to downgrade subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 恢复已取消的订阅\n   */\n  async reactivateSubscription(subscriptionId: string): Promise<Subscription> {\n    if (!subscriptionId) {\n      throw new Error('订阅ID不能为空');\n    }\n\n    try {\n      const response = await fetch(`/api/subscription/${subscriptionId}/reactivate`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || '恢复订阅失败');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to reactivate subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 获取订阅详情\n   */\n  async getSubscriptionById(subscriptionId: string): Promise<Subscription | null> {\n    try {\n      const response = await fetch(`/api/subscription/${subscriptionId}`);\n      if (response.ok) {\n        return await response.json();\n      }\n      return null;\n    } catch (error) {\n      console.error('Failed to get subscription:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 获取用户订阅历史\n   */\n  async getSubscriptionHistory(\n    userId: string,\n    limit: number = 10,\n    offset: number = 0,\n  ): Promise<{\n    subscriptions: Subscription[];\n    total: number;\n    hasMore: boolean;\n  }> {\n    try {\n      const response = await fetch(\n        `/api/subscription/history?userId=${userId}&limit=${limit}&offset=${offset}`,\n      );\n\n      if (response.ok) {\n        return await response.json();\n      }\n\n      return { subscriptions: [], total: 0, hasMore: false };\n    } catch (error) {\n      console.error('Failed to get subscription history:', error);\n      return { subscriptions: [], total: 0, hasMore: false };\n    }\n  }\n\n  /**\n   * 获取支付记录\n   */\n  async getPaymentHistory(\n    subscriptionId: string,\n    limit: number = 10,\n  ): Promise<PaymentRecord[]> {\n    try {\n      const response = await fetch(\n        `/api/subscription/${subscriptionId}/payments?limit=${limit}`,\n      );\n\n      if (response.ok) {\n        const result = await response.json();\n        return result.payments || [];\n      }\n\n      return [];\n    } catch (error) {\n      console.error('Failed to get payment history:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 获取使用统计\n   */\n  async getUsageStatistics(\n    subscriptionId: string,\n    startDate?: Date,\n    endDate?: Date,\n  ): Promise<SubscriptionUsage[]> {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) params.append('startDate', startDate.toISOString());\n      if (endDate) params.append('endDate', endDate.toISOString());\n\n      const response = await fetch(\n        `/api/subscription/${subscriptionId}/usage?${params.toString()}`,\n      );\n\n      if (response.ok) {\n        const result = await response.json();\n        return result.usage || [];\n      }\n\n      return [];\n    } catch (error) {\n      console.error('Failed to get usage statistics:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 检查订阅状态\n   */\n  async checkSubscriptionStatus(subscriptionId: string): Promise<{\n    isActive: boolean;\n    isExpired: boolean;\n    daysUntilExpiry: number;\n    needsRenewal: boolean;\n  }> {\n    const subscription = await this.getSubscriptionById(subscriptionId);\n\n    if (!subscription) {\n      return {\n        isActive: false,\n        isExpired: true,\n        daysUntilExpiry: 0,\n        needsRenewal: false,\n      };\n    }\n\n    const now = new Date();\n    const endDate = new Date(subscription.endDate);\n    const daysUntilExpiry = Math.ceil((endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    const isActive = subscription.status === 'active' && endDate > now;\n    const isExpired = endDate <= now;\n    const needsRenewal = daysUntilExpiry <= (this.options.gracePeriodDays || 3) && isActive;\n\n    return {\n      isActive,\n      isExpired,\n      daysUntilExpiry: Math.max(0, daysUntilExpiry),\n      needsRenewal,\n    };\n  }\n\n  /**\n   * 计算按比例退费金额\n   */\n  private calculateProrationAmount(\n    subscription: Subscription,\n    currentPlan: SubscriptionPlan,\n    newPlan: SubscriptionPlan,\n  ): number {\n    const now = new Date();\n    const endDate = new Date(subscription.endDate);\n    const totalDays = Math.ceil((endDate.getTime() - new Date(subscription.startDate).getTime()) / (1000 * 60 * 60 * 24));\n    const remainingDays = Math.ceil((endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    if (remainingDays <= 0) return 0;\n\n    // 计算剩余时间的价值\n    const remainingValue = (currentPlan.monthlyPrice * remainingDays) / totalDays;\n    const newPlanValue = (newPlan.monthlyPrice * remainingDays) / totalDays;\n\n    return Math.max(0, newPlanValue - remainingValue);\n  }\n\n  /**\n   * 创建套餐\n   */\n  async createPlan(planData: CreatePlanRequest): Promise<SubscriptionPlan> {\n    const validation = validatePlanData(planData);\n    if (!validation.isValid) {\n      throw new Error(`套餐数据验证失败: ${validation.errors.join(', ')}`);\n    }\n\n    try {\n      const response = await fetch('/api/subscription/plans', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(planData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || '创建套餐失败');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to create plan:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 更新套餐\n   */\n  async updatePlan(planId: string, updates: Partial<CreatePlanRequest>): Promise<SubscriptionPlan> {\n    try {\n      const response = await fetch(`/api/subscription/plans/${planId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || '更新套餐失败');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to update plan:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 获取订阅分析数据\n   */\n  async getSubscriptionAnalytics(userId: string): Promise<{\n    totalSpent: number;\n    monthsSubscribed: number;\n    averageMonthlySpend: number;\n    upgradeHistory: Array<{\n      date: Date;\n      fromPlan: string;\n      toPlan: string;\n      reason?: string;\n    }>;\n    usageTrends: Array<{\n      month: string;\n      usage: Record<string, number>;\n    }>;\n  }> {\n    try {\n      const response = await fetch(`/api/subscription/analytics?userId=${userId}`);\n\n      if (response.ok) {\n        return await response.json();\n      }\n\n      return {\n        totalSpent: 0,\n        monthsSubscribed: 0,\n        averageMonthlySpend: 0,\n        upgradeHistory: [],\n        usageTrends: [],\n      };\n    } catch (error) {\n      console.error('Failed to get subscription analytics:', error);\n      return {\n        totalSpent: 0,\n        monthsSubscribed: 0,\n        averageMonthlySpend: 0,\n        upgradeHistory: [],\n        usageTrends: [],\n      };\n    }\n  }\n}\n\n// 默认实例\nexport const subscriptionService = new SubscriptionService();\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/upgrade-engine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/upgrade-recommendation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/validators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/core/subscription/wechat-pay.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 139. Maximum allowed is 120.","line":557,"column":1,"nodeType":"Program","messageId":"max","endLine":557,"endColumn":140}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 微信支付核心功能\n * 集成微信支付SDK，处理支付请求、二维码生成和状态查询\n */\n\nimport crypto from 'crypto';\n\nimport { PaymentRecord, PaymentStatus } from '@/shared/types/subscription';\n\n/**\n * 微信支付配置\n */\nexport interface WeChatPayConfig {\n  appId: string;           // 应用ID\n  mchId: string;           // 商户号\n  apiKey: string;          // API密钥\n  certPath?: string;       // 证书路径\n  keyPath?: string;        // 私钥路径\n  notifyUrl: string;       // 支付结果通知URL\n  sandbox?: boolean;       // 是否沙箱环境\n}\n\n/**\n * 统一下单请求参数\n */\nexport interface UnifiedOrderRequest {\n  outTradeNo: string;      // 商户订单号\n  body: string;            // 商品描述\n  totalFee: number;        // 总金额（分）\n  spbillCreateIp: string;  // 终端IP\n  tradeType: 'NATIVE' | 'JSAPI' | 'APP' | 'H5'; // 交易类型\n  openid?: string;         // 用户openid（JSAPI必填）\n  productId?: string;      // 商品ID（NATIVE必填）\n  sceneInfo?: string;      // 场景信息（H5必填）\n}\n\n/**\n * 统一下单响应\n */\nexport interface UnifiedOrderResponse {\n  returnCode: string;      // 返回状态码\n  returnMsg: string;       // 返回信息\n  appid?: string;          // 应用ID\n  mchId?: string;          // 商户号\n  nonceStr?: string;       // 随机字符串\n  sign?: string;           // 签名\n  resultCode?: string;     // 业务结果\n  prepayId?: string;       // 预支付交易会话标识\n  tradeType?: string;      // 交易类型\n  codeUrl?: string;        // 二维码链接（NATIVE）\n  errCode?: string;        // 错误代码\n  errCodeDes?: string;     // 错误代码描述\n}\n\n/**\n * 订单查询响应\n */\nexport interface OrderQueryResponse {\n  returnCode: string;\n  returnMsg: string;\n  appid?: string;\n  mchId?: string;\n  nonceStr?: string;\n  sign?: string;\n  resultCode?: string;\n  outTradeNo?: string;     // 商户订单号\n  transactionId?: string;  // 微信支付订单号\n  tradeState?: string;     // 交易状态\n  tradeStateDesc?: string; // 交易状态描述\n  bankType?: string;       // 付款银行\n  totalFee?: number;       // 订单金额\n  cashFee?: number;        // 现金支付金额\n  timeEnd?: string;        // 支付完成时间\n  errCode?: string;\n  errCodeDes?: string;\n}\n\n/**\n * 支付通知数据\n */\nexport interface PaymentNotification {\n  returnCode: string;\n  returnMsg: string;\n  appid: string;\n  mchId: string;\n  nonceStr: string;\n  sign: string;\n  resultCode: string;\n  outTradeNo: string;\n  transactionId: string;\n  tradeType: string;\n  bankType: string;\n  totalFee: number;\n  cashFee: number;\n  timeEnd: string;\n  errCode?: string;\n  errCodeDes?: string;\n}\n\n/**\n * 微信支付服务类\n */\nexport class WeChatPayService {\n  private config: WeChatPayConfig;\n  private baseUrl: string;\n\n  constructor(config: WeChatPayConfig) {\n    this.config = config;\n    this.baseUrl = config.sandbox\n      ? 'https://api.mch.weixin.qq.com/sandboxnew'\n      : 'https://api.mch.weixin.qq.com';\n  }\n\n  /**\n   * 统一下单\n   */\n  async unifiedOrder(request: UnifiedOrderRequest): Promise<UnifiedOrderResponse> {\n    try {\n      const params: Record<string, string | number> = {\n        appid: this.config.appId,\n        mch_id: this.config.mchId,\n        nonce_str: this.generateNonceStr(),\n        body: request.body,\n        out_trade_no: request.outTradeNo,\n        total_fee: request.totalFee,\n        spbill_create_ip: request.spbillCreateIp,\n        notify_url: this.config.notifyUrl,\n        trade_type: request.tradeType,\n      };\n\n      if (request.openid) {\n        params.openid = request.openid;\n      }\n\n      if (request.productId) {\n        params.product_id = request.productId;\n      }\n\n      if (request.sceneInfo) {\n        params.scene_info = request.sceneInfo;\n      }\n\n      // 生成签名\n      params.sign = this.generateSign(params);\n\n      // 转换为XML\n      const xml = this.objectToXml(params);\n\n      // 发送请求\n      const response = await this.sendRequest('/pay/unifiedorder', xml);\n\n      // 解析响应\n      const result = this.xmlToObject(response) as UnifiedOrderResponse;\n\n      // 验证签名\n      if (result.sign && !this.verifySign(result, result.sign)) {\n        throw new Error('响应签名验证失败');\n      }\n\n      return result;\n    } catch (error) {\n      console.error('统一下单失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 查询订单\n   */\n  async queryOrder(outTradeNo: string): Promise<OrderQueryResponse> {\n    try {\n      const params: Record<string, string | number> = {\n        appid: this.config.appId,\n        mch_id: this.config.mchId,\n        out_trade_no: outTradeNo,\n        nonce_str: this.generateNonceStr(),\n      };\n\n      // 生成签名\n      params.sign = this.generateSign(params);\n\n      // 转换为XML\n      const xml = this.objectToXml(params);\n\n      // 发送请求\n      const response = await this.sendRequest('/pay/orderquery', xml);\n\n      // 解析响应\n      const result = this.xmlToObject(response) as OrderQueryResponse;\n\n      // 验证签名\n      if (result.sign && !this.verifySign(result, result.sign)) {\n        throw new Error('响应签名验证失败');\n      }\n\n      return result;\n    } catch (error) {\n      console.error('查询订单失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 关闭订单\n   */\n  async closeOrder(outTradeNo: string): Promise<boolean> {\n    try {\n      const params: Record<string, string | number> = {\n        appid: this.config.appId,\n        mch_id: this.config.mchId,\n        out_trade_no: outTradeNo,\n        nonce_str: this.generateNonceStr(),\n      };\n\n      // 生成签名\n      params.sign = this.generateSign(params);\n\n      // 转换为XML\n      const xml = this.objectToXml(params);\n\n      // 发送请求\n      const response = await this.sendRequest('/pay/closeorder', xml);\n\n      // 解析响应\n      const result = this.xmlToObject(response);\n\n      return result.return_code === 'SUCCESS' && result.result_code === 'SUCCESS';\n    } catch (error) {\n      console.error('关闭订单失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 生成支付二维码\n   */\n  async generatePaymentQRCode(request: UnifiedOrderRequest): Promise<{\n    qrCodeUrl: string;\n    prepayId: string;\n    outTradeNo: string;\n  }> {\n    try {\n      // 确保是NATIVE支付\n      request.tradeType = 'NATIVE';\n\n      const orderResult = await this.unifiedOrder(request);\n\n      if (orderResult.returnCode !== 'SUCCESS' || orderResult.resultCode !== 'SUCCESS') {\n        throw new Error(`生成支付订单失败: ${orderResult.returnMsg || orderResult.errCodeDes}`);\n      }\n\n      if (!orderResult.codeUrl) {\n        throw new Error('未获取到支付二维码URL');\n      }\n\n      return {\n        qrCodeUrl: orderResult.codeUrl,\n        prepayId: orderResult.prepayId || '',\n        outTradeNo: request.outTradeNo,\n      };\n    } catch (error) {\n      console.error('生成支付二维码失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 验证支付通知\n   */\n  verifyPaymentNotification(xmlData: string): PaymentNotification | null {\n    try {\n      const data = this.xmlToObject(xmlData) as PaymentNotification;\n\n      // 验证签名\n      if (!this.verifySign(data, data.sign)) {\n        console.error('支付通知签名验证失败');\n        return null;\n      }\n\n      // 验证商户号\n      if (data.mchId !== this.config.mchId) {\n        console.error('支付通知商户号不匹配');\n        return null;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('验证支付通知失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 生成支付通知响应\n   */\n  generateNotificationResponse(success: boolean, message?: string): string {\n    const response = {\n      return_code: success ? 'SUCCESS' : 'FAIL',\n      return_msg: message || (success ? 'OK' : 'FAIL'),\n    };\n\n    return this.objectToXml(response);\n  }\n\n  /**\n   * 获取支付状态\n   */\n  async getPaymentStatus(outTradeNo: string): Promise<{\n    status: PaymentStatus;\n    transactionId?: string;\n    paidAt?: Date;\n    amount?: number;\n  }> {\n    try {\n      const queryResult = await this.queryOrder(outTradeNo);\n\n      if (queryResult.returnCode !== 'SUCCESS') {\n        return { status: 'failed' };\n      }\n\n      let status: PaymentStatus = 'pending';\n\n      switch (queryResult.tradeState) {\n        case 'SUCCESS':\n          status = 'completed';\n          break;\n        case 'REFUND':\n          status = 'refunded';\n          break;\n        case 'NOTPAY':\n          status = 'pending';\n          break;\n        case 'CLOSED':\n        case 'REVOKED':\n        case 'PAYERROR':\n          status = 'failed';\n          break;\n        default:\n          status = 'pending';\n      }\n\n      return {\n        status,\n        transactionId: queryResult.transactionId,\n        paidAt: queryResult.timeEnd ? this.parseWeChatTime(queryResult.timeEnd) : undefined,\n        amount: queryResult.totalFee,\n      };\n    } catch (error) {\n      console.error('获取支付状态失败:', error);\n      return { status: 'failed' };\n    }\n  }\n\n  // 私有方法\n\n  /**\n   * 生成随机字符串\n   */\n  private generateNonceStr(): string {\n    return Math.random().toString(36).substr(2, 15);\n  }\n\n  /**\n   * 生成签名\n   */\n  private generateSign(params: Record<string, any>): string {\n    // 过滤空值和sign字段\n    const filteredParams = Object.keys(params)\n      .filter(key => params[key] !== undefined && params[key] !== '' && key !== 'sign')\n      .sort()\n      .reduce((obj, key) => {\n        obj[key] = params[key];\n        return obj;\n      }, {} as Record<string, any>);\n\n    // 构建签名字符串\n    const stringA = Object.keys(filteredParams)\n      .map(key => `${key}=${filteredParams[key]}`)\n      .join('&');\n\n    const stringSignTemp = `${stringA}&key=${this.config.apiKey}`;\n\n    // MD5签名并转大写\n    return crypto.createHash('md5').update(stringSignTemp, 'utf8').digest('hex').toUpperCase();\n  }\n\n  /**\n   * 验证签名\n   */\n  private verifySign(params: Record<string, any>, sign: string): boolean {\n    const calculatedSign = this.generateSign(params);\n    return calculatedSign === sign;\n  }\n\n  /**\n   * 对象转XML\n   */\n  private objectToXml(obj: Record<string, any>): string {\n    let xml = '<xml>';\n\n    Object.keys(obj).forEach(key => {\n      const value = obj[key];\n      if (typeof value === 'number') {\n        xml += `<${key}>${value}</${key}>`;\n      } else {\n        xml += `<${key}><![CDATA[${value}]]></${key}>`;\n      }\n    });\n\n    xml += '</xml>';\n    return xml;\n  }\n\n  /**\n   * XML转对象\n   */\n  private xmlToObject(xml: string): Record<string, any> {\n    const obj: Record<string, any> = {};\n\n    // 简单的XML解析（生产环境建议使用专业的XML解析库）\n    const regex = /<(\\w+)>(?:<!\\[CDATA\\[)?(.*?)(?:\\]\\]>)?<\\/\\1>/g;\n    let match;\n\n    while ((match = regex.exec(xml)) !== null) {\n      const key = match[1];\n      const value = match[2];\n\n      // 尝试转换为数字\n      if (/^\\d+$/.test(value)) {\n        obj[key] = parseInt(value, 10);\n      } else {\n        obj[key] = value;\n      }\n    }\n\n    return obj;\n  }\n\n  /**\n   * 发送HTTP请求\n   */\n  private async sendRequest(path: string, data: string): Promise<string> {\n    const url = `${this.baseUrl}${path}`;\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/xml; charset=utf-8',\n          'User-Agent': 'WeChatPay-Node-SDK',\n        },\n        body: data,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.text();\n    } catch (error) {\n      console.error('发送请求失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 解析微信时间格式\n   */\n  private parseWeChatTime(timeStr: string): Date {\n    // 微信时间格式：yyyyMMddHHmmss\n    const year = parseInt(timeStr.substr(0, 10), 10);\n    const month = parseInt(timeStr.substr(4, 10), 10) - 1; // 月份从0开始\n    const day = parseInt(timeStr.substr(6, 10), 10);\n    const hour = parseInt(timeStr.substr(8, 10), 10);\n    const minute = parseInt(timeStr.substr(10, 10), 10);\n    const second = parseInt(timeStr.substr(12, 10), 10);\n\n    return new Date(year, month, day, hour, minute, second);\n  }\n}\n\n/**\n * 微信支付工具函数\n */\nexport interface CreateWeChatPayOrderOptions {\n  amount: number;\n  description: string;\n  userId: string;\n  clientIp?: string;\n}\n\nexport interface CreateWeChatPayOrderResult {\n  qrCodeUrl: string;\n  prepayId: string;\n  outTradeNo: string;\n}\n\nexport const WeChatPayUtils = {\n  /**\n   * 生成商户订单号\n   */\n  generateOutTradeNo(prefix: string = 'PAY'): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 6).toUpperCase();\n    return `${prefix}${timestamp}${random}`;\n  },\n\n  /**\n   * 分转元\n   */\n  fenToYuan(fen: number): number {\n    return Math.round(fen / 100 * 100) / 100;\n  },\n\n  /**\n   * 元转分\n   */\n  yuanToFen(yuan: number): number {\n    return Math.round(yuan * 100);\n  },\n\n  /**\n   * 格式化金额显示\n   */\n  formatAmount(fen: number): string {\n    const yuan = this.fenToYuan(fen);\n    return `¥${yuan.toFixed(2)}`;\n  },\n\n  /**\n   * 验证商户订单号格式\n   */\n  validateOutTradeNo(outTradeNo: string): boolean {\n    // 商户订单号规则：1-32位字母数字\n    return /^[a-zA-Z0-9]{1,32}$/.test(outTradeNo);\n  },\n\n  /**\n   * 获取客户端IP\n   */\n  getClientIp(request: Request): string {\n    // 从请求头获取真实IP\n    const forwarded = request.headers.get('x-forwarded-for');\n    const realIp = request.headers.get('x-real-ip');\n    const remoteAddr = request.headers.get('remote-addr');\n\n    if (forwarded) {\n      return forwarded.split(',')[0].trim();\n    }\n\n    return realIp || remoteAddr || '127.0.0.1';\n  },\n\n  /**\n   * 创建微信支付订单（前端预留桩实现）\n   */\n  async createWeChatPayOrder({ amount, description, userId, clientIp }: CreateWeChatPayOrderOptions): Promise<CreateWeChatPayOrderResult> {\n    const outTradeNo = this.generateOutTradeNo('PAY');\n\n    return {\n      qrCodeUrl: `/api/wechat-pay/qrcode?order=${outTradeNo}&user=${encodeURIComponent(userId)}`,\n      prepayId: `mock_prepay_${outTradeNo}`,\n      outTradeNo,\n    };\n  },\n};\n\n// 默认配置（开发环境）\nexport const DEFAULT_WECHAT_PAY_CONFIG: WeChatPayConfig = {\n  appId: process.env.WECHAT_APP_ID || 'wx_test_app_id',\n  mchId: process.env.WECHAT_MCH_ID || '1234567890',\n  apiKey: process.env.WECHAT_API_KEY || 'test_api_key_32_characters_long',\n  notifyUrl: process.env.WECHAT_NOTIFY_URL || 'https://your-domain.com/api/payment/wechat/notify',\n  sandbox: process.env.NODE_ENV !== 'production',\n};\n\n// 导出单例实例\nexport const wechatPayService = new WeChatPayService(DEFAULT_WECHAT_PAY_CONFIG);\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/examples/knowledge-graph-demo.tsx","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected alert.","line":279,"column":5,"nodeType":"CallExpression","messageId":"unexpected","endLine":279,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 知识图谱可视化演示\n * 展示Task3实现的完整功能\n */\n'use client';\n\nimport React, { useState } from 'react';\n\nimport { KnowledgeGraphEditor } from '@/components/knowledge-graph/KnowledgeGraphEditor';\nimport {\n  KnowledgeGraph,\n  GraphNode,\n  GraphEdge,\n  NodeType,\n  EdgeType,\n  GraphType,\n  GraphLayout,\n} from '@/shared/types/knowledgeGraph';\n\n// 创建演示数据\nconst createDemoGraph = (): KnowledgeGraph => {\n  const nodes: GraphNode[] = [\n    {\n      id: 'math',\n      label: '数学',\n      type: NodeType.SUBJECT,\n      level: 0,\n      position: { x: 400, y: 200 },\n      metadata: {\n        workCount: 15,\n        reuseCount: 8,\n        description: '数学是研究数量、结构、变化、空间以及信息等概念的一门学科',\n        tags: ['基础学科', '理科'],\n      },\n      isVisible: true,\n      isLocked: false,\n\n    },\n    {\n      id: 'algebra',\n      label: '代数',\n      type: NodeType.CHAPTER,\n      level: 1,\n      parentId: 'math',\n      position: { x: 300, y: 300 },\n      metadata: {\n        workCount: 8,\n        reuseCount: 4,\n        description: '代数是数学的一个分支，研究数、数量关系与数量结构',\n        tags: ['抽象', '符号运算'],\n      },\n      isVisible: true,\n      isLocked: false,\n\n    },\n    {\n      id: 'geometry',\n      label: '几何',\n      type: NodeType.CHAPTER,\n      level: 1,\n      parentId: 'math',\n      position: { x: 500, y: 300 },\n      metadata: {\n        workCount: 12,\n        reuseCount: 6,\n        description: '几何学是数学的一个分支，研究空间的性质',\n        tags: ['空间', '图形'],\n      },\n      isVisible: true,\n      isLocked: false,\n\n    },\n    {\n      id: 'linear-equations',\n      label: '线性方程',\n      type: NodeType.CONCEPT,\n      level: 2,\n      parentId: 'algebra',\n      position: { x: 250, y: 400 },\n      metadata: {\n        workCount: 20,\n        reuseCount: 12,\n        description: '线性方程是关于未知数的一次方程',\n        tags: ['方程', '一次函数'],\n      },\n      isVisible: true,\n      isLocked: false,\n\n    },\n    {\n      id: 'quadratic-equations',\n      label: '二次方程',\n      type: NodeType.CONCEPT,\n      level: 2,\n      parentId: 'algebra',\n      position: { x: 350, y: 400 },\n      metadata: {\n        workCount: 18,\n        reuseCount: 10,\n        description: '二次方程是关于未知数的二次方程',\n        tags: ['方程', '抛物线'],\n      },\n      isVisible: true,\n      isLocked: false,\n\n    },\n    {\n      id: 'triangles',\n      label: '三角形',\n      type: NodeType.CONCEPT,\n      level: 2,\n      parentId: 'geometry',\n      position: { x: 450, y: 400 },\n      metadata: {\n        workCount: 16,\n        reuseCount: 9,\n        description: '三角形是由三条线段围成的封闭图形',\n        tags: ['多边形', '基础图形'],\n      },\n      isVisible: true,\n      isLocked: false,\n\n    },\n    {\n      id: 'circles',\n      label: '圆',\n      type: NodeType.CONCEPT,\n      level: 2,\n      parentId: 'geometry',\n      position: { x: 550, y: 400 },\n      metadata: {\n        workCount: 14,\n        reuseCount: 7,\n        description: '圆是平面上到定点距离等于定长的点的集合',\n        tags: ['曲线', '圆周率'],\n      },\n      isVisible: true,\n      isLocked: false,\n\n    },\n  ];\n\n  const edges: GraphEdge[] = [\n    {\n      id: 'math-algebra',\n      source: 'math',\n      target: 'algebra',\n      type: EdgeType.CONTAINS,\n      weight: 1,\n      metadata: { description: '数学包含代数' },\n      isVisible: true,\n      isDirected: true,\n    },\n    {\n      id: 'math-geometry',\n      source: 'math',\n      target: 'geometry',\n      type: EdgeType.CONTAINS,\n      weight: 1,\n      metadata: { description: '数学包含几何' },\n      isVisible: true,\n      isDirected: true,\n    },\n    {\n      id: 'algebra-linear',\n      source: 'algebra',\n      target: 'linear-equations',\n      type: EdgeType.CONTAINS,\n      weight: 1,\n      metadata: { description: '代数包含线性方程' },\n      isVisible: true,\n      isDirected: true,\n    },\n    {\n      id: 'algebra-quadratic',\n      source: 'algebra',\n      target: 'quadratic-equations',\n      type: EdgeType.CONTAINS,\n      weight: 1,\n      metadata: { description: '代数包含二次方程' },\n      isVisible: true,\n      isDirected: true,\n    },\n    {\n      id: 'geometry-triangles',\n      source: 'geometry',\n      target: 'triangles',\n      type: EdgeType.CONTAINS,\n      weight: 1,\n      metadata: { description: '几何包含三角形' },\n      isVisible: true,\n      isDirected: true,\n    },\n    {\n      id: 'geometry-circles',\n      source: 'geometry',\n      target: 'circles',\n      type: EdgeType.CONTAINS,\n      weight: 1,\n      metadata: { description: '几何包含圆' },\n      isVisible: true,\n      isDirected: true,\n    },\n    {\n      id: 'linear-quadratic',\n      source: 'linear-equations',\n      target: 'quadratic-equations',\n      type: EdgeType.PREREQUISITE,\n      weight: 0.8,\n      metadata: { description: '线性方程是二次方程的基础' },\n      isVisible: true,\n      isDirected: true,\n    },\n    {\n      id: 'algebra-geometry-related',\n      source: 'algebra',\n      target: 'geometry',\n      type: EdgeType.RELATED,\n      weight: 0.6,\n      metadata: { description: '代数与几何相互关联' },\n      isVisible: true,\n      isDirected: false,\n    },\n  ];\n\n  return {\n    id: 'demo-graph',\n    userId: 'demo-user',\n    name: '数学知识图谱演示',\n    description: '展示知识图谱可视化功能的演示图谱',\n    type: GraphType.CUSTOM,\n    subject: '数学',\n    gradeLevel: '高中',\n    nodes,\n    edges,\n    layout: {\n      type: GraphLayout.FORCE,\n      options: {\n        linkDistance: 100,\n        linkStrength: 0.6,\n        chargeStrength: -400,\n\n        collisionRadius: 35,\n      },\n    },\n    view: {\n      showLabels: true,\n      showEdgeLabels: false,\n      nodeSize: 'proportional',\n      edgeWidth: 'proportional',\n      colorScheme: 'default',\n      theme: 'light',\n      animations: true,\n      minimap: false,\n      toolbar: true,\n    },\n    version: 1,\n    isPublic: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n};\n\nexport function KnowledgeGraphDemo() {\n  const [graph, setGraph] = useState<KnowledgeGraph>(createDemoGraph());\n  const [selectedLayout, setSelectedLayout] = useState<string>('force');\n\n  const handleGraphChange = (updatedGraph: KnowledgeGraph) => {\n    setGraph(updatedGraph);\n    console.log('图谱已更新:', updatedGraph);\n  };\n\n  const handleSelectionChange = (selection: any) => {\n    console.log('选择已变化:', selection);\n  };\n\n  const handleError = (error: string) => {\n    console.error('图谱错误:', error);\n    alert(`图谱错误: ${error}`);\n  };\n\n  const resetGraph = () => {\n    setGraph(createDemoGraph());\n  };\n\n  const exportGraph = () => {\n    const jsonData = JSON.stringify(graph, null, 2);\n    const blob = new Blob([jsonData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'knowledge-graph-demo.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"w-full h-screen bg-gray-50 p-4\">\n      <div className=\"mb-4 bg-white rounded-lg shadow-sm p-4\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n          知识图谱可视化演示 - Task 3 实现展示\n        </h1>\n        <p className=\"text-gray-600 mb-4\">\n          这个演示展示了Task 3实现的完整知识图谱可视化功能，包括D3.js渲染引擎、数据管理、布局算法和交互功能。\n        </p>\n\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <label className=\"text-sm font-medium text-gray-700\">布局算法:</label>\n            <select\n              value={selectedLayout}\n              onChange={(e) => setSelectedLayout(e.target.value)}\n              className=\"px-3 py-1 border border-gray-300 rounded-md text-sm\"\n            >\n              <option value=\"force\">力导向布局</option>\n              <option value=\"hierarchical\">层次布局</option>\n              <option value=\"circular\">环形布局</option>\n              <option value=\"tree\">树形布局</option>\n              <option value=\"grid\">网格布局</option>\n              <option value=\"radial\">径向布局</option>\n            </select>\n          </div>\n\n          <button\n            onClick={resetGraph}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm\"\n          >\n            重置图谱\n          </button>\n\n          <button\n            onClick={exportGraph}\n            className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm\"\n          >\n            导出JSON\n          </button>\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\n        <KnowledgeGraphEditor\n          graph={graph}\n          width={1200}\n          height={700}\n          readonly={false}\n          layoutConfig={{\n            type: selectedLayout as any,\n            options: {\n              linkDistance: 120,\n              linkStrength: 0.6,\n              chargeStrength: -500,\n\n            },\n          }}\n          visualConfig={{\n            node: {\n              defaultRadius: 25,\n              minRadius: 15,\n              maxRadius: 40,\n              strokeWidth: 2,\n              opacity: 0.9,\n              selectedOpacity: 1.0,\n              hoveredOpacity: 1.0,\n            },\n            edge: {\n              defaultStrokeWidth: 2,\n              minStrokeWidth: 1,\n              maxStrokeWidth: 6,\n              opacity: 0.7,\n              selectedOpacity: 0.9,\n              hoveredOpacity: 0.8,\n            },\n            colors: {\n              nodes: {\n                subject: '#1f2937',\n                chapter: '#3b82f6',\n                topic: '#10b981',\n                concept: '#f59e0b',\n                skill: '#ef4444',\n              },\n              edges: {\n                contains: '#6b7280',\n                prerequisite: '#dc2626',\n                related: '#059669',\n                extends: '#7c3aed',\n                applies: '#ea580c',\n              },\n              background: '#ffffff',\n              selection: '#3b82f6',\n              hover: '#f59e0b',\n            },\n            animation: {\n              duration: 300,\n              easing: 'ease-in-out',\n            },\n          }}\n          interactionConfig={{\n            zoom: {\n              enabled: true,\n              scaleExtent: [0.2, 3],\n            },\n            drag: {\n              enabled: true,\n              constrainToCanvas: false,\n              snapToGrid: false,\n              gridSize: 20,\n            },\n            selection: {\n              enabled: true,\n              multiSelect: true,\n              selectOnClick: true,\n            },\n            tooltip: {\n              enabled: true,\n              delay: 300,\n              offset: { x: 10, y: -10 },\n            },\n          }}\n          onGraphChange={handleGraphChange}\n          onSelectionChange={handleSelectionChange}\n          onError={handleError}\n          className=\"border-0\"\n        />\n      </div>\n\n      <div className=\"mt-4 bg-white rounded-lg shadow-sm p-4\">\n        <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">功能说明</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n          <div>\n            <h3 className=\"font-medium text-gray-800 mb-1\">🎨 渲染引擎</h3>\n            <p className=\"text-gray-600\">基于D3.js的高性能图谱渲染，支持动画和交互</p>\n          </div>\n          <div>\n            <h3 className=\"font-medium text-gray-800 mb-1\">📊 数据管理</h3>\n            <p className=\"text-gray-600\">完整的CRUD操作、版本控制和数据导入导出</p>\n          </div>\n          <div>\n            <h3 className=\"font-medium text-gray-800 mb-1\">🔄 布局算法</h3>\n            <p className=\"text-gray-600\">6种布局算法，智能推荐和性能优化</p>\n          </div>\n          <div>\n            <h3 className=\"font-medium text-gray-800 mb-1\">🖱️ 交互功能</h3>\n            <p className=\"text-gray-600\">选择、编辑、搜索、筛选和图谱分析</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default KnowledgeGraphDemo;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/magic/CardEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/magic/CardGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/magic/KnowledgeInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/square/FilterBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/square/SearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/square/WorkCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/square/WorkGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/subscription/PaymentPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateQRCode'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [generateQRCode, paymentRecord]","fix":{"range":[924,939],"text":"[generateQRCode, paymentRecord]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":199,"column":13,"nodeType":"JSXOpeningElement","endLine":203,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\n\nimport { WeChatPayUtils } from '@/core/subscription/wechat-pay';\nimport { PaymentRecord, PaymentStatus, PaymentMethod } from '@/shared/types/subscription';\n\n/**\n * 支付页面组件\n */\nexport interface PaymentPageProps {\n  paymentRecord: PaymentRecord;\n  onPaymentSuccess: (paymentId: string) => void;\n  onCancel: () => void;\n}\n\nexport function PaymentPage({\n  paymentRecord,\n  onPaymentSuccess,\n  onCancel,\n}: PaymentPageProps) {\n  const [paymentStatus, setPaymentStatus] = useState<PaymentStatus>(paymentRecord.status);\n  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');\n  const [countdown, setCountdown] = useState(300); // 5分钟倒计时\n  const [isPolling, setIsPolling] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  // 生成二维码\n  useEffect(() => {\n    if (paymentRecord.paymentMethod === 'wechat_pay') {\n      generateQRCode();\n    }\n  }, [paymentRecord]);\n\n  // 倒计时\n  useEffect(() => {\n    if (countdown > 0 && paymentStatus === 'pending') {\n      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [countdown, paymentStatus]);\n\n  // 生成微信支付二维码\n  const generateQRCode = async () => {\n    try {\n      const result = await WeChatPayUtils.createWeChatPayOrder({\n        amount: paymentRecord.amount,\n        description: `订阅支付 - ${paymentRecord.planId}`,\n        userId: paymentRecord.userId,\n      });\n      setQrCodeUrl(result.qrCodeUrl);\n    } catch (error) {\n      console.error('生成二维码失败:', error);\n      setErrorMessage('生成支付二维码失败，请重试');\n    }\n  };\n\n  // 刷新支付状态\n  const handleRefresh = async () => {\n    setIsPolling(true);\n    try {\n      const response = await fetch(`/api/payment?paymentId=${paymentRecord.id}`);\n      const data = await response.json();\n\n      if (data.success) {\n        setPaymentStatus(data.data.status);\n        if (data.data.status === 'completed') {\n          onPaymentSuccess(paymentRecord.id);\n        }\n      }\n    } catch (error) {\n      console.error('查询支付状态失败:', error);\n    } finally {\n      setIsPolling(false);\n    }\n  };\n\n  // 格式化倒计时\n  const formatCountdown = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  // 获取状态图标\n  const getStatusIcon = () => {\n    switch (paymentStatus) {\n      case 'completed':\n        return (\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n            <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n            </svg>\n          </div>\n        );\n      case 'failed':\n        return (\n          <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n            <svg className=\"w-8 h-8 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n            <svg className=\"w-8 h-8 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\n            </svg>\n          </div>\n        );\n    }\n  };\n\n  // 支付成功页面\n  if (paymentStatus === 'completed') {\n    return (\n      <div className=\"max-w-md mx-auto bg-white rounded-lg shadow-lg p-8 text-center\">\n        {getStatusIcon()}\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">支付成功！</h2>\n        <p className=\"text-gray-600 mb-6\">您的订阅已激活，感谢您的支持</p>\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">支付金额:</span>\n            <span className=\"font-medium text-gray-900\">\n              {WeChatPayUtils.formatAmount(paymentRecord.amount)}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between text-sm mt-2\">\n            <span className=\"text-gray-600\">订单号:</span>\n            <span className=\"font-medium text-gray-900 font-mono text-xs\">\n              {paymentRecord.id}\n            </span>\n          </div>\n        </div>\n        <button\n          onClick={() => onPaymentSuccess(paymentRecord.id)}\n          className=\"w-full bg-green-600 text-white font-medium py-3 px-4 rounded-lg hover:bg-green-700 transition-colors\"\n        >\n          继续使用\n        </button>\n      </div>\n    );\n  }\n\n  // 支付失败页面\n  if (paymentStatus === 'failed') {\n    return (\n      <div className=\"max-w-md mx-auto bg-white rounded-lg shadow-lg p-8 text-center\">\n        {getStatusIcon()}\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">支付失败</h2>\n        <p className=\"text-gray-600 mb-6\">{errorMessage || '支付过程中出现问题，请重试'}</p>\n        <div className=\"space-y-3\">\n          <button\n            onClick={handleRefresh}\n            className=\"w-full bg-blue-600 text-white font-medium py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            重新支付\n          </button>\n          <button\n            onClick={onCancel}\n            className=\"w-full border border-gray-300 text-gray-700 font-medium py-3 px-4 rounded-lg hover:bg-gray-50 transition-colors\"\n          >\n            取消支付\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // 支付中页面（微信支付）\n  return (\n    <div className=\"max-w-md mx-auto bg-white rounded-lg shadow-lg p-8\">\n      {/* 头部信息 */}\n      <div className=\"text-center mb-6\">\n        {getStatusIcon()}\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">微信支付</h2>\n        <p className=\"text-gray-600\">请使用微信扫描下方二维码完成支付</p>\n      </div>\n\n      {/* 支付信息 */}\n      <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n        <div className=\"flex items-center justify-between text-sm mb-2\">\n          <span className=\"text-gray-600\">支付金额:</span>\n          <span className=\"text-2xl font-bold text-red-600\">\n            {WeChatPayUtils.formatAmount(paymentRecord.amount)}\n          </span>\n        </div>\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-gray-600\">订单号:</span>\n          <span className=\"font-medium text-gray-900 font-mono text-xs\">\n            {paymentRecord.id}\n          </span>\n        </div>\n      </div>\n\n      {/* 二维码 */}\n      <div className=\"text-center mb-6\">\n        {qrCodeUrl ? (\n          <div className=\"inline-block p-4 bg-white border-2 border-gray-200 rounded-lg\">\n            <img\n              src={qrCodeUrl}\n              alt=\"支付二维码\"\n              className=\"w-48 h-48 mx-auto\"\n            />\n          </div>\n        ) : (\n          <div className=\"w-48 h-48 mx-auto bg-gray-100 rounded-lg flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n              <p className=\"text-sm text-gray-500\">生成二维码中...</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* 倒计时 */}\n      <div className=\"text-center mb-6\">\n        <div className=\"inline-flex items-center px-3 py-1 bg-orange-100 text-orange-800 rounded-full text-sm\">\n          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          </svg>\n          支付剩余时间: {formatCountdown(countdown)}\n        </div>\n      </div>\n\n      {/* 支付说明 */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n        <h4 className=\"font-medium text-blue-900 mb-2\">支付说明:</h4>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• 请在5分钟内完成支付</li>\n          <li>• 支付成功后订阅将立即生效</li>\n          <li>• 如遇问题请联系客服</li>\n        </ul>\n      </div>\n\n      {/* 操作按钮 */}\n      <div className=\"space-y-3\">\n        <button\n          onClick={handleRefresh}\n          disabled={isPolling}\n          className=\"w-full border border-blue-600 text-blue-600 font-medium py-3 px-4 rounded-lg hover:bg-blue-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {isPolling ? (\n            <span className=\"flex items-center justify-center\">\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\n              检查支付状态中...\n            </span>\n          ) : (\n            '刷新支付状态'\n          )}\n        </button>\n\n        <button\n          onClick={onCancel}\n          className=\"w-full border border-gray-300 text-gray-700 font-medium py-3 px-4 rounded-lg hover:bg-gray-50 transition-colors\"\n        >\n          取消支付\n        </button>\n      </div>\n\n      {/* 底部提示 */}\n      <div className=\"mt-6 text-center\">\n        <p className=\"text-xs text-gray-500\">\n          支付遇到问题？\n          <a href=\"/help/payment\" className=\"text-blue-600 hover:underline ml-1\">\n            查看帮助\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\n/**\n * 支付状态指示器组件\n */\nexport function PaymentStatusIndicator({\n  status,\n  className = '',\n}: {\n  status: PaymentStatus;\n  className?: string;\n}) {\n  const getStatusConfig = () => {\n    switch (status) {\n      case 'pending':\n        return {\n          color: 'text-yellow-600',\n          bg: 'bg-yellow-100',\n          text: '待支付',\n        };\n      case 'completed':\n        return {\n          color: 'text-green-600',\n          bg: 'bg-green-100',\n          text: '已支付',\n        };\n      case 'failed':\n        return {\n          color: 'text-red-600',\n          bg: 'bg-red-100',\n          text: '支付失败',\n        };\n      case 'refunded':\n        return {\n          color: 'text-blue-600',\n          bg: 'bg-blue-100',\n          text: '已退款',\n        };\n      case 'cancelled':\n        return {\n          color: 'text-gray-600',\n          bg: 'bg-gray-100',\n          text: '已取消',\n        };\n      case 'processing':\n        return {\n          color: 'text-orange-600',\n          bg: 'bg-orange-100',\n          text: '处理中',\n        };\n      default:\n        return {\n          color: 'text-gray-600',\n          bg: 'bg-gray-100',\n          text: '未知状态',\n        };\n    }\n  };\n\n  const config = getStatusConfig();\n\n  return (\n    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${config.bg} ${config.color} ${className}`}>\n      {config.text}\n    </span>\n  );\n}\n\n/**\n * 支付金额显示组件\n */\nexport function PaymentAmount({\n  amount,\n  currency = 'CNY',\n  size = 'normal',\n  className = '',\n}: {\n  amount: number;\n  currency?: string;\n  size?: 'small' | 'normal' | 'large';\n  className?: string;\n}) {\n  const sizeClasses = {\n    small: 'text-sm',\n    normal: 'text-base',\n    large: 'text-2xl font-bold',\n  };\n\n  return (\n    <span className={`${sizeClasses[size]} ${className}`}>\n      {WeChatPayUtils.formatAmount(amount)}\n    </span>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/subscription/SubscriptionStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/subscription/SubscriptionUpgrade.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/features/subscription/UpgradePrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/api/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/api/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/api/responses.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":380,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":394,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API响应标准化工具\n */\n\nimport { NextResponse } from 'next/server';\n\nimport { logger } from '@/lib/logging/logger';\nimport { reportError } from '@/lib/monitoring';\nimport { CustomError } from '@/shared/errors/CustomError';\nimport { ErrorCode } from '@/shared/errors/types';\n\n/**\n * 标准API响应接口\n */\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: ApiError;\n  meta?: ApiMeta;\n  status?: number;\n}\n\n/**\n * API错误接口\n */\nexport interface ApiError {\n  code: ErrorCode;\n  message: string;\n  details?: any;\n  timestamp: string;\n  traceId: string;\n  field?: string; // 用于字段验证错误\n  stack?: string; // 仅开发环境\n}\n\n/**\n * API元数据接口\n */\nexport interface ApiMeta {\n  timestamp: string;\n  version: string;\n  requestId: string;\n  pagination?: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n  performance?: {\n    duration: number;\n    queries?: number;\n  };\n}\n\n/**\n * 分页参数接口\n */\nexport interface PaginationParams {\n  page?: number;\n  limit?: number;\n  offset?: number;\n}\n\n/**\n * 生成追踪ID\n */\nfunction generateTraceId(): string {\n  return `trace-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * 创建成功响应\n */\nexport function createSuccessResponse<T>(\n  data: T,\n  meta?: Partial<ApiMeta>,\n  status: number = 200,\n): NextResponse<ApiResponse<T>> {\n  const response: ApiResponse<T> = {\n    success: true,\n    data,\n    meta: {\n      timestamp: new Date().toISOString(),\n      version: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n      requestId: generateTraceId(),\n      ...meta,\n    },\n  };\n\n  return NextResponse.json(response, { status });\n}\n\n/**\n * 创建错误响应\n */\nexport function createErrorResponse(\n  error: Error | CustomError | string,\n  status?: number,\n  details?: any,\n  field?: string,\n): NextResponse<ApiResponse> {\n  let customError: CustomError;\n  let httpStatus = status || 500;\n\n  // 转换为CustomError\n  if (error instanceof CustomError) {\n    customError = error;\n    httpStatus = status || error.httpStatus;\n  } else if (error instanceof Error) {\n    customError = CustomError.fromError(error, ErrorCode.INTERNAL_SERVER_ERROR);\n  } else {\n    const message = typeof error === 'string' ? error : 'Unknown error';\n    customError = new CustomError(ErrorCode.INTERNAL_SERVER_ERROR, message);\n  }\n\n  const traceId = generateTraceId();\n  const isDevelopment = process.env.NODE_ENV === 'development';\n\n  // 记录错误日志\n  logger.error('API Error Response', customError, {\n    metadata: {\n      traceId,\n      httpStatus,\n      field,\n      details,\n    },\n  });\n\n  // 报告错误到监控系统\n  reportError(customError, {\n    tags: {\n      api_error: 'true',\n      http_status: httpStatus.toString(),\n      error_code: customError.code,\n    },\n    extra: {\n      traceId,\n      field,\n      details,\n    },\n  });\n\n  const apiError: ApiError = {\n    code: customError.code,\n    message: customError.userMessage,\n    timestamp: new Date().toISOString(),\n    traceId,\n    ...(details && { details }),\n    ...(field && { field }),\n    ...(isDevelopment && customError.stack && { stack: customError.stack }),\n  };\n\n  const response: ApiResponse = {\n    success: false,\n    error: apiError,\n  };\n\n  return NextResponse.json(response, { status: httpStatus });\n}\n\n/**\n * 创建验证错误响应\n */\nexport function createValidationErrorResponse(\n  message: string,\n  field?: string,\n  details?: any,\n): NextResponse<ApiResponse> {\n  const error = new CustomError(ErrorCode.VALIDATION_ERROR, message);\n  return createErrorResponse(error, 400, details, field);\n}\n\n/**\n * 创建认证错误响应\n */\nexport function createAuthErrorResponse(\n  message: string = '认证失败，请重新登录',\n): NextResponse<ApiResponse> {\n  const error = new CustomError(ErrorCode.AUTHENTICATION_ERROR, message);\n  return createErrorResponse(error, 401);\n}\n\n/**\n * 创建权限错误响应\n */\nexport function createPermissionErrorResponse(\n  message: string = '权限不足，无法访问此资源',\n): NextResponse<ApiResponse> {\n  const error = new CustomError(ErrorCode.AUTHORIZATION_ERROR, message);\n  return createErrorResponse(error, 403);\n}\n\n/**\n * 创建资源未找到错误响应\n */\nexport function createNotFoundErrorResponse(\n  resource: string = '资源',\n): NextResponse<ApiResponse> {\n  const error = new CustomError(ErrorCode.RESOURCE_NOT_FOUND, `${resource}不存在`);\n  return createErrorResponse(error, 404);\n}\n\n/**\n * 创建业务逻辑错误响应\n */\nexport function createBusinessErrorResponse(\n  message: string,\n  code?: ErrorCode,\n  details?: any,\n): NextResponse<ApiResponse> {\n  const errorCode = code || ErrorCode.BUSINESS_LOGIC_ERROR;\n  const error = new CustomError(errorCode, message);\n  return createErrorResponse(error, 400, details);\n}\n\n/**\n * 创建服务器错误响应\n */\nexport function createServerErrorResponse(\n  message: string = '服务器内部错误，请稍后重试',\n): NextResponse<ApiResponse> {\n  const error = new CustomError(ErrorCode.INTERNAL_SERVER_ERROR, message);\n  return createErrorResponse(error, 500);\n}\n\n/**\n * 创建分页响应\n */\nexport function createPaginatedResponse<T>(\n  data: T[],\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n  },\n  meta?: Partial<ApiMeta>,\n): NextResponse<ApiResponse<T[]>> {\n  const totalPages = Math.ceil(pagination.total / pagination.limit);\n\n  return createSuccessResponse(data, {\n    ...meta,\n    pagination: {\n      page: pagination.page,\n      limit: pagination.limit,\n      total: pagination.total,\n      totalPages,\n    },\n  });\n}\n\n/**\n * 解析分页参数\n */\nexport function parsePaginationParams(searchParams: URLSearchParams): {\n  page: number;\n  limit: number;\n  offset: number;\n} {\n  const page = Math.max(1, parseInt(searchParams.get('page') || '1', 10));\n  const limit = Math.min(100, Math.max(1, parseInt(searchParams.get('limit') || '10', 10)));\n  const offset = (page - 1) * limit;\n\n  return { page, limit, offset };\n}\n\n/**\n * API错误处理装饰器\n */\nexport function withErrorHandling<T extends any[], R>(\n  handler: (...args: T) => Promise<R>,\n) {\n  return async (...args: T): Promise<R | NextResponse<ApiResponse>> => {\n    try {\n      return await handler(...args);\n    } catch (error) {\n      if (error instanceof CustomError) {\n        return createErrorResponse(error);\n      } else if (error instanceof Error) {\n        return createErrorResponse(error);\n      } else {\n        return createServerErrorResponse('未知错误');\n      }\n    }\n  };\n}\n\n/**\n * 验证请求体\n */\nexport async function validateRequestBody<T>(\n  request: Request,\n  validator: (data: any) => T | Promise<T>,\n): Promise<T> {\n  try {\n    const body = await request.json();\n    return await validator(body);\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      throw new CustomError(ErrorCode.VALIDATION_ERROR, '请求体格式错误，请检查JSON格式');\n    }\n    throw error;\n  }\n}\n\n/**\n * 验证查询参数\n */\nexport function validateQueryParams<T>(\n  searchParams: URLSearchParams,\n  validator: (params: Record<string, string>) => T,\n): T {\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  return validator(params);\n}\n\n/**\n * 错误码映射\n */\nexport const ERROR_CODE_MAP: Partial<Record<ErrorCode, { status: number; message: string }>> = {\n  [ErrorCode.VALIDATION_ERROR]: {\n    status: 400,\n    message: '请求参数验证失败',\n  },\n  [ErrorCode.AUTHENTICATION_ERROR]: {\n    status: 401,\n    message: '认证失败，请重新登录',\n  },\n  [ErrorCode.AUTHORIZATION_ERROR]: {\n    status: 403,\n    message: '权限不足，无法访问此资源',\n  },\n  [ErrorCode.RESOURCE_NOT_FOUND]: {\n    status: 404,\n    message: '请求的资源不存在',\n  },\n  [ErrorCode.BUSINESS_LOGIC_ERROR]: {\n    status: 400,\n    message: '业务逻辑错误',\n  },\n  [ErrorCode.RATE_LIMIT_EXCEEDED]: {\n    status: 429,\n    message: '请求频率过高，请稍后重试',\n  },\n  [ErrorCode.CIRCUIT_BREAKER_OPEN]: {\n    status: 503,\n    message: '服务暂时不可用，请稍后重试',\n  },\n  [ErrorCode.CIRCUIT_BREAKER_HALF_OPEN_LIMIT]: {\n    status: 503,\n    message: '服务正在恢复中，请稍后重试',\n  },\n  [ErrorCode.INTERNAL_SERVER_ERROR]: {\n    status: 500,\n    message: '服务器内部错误',\n  },\n  [ErrorCode.SERVICE_UNAVAILABLE]: {\n    status: 503,\n    message: '服务暂时不可用',\n  },\n};\n\n/**\n * 根据错误码获取HTTP状态码\n */\nexport function getHttpStatusFromErrorCode(code: ErrorCode): number {\n  return ERROR_CODE_MAP[code]?.status || 500;\n}\n\n/**\n * 根据错误码获取默认错误消息\n */\nexport function getDefaultErrorMessage(code: ErrorCode): string {\n  return ERROR_CODE_MAP[code]?.message || '未知错误';\n}\n\nexport default {\n  createSuccessResponse,\n  createErrorResponse,\n  createValidationErrorResponse,\n  createAuthErrorResponse,\n  createPermissionErrorResponse,\n  createNotFoundErrorResponse,\n  createBusinessErrorResponse,\n  createServerErrorResponse,\n  createPaginatedResponse,\n  parsePaginationParams,\n  withErrorHandling,\n  validateRequestBody,\n  validateQueryParams,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/api/retry.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":406,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":417,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API重试机制\n */\n\nimport { logger } from '@/lib/logging/logger';\nimport { ErrorCode } from '@/shared/errors/types';\n\nimport { ApiError } from './client';\n\n/**\n * 重试策略接口\n */\nexport interface RetryStrategy {\n  maxRetries: number;\n  baseDelay: number;\n  maxDelay: number;\n  backoffFactor: number;\n  jitter: boolean;\n  retryCondition: (error: ApiError, attempt: number) => boolean;\n}\n\n/**\n * 重试结果接口\n */\nexport interface RetryResult<T> {\n  success: boolean;\n  data?: T;\n  error?: ApiError;\n  attempts: number;\n  totalDuration: number;\n}\n\n/**\n * 默认重试策略\n */\nexport const DEFAULT_RETRY_STRATEGY: RetryStrategy = {\n  maxRetries: 3,\n  baseDelay: 1000,\n  maxDelay: 30000,\n  backoffFactor: 2,\n  jitter: true,\n  retryCondition: (error: ApiError, attempt: number) => {\n    // 只对特定错误进行重试\n    return error.isRetryable() && attempt < 3;\n  },\n};\n\n/**\n * 指数退避重试策略\n */\nexport const EXPONENTIAL_BACKOFF_STRATEGY: RetryStrategy = {\n  maxRetries: 5,\n  baseDelay: 500,\n  maxDelay: 60000,\n  backoffFactor: 2,\n  jitter: true,\n  retryCondition: (error: ApiError, attempt: number) => {\n    // 网络错误和服务器错误可重试\n    return (error.isNetworkError() || error.isServerError()) && attempt < 5;\n  },\n};\n\n/**\n * 线性重试策略\n */\nexport const LINEAR_RETRY_STRATEGY: RetryStrategy = {\n  maxRetries: 3,\n  baseDelay: 2000,\n  maxDelay: 10000,\n  backoffFactor: 1,\n  jitter: false,\n  retryCondition: (error: ApiError, attempt: number) => {\n    // 只对5xx错误重试\n    return error.isServerError() && attempt < 3;\n  },\n};\n\n/**\n * 快速重试策略（用于实时操作）\n */\nexport const FAST_RETRY_STRATEGY: RetryStrategy = {\n  maxRetries: 2,\n  baseDelay: 100,\n  maxDelay: 1000,\n  backoffFactor: 2,\n  jitter: true,\n  retryCondition: (error: ApiError, attempt: number) => {\n    // 只对网络错误快速重试\n    return error.isNetworkError() && attempt < 2;\n  },\n};\n\n/**\n * 重试管理器\n */\nexport class RetryManager {\n  private strategy: RetryStrategy;\n\n  constructor(strategy: RetryStrategy = DEFAULT_RETRY_STRATEGY) {\n    this.strategy = strategy;\n  }\n\n  /**\n   * 执行带重试的操作\n   */\n  async execute<T>(\n    operation: () => Promise<T>,\n    customStrategy?: Partial<RetryStrategy>,\n  ): Promise<RetryResult<T>> {\n    const strategy = { ...this.strategy, ...customStrategy };\n    const startTime = Date.now();\n    let lastError: ApiError;\n    let attempts = 0;\n\n    for (let attempt = 0; attempt <= strategy.maxRetries; attempt++) {\n      attempts = attempt + 1;\n\n      try {\n        if (attempt > 0) {\n          // 计算延迟时间\n          const delay = this.calculateDelay(attempt, strategy);\n\n          logger.info('Retrying operation', {\n            metadata: {\n              attempt,\n              maxRetries: strategy.maxRetries,\n              delay,\n              lastError: lastError?.message,\n            },\n          });\n\n          await this.delay(delay);\n        }\n\n        const result = await operation();\n\n        return {\n          success: true,\n          data: result,\n          attempts,\n          totalDuration: Date.now() - startTime,\n        };\n      } catch (error) {\n        lastError = error instanceof ApiError ? error : new ApiError(\n          error instanceof Error ? error.message : 'Unknown error',\n          0,\n        );\n\n        // 检查是否应该重试\n        if (!strategy.retryCondition(lastError, attempt)) {\n          break;\n        }\n      }\n    }\n\n    return {\n      success: false,\n      error: lastError!,\n      attempts,\n      totalDuration: Date.now() - startTime,\n    };\n  }\n\n  /**\n   * 计算延迟时间\n   */\n  private calculateDelay(attempt: number, strategy: RetryStrategy): number {\n    let delay: number;\n\n    if (strategy.backoffFactor === 1) {\n      // 线性退避\n      delay = strategy.baseDelay * attempt;\n    } else {\n      // 指数退避\n      delay = strategy.baseDelay * Math.pow(strategy.backoffFactor, attempt - 1);\n    }\n\n    // 应用最大延迟限制\n    delay = Math.min(delay, strategy.maxDelay);\n\n    // 添加抖动\n    if (strategy.jitter) {\n      delay = delay * (0.5 + Math.random() * 0.5);\n    }\n\n    return Math.floor(delay);\n  }\n\n  /**\n   * 延迟函数\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * 更新重试策略\n   */\n  updateStrategy(strategy: Partial<RetryStrategy>): void {\n    this.strategy = { ...this.strategy, ...strategy };\n  }\n\n  /**\n   * 获取当前策略\n   */\n  getStrategy(): RetryStrategy {\n    return { ...this.strategy };\n  }\n}\n\n/**\n * 断路器状态\n */\nexport enum CircuitBreakerState {\n  CLOSED = 'closed',\n  OPEN = 'open',\n  HALF_OPEN = 'half_open'\n}\n\n/**\n * 断路器配置\n */\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;\n  recoveryTimeout: number;\n  monitoringPeriod: number;\n  halfOpenMaxCalls: number;\n}\n\n/**\n * 断路器\n */\nexport class CircuitBreaker {\n  private state: CircuitBreakerState = CircuitBreakerState.CLOSED;\n  private failureCount = 0;\n  private lastFailureTime = 0;\n  private halfOpenCalls = 0;\n  private config: CircuitBreakerConfig;\n\n  constructor(config: Partial<CircuitBreakerConfig> = {}) {\n    this.config = {\n      failureThreshold: 5,\n      recoveryTimeout: 60000, // 1分钟\n      monitoringPeriod: 10000, // 10秒\n      halfOpenMaxCalls: 3,\n      ...config,\n    };\n  }\n\n  /**\n   * 执行操作\n   */\n  async execute<T>(operation: () => Promise<T>): Promise<T> {\n    if (this.state === CircuitBreakerState.OPEN) {\n      if (this.shouldAttemptReset()) {\n        this.state = CircuitBreakerState.HALF_OPEN;\n        this.halfOpenCalls = 0;\n      } else {\n        throw new ApiError(\n          '服务暂时不可用，请稍后重试',\n          503,\n          ErrorCode.CIRCUIT_BREAKER_OPEN,\n        );\n      }\n    }\n\n    if (this.state === CircuitBreakerState.HALF_OPEN &&\n        this.halfOpenCalls >= this.config.halfOpenMaxCalls) {\n      throw new ApiError(\n        '服务正在恢复中，请稍后重试',\n        503,\n        ErrorCode.CIRCUIT_BREAKER_HALF_OPEN_LIMIT,\n      );\n    }\n\n    try {\n      const result = await operation();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  /**\n   * 成功回调\n   */\n  private onSuccess(): void {\n    this.failureCount = 0;\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      this.halfOpenCalls++;\n\n      if (this.halfOpenCalls >= this.config.halfOpenMaxCalls) {\n        this.state = CircuitBreakerState.CLOSED;\n        this.halfOpenCalls = 0;\n      }\n    }\n  }\n\n  /**\n   * 失败回调\n   */\n  private onFailure(): void {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      this.state = CircuitBreakerState.OPEN;\n      this.halfOpenCalls = 0;\n    } else if (this.failureCount >= this.config.failureThreshold) {\n      this.state = CircuitBreakerState.OPEN;\n    }\n  }\n\n  /**\n   * 是否应该尝试重置\n   */\n  private shouldAttemptReset(): boolean {\n    return Date.now() - this.lastFailureTime >= this.config.recoveryTimeout;\n  }\n\n  /**\n   * 获取状态\n   */\n  getState(): CircuitBreakerState {\n    return this.state;\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats() {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      lastFailureTime: this.lastFailureTime,\n      halfOpenCalls: this.halfOpenCalls,\n    };\n  }\n\n  /**\n   * 重置断路器\n   */\n  reset(): void {\n    this.state = CircuitBreakerState.CLOSED;\n    this.failureCount = 0;\n    this.lastFailureTime = 0;\n    this.halfOpenCalls = 0;\n  }\n}\n\n/**\n * 创建重试管理器\n */\nexport function createRetryManager(strategy?: RetryStrategy): RetryManager {\n  return new RetryManager(strategy);\n}\n\n/**\n * 创建断路器\n */\nexport function createCircuitBreaker(config?: Partial<CircuitBreakerConfig>): CircuitBreaker {\n  return new CircuitBreaker(config);\n}\n\n/**\n * 重试装饰器\n */\nexport function withRetry<T extends any[], R>(\n  fn: (...args: T) => Promise<R>,\n  strategy?: Partial<RetryStrategy>,\n): (...args: T) => Promise<R> {\n  const retryManager = new RetryManager({ ...DEFAULT_RETRY_STRATEGY, ...strategy });\n\n  return async (...args: T): Promise<R> => {\n    const result = await retryManager.execute(() => fn(...args));\n\n    if (result.success) {\n      return result.data!;\n    }\n\n    if (result.error instanceof Error) {\n      throw result.error;\n    }\n\n    throw new Error(String(result.error));\n  };\n}\n\n/**\n * 断路器装饰器\n */\nexport function withCircuitBreaker<T extends any[], R>(\n  fn: (...args: T) => Promise<R>,\n  config?: Partial<CircuitBreakerConfig>,\n): (...args: T) => Promise<R> {\n  const circuitBreaker = new CircuitBreaker(config);\n\n  return async (...args: T): Promise<R> => {\n    return circuitBreaker.execute(() => fn(...args));\n  };\n}\n\nexport default {\n  RetryManager,\n  CircuitBreaker,\n  createRetryManager,\n  createCircuitBreaker,\n  withRetry,\n  withCircuitBreaker,\n  DEFAULT_RETRY_STRATEGY,\n  EXPONENTIAL_BACKOFF_STRATEGY,\n  LINEAR_RETRY_STRATEGY,\n  FAST_RETRY_STRATEGY,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/assets/compression.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/assets/optimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/assets/upload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/assets/version.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/cache/redis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/cache/simple-redis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/cdn/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/config/contribution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/config/knowledgeGraph.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/aggregation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/connection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/indexes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/operations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/optimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/pagination.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/preload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/relations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/slow-query.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/database/test-connection.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":213,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":220,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import connectDB, { disconnectDB, getConnectionStatus } from '../mongodb';\nimport { getRedisClient, getRedisStatus, disconnectRedis } from '../redis';\n// Import models to ensure they are registered\nimport '../models/User';\nimport '../models/Work';\nimport '../models/KnowledgeGraph';\nimport '../models/ContributionLog';\n\n/**\n * Database connection testing utilities\n */\n\nexport interface ConnectionTestResult {\n  success: boolean;\n  service: string;\n  status: string;\n  details?: any;\n  error?: string;\n}\n\nexport interface FullTestResult {\n  overall: boolean;\n  results: ConnectionTestResult[];\n  timestamp: Date;\n}\n\n/**\n * Test MongoDB connection\n */\nexport async function testMongoConnection(): Promise<ConnectionTestResult> {\n  try {\n    await connectDB();\n    const status = getConnectionStatus();\n\n    return {\n      success: status.isConnected,\n      service: 'MongoDB',\n      status: status.isConnected ? 'Connected' : 'Disconnected',\n      details: {\n        host: status.host,\n        database: status.name,\n        readyState: status.readyState,\n      },\n    };\n  } catch (error) {\n    return {\n      success: false,\n      service: 'MongoDB',\n      status: 'Error',\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Test Redis connection\n */\nexport async function testRedisConnection(): Promise<ConnectionTestResult> {\n  try {\n    const status = await getRedisStatus();\n\n    return {\n      success: status.isConnected,\n      service: 'Redis',\n      status: status.isConnected ? 'Connected' : 'Disconnected',\n      details: {\n        url: status.url,\n        status: status.status,\n      },\n      error: status.error,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      service: 'Redis',\n      status: 'Error',\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Test model initialization\n */\nexport async function testModelInitialization(): Promise<ConnectionTestResult> {\n  try {\n    // Models are already initialized by importing them\n\n    return {\n      success: true,\n      service: 'Models',\n      status: 'Initialized',\n      details: {\n        message: 'All models successfully initialized',\n      },\n    };\n  } catch (error) {\n    return {\n      success: false,\n      service: 'Models',\n      status: 'Error',\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Test basic database operations\n */\nexport async function testBasicOperations(): Promise<ConnectionTestResult> {\n  try {\n    await connectDB();\n\n    // Test MongoDB operations\n    const { User } = await import('../models');\n\n    // Try to count users (basic read operation)\n    const userCount = await (User.countDocuments as any)();\n\n    // Test Redis operations\n    const redis = getRedisClient();\n    await redis.set('test_key', 'test_value', 'EX', 10);\n    const testValue = await redis.get('test_key');\n    await redis.del('test_key');\n\n    return {\n      success: testValue === 'test_value',\n      service: 'Operations',\n      status: 'Working',\n      details: {\n        mongoRead: `Found ${userCount} users`,\n        redisReadWrite: testValue === 'test_value' ? 'Success' : 'Failed',\n      },\n    };\n  } catch (error) {\n    return {\n      success: false,\n      service: 'Operations',\n      status: 'Error',\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Run comprehensive database tests\n */\nexport async function runDatabaseTests(): Promise<FullTestResult> {\n  console.log('🧪 Starting database connection tests...');\n\n  const results: ConnectionTestResult[] = [];\n\n  // Test MongoDB\n  console.log('📊 Testing MongoDB connection...');\n  const mongoResult = await testMongoConnection();\n  results.push(mongoResult);\n  console.log(`${mongoResult.success ? '✅' : '❌'} MongoDB: ${mongoResult.status}`);\n\n  // Test Redis\n  console.log('🔴 Testing Redis connection...');\n  const redisResult = await testRedisConnection();\n  results.push(redisResult);\n  console.log(`${redisResult.success ? '✅' : '❌'} Redis: ${redisResult.status}`);\n\n  // Test Models\n  console.log('📋 Testing model initialization...');\n  const modelsResult = await testModelInitialization();\n  results.push(modelsResult);\n  console.log(`${modelsResult.success ? '✅' : '❌'} Models: ${modelsResult.status}`);\n\n  // Test Basic Operations\n  console.log('⚙️ Testing basic operations...');\n  const operationsResult = await testBasicOperations();\n  results.push(operationsResult);\n  console.log(`${operationsResult.success ? '✅' : '❌'} Operations: ${operationsResult.status}`);\n\n  const overall = results.every(result => result.success);\n\n  console.log('\\n📋 Test Summary:');\n  console.log('================');\n  results.forEach(result => {\n    console.log(`${result.success ? '✅' : '❌'} ${result.service}: ${result.status}`);\n    if (result.error) {\n      console.log(`   Error: ${result.error}`);\n    }\n    if (result.details) {\n      console.log(`   Details: ${JSON.stringify(result.details, null, 2)}`);\n    }\n  });\n\n  console.log(`\\n🎯 Overall Result: ${overall ? '✅ PASS' : '❌ FAIL'}`);\n\n  return {\n    overall,\n    results,\n    timestamp: new Date(),\n  };\n}\n\n/**\n * Cleanup connections after testing\n */\nexport async function cleanupConnections(): Promise<void> {\n  try {\n    await disconnectDB();\n    await disconnectRedis();\n    console.log('🧹 Database connections cleaned up');\n  } catch (error) {\n    console.error('❌ Error during cleanup:', error);\n  }\n}\n\nexport default {\n  testMongoConnection,\n  testRedisConnection,\n  testModelInitialization,\n  testBasicOperations,\n  runDatabaseTests,\n  cleanupConnections,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/db-utils.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":209,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":213,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose from 'mongoose';\n\nimport connectDB from './mongodb';\nimport redisClient, { getRedisClient } from './redis';\n\n/**\n * 数据库操作工具类\n */\nexport class DatabaseUtils {\n  /**\n   * 确保数据库连接\n   */\n  static async ensureConnection() {\n    await connectDB();\n  }\n\n  /**\n   * 确保Redis连接\n   */\n  static async ensureRedisConnection() {\n    // Redis client is already initialized\n  }\n\n  /**\n   * 检查数据库连接状态\n   */\n  static isMongoConnected(): boolean {\n    return mongoose.connection.readyState === 1;\n  }\n\n  /**\n   * 检查Redis连接状态\n   */\n  static async isRedisConnected(): Promise<boolean> {\n    try {\n      const status = await redisClient.getStatus();\n      return status.isConnected;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * 关闭所有数据库连接（主要用于测试）\n   */\n  static async closeConnections() {\n    // 关闭MongoDB连接\n    if (mongoose.connection.readyState !== 0) {\n      await mongoose.connection.close();\n    }\n\n    // 关闭Redis连接\n    try {\n      const client = await getRedisClient();\n      await client.quit();\n    } catch (error) {\n      // Redis连接可能已经关闭\n    }\n\n    // 清理全局缓存\n    const globalCache = global as typeof global & {\n      __mongooseCache?: { conn: any; promise: any };\n      redis?: { conn: any; promise: any };\n    };\n\n    globalCache.__mongooseCache = { conn: null, promise: null };\n    if (globalCache.redis) {\n      globalCache.redis = { conn: null, promise: null };\n    }\n  }\n\n  /**\n   * 创建数据库索引\n   */\n  static async createIndexes() {\n    await this.ensureConnection();\n\n    // 这里可以添加额外的索引创建逻辑\n    // 大部分索引已在模型定义中创建\n    console.log('Database indexes created successfully');\n  }\n\n  /**\n   * 数据库健康检查\n   */\n  static async healthCheck(): Promise<{\n    mongodb: boolean;\n    redis: boolean;\n    timestamp: Date;\n  }> {\n    const mongodb = this.isMongoConnected();\n    const redis = await this.isRedisConnected();\n\n    return {\n      mongodb,\n      redis,\n      timestamp: new Date(),\n    };\n  }\n}\n\n/**\n * Redis缓存工具类\n */\nexport class CacheUtils {\n  /**\n   * 设置缓存\n   */\n  static async set(key: string, value: any, ttl?: number): Promise<void> {\n    const client = await getRedisClient();\n    const serializedValue = JSON.stringify(value);\n\n    if (ttl) {\n      await client.setex(key, ttl, serializedValue);\n    } else {\n      await client.set(key, serializedValue);\n    }\n  }\n\n  /**\n   * 获取缓存\n   */\n  static async get<T = any>(key: string): Promise<T | null> {\n    const client = await getRedisClient();\n    const value = await client.get(key);\n\n    if (!value) {\n      return null;\n    }\n\n    try {\n      return JSON.parse(value) as T;\n    } catch (error) {\n      return value as T;\n    }\n  }\n\n  /**\n   * 删除缓存\n   */\n  static async del(key: string): Promise<void> {\n    const client = await getRedisClient();\n    await client.del(key);\n  }\n\n  /**\n   * 检查缓存是否存在\n   */\n  static async exists(key: string): Promise<boolean> {\n    const client = await getRedisClient();\n    const result = await client.exists(key);\n    return result === 1;\n  }\n\n  /**\n   * 设置缓存过期时间\n   */\n  static async expire(key: string, ttl: number): Promise<void> {\n    const client = await getRedisClient();\n    await client.expire(key, ttl);\n  }\n\n  /**\n   * 获取所有匹配的键\n   */\n  static async keys(pattern: string): Promise<string[]> {\n    const client = await getRedisClient();\n    return await client.keys(pattern);\n  }\n\n  /**\n   * 清空所有缓存（谨慎使用）\n   */\n  static async flushAll(): Promise<void> {\n    const client = await getRedisClient();\n    await client.flushall();\n  }\n}\n\n/**\n * 事务工具类\n */\nexport class TransactionUtils {\n  /**\n   * 执行MongoDB事务\n   */\n  static async executeTransaction<T>(\n    operations: (session: mongoose.ClientSession) => Promise<T>,\n  ): Promise<T> {\n    await DatabaseUtils.ensureConnection();\n\n    const session = await mongoose.startSession();\n\n    try {\n      session.startTransaction();\n      const result = await operations(session);\n      await session.commitTransaction();\n      return result;\n    } catch (error) {\n      await session.abortTransaction();\n      throw error;\n    } finally {\n      await session.endSession();\n    }\n  }\n}\n\n// 默认导出\nexport default {\n  DatabaseUtils,\n  CacheUtils,\n  TransactionUtils,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/email/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/email/email-service.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":147,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":151,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 邮件服务\n * 提供邮件发送功能\n */\nimport nodemailer from 'nodemailer';\n\nexport interface EmailOptions {\n  to: string\n  subject: string\n  text?: string\n  html?: string\n  from?: string\n}\n\n// 创建邮件传输器\nconst createTransporter = () => {\n  if (process.env.NODE_ENV === 'development') {\n    // 开发环境使用 Ethereal Email 测试\n    return nodemailer.createTransport({\n      host: 'smtp.ethereal.email',\n      port: 587,\n      auth: {\n        user: 'ethereal.user@ethereal.email',\n        pass: 'ethereal.pass',\n      },\n    });\n  }\n\n  // 生产环境配置\n  if (process.env.SMTP_HOST) {\n    return nodemailer.createTransport({\n      host: process.env.SMTP_HOST,\n      port: parseInt(process.env.SMTP_PORT || '587', 10),\n      secure: process.env.SMTP_SECURE === 'true',\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASS,\n      },\n    });\n  }\n\n  // 使用 Gmail SMTP\n  return nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n      user: process.env.GMAIL_USER,\n      pass: process.env.GMAIL_APP_PASSWORD,\n    },\n  });\n};\n\n/**\n * 发送邮件\n */\nexport async function sendEmail(options: EmailOptions): Promise<void> {\n  try {\n    const transporter = createTransporter();\n\n    const mailOptions = {\n      from: options.from || process.env.FROM_EMAIL || 'noreply@inspi.ai',\n      to: options.to,\n      subject: options.subject,\n      text: options.text,\n      html: options.html,\n    };\n\n    const info = await transporter.sendMail(mailOptions);\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Email sent:', info.messageId);\n      console.log('Preview URL:', nodemailer.getTestMessageUrl(info));\n    }\n  } catch (error) {\n    console.error('Email sending failed:', error);\n    throw new Error('邮件发送失败');\n  }\n}\n\n/**\n * 发送验证邮件模板\n */\nexport async function sendVerificationEmail(\n  email: string,\n  name: string,\n  verificationUrl: string,\n): Promise<void> {\n  await sendEmail({\n    to: email,\n    subject: '验证您的邮箱 - Inspi.AI',\n    html: `\n      <div style=\"max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;\">\n        <h2 style=\"color: #333; text-align: center;\">欢迎加入 Inspi.AI！</h2>\n        <p>亲爱的 ${name}，</p>\n        <p>感谢您注册 Inspi.AI 账户。请点击下面的链接验证您的邮箱地址：</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${verificationUrl}\" \n             style=\"background-color: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;\">\n            验证邮箱\n          </a>\n        </div>\n        <p>如果按钮无法点击，请复制以下链接到浏览器地址栏：</p>\n        <p style=\"word-break: break-all; color: #666;\">${verificationUrl}</p>\n        <p>此链接将在24小时后过期。</p>\n        <hr style=\"margin: 30px 0; border: none; border-top: 1px solid #eee;\">\n        <p style=\"color: #666; font-size: 14px;\">\n          如果您没有注册 Inspi.AI 账户，请忽略此邮件。\n        </p>\n      </div>\n    `,\n  });\n}\n\n/**\n * 发送密码重置邮件模板\n */\nexport async function sendPasswordResetEmail(\n  email: string,\n  name: string,\n  resetUrl: string,\n): Promise<void> {\n  await sendEmail({\n    to: email,\n    subject: '重置您的密码 - Inspi.AI',\n    html: `\n      <div style=\"max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;\">\n        <h2 style=\"color: #333; text-align: center;\">密码重置请求</h2>\n        <p>亲爱的 ${name}，</p>\n        <p>我们收到了您的密码重置请求。请点击下面的链接重置您的密码：</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${resetUrl}\" \n             style=\"background-color: #ef4444; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;\">\n            重置密码\n          </a>\n        </div>\n        <p>如果按钮无法点击，请复制以下链接到浏览器地址栏：</p>\n        <p style=\"word-break: break-all; color: #666;\">${resetUrl}</p>\n        <p>此链接将在1小时后过期。</p>\n        <hr style=\"margin: 30px 0; border: none; border-top: 1px solid #eee;\">\n        <p style=\"color: #666; font-size: 14px;\">\n          如果您没有请求密码重置，请忽略此邮件。您的密码不会被更改。\n        </p>\n      </div>\n    `,\n  });\n}\n\nexport default {\n  sendEmail,\n  sendVerificationEmail,\n  sendPasswordResetEmail,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/email/service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/email/templates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/email/verification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/error/error-handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/errors/BusinessError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/errors/CustomError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/errors/ValidationError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/errors/factory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/errors/responses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/errors/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/export/html-to-image.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/TASK_6_INTEGRATION_TEST.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/async/AsyncTaskProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/cache/InvitationCacheManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/config/production.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/middleware/fraudDetectionMiddleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/monitoring/AlertManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/monitoring/BusinessMetricsCollector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/monitoring/PerformanceMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/optimization/DatabaseOptimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/optimization/FrontendOptimizer.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 138. Maximum allowed is 120.","line":62,"column":1,"nodeType":"Program","messageId":"max","endLine":62,"endColumn":139},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has unnecessary dependencies: 'hasMore', 'loadMore', and 'threshold'. Either exclude them or remove the dependency array. Outer scope values like 'hasMore' aren't valid dependencies because mutating them doesn't re-render the component.","line":400,"column":10,"nodeType":"ArrayExpression","endLine":400,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [loading]","fix":{"range":[10430,10469],"text":"[loading]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 前端性能优化器\n * 优化邀请系统前端组件的加载和渲染性能\n */\n\nimport React from 'react';\n\nimport { logger } from '@/shared/utils/logger';\n\nexport interface PerformanceMetrics {\n  loadTime: number\n  renderTime: number\n  interactionTime: number\n  memoryUsage: number\n  bundleSize?: number\n}\n\nexport interface OptimizationConfig {\n  enableLazyLoading: boolean\n  enableVirtualization: boolean\n  enableMemoization: boolean\n  enablePreloading: boolean\n  chunkSize: number\n  cacheSize: number\n  debounceDelay: number\n}\n\nexport class FrontendOptimizer {\n  private config: OptimizationConfig;\n  private performanceObserver?: PerformanceObserver;\n  private metrics: PerformanceMetrics[] = [];\n  private componentCache: Map<string, any> = new Map();\n  private preloadCache: Map<string, Promise<any>> = new Map();\n\n  constructor(config: OptimizationConfig) {\n    this.config = config;\n    this.initializePerformanceMonitoring();\n  }\n\n  /**\n   * 初始化性能监控\n   */\n  private initializePerformanceMonitoring(): void {\n    if (typeof window !== 'undefined' && 'PerformanceObserver' in window) {\n      this.performanceObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        this.processPerformanceEntries(entries);\n      });\n\n      this.performanceObserver.observe({\n        entryTypes: ['navigation', 'paint', 'largest-contentful-paint', 'first-input'] });\n    }\n  }\n\n  /**\n   * 处理性能条目\n   */\n  private processPerformanceEntries(entries: PerformanceEntry[]): void {\n    entries.forEach(entry => {\n      if (entry.entryType === 'navigation') {\n        const navEntry = entry as PerformanceNavigationTiming;\n        const domLoading = (navEntry as Partial<PerformanceNavigationTiming> & { domLoading?: number }).domLoading ?? navEntry.fetchStart;\n        this.recordMetrics({\n          loadTime: navEntry.loadEventEnd - navEntry.loadEventStart,\n          renderTime: navEntry.domContentLoadedEventEnd - navEntry.domContentLoadedEventStart,\n          interactionTime: navEntry.domInteractive - domLoading,\n          memoryUsage: this.getMemoryUsage() });\n      }\n    });\n  }\n\n  /**\n   * 获取内存使用情况\n   */\n  private getMemoryUsage(): number {\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in (window.performance as any)) {\n      return (window.performance as any).memory.usedJSHeapSize;\n    }\n    return 0;\n  }\n\n  /**\n   * 记录性能指标\n   */\n  private recordMetrics(metrics: PerformanceMetrics): void {\n    this.metrics.push(metrics);\n\n    // 保持最近100条记录\n    if (this.metrics.length > 100) {\n      this.metrics.shift();\n    }\n\n    // 记录慢加载\n    if (metrics.loadTime > 3000) {\n      logger.warn('Slow page load detected', { loadTime: metrics.loadTime });\n    }\n  }\n\n  /**\n   * 创建懒加载组件包装器\n   */\n  createLazyComponent<P = any>(\n    importFn: () => Promise<{ default: React.ComponentType<P> }>,\n    fallback?: React.ComponentType,\n  ): React.ComponentType<P> {\n    if (!this.config.enableLazyLoading) {\n      // 如果禁用懒加载，直接返回动态导入\n      return React.lazy(importFn) as unknown as React.ComponentType<P>;\n    }\n\n    const LazyComponent = React.lazy(() => {\n      const startTime = performance.now();\n\n      return importFn().then(module => {\n        const loadTime = performance.now() - startTime;\n        logger.debug('Lazy component loaded', { loadTime });\n\n        return module;\n      }).catch(error => {\n        logger.error('Lazy component load failed', { error });\n        throw error;\n      });\n    });\n\n    const SuspenseWrapper = (props: P) => React.createElement(\n      React.Suspense,\n      { fallback: fallback ? React.createElement(fallback) : React.createElement('div', null, 'Loading...') },\n      React.createElement(LazyComponent as React.ComponentType<P>, props),\n    );\n\n    const lazyComponentInfo = LazyComponent as unknown as { displayName?: string; name?: string };\n    const lazyComponentName = lazyComponentInfo.displayName ?? lazyComponentInfo.name ?? 'Component';\n\n    SuspenseWrapper.displayName = `LazyComponentWrapper(${lazyComponentName})`;\n\n    return SuspenseWrapper;\n  }\n\n  /**\n   * 创建虚拟化列表组件\n   */\n  createVirtualizedList<T>({\n    items,\n    itemHeight,\n    containerHeight,\n    renderItem,\n    overscan = 5 }: {\n    items: T[]\n    itemHeight: number\n    containerHeight: number\n    renderItem: (item: T, index: number) => React.ReactNode\n    overscan?: number\n  }): React.ComponentType {\n    if (!this.config.enableVirtualization) {\n      // 如果禁用虚拟化，渲染所有项目\n      return function Component() {\n        return React.createElement('div',\n          { style: { height: containerHeight, overflow: 'auto' } },\n          items.map((item, index) =>\n            React.createElement('div',\n              { key: index, style: { height: itemHeight } },\n              renderItem(item, index),\n            ),\n          ),\n        );\n      };\n    }\n\n    return function Component() {\n      const [scrollTop, setScrollTop] = React.useState(0);\n\n      const visibleStart = Math.floor(scrollTop / itemHeight);\n      const visibleEnd = Math.min(\n        visibleStart + Math.ceil(containerHeight / itemHeight) + overscan,\n        items.length,\n      );\n\n      const visibleItems = items.slice(\n        Math.max(0, visibleStart - overscan),\n        visibleEnd,\n      );\n\n      const handleScroll = React.useCallback((e: React.UIEvent<HTMLDivElement>) => {\n        setScrollTop(e.currentTarget.scrollTop);\n      }, []);\n\n      return React.createElement('div',\n        {\n          style: { height: containerHeight, overflow: 'auto' },\n          onScroll: handleScroll },\n        React.createElement('div',\n          { style: { height: items.length * itemHeight, position: 'relative' } },\n          visibleItems.map((item, index) => {\n            const actualIndex = Math.max(0, visibleStart - overscan) + index;\n            return React.createElement('div',\n              {\n                key: actualIndex,\n                style: {\n                  position: 'absolute',\n                  top: actualIndex * itemHeight,\n                  height: itemHeight,\n                  width: '100%' } },\n              renderItem(item, actualIndex),\n            );\n          }),\n        ),\n      );\n    };\n  }\n\n  /**\n   * 创建记忆化组件\n   */\n  createMemoizedComponent<P>(\n    Component: React.ComponentType<P>,\n    areEqual?: (prevProps: P, nextProps: P) => boolean,\n  ): React.ComponentType<P> {\n    if (!this.config.enableMemoization) {\n      return Component;\n    }\n\n    return React.memo(Component, areEqual) as React.ComponentType<P>;\n  }\n\n  /**\n   * 创建防抖钩子\n   */\n  createDebouncedCallback<T extends(...args: any[]) => any>(\n    callback: T,\n    delay?: number,\n  ): T {\n    const actualDelay = delay || this.config.debounceDelay;\n\n    return this.debounce(callback, actualDelay);\n  }\n\n  /**\n   * 防抖函数\n   */\n  private debounce<T extends(...args: any[]) => any>(\n    func: T,\n    delay: number,\n  ): T {\n    let timeoutId: NodeJS.Timeout;\n\n    return ((...args: any[]) => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => func.apply(this, args), delay);\n    }) as T;\n  }\n\n  /**\n   * 预加载数据\n   */\n  async preloadData<T>(\n    key: string,\n    loadFn: () => Promise<T>,\n    force = false,\n  ): Promise<T> {\n    if (!this.config.enablePreloading && !force) {\n      return loadFn();\n    }\n\n    if (this.preloadCache.has(key)) {\n      return this.preloadCache.get(key)!;\n    }\n\n    const promise = loadFn().then(data => {\n      // 缓存数据\n      this.componentCache.set(key, data);\n      return data;\n    }).catch(error => {\n      // 移除失败的预加载\n      this.preloadCache.delete(key);\n      throw error;\n    });\n\n    this.preloadCache.set(key, promise);\n    return promise;\n  }\n\n  /**\n   * 获取缓存数据\n   */\n  getCachedData<T>(key: string): T | null {\n    return this.componentCache.get(key) || null;\n  }\n\n  /**\n   * 清理缓存\n   */\n  clearCache(pattern?: string): void {\n    if (pattern) {\n      for (const [key] of this.componentCache.entries()) {\n        if (key.includes(pattern)) {\n          this.componentCache.delete(key);\n          this.preloadCache.delete(key);\n        }\n      }\n    } else {\n      this.componentCache.clear();\n      this.preloadCache.clear();\n    }\n  }\n\n  /**\n   * 创建图片懒加载组件\n   */\n  createLazyImage({\n    src,\n    alt,\n    placeholder,\n    className,\n    ...props\n  }: {\n    src: string\n    alt: string\n    placeholder?: string\n    className?: string\n    [key: string]: any\n  }): React.ComponentType {\n    return function Component() {\n      const [loaded, setLoaded] = React.useState(false);\n      const [inView, setInView] = React.useState(false);\n      const imgRef = React.useRef<HTMLImageElement>(null);\n\n      React.useEffect(() => {\n        if (!this.config.enableLazyLoading) {\n          setInView(true);\n          return null;\n        }\n\n        const observer = new IntersectionObserver(\n          ([entry]) => {\n            if (entry.isIntersecting) {\n              setInView(true);\n              observer.disconnect();\n            }\n          },\n          { threshold: 0.1 },\n        );\n\n        if (imgRef.current) {\n          observer.observe(imgRef.current);\n        }\n\n        return () => observer.disconnect();\n      }, []);\n\n      const handleLoad = React.useCallback(() => {\n        setLoaded(true);\n      }, []);\n\n      return React.createElement('div',\n        { className, ref: imgRef },\n        inView && React.createElement('img', {\n          src: loaded ? src : placeholder,\n          alt,\n          onLoad: handleLoad,\n          style: {\n            transition: 'opacity 0.3s',\n            opacity: loaded ? 1 : 0.5 },\n          ...props }),\n      );\n    };\n  }\n\n  /**\n   * 创建无限滚动组件\n   */\n  createInfiniteScroll<T>({\n    items,\n    loadMore,\n    hasMore,\n    renderItem,\n    threshold = 200 }: {\n    items: T[]\n    loadMore: () => Promise<void>\n    hasMore: boolean\n    renderItem: (item: T, index: number) => React.ReactNode\n    threshold?: number\n  }): React.ComponentType {\n    return function Component() {\n      const [loading, setLoading] = React.useState(false);\n      const containerRef = React.useRef<HTMLDivElement>(null);\n\n      const handleScroll = React.useCallback(async () => {\n        if (!containerRef.current || loading || !hasMore) return null;\n\n        const { scrollTop, scrollHeight, clientHeight } = containerRef.current;\n\n        if (scrollHeight - scrollTop - clientHeight < threshold) {\n          setLoading(true);\n          try {\n            await loadMore();\n          } finally {\n            setLoading(false);\n          }\n        }\n      }, [loading, hasMore, loadMore, threshold]);\n\n      React.useEffect(() => {\n        const container = containerRef.current;\n        if (container) {\n          container.addEventListener('scroll', handleScroll);\n          return () => container.removeEventListener('scroll', handleScroll);\n        }\n      }, [handleScroll]);\n\n      return React.createElement('div',\n        {\n          ref: containerRef,\n          style: { height: '100%', overflow: 'auto' } },\n        items.map((item, index) => renderItem(item, index)),\n        loading && React.createElement('div',\n          { style: { padding: '20px', textAlign: 'center' } },\n          'Loading...',\n        ),\n      );\n    };\n  }\n\n  /**\n   * 优化包大小分析\n   */\n  analyzeBundleSize(): Promise<{\n    totalSize: number\n    chunks: Array<{ name: string; size: number }>\n    recommendations: string[]\n  }> {\n    return new Promise((resolve) => {\n      // 模拟包大小分析\n      setTimeout(() => {\n        const analysis = {\n          totalSize: 1024 * 1024 * 2.5, // 2.5MB\n          chunks: [\n            { name: 'main', size: 1024 * 1024 * 1.2 },\n            { name: 'vendor', size: 1024 * 1024 * 0.8 },\n            { name: 'invitation', size: 1024 * 1024 * 0.5 },\n          ],\n          recommendations: [\n            '考虑使用动态导入拆分大型组件',\n            '移除未使用的依赖项',\n            '启用gzip压缩',\n            '使用CDN加载第三方库',\n          ] };\n        resolve(analysis);\n      }, 1000);\n    });\n  }\n\n  /**\n   * 获取性能报告\n   */\n  getPerformanceReport(): {\n    averageLoadTime: number\n    averageRenderTime: number\n    averageMemoryUsage: number\n    slowLoadCount: number\n    recommendations: string[]\n  } {\n    if (this.metrics.length === 0) {\n      return {\n        averageLoadTime: 0,\n        averageRenderTime: 0,\n        averageMemoryUsage: 0,\n        slowLoadCount: 0,\n        recommendations: ['需要更多数据来生成报告'] };\n    }\n\n    const avgLoadTime = this.metrics.reduce((sum, m) => sum + m.loadTime, 0) / this.metrics.length;\n    const avgRenderTime = this.metrics.reduce((sum, m) => sum + m.renderTime, 0) / this.metrics.length;\n    const avgMemoryUsage = this.metrics.reduce((sum, m) => sum + m.memoryUsage, 0) / this.metrics.length;\n    const slowLoadCount = this.metrics.filter(m => m.loadTime > 3000).length;\n\n    const recommendations: string[] = [];\n\n    if (avgLoadTime > 2000) {\n      recommendations.push('页面加载时间较慢，考虑启用懒加载');\n    }\n\n    if (avgMemoryUsage > 50 * 1024 * 1024) { // 50MB\n      recommendations.push('内存使用较高，考虑启用虚拟化');\n    }\n\n    if (slowLoadCount > this.metrics.length * 0.1) {\n      recommendations.push('频繁出现慢加载，检查网络和资源优化');\n    }\n\n    return {\n      averageLoadTime: avgLoadTime,\n      averageRenderTime: avgRenderTime,\n      averageMemoryUsage: avgMemoryUsage,\n      slowLoadCount,\n      recommendations };\n  }\n\n  /**\n   * 清理资源\n   */\n  cleanup(): void {\n    if (this.performanceObserver) {\n      this.performanceObserver.disconnect();\n    }\n\n    this.componentCache.clear();\n    this.preloadCache.clear();\n    this.metrics.length = 0;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/optimization/PerformanceOptimizationService.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 128. Maximum allowed is 120.","line":150,"column":1,"nodeType":"Program","messageId":"max","endLine":150,"endColumn":129},{"ruleId":"max-len","severity":1,"message":"This line has a length of 129. Maximum allowed is 120.","line":192,"column":1,"nodeType":"Program","messageId":"max","endLine":192,"endColumn":130}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 性能优化服务\n * 整合所有性能优化组件，提供统一的优化接口\n */\n\nimport { logger } from '@/shared/utils/logger';\n\nimport { InvitationTaskProcessor, AsyncTaskConfig } from '../async/AsyncTaskProcessor';\nimport { InvitationCacheManager, CacheConfig } from '../cache/InvitationCacheManager';\nimport { DatabasePool } from '../database';\nimport { PerformanceMonitor, PerformanceThresholds } from '../monitoring/PerformanceMonitor';\nimport type { InviteCode, InviteStats } from '../types';\n\nimport { DatabaseOptimizer, QueryOptimizationConfig } from './DatabaseOptimizer';\n\n\nexport interface OptimizationConfig {\n  cache: CacheConfig\n  database: QueryOptimizationConfig\n  asyncTasks: AsyncTaskConfig\n  monitoring: PerformanceThresholds\n  enableOptimizations: {\n    caching: boolean\n    queryOptimization: boolean\n    asyncProcessing: boolean\n    monitoring: boolean\n  }\n}\n\nexport interface OptimizationReport {\n  cacheStats: {\n    memoryItems: number\n    hitRate?: number\n    redisConnected: boolean\n  }\n  databaseStats: {\n    slowQueries: Array<{ query: string; avgTime: number; count: number }>\n    totalQueries: number\n    avgQueryTime: number\n  }\n  taskStats: {\n    pendingTasks: number\n    runningTasks: number\n    utilizationRate: number\n  }\n  performanceStats: {\n    healthScore: number\n    recommendations: string[]\n    activeAlerts: number\n  }\n  optimizationSuggestions: string[]\n}\n\nexport class PerformanceOptimizationService {\n  private cacheManager?: InvitationCacheManager;\n  private databaseOptimizer?: DatabaseOptimizer;\n  private taskProcessor?: InvitationTaskProcessor;\n  private performanceMonitor?: PerformanceMonitor;\n  private config: OptimizationConfig;\n  private db: DatabasePool;\n\n  constructor(db: DatabasePool, config: OptimizationConfig) {\n    this.db = db;\n    this.config = config;\n    this.initializeComponents();\n  }\n\n  /**\n   * 初始化优化组件\n   */\n  private initializeComponents(): void {\n    try {\n      // 初始化缓存管理器\n      if (this.config.enableOptimizations.caching) {\n        this.cacheManager = new InvitationCacheManager(this.config.cache);\n        logger.info('Cache manager initialized');\n      }\n\n      // 初始化数据库优化器\n      if (this.config.enableOptimizations.queryOptimization) {\n        this.databaseOptimizer = new DatabaseOptimizer(this.db, this.config.database);\n        logger.info('Database optimizer initialized');\n      }\n\n      // 初始化异步任务处理器\n      if (this.config.enableOptimizations.asyncProcessing) {\n        this.taskProcessor = new InvitationTaskProcessor(this.config.asyncTasks);\n        logger.info('Async task processor initialized');\n      }\n\n      // 初始化性能监控\n      if (this.config.enableOptimizations.monitoring) {\n        this.performanceMonitor = new PerformanceMonitor(this.config.monitoring);\n        this.performanceMonitor.startMonitoring();\n        logger.info('Performance monitor initialized');\n      }\n\n      logger.info('Performance optimization service initialized successfully');\n    } catch (error) {\n      logger.error('Failed to initialize performance optimization service', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 获取缓存管理器\n   */\n  getCacheManager(): InvitationCacheManager | undefined {\n    return this.cacheManager;\n  }\n\n  /**\n   * 获取数据库优化器\n   */\n  getDatabaseOptimizer(): DatabaseOptimizer | undefined {\n    return this.databaseOptimizer;\n  }\n\n  /**\n   * 获取任务处理器\n   */\n  getTaskProcessor(): InvitationTaskProcessor | undefined {\n    return this.taskProcessor;\n  }\n\n  /**\n   * 获取性能监控器\n   */\n  getPerformanceMonitor(): PerformanceMonitor | undefined {\n    return this.performanceMonitor;\n  }\n\n  /**\n   * 执行优化的邀请码查询\n   */\n  async getOptimizedInviteCode(code: string): Promise<any> {\n    try {\n      // 尝试从缓存获取\n      if (this.cacheManager) {\n        const cached = await this.cacheManager.getCachedInviteCode(code);\n        if (cached) {\n          logger.debug('Invite code retrieved from cache', { code });\n          return cached;\n        }\n      }\n\n      // 使用优化查询\n      if (this.databaseOptimizer) {\n        const optimizedQuery = this.databaseOptimizer.optimizeInviteCodeQuery(code);\n        const result = await this.databaseOptimizer.executeOptimizedQuery<InviteCode & Record<string, unknown>>(optimizedQuery);\n        const inviteCode = result[0];\n\n        // 缓存结果\n        if (this.cacheManager && inviteCode) {\n          await this.cacheManager.cacheInviteCode(code, inviteCode as InviteCode);\n        }\n\n        return (inviteCode as InviteCode) || null;\n      }\n\n      // 回退到普通查询\n      const result = await this.db.query<InviteCode & Record<string, unknown>>(\n        'SELECT * FROM invite_codes WHERE code = ? AND is_active = 1',\n        [code],\n      );\n      const inviteCode = result[0];\n      return (inviteCode as InviteCode) || null;\n\n    } catch (error) {\n      logger.error('Failed to get optimized invite code', { error, code });\n      throw error;\n    }\n  }\n\n  /**\n   * 执行优化的用户统计查询\n   */\n  async getOptimizedUserStats(userId: string): Promise<any> {\n    try {\n      // 尝试从缓存获取\n      if (this.cacheManager) {\n        const cached = await this.cacheManager.getCachedUserStats(userId);\n        if (cached) {\n          logger.debug('User stats retrieved from cache', { userId });\n          return cached;\n        }\n      }\n\n      // 使用优化查询\n      if (this.databaseOptimizer) {\n        const optimizedQuery = this.databaseOptimizer.optimizeUserStatsQuery(userId);\n        const result = await this.databaseOptimizer.executeOptimizedQuery<InviteStats & Record<string, unknown>>(optimizedQuery);\n        const userStats = result[0];\n\n        // 缓存结果\n        if (this.cacheManager && userStats) {\n          await this.cacheManager.cacheUserStats(userId, userStats as InviteStats);\n        }\n\n        return (userStats as InviteStats) || null;\n      }\n\n      // 回退到普通查询\n      const result = await this.db.query<InviteStats & Record<string, unknown>>(`\n        SELECT \n          COUNT(DISTINCT ic.id) as total_invites,\n          COUNT(DISTINCT ir.id) as successful_registrations,\n          COUNT(DISTINCT CASE WHEN ir.is_activated = 1 THEN ir.id END) as active_invitees\n        FROM invite_codes ic\n        LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n        WHERE ic.inviter_id = ?\n      `, [userId]);\n\n      const stats = result[0];\n      return (stats as InviteStats) || null;\n\n    } catch (error) {\n      logger.error('Failed to get optimized user stats', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 异步发放奖励\n   */\n  async grantRewardAsync(userId: string, rewards: any[], sourceType: string, sourceId: string): Promise<string | null> {\n    if (!this.taskProcessor) {\n      logger.warn('Task processor not available, falling back to synchronous reward granting');\n      return null;\n    }\n\n    try {\n      const taskId = await this.taskProcessor.grantRewardAsync(userId, rewards, sourceType, sourceId);\n      logger.info('Reward grant task queued', { taskId, userId, rewardsCount: rewards.length });\n      return taskId;\n    } catch (error) {\n      logger.error('Failed to queue reward grant task', { error, userId });\n      throw error;\n    }\n  }\n\n  /**\n   * 异步发送通知\n   */\n  async sendNotificationAsync(userId: string, type: string, content: any): Promise<string | null> {\n    if (!this.taskProcessor) {\n      return null;\n    }\n\n    try {\n      const taskId = await this.taskProcessor.sendNotificationAsync(userId, type, content);\n      logger.info('Notification task queued', { taskId, userId, type });\n      return taskId;\n    } catch (error) {\n      logger.error('Failed to queue notification task', { error, userId, type });\n      throw error;\n    }\n  }\n\n  /**\n   * 批量插入优化\n   */\n  async batchInsertOptimized(table: string, records: any[]): Promise<void> {\n    if (!this.databaseOptimizer) {\n      // 回退到逐条插入\n      for (const record of records) {\n        const columns = Object.keys(record);\n        const values = columns.map(col => record[col]);\n        const placeholders = columns.map(() => '?').join(', ');\n\n        await this.db.execute(\n          `INSERT INTO ${table} (${columns.join(', ')}) VALUES (${placeholders})`,\n          values,\n        );\n      }\n      return;\n    }\n\n    try {\n      await this.databaseOptimizer.batchInsert(table, records);\n      logger.info('Batch insert completed', { table, recordCount: records.length });\n    } catch (error) {\n      logger.error('Batch insert failed', { error, table, recordCount: records.length });\n      throw error;\n    }\n  }\n\n  /**\n   * 预热缓存\n   */\n  async warmupCache(warmupData: {\n    popularInviteCodes?: any[]\n    topUsers?: string[]\n  }): Promise<void> {\n    if (!this.cacheManager) {\n      logger.warn('Cache manager not available, skipping cache warmup');\n      return;\n    }\n\n    try {\n      await this.cacheManager.warmupCache(warmupData);\n      logger.info('Cache warmup completed', {\n        inviteCodes: warmupData.popularInviteCodes?.length || 0,\n        topUsers: warmupData.topUsers?.length || 0,\n      });\n    } catch (error) {\n      logger.error('Cache warmup failed', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 使缓存失效\n   */\n  async invalidateUserCache(userId: string): Promise<void> {\n    if (!this.cacheManager) return;\n\n    try {\n      await this.cacheManager.invalidateUserCache(userId);\n      logger.debug('User cache invalidated', { userId });\n    } catch (error) {\n      logger.error('Failed to invalidate user cache', { error, userId });\n    }\n  }\n\n  /**\n   * 创建推荐的数据库索引\n   */\n  async createOptimizedIndexes(): Promise<void> {\n    if (!this.databaseOptimizer) {\n      logger.warn('Database optimizer not available, skipping index creation');\n      return;\n    }\n\n    try {\n      await this.databaseOptimizer.createRecommendedIndexes();\n      logger.info('Optimized database indexes created');\n    } catch (error) {\n      logger.error('Failed to create optimized indexes', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 生成优化报告\n   */\n  async generateOptimizationReport(): Promise<OptimizationReport> {\n    const report: OptimizationReport = {\n      cacheStats: {\n        memoryItems: 0,\n        redisConnected: false,\n      },\n      databaseStats: {\n        slowQueries: [],\n        totalQueries: 0,\n        avgQueryTime: 0,\n      },\n      taskStats: {\n        pendingTasks: 0,\n        runningTasks: 0,\n        utilizationRate: 0,\n      },\n      performanceStats: {\n        healthScore: 0,\n        recommendations: [],\n        activeAlerts: 0,\n      },\n      optimizationSuggestions: [],\n    };\n\n    try {\n      // 缓存统计\n      if (this.cacheManager) {\n        report.cacheStats = this.cacheManager.getCacheStats();\n      }\n\n      // 数据库统计\n      if (this.databaseOptimizer) {\n        const dbPerformance = await this.databaseOptimizer.analyzeQueryPerformance();\n        report.databaseStats = {\n          slowQueries: dbPerformance.slowQueries,\n          totalQueries: dbPerformance.totalQueries,\n          avgQueryTime: dbPerformance.avgQueryTime,\n        };\n      }\n\n      // 任务处理统计\n      if (this.taskProcessor) {\n        report.taskStats = this.taskProcessor.getQueueStats();\n      }\n\n      // 性能监控统计\n      if (this.performanceMonitor) {\n        const perfReport = this.performanceMonitor.generateReport();\n        report.performanceStats = {\n          healthScore: perfReport.healthScore,\n          recommendations: perfReport.recommendations,\n          activeAlerts: this.performanceMonitor.getActiveAlerts().length,\n        };\n      }\n\n      // 生成优化建议\n      report.optimizationSuggestions = this.generateOptimizationSuggestions(report);\n\n      logger.info('Optimization report generated successfully');\n      return report;\n\n    } catch (error) {\n      logger.error('Failed to generate optimization report', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateOptimizationSuggestions(report: OptimizationReport): string[] {\n    const suggestions: string[] = [];\n\n    // 缓存相关建议\n    if (report.cacheStats.hitRate && report.cacheStats.hitRate < 0.8) {\n      suggestions.push('缓存命中率较低，考虑优化缓存策略或增加缓存时间');\n    }\n\n    if (!report.cacheStats.redisConnected && this.config.enableOptimizations.caching) {\n      suggestions.push('Redis连接失败，考虑检查Redis配置或使用内存缓存');\n    }\n\n    // 数据库相关建议\n    if (report.databaseStats.slowQueries.length > 0) {\n      suggestions.push(`发现${report.databaseStats.slowQueries.length}个慢查询，建议优化SQL或添加索引`);\n    }\n\n    if (report.databaseStats.avgQueryTime > 100) {\n      suggestions.push('平均查询时间较长，考虑优化数据库查询或增加缓存');\n    }\n\n    // 任务处理相关建议\n    if (report.taskStats.utilizationRate > 0.8) {\n      suggestions.push('任务处理器利用率较高，考虑增加并发数或优化任务处理逻辑');\n    }\n\n    if (report.taskStats.pendingTasks > 100) {\n      suggestions.push('待处理任务较多，考虑增加处理器容量或优化任务优先级');\n    }\n\n    // 性能相关建议\n    if (report.performanceStats.healthScore < 70) {\n      suggestions.push('系统健康分数较低，需要关注性能优化');\n    }\n\n    if (report.performanceStats.activeAlerts > 0) {\n      suggestions.push(`存在${report.performanceStats.activeAlerts}个活跃告警，需要及时处理`);\n    }\n\n    // 如果没有具体建议，提供通用建议\n    if (suggestions.length === 0) {\n      suggestions.push('系统运行良好，建议定期监控性能指标');\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * 应用自动优化\n   */\n  async applyAutoOptimizations(): Promise<{\n    applied: string[]\n    failed: string[]\n  }> {\n    const applied: string[] = [];\n    const failed: string[] = [];\n\n    try {\n      // 创建推荐索引\n      if (this.databaseOptimizer) {\n        try {\n          await this.createOptimizedIndexes();\n          applied.push('数据库索引优化');\n        } catch (error) {\n          failed.push('数据库索引优化失败');\n          logger.error('Auto optimization: index creation failed', { error });\n        }\n      }\n\n      // 清理过期缓存\n      if (this.cacheManager) {\n        try {\n          // 这里可以添加缓存清理逻辑\n          applied.push('缓存清理');\n        } catch (error) {\n          failed.push('缓存清理失败');\n          logger.error('Auto optimization: cache cleanup failed', { error });\n        }\n      }\n\n      logger.info('Auto optimizations completed', { applied, failed });\n      return { applied, failed };\n\n    } catch (error) {\n      logger.error('Auto optimization failed', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 获取优化状态\n   */\n  getOptimizationStatus(): {\n    caching: boolean\n    queryOptimization: boolean\n    asyncProcessing: boolean\n    monitoring: boolean\n    componentsInitialized: {\n      cacheManager: boolean\n      databaseOptimizer: boolean\n      taskProcessor: boolean\n      performanceMonitor: boolean\n    }\n  } {\n    return {\n      caching: this.config.enableOptimizations.caching,\n      queryOptimization: this.config.enableOptimizations.queryOptimization,\n      asyncProcessing: this.config.enableOptimizations.asyncProcessing,\n      monitoring: this.config.enableOptimizations.monitoring,\n      componentsInitialized: {\n        cacheManager: !!this.cacheManager,\n        databaseOptimizer: !!this.databaseOptimizer,\n        taskProcessor: !!this.taskProcessor,\n        performanceMonitor: !!this.performanceMonitor,\n      },\n    };\n  }\n\n  /**\n   * 关闭优化服务\n   */\n  async shutdown(): Promise<void> {\n    try {\n      if (this.performanceMonitor) {\n        this.performanceMonitor.stopMonitoring();\n      }\n\n      if (this.taskProcessor) {\n        await this.taskProcessor.shutdown();\n      }\n\n      if (this.cacheManager) {\n        await this.cacheManager.close();\n      }\n\n      logger.info('Performance optimization service shutdown completed');\n    } catch (error) {\n      logger.error('Error during optimization service shutdown', { error });\n      throw error;\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/AnalyticsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/BadgeSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/ConversionAnalysisService.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 130. Maximum allowed is 120.","line":225,"column":1,"nodeType":"Program","messageId":"max","endLine":225,"endColumn":131},{"ruleId":"max-len","severity":1,"message":"This line has a length of 134. Maximum allowed is 120.","line":231,"column":1,"nodeType":"Program","messageId":"max","endLine":231,"endColumn":135},{"ruleId":"max-len","severity":1,"message":"This line has a length of 153. Maximum allowed is 120.","line":237,"column":1,"nodeType":"Program","messageId":"max","endLine":237,"endColumn":154}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 转化率分析服务\n * 提供详细的邀请转化率分析和优化建议\n */\n\nimport { DatabaseService } from '../database';\nimport { TimePeriod, SharePlatform } from '../types';\n\nexport interface ConversionMetrics {\n  // 基础转化率\n  inviteToClick: number        // 邀请到点击转化率\n  clickToRegister: number      // 点击到注册转化率\n  registerToActivate: number   // 注册到激活转化率\n  overallConversion: number    // 整体转化率\n\n  // 数量统计\n  totalInvites: number\n  totalClicks: number\n  totalRegistrations: number\n  totalActivations: number\n\n  // 时间分析\n  averageTimeToRegister: number  // 平均注册时间（小时）\n  averageTimeToActivate: number  // 平均激活时间（小时）\n}\n\nexport interface PlatformConversionAnalysis {\n  platform: SharePlatform\n  metrics: ConversionMetrics\n  trend: 'improving' | 'declining' | 'stable'\n  recommendations: string[]\n}\n\nexport interface ConversionFunnelData {\n  step: string\n  count: number\n  percentage: number\n  dropoffRate: number\n}\n\nexport interface ConversionAnalysisService {\n  // 获取整体转化率分析\n  getOverallConversionAnalysis(period: TimePeriod): Promise<ConversionMetrics>\n\n  // 获取平台转化率分析\n  getPlatformConversionAnalysis(period: TimePeriod): Promise<PlatformConversionAnalysis[]>\n\n  // 获取用户转化率分析\n  getUserConversionAnalysis(userId: string, period: TimePeriod): Promise<ConversionMetrics>\n\n  // 获取转化漏斗数据\n  getConversionFunnelData(period: TimePeriod): Promise<ConversionFunnelData[]>\n\n  // 获取转化率趋势\n  getConversionTrend(period: TimePeriod, granularity: 'day' | 'week' | 'month'): Promise<Array<{\n    date: string\n    metrics: ConversionMetrics\n  }>>\n\n  // 获取优化建议\n  getOptimizationRecommendations(userId?: string): Promise<{\n    priority: 'high' | 'medium' | 'low'\n    category: string\n    recommendation: string\n    expectedImprovement: string\n  }[]>\n\n  // 分析转化率影响因素\n  analyzeConversionFactors(period: TimePeriod): Promise<{\n    timeOfDay: { [hour: string]: number }\n    dayOfWeek: { [day: string]: number }\n    deviceType: { [device: string]: number }\n    referrerType: { [referrer: string]: number }\n  }>\n}\n\nexport class ConversionAnalysisServiceImpl implements ConversionAnalysisService {\n  constructor(private db: DatabaseService) {}\n\n  /**\n   * 获取整体转化率分析\n   */\n  async getOverallConversionAnalysis(period: TimePeriod): Promise<ConversionMetrics> {\n    try {\n      const query = `\n        SELECT \n          COUNT(DISTINCT CASE WHEN ie.type = 'code_generated' THEN ie.invite_code_id END) as total_invites,\n          COUNT(DISTINCT CASE WHEN ie.type = 'link_clicked' THEN ie.invite_code_id END) as total_clicks,\n          COUNT(DISTINCT CASE WHEN ie.type = 'user_registered' THEN ie.invite_code_id END) as total_registrations,\n          COUNT(DISTINCT CASE WHEN ie.type = 'user_activated' THEN ie.invite_code_id END) as total_activations,\n          AVG(CASE \n            WHEN ie_reg.timestamp IS NOT NULL AND ie_gen.timestamp IS NOT NULL \n            THEN TIMESTAMPDIFF(HOUR, ie_gen.timestamp, ie_reg.timestamp) \n          END) as avg_time_to_register,\n          AVG(CASE \n            WHEN ie_act.timestamp IS NOT NULL AND ie_reg.timestamp IS NOT NULL \n            THEN TIMESTAMPDIFF(HOUR, ie_reg.timestamp, ie_act.timestamp) \n          END) as avg_time_to_activate\n        FROM invite_events ie\n        LEFT JOIN invite_events ie_gen ON ie.invite_code_id = ie_gen.invite_code_id AND ie_gen.type = 'code_generated'\n        LEFT JOIN invite_events ie_reg ON ie.invite_code_id = ie_reg.invite_code_id AND ie_reg.type = 'user_registered'\n        LEFT JOIN invite_events ie_act ON ie.invite_code_id = ie_act.invite_code_id AND ie_act.type = 'user_activated'\n        WHERE ie.timestamp BETWEEN ? AND ?\n      `;\n\n      const result = await this.db.queryOne(query, [period.start, period.end]);\n\n      return this.calculateConversionMetrics(result);\n    } catch (error) {\n      console.error('Failed to get overall conversion analysis:', error);\n      throw new Error('Failed to get overall conversion analysis');\n    }\n  }\n\n  /**\n   * 获取平台转化率分析\n   */\n  async getPlatformConversionAnalysis(period: TimePeriod): Promise<PlatformConversionAnalysis[]> {\n    try {\n      const query = `\n        SELECT \n          se.platform,\n          COUNT(DISTINCT CASE WHEN se.event_type = 'share' THEN se.invite_code_id END) as total_invites,\n          COUNT(DISTINCT CASE WHEN se.event_type = 'click' THEN se.invite_code_id END) as total_clicks,\n          COUNT(DISTINCT CASE WHEN se.event_type = 'conversion' THEN se.invite_code_id END) as total_registrations,\n          COUNT(DISTINCT CASE WHEN ie.type = 'user_activated' THEN ie.invite_code_id END) as total_activations\n        FROM share_events se\n        LEFT JOIN invite_events ie ON se.invite_code_id = ie.invite_code_id AND ie.type = 'user_activated'\n        WHERE se.timestamp BETWEEN ? AND ?\n        GROUP BY se.platform\n      `;\n\n      const results = await this.db.query<{\n        platform: SharePlatform;\n        total_invites: number | string;\n        total_clicks: number | string;\n        total_registrations: number | string;\n        total_activations: number | string;\n        avg_time_to_register?: number | string;\n        avg_time_to_activate?: number | string;\n      }>(query, [period.start, period.end]);\n\n      const analyses: PlatformConversionAnalysis[] = [];\n\n      for (const row of results) {\n        const metrics = this.calculateConversionMetrics(row);\n        const trend = await this.calculatePlatformTrend(row.platform, period);\n        const recommendations = this.generatePlatformRecommendations(row.platform, metrics);\n\n        analyses.push({\n          platform: row.platform as SharePlatform,\n          metrics,\n          trend,\n          recommendations,\n        });\n      }\n\n      return analyses;\n    } catch (error) {\n      console.error('Failed to get platform conversion analysis:', error);\n      throw new Error('Failed to get platform conversion analysis');\n    }\n  }\n\n  /**\n   * 获取用户转化率分析\n   */\n  async getUserConversionAnalysis(userId: string, period: TimePeriod): Promise<ConversionMetrics> {\n    try {\n      const query = `\n        SELECT \n          COUNT(DISTINCT CASE WHEN ie.type = 'code_generated' THEN ie.invite_code_id END) as total_invites,\n          COUNT(DISTINCT CASE WHEN ie.type = 'link_clicked' THEN ie.invite_code_id END) as total_clicks,\n          COUNT(DISTINCT CASE WHEN ie.type = 'user_registered' THEN ie.invite_code_id END) as total_registrations,\n          COUNT(DISTINCT CASE WHEN ie.type = 'user_activated' THEN ie.invite_code_id END) as total_activations,\n          AVG(CASE \n            WHEN ie_reg.timestamp IS NOT NULL AND ie_gen.timestamp IS NOT NULL \n            THEN TIMESTAMPDIFF(HOUR, ie_gen.timestamp, ie_reg.timestamp) \n          END) as avg_time_to_register,\n          AVG(CASE \n            WHEN ie_act.timestamp IS NOT NULL AND ie_reg.timestamp IS NOT NULL \n            THEN TIMESTAMPDIFF(HOUR, ie_reg.timestamp, ie_act.timestamp) \n          END) as avg_time_to_activate\n        FROM invite_events ie\n        LEFT JOIN invite_events ie_gen ON ie.invite_code_id = ie_gen.invite_code_id AND ie_gen.type = 'code_generated'\n        LEFT JOIN invite_events ie_reg ON ie.invite_code_id = ie_reg.invite_code_id AND ie_reg.type = 'user_registered'\n        LEFT JOIN invite_events ie_act ON ie.invite_code_id = ie_act.invite_code_id AND ie_act.type = 'user_activated'\n        WHERE ie.inviter_id = ? AND ie.timestamp BETWEEN ? AND ?\n      `;\n\n      const result = await this.db.queryOne<{\n        total_invites: number | string;\n        total_clicks: number | string;\n        total_registrations: number | string;\n        total_activations: number | string;\n        avg_time_to_register: number | string;\n        avg_time_to_activate: number | string;\n      }>(query, [userId, period.start, period.end]);\n\n      return this.calculateConversionMetrics(result);\n    } catch (error) {\n      console.error('Failed to get user conversion analysis:', error);\n      throw new Error('Failed to get user conversion analysis');\n    }\n  }\n\n  /**\n   * 获取转化漏斗数据\n   */\n  async getConversionFunnelData(period: TimePeriod): Promise<ConversionFunnelData[]> {\n    try {\n      const metrics = await this.getOverallConversionAnalysis(period);\n\n      const funnelData: ConversionFunnelData[] = [\n        {\n          step: '邀请生成',\n          count: metrics.totalInvites,\n          percentage: 100,\n          dropoffRate: 0,\n        },\n        {\n          step: '链接点击',\n          count: metrics.totalClicks,\n          percentage: metrics.totalInvites > 0 ? (metrics.totalClicks / metrics.totalInvites) * 100 : 0,\n          dropoffRate: metrics.totalInvites > 0 ? ((metrics.totalInvites - metrics.totalClicks) / metrics.totalInvites) * 100 : 0,\n        },\n        {\n          step: '用户注册',\n          count: metrics.totalRegistrations,\n          percentage: metrics.totalInvites > 0 ? (metrics.totalRegistrations / metrics.totalInvites) * 100 : 0,\n          dropoffRate: metrics.totalClicks > 0 ? ((metrics.totalClicks - metrics.totalRegistrations) / metrics.totalClicks) * 100 : 0,\n        },\n        {\n          step: '用户激活',\n          count: metrics.totalActivations,\n          percentage: metrics.totalInvites > 0 ? (metrics.totalActivations / metrics.totalInvites) * 100 : 0,\n          dropoffRate: metrics.totalRegistrations > 0 ? ((metrics.totalRegistrations - metrics.totalActivations) / metrics.totalRegistrations) * 100 : 0,\n        },\n      ];\n\n      return funnelData;\n    } catch (error) {\n      console.error('Failed to get conversion funnel data:', error);\n      throw new Error('Failed to get conversion funnel data');\n    }\n  }\n\n  /**\n   * 获取转化率趋势\n   */\n  async getConversionTrend(\n    period: TimePeriod,\n    granularity: 'day' | 'week' | 'month' = 'day',\n  ): Promise<Array<{\n    date: string\n    metrics: ConversionMetrics\n  }>> {\n    try {\n      let dateFormat: string;\n      let groupBy: string;\n\n      switch (granularity) {\n        case 'week':\n          dateFormat = '%Y-%u';\n          groupBy = 'YEARWEEK(ie.timestamp)';\n          break;\n        case 'month':\n          dateFormat = '%Y-%m';\n          groupBy = 'DATE_FORMAT(ie.timestamp, \"%Y-%m\")';\n          break;\n        default:\n          dateFormat = '%Y-%m-%d';\n          groupBy = 'DATE(ie.timestamp)';\n      }\n\n      const query = `\n        SELECT \n          DATE_FORMAT(ie.timestamp, '${dateFormat}') as date,\n          COUNT(DISTINCT CASE WHEN ie.type = 'code_generated' THEN ie.invite_code_id END) as total_invites,\n          COUNT(DISTINCT CASE WHEN ie.type = 'link_clicked' THEN ie.invite_code_id END) as total_clicks,\n          COUNT(DISTINCT CASE WHEN ie.type = 'user_registered' THEN ie.invite_code_id END) as total_registrations,\n          COUNT(DISTINCT CASE WHEN ie.type = 'user_activated' THEN ie.invite_code_id END) as total_activations\n        FROM invite_events ie\n        WHERE ie.timestamp BETWEEN ? AND ?\n        GROUP BY ${groupBy}\n        ORDER BY date\n      `;\n\n      const results = await this.db.query(query, [period.start, period.end]);\n\n      return results.map((row: any) => ({\n        date: row.date,\n        metrics: this.calculateConversionMetrics(row),\n      }));\n    } catch (error) {\n      console.error('Failed to get conversion trend:', error);\n      throw new Error('Failed to get conversion trend');\n    }\n  }\n\n  /**\n   * 获取优化建议\n   */\n  async getOptimizationRecommendations(userId?: string): Promise<{\n    priority: 'high' | 'medium' | 'low'\n    category: string\n    recommendation: string\n    expectedImprovement: string\n  }[]> {\n    try {\n      const recommendations = [];\n\n      // 获取转化率数据\n      const period: TimePeriod = {\n        start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30天前\n        end: new Date(),\n      };\n\n      const metrics = userId\n        ? await this.getUserConversionAnalysis(userId, period)\n        : await this.getOverallConversionAnalysis(period);\n\n      // 分析点击转化率\n      if (metrics.inviteToClick < 20) {\n        recommendations.push({\n          priority: 'high' as const,\n          category: '分享优化',\n          recommendation: '邀请链接点击率较低，建议优化分享文案和分享时机，增加吸引力',\n          expectedImprovement: '预计可提升15-25%的点击率',\n        });\n      }\n\n      // 分析注册转化率\n      if (metrics.clickToRegister < 30) {\n        recommendations.push({\n          priority: 'high' as const,\n          category: '注册优化',\n          recommendation: '注册转化率偏低，建议简化注册流程，优化落地页设计',\n          expectedImprovement: '预计可提升20-30%的注册率',\n        });\n      }\n\n      // 分析激活转化率\n      if (metrics.registerToActivate < 60) {\n        recommendations.push({\n          priority: 'medium' as const,\n          category: '用户激活',\n          recommendation: '用户激活率需要提升，建议优化新手引导和首次体验',\n          expectedImprovement: '预计可提升10-20%的激活率',\n        });\n      }\n\n      // 分析平均注册时间\n      if (metrics.averageTimeToRegister > 24) {\n        recommendations.push({\n          priority: 'medium' as const,\n          category: '时效性优化',\n          recommendation: '用户注册时间较长，建议增加紧迫感提示和限时优惠',\n          expectedImprovement: '预计可缩短30-50%的注册时间',\n        });\n      }\n\n      // 如果没有特定问题，提供通用建议\n      if (recommendations.length === 0) {\n        recommendations.push({\n          priority: 'low' as const,\n          category: '持续优化',\n          recommendation: '当前转化率表现良好，建议继续A/B测试不同的分享策略',\n          expectedImprovement: '预计可获得5-10%的增长',\n        });\n      }\n\n      return recommendations;\n    } catch (error) {\n      console.error('Failed to get optimization recommendations:', error);\n      throw new Error('Failed to get optimization recommendations');\n    }\n  }\n\n  /**\n   * 分析转化率影响因素\n   */\n  async analyzeConversionFactors(period: TimePeriod): Promise<{\n    timeOfDay: { [hour: string]: number }\n    dayOfWeek: { [day: string]: number }\n    deviceType: { [device: string]: number }\n    referrerType: { [referrer: string]: number }\n  }> {\n    try {\n      // 分析时间段影响\n      const timeQuery = `\n        SELECT \n          HOUR(ie.timestamp) as hour,\n          COUNT(CASE WHEN ie.type = 'user_registered' THEN 1 END) / COUNT(CASE WHEN ie.type = 'link_clicked' THEN 1 END) * 100 as conversion_rate\n        FROM invite_events ie\n        WHERE ie.timestamp BETWEEN ? AND ?\n        AND ie.type IN ('link_clicked', 'user_registered')\n        GROUP BY HOUR(ie.timestamp)\n        HAVING COUNT(CASE WHEN ie.type = 'link_clicked' THEN 1 END) > 0\n      `;\n\n      // 分析星期影响\n      const dayQuery = `\n        SELECT \n          DAYNAME(ie.timestamp) as day_name,\n          COUNT(CASE WHEN ie.type = 'user_registered' THEN 1 END) / COUNT(CASE WHEN ie.type = 'link_clicked' THEN 1 END) * 100 as conversion_rate\n        FROM invite_events ie\n        WHERE ie.timestamp BETWEEN ? AND ?\n        AND ie.type IN ('link_clicked', 'user_registered')\n        GROUP BY DAYNAME(ie.timestamp), DAYOFWEEK(ie.timestamp)\n        HAVING COUNT(CASE WHEN ie.type = 'link_clicked' THEN 1 END) > 0\n        ORDER BY DAYOFWEEK(ie.timestamp)\n      `;\n\n      const [timeResults, dayResults] = await Promise.all([\n        this.db.query(timeQuery, [period.start, period.end]),\n        this.db.query(dayQuery, [period.start, period.end]),\n      ]);\n\n      const timeOfDay: { [hour: string]: number } = {};\n      timeResults.forEach((row: any) => {\n        timeOfDay[row.hour] = parseFloat(row.conversion_rate) || 0;\n      });\n\n      const dayOfWeek: { [day: string]: number } = {};\n      dayResults.forEach((row: any) => {\n        dayOfWeek[row.day_name] = parseFloat(row.conversion_rate) || 0;\n      });\n\n      return {\n        timeOfDay,\n        dayOfWeek,\n        deviceType: {}, // 需要额外的设备信息收集\n        referrerType: {}, // 需要额外的来源信息收集\n      };\n    } catch (error) {\n      console.error('Failed to analyze conversion factors:', error);\n      throw new Error('Failed to analyze conversion factors');\n    }\n  }\n\n  /**\n   * 计算转化率指标\n   */\n  private calculateConversionMetrics(data: any): ConversionMetrics {\n    const totalInvites = parseInt(data.total_invites, 10) || 0;\n    const totalClicks = parseInt(data.total_clicks, 10) || 0;\n    const totalRegistrations = parseInt(data.total_registrations, 10) || 0;\n    const totalActivations = parseInt(data.total_activations, 10) || 0;\n\n    return {\n      inviteToClick: totalInvites > 0 ? (totalClicks / totalInvites) * 100 : 0,\n      clickToRegister: totalClicks > 0 ? (totalRegistrations / totalClicks) * 100 : 0,\n      registerToActivate: totalRegistrations > 0 ? (totalActivations / totalRegistrations) * 100 : 0,\n      overallConversion: totalInvites > 0 ? (totalActivations / totalInvites) * 100 : 0,\n      totalInvites,\n      totalClicks,\n      totalRegistrations,\n      totalActivations,\n      averageTimeToRegister: parseFloat(data.avg_time_to_register) || 0,\n      averageTimeToActivate: parseFloat(data.avg_time_to_activate) || 0,\n    };\n  }\n\n  /**\n   * 计算平台趋势\n   */\n  private async calculatePlatformTrend(platform: SharePlatform, period: TimePeriod): Promise<'improving' | 'declining' | 'stable'> {\n    try {\n      const midPoint = new Date((period.start.getTime() + period.end.getTime()) / 2);\n\n      const firstHalfQuery = `\n        SELECT \n          COUNT(CASE WHEN event_type = 'conversion' THEN 1 END) / COUNT(CASE WHEN event_type = 'click' THEN 1 END) * 100 as conversion_rate\n        FROM share_events \n        WHERE platform = ? AND timestamp BETWEEN ? AND ?\n        HAVING COUNT(CASE WHEN event_type = 'click' THEN 1 END) > 0\n      `;\n\n      const secondHalfQuery = `\n        SELECT \n          COUNT(CASE WHEN event_type = 'conversion' THEN 1 END) / COUNT(CASE WHEN event_type = 'click' THEN 1 END) * 100 as conversion_rate\n        FROM share_events \n        WHERE platform = ? AND timestamp BETWEEN ? AND ?\n        HAVING COUNT(CASE WHEN event_type = 'click' THEN 1 END) > 0\n      `;\n\n      const [firstHalf, secondHalf] = await Promise.all([\n        this.db.queryOne<{ conversion_rate: number | string }>(firstHalfQuery, [platform, period.start, midPoint]),\n        this.db.queryOne<{ conversion_rate: number | string }>(secondHalfQuery, [platform, midPoint, period.end]),\n      ]);\n\n      const firstRate = Number(firstHalf?.conversion_rate) || 0;\n      const secondRate = Number(secondHalf?.conversion_rate) || 0;\n\n      if (secondRate > firstRate * 1.1) return 'improving';\n      if (secondRate < firstRate * 0.9) return 'declining';\n      return 'stable';\n    } catch (error) {\n      console.error('Failed to calculate platform trend:', error);\n      return 'stable';\n    }\n  }\n\n  /**\n   * 生成平台优化建议\n   */\n  private generatePlatformRecommendations(platform: SharePlatform, metrics: ConversionMetrics): string[] {\n    const recommendations: string[] = [];\n\n    switch (platform) {\n      case SharePlatform.WECHAT:\n        if (metrics.clickToRegister < 25) {\n          recommendations.push('优化微信分享卡片的标题和描述，增加吸引力');\n          recommendations.push('考虑在微信群中分享时添加个人推荐语');\n        }\n        break;\n\n      case SharePlatform.QQ:\n        if (metrics.inviteToClick < 15) {\n          recommendations.push('QQ分享的点击率较低，建议优化分享时机和目标群体');\n        }\n        break;\n\n      case SharePlatform.EMAIL:\n        if (metrics.averageTimeToRegister > 48) {\n          recommendations.push('邮件邀请的响应时间较长，建议添加紧迫感元素');\n          recommendations.push('优化邮件标题，提高打开率');\n        }\n        break;\n\n      default:\n        if (metrics.overallConversion < 10) {\n          recommendations.push('该平台整体转化率较低，建议重新评估分享策略');\n        }\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('该平台表现良好，继续保持当前策略');\n    }\n\n    return recommendations;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/CreditSystem.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 146. Maximum allowed is 120.","line":65,"column":1,"nodeType":"Program","messageId":"max","endLine":65,"endColumn":147},{"ruleId":"max-len","severity":1,"message":"This line has a length of 128. Maximum allowed is 120.","line":469,"column":1,"nodeType":"Program","messageId":"max","endLine":469,"endColumn":129}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 积分系统服务\n * 管理用户AI生成积分的获取、使用和过期\n */\n\nimport { logger } from '../../utils/logger';\nimport { DatabaseFactory } from '../database';\nimport { generateUUID } from '../utils';\n\n// 积分记录\nexport interface CreditRecord {\n  id: string\n  userId: string\n  amount: number\n  type: CreditType\n  source: CreditSource\n  sourceId: string\n  description: string\n  expiresAt?: Date\n  createdAt: Date\n  usedAt?: Date\n}\n\n// 积分类型\nexport enum CreditType {\n  EARNED = 'earned',    // 获得积分\n  USED = 'used',        // 使用积分\n  EXPIRED = 'expired',  // 过期积分\n  REFUNDED = 'refunded' // 退还积分\n}\n\n// 积分来源\nexport enum CreditSource {\n  INVITE_REWARD = 'invite_reward',      // 邀请奖励\n  MILESTONE_REWARD = 'milestone_reward', // 里程碑奖励\n  ACTIVITY_REWARD = 'activity_reward',   // 活动奖励\n  PURCHASE = 'purchase',                 // 购买\n  ADMIN_GRANT = 'admin_grant',          // 管理员发放\n  SYSTEM_REFUND = 'system_refund'       // 系统退还\n}\n\n// 用户积分余额\nexport interface UserCreditBalance {\n  userId: string\n  totalEarned: number\n  totalUsed: number\n  totalExpired: number\n  availableCredits: number\n  expiringCredits: number // 30天内过期的积分\n  lastUpdated: Date\n}\n\n// 积分使用记录\nexport interface CreditUsage {\n  id: string\n  userId: string\n  amount: number\n  purpose: string\n  metadata?: Record<string, any>\n  createdAt: Date\n}\n\nexport interface CreditSystemService {\n  // 积分管理\n  addCredits(userId: string, amount: number, source: CreditSource, sourceId: string, description: string, expiresAt?: Date): Promise<CreditRecord>\n  useCredits(userId: string, amount: number, purpose: string, metadata?: Record<string, any>): Promise<boolean>\n\n  // 余额查询\n  getUserBalance(userId: string): Promise<UserCreditBalance>\n  getAvailableCredits(userId: string): Promise<number>\n\n  // 记录查询\n  getUserCreditHistory(userId: string, limit?: number): Promise<CreditRecord[]>\n  getCreditUsageHistory(userId: string, limit?: number): Promise<CreditUsage[]>\n\n  // 过期处理\n  expireCredits(): Promise<number>\n  getExpiringCredits(userId: string, days?: number): Promise<CreditRecord[]>\n\n  // 统计\n  getCreditStats(userId: string): Promise<{\n    totalEarned: number\n    totalUsed: number\n    totalExpired: number\n    averageDaily: number\n    topSources: Array<{ source: CreditSource, amount: number }>\n  }>\n}\n\nexport class CreditSystemServiceImpl implements CreditSystemService {\n  private db = DatabaseFactory.getInstance();\n\n  async addCredits(\n    userId: string,\n    amount: number,\n    source: CreditSource,\n    sourceId: string,\n    description: string,\n    expiresAt?: Date,\n  ): Promise<CreditRecord> {\n    try {\n      const creditId = generateUUID();\n      const createdAt = new Date();\n\n      // 默认6个月过期\n      const defaultExpiresAt = expiresAt || new Date(Date.now() + 6 * 30 * 24 * 60 * 60 * 1000);\n\n      await this.db.execute(\n        `INSERT INTO credit_records \n         (id, user_id, amount, type, source, source_id, description, expires_at, created_at)\n         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n        [\n          creditId,\n          userId,\n          amount,\n          CreditType.EARNED,\n          source,\n          sourceId,\n          description,\n          defaultExpiresAt,\n          createdAt,\n        ],\n      );\n\n      // 更新用户积分余额缓存\n      await this.updateUserBalance(userId);\n\n      const creditRecord: CreditRecord = {\n        id: creditId,\n        userId,\n        amount,\n        type: CreditType.EARNED,\n        source,\n        sourceId,\n        description,\n        expiresAt: defaultExpiresAt,\n        createdAt,\n      };\n\n      logger.info('Credits added to user', { userId, amount, source, description });\n      return creditRecord;\n\n    } catch (error) {\n      logger.error('Failed to add credits', { userId, amount, source, error });\n      throw error;\n    }\n  }\n\n  async useCredits(userId: string, amount: number, purpose: string, metadata?: Record<string, any>): Promise<boolean> {\n    return await this.db.transaction(async (connection) => {\n      try {\n        // 检查可用积分\n        const availableCredits = await this.getAvailableCredits(userId);\n        if (availableCredits < amount) {\n          logger.warn('Insufficient credits', { userId, requested: amount, available: availableCredits });\n          return false;\n        }\n\n        // 按过期时间顺序使用积分（先过期先使用）\n        const earnedCredits = await connection.query<any>(\n          `SELECT * FROM credit_records \n           WHERE user_id = ? AND type = ? AND used_at IS NULL AND expires_at > NOW()\n           ORDER BY expires_at ASC`,\n          [userId, CreditType.EARNED],\n        );\n\n        let remainingAmount = amount;\n        const usageId = generateUUID();\n        const usedAt = new Date();\n\n        for (const credit of earnedCredits) {\n          if (remainingAmount <= 0) break;\n\n          const useAmount = Math.min(remainingAmount, credit.amount);\n\n          // 记录积分使用\n          await connection.execute(\n            `INSERT INTO credit_records \n             (id, user_id, amount, type, source, source_id, description, created_at, used_at)\n             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n            [\n              generateUUID(),\n              userId,\n              -useAmount, // 负数表示使用\n              CreditType.USED,\n              credit.source,\n              credit.source_id,\n              `使用积分: ${purpose}`,\n              usedAt,\n              usedAt,\n            ],\n          );\n\n          // 更新原积分记录的使用时间\n          if (useAmount === credit.amount) {\n            // 完全使用\n            await connection.execute(\n              'UPDATE credit_records SET used_at = ? WHERE id = ?',\n              [usedAt, credit.id],\n            );\n          } else {\n            // 部分使用，需要拆分记录\n            await connection.execute(\n              'UPDATE credit_records SET amount = ? WHERE id = ?',\n              [credit.amount - useAmount, credit.id],\n            );\n          }\n\n          remainingAmount -= useAmount;\n        }\n\n        // 记录使用详情\n        await connection.execute(\n          `INSERT INTO credit_usage \n           (id, user_id, amount, purpose, metadata, created_at)\n           VALUES (?, ?, ?, ?, ?, ?)`,\n          [\n            usageId,\n            userId,\n            amount,\n            purpose,\n            metadata ? JSON.stringify(metadata) : null,\n            usedAt,\n          ],\n        );\n\n        // 更新用户积分余额缓存\n        await this.updateUserBalance(userId);\n\n        logger.info('Credits used successfully', { userId, amount, purpose });\n        return true;\n\n      } catch (error) {\n        logger.error('Failed to use credits', { userId, amount, purpose, error });\n        throw error;\n      }\n    });\n  }\n\n  async getUserBalance(userId: string): Promise<UserCreditBalance> {\n    try {\n      // 先尝试从缓存获取\n      const cached = await this.db.query<any>(\n        'SELECT * FROM user_credit_balances WHERE user_id = ?',\n        [userId],\n      );\n\n      if (cached.length > 0) {\n        const balance = cached[0];\n        return {\n          userId: balance.user_id,\n          totalEarned: balance.total_earned,\n          totalUsed: balance.total_used,\n          totalExpired: balance.total_expired,\n          availableCredits: balance.available_credits,\n          expiringCredits: balance.expiring_credits,\n          lastUpdated: balance.last_updated,\n        };\n      }\n\n      // 缓存不存在，重新计算\n      await this.updateUserBalance(userId);\n      return await this.getUserBalance(userId);\n\n    } catch (error) {\n      logger.error('Failed to get user balance', { userId, error });\n      throw error;\n    }\n  }\n\n  async getAvailableCredits(userId: string): Promise<number> {\n    try {\n      const [result] = await this.db.query<{ available: number }>(\n        `SELECT COALESCE(SUM(CASE \n           WHEN type = ? AND used_at IS NULL AND expires_at > NOW() THEN amount\n           ELSE 0 \n         END), 0) as available\n         FROM credit_records \n         WHERE user_id = ?`,\n        [CreditType.EARNED, userId],\n      );\n\n      return result.available;\n\n    } catch (error) {\n      logger.error('Failed to get available credits', { userId, error });\n      throw error;\n    }\n  }\n\n  async getUserCreditHistory(userId: string, limit: number = 50): Promise<CreditRecord[]> {\n    try {\n      const results = await this.db.query<any>(\n        `SELECT * FROM credit_records \n         WHERE user_id = ? \n         ORDER BY created_at DESC \n         LIMIT ?`,\n        [userId, limit],\n      );\n\n      return results.map(row => ({\n        id: row.id,\n        userId: row.user_id,\n        amount: row.amount,\n        type: row.type,\n        source: row.source,\n        sourceId: row.source_id,\n        description: row.description,\n        expiresAt: row.expires_at,\n        createdAt: row.created_at,\n        usedAt: row.used_at,\n      }));\n\n    } catch (error) {\n      logger.error('Failed to get user credit history', { userId, error });\n      throw error;\n    }\n  }\n\n  async getCreditUsageHistory(userId: string, limit: number = 50): Promise<CreditUsage[]> {\n    try {\n      const results = await this.db.query<any>(\n        `SELECT * FROM credit_usage \n         WHERE user_id = ? \n         ORDER BY created_at DESC \n         LIMIT ?`,\n        [userId, limit],\n      );\n\n      return results.map(row => ({\n        id: row.id,\n        userId: row.user_id,\n        amount: row.amount,\n        purpose: row.purpose,\n        metadata: row.metadata ? JSON.parse(row.metadata) : undefined,\n        createdAt: row.created_at,\n      }));\n\n    } catch (error) {\n      logger.error('Failed to get credit usage history', { userId, error });\n      throw error;\n    }\n  }\n\n  async expireCredits(): Promise<number> {\n    try {\n      // 查找过期的积分\n      const expiredCredits = await this.db.query<any>(\n        `SELECT * FROM credit_records \n         WHERE type = ? AND used_at IS NULL AND expires_at <= NOW()`,\n        [CreditType.EARNED],\n      );\n\n      let expiredCount = 0;\n\n      for (const credit of expiredCredits) {\n        // 创建过期记录\n        await this.db.execute(\n          `INSERT INTO credit_records \n           (id, user_id, amount, type, source, source_id, description, created_at)\n           VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,\n          [\n            generateUUID(),\n            credit.user_id,\n            -credit.amount,\n            CreditType.EXPIRED,\n            credit.source,\n            credit.source_id,\n            `积分过期: ${credit.description}`,\n            new Date(),\n          ],\n        );\n\n        // 标记原记录为已使用（过期）\n        await this.db.execute(\n          'UPDATE credit_records SET used_at = NOW() WHERE id = ?',\n          [credit.id],\n        );\n\n        expiredCount++;\n\n        // 更新用户余额\n        await this.updateUserBalance(credit.user_id);\n      }\n\n      logger.info('Credits expired', { expiredCount });\n      return expiredCount;\n\n    } catch (error) {\n      logger.error('Failed to expire credits', { error });\n      throw error;\n    }\n  }\n\n  async getExpiringCredits(userId: string, days: number = 30): Promise<CreditRecord[]> {\n    try {\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + days);\n\n      const results = await this.db.query<any>(\n        `SELECT * FROM credit_records \n         WHERE user_id = ? AND type = ? AND used_at IS NULL \n         AND expires_at BETWEEN NOW() AND ?\n         ORDER BY expires_at ASC`,\n        [userId, CreditType.EARNED, expiryDate],\n      );\n\n      return results.map(row => ({\n        id: row.id,\n        userId: row.user_id,\n        amount: row.amount,\n        type: row.type,\n        source: row.source,\n        sourceId: row.source_id,\n        description: row.description,\n        expiresAt: row.expires_at,\n        createdAt: row.created_at,\n        usedAt: row.used_at,\n      }));\n\n    } catch (error) {\n      logger.error('Failed to get expiring credits', { userId, days, error });\n      throw error;\n    }\n  }\n\n  async getCreditStats(userId: string): Promise<{\n    totalEarned: number\n    totalUsed: number\n    totalExpired: number\n    averageDaily: number\n    topSources: Array<{ source: CreditSource, amount: number }>\n  }> {\n    try {\n      // 总获得积分\n      const [earnedResult] = await this.db.query<{ total: number }>(\n        `SELECT COALESCE(SUM(amount), 0) as total \n         FROM credit_records \n         WHERE user_id = ? AND type = ?`,\n        [userId, CreditType.EARNED],\n      );\n\n      // 总使用积分\n      const [usedResult] = await this.db.query<{ total: number }>(\n        `SELECT COALESCE(SUM(ABS(amount)), 0) as total \n         FROM credit_records \n         WHERE user_id = ? AND type = ?`,\n        [userId, CreditType.USED],\n      );\n\n      // 总过期积分\n      const [expiredResult] = await this.db.query<{ total: number }>(\n        `SELECT COALESCE(SUM(ABS(amount)), 0) as total \n         FROM credit_records \n         WHERE user_id = ? AND type = ?`,\n        [userId, CreditType.EXPIRED],\n      );\n\n      // 计算日均获得积分\n      const [firstRecord] = await this.db.query<{ first_date: Date }>(\n        `SELECT MIN(created_at) as first_date \n         FROM credit_records \n         WHERE user_id = ? AND type = ?`,\n        [userId, CreditType.EARNED],\n      );\n\n      let averageDaily = 0;\n      if (firstRecord.first_date) {\n        const daysSinceFirst = Math.max(1, Math.floor((Date.now() - firstRecord.first_date.getTime()) / (24 * 60 * 60 * 1000)));\n        averageDaily = earnedResult.total / daysSinceFirst;\n      }\n\n      // 按来源统计\n      const sourceStats = await this.db.query<{ source: CreditSource, amount: number }>(\n        `SELECT source, SUM(amount) as amount \n         FROM credit_records \n         WHERE user_id = ? AND type = ? \n         GROUP BY source \n         ORDER BY amount DESC \n         LIMIT 5`,\n        [userId, CreditType.EARNED],\n      );\n\n      return {\n        totalEarned: earnedResult.total,\n        totalUsed: usedResult.total,\n        totalExpired: expiredResult.total,\n        averageDaily: Math.round(averageDaily * 100) / 100,\n        topSources: sourceStats,\n      };\n\n    } catch (error) {\n      logger.error('Failed to get credit stats', { userId, error });\n      throw error;\n    }\n  }\n\n  // 私有方法：更新用户积分余额缓存\n  private async updateUserBalance(userId: string): Promise<void> {\n    try {\n      const balance = await this.getUserBalance(userId);\n      const availableCredits = await this.getAvailableCredits(userId);\n      const expiringCredits = await this.getExpiringCredits(userId, 30);\n      const expiringAmount = expiringCredits.reduce((sum, credit) => sum + credit.amount, 0);\n\n      await this.db.execute(\n        `INSERT INTO user_credit_balances \n         (user_id, total_earned, total_used, total_expired, available_credits, expiring_credits, last_updated)\n         VALUES (?, ?, ?, ?, ?, ?, ?)\n         ON DUPLICATE KEY UPDATE\n         total_earned = VALUES(total_earned),\n         total_used = VALUES(total_used),\n         total_expired = VALUES(total_expired),\n         available_credits = VALUES(available_credits),\n         expiring_credits = VALUES(expiring_credits),\n         last_updated = VALUES(last_updated)`,\n        [\n          userId,\n          balance.totalEarned || 0,\n          balance.totalUsed || 0,\n          balance.totalExpired || 0,\n          availableCredits,\n          expiringAmount,\n          new Date(),\n        ],\n      );\n\n    } catch (error) {\n      logger.error('Failed to update user balance cache', { userId, error });\n      // 不抛出错误，避免影响主流程\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/DataVisualizationService.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 145. Maximum allowed is 120.","line":630,"column":1,"nodeType":"Program","messageId":"max","endLine":630,"endColumn":146}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据可视化服务\n * 提供各种图表数据的生成和配置\n */\n\nimport { DatabaseService } from '../database';\nimport { TimePeriod, SharePlatform } from '../types';\n\nexport interface ChartConfig {\n  type: 'line' | 'bar' | 'pie' | 'doughnut' | 'area' | 'scatter' | 'radar'\n  title: string\n  subtitle?: string\n  data: ChartDataset\n  options?: ChartOptions\n}\n\nexport interface ChartDataset {\n  labels: string[]\n  datasets: Array<{\n    label: string\n    data: number[]\n    backgroundColor?: string | string[]\n    borderColor?: string | string[]\n    borderWidth?: number\n    fill?: boolean\n    tension?: number\n  }>\n}\n\nexport interface ChartOptions {\n  responsive?: boolean\n  maintainAspectRatio?: boolean\n  plugins?: {\n    legend?: {\n      display?: boolean\n      position?: 'top' | 'bottom' | 'left' | 'right'\n    }\n    tooltip?: {\n      enabled?: boolean\n      mode?: 'index' | 'dataset' | 'point' | 'nearest'\n    }\n  }\n  scales?: {\n    x?: {\n      display?: boolean\n      title?: {\n        display?: boolean\n        text?: string\n      }\n    }\n    y?: {\n      display?: boolean\n      beginAtZero?: boolean\n      title?: {\n        display?: boolean\n        text?: string\n      }\n    }\n  }\n}\n\nexport interface DataVisualizationService {\n  // 生成邀请趋势图\n  generateInviteTrendChart(period: TimePeriod, granularity?: 'day' | 'week' | 'month'): Promise<ChartConfig>\n\n  // 生成转化漏斗图\n  generateConversionFunnelChart(period: TimePeriod): Promise<ChartConfig>\n\n  // 生成平台分布饼图\n  generatePlatformDistributionChart(period: TimePeriod): Promise<ChartConfig>\n\n  // 生成排行榜柱状图\n  generateLeaderboardChart(period: TimePeriod, limit?: number): Promise<ChartConfig>\n\n  // 生成用户活跃度热力图数据\n  generateUserActivityHeatmap(period: TimePeriod): Promise<{\n    data: Array<{ x: string; y: string; value: number }>\n    config: any\n  }>\n\n  // 生成转化率对比图\n  generateConversionComparisonChart(periods: TimePeriod[]): Promise<ChartConfig>\n\n  // 生成实时数据仪表盘\n  generateRealTimeDashboard(): Promise<{\n    metrics: Array<{\n      title: string\n      value: number\n      change: number\n      trend: 'up' | 'down' | 'stable'\n      format: 'number' | 'percentage' | 'currency'\n    }>\n    charts: ChartConfig[]\n  }>\n\n  // 生成地理分布图数据\n  generateGeographicDistribution(period: TimePeriod): Promise<{\n    type: 'map'\n    data: Array<{\n      region: string\n      value: number\n      coordinates?: [number, number]\n    }>\n  }>\n\n  // 获取图表颜色主题\n  getChartColorThemes(): { [themeName: string]: string[] }\n\n  // 导出图表为图片\n  exportChartAsImage(chartConfig: ChartConfig, format: 'png' | 'jpg' | 'svg'): Promise<Buffer>\n}\n\nexport class DataVisualizationServiceImpl implements DataVisualizationService {\n  private colorThemes = {\n    default: ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'],\n    pastel: ['#93c5fd', '#86efac', '#fde68a', '#fca5a5', '#c4b5fd', '#67e8f9'],\n    dark: ['#1e40af', '#059669', '#d97706', '#dc2626', '#7c3aed', '#0891b2'],\n    monochrome: ['#374151', '#6b7280', '#9ca3af', '#d1d5db', '#e5e7eb', '#f3f4f6'],\n  };\n\n  constructor(private db: DatabaseService) {}\n\n  /**\n   * 生成邀请趋势图\n   */\n  async generateInviteTrendChart(\n    period: TimePeriod,\n    granularity: 'day' | 'week' | 'month' = 'day',\n  ): Promise<ChartConfig> {\n    try {\n      let dateFormat: string;\n      let groupBy: string;\n\n      switch (granularity) {\n        case 'week':\n          dateFormat = '%Y-%u';\n          groupBy = 'YEARWEEK(ic.created_at)';\n          break;\n        case 'month':\n          dateFormat = '%Y-%m';\n          groupBy = 'DATE_FORMAT(ic.created_at, \"%Y-%m\")';\n          break;\n        default:\n          dateFormat = '%Y-%m-%d';\n          groupBy = 'DATE(ic.created_at)';\n      }\n\n      const query = `\n        SELECT \n          DATE_FORMAT(ic.created_at, '${dateFormat}') as date,\n          COUNT(DISTINCT ic.id) as invites,\n          COUNT(DISTINCT ir.id) as registrations,\n          COUNT(DISTINCT CASE WHEN ir.is_activated = 1 THEN ir.id END) as activations\n        FROM invite_codes ic\n        LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n        WHERE ic.created_at BETWEEN ? AND ?\n        GROUP BY ${groupBy}\n        ORDER BY date\n      `;\n\n      const results = await this.db.query(query, [period.start, period.end]);\n\n      const labels = results.map((row: any) => row.date);\n      const invitesData = results.map((row: any) => parseInt(row.invites, 10) || 0);\n      const registrationsData = results.map((row: any) => parseInt(row.registrations, 10) || 0);\n      const activationsData = results.map((row: any) => parseInt(row.activations, 10) || 0);\n\n      return {\n        type: 'line',\n        title: '邀请趋势分析',\n        subtitle: `${period.start.toLocaleDateString()} - ${period.end.toLocaleDateString()}`,\n        data: {\n          labels,\n          datasets: [\n            {\n              label: '邀请数',\n              data: invitesData,\n              borderColor: this.colorThemes.default[0],\n              backgroundColor: this.colorThemes.pastel[0],\n              fill: false,\n              tension: 0.4,\n            },\n            {\n              label: '注册数',\n              data: registrationsData,\n              borderColor: this.colorThemes.default[1],\n              backgroundColor: this.colorThemes.pastel[1],\n              fill: false,\n              tension: 0.4,\n            },\n            {\n              label: '激活数',\n              data: activationsData,\n              borderColor: this.colorThemes.default[2],\n              backgroundColor: this.colorThemes.pastel[2],\n              fill: false,\n              tension: 0.4,\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n            },\n            tooltip: {\n              enabled: true,\n              mode: 'index',\n            },\n          },\n          scales: {\n            x: {\n              display: true,\n              title: {\n                display: true,\n                text: '时间',\n              },\n            },\n            y: {\n              display: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: '数量',\n              },\n            },\n          },\n        },\n      };\n    } catch (error) {\n      console.error('Failed to generate invite trend chart:', error);\n      throw new Error('Failed to generate invite trend chart');\n    }\n  }\n\n  /**\n   * 生成转化漏斗图\n   */\n  async generateConversionFunnelChart(period: TimePeriod): Promise<ChartConfig> {\n    try {\n      const query = `\n        SELECT \n          COUNT(DISTINCT ic.id) as total_invites,\n          COUNT(DISTINCT se.invite_code_id) as total_clicks,\n          COUNT(DISTINCT ir.id) as total_registrations,\n          COUNT(DISTINCT CASE WHEN ir.is_activated = 1 THEN ir.id END) as total_activations\n        FROM invite_codes ic\n        LEFT JOIN share_events se ON ic.id = se.invite_code_id AND se.event_type = 'click'\n        LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n        WHERE ic.created_at BETWEEN ? AND ?\n      `;\n\n      const result = await this.db.queryOne<{\n        total_invites: number | string;\n        total_clicks: number | string;\n        total_registrations: number | string;\n        total_activations: number | string;\n      }>(query, [period.start, period.end]);\n\n      const totalInvites = Number(result?.total_invites) || 0;\n      const totalClicks = Number(result?.total_clicks) || 0;\n      const totalRegistrations = Number(result?.total_registrations) || 0;\n      const totalActivations = Number(result?.total_activations) || 0;\n\n      const funnelData = [\n        { step: '邀请生成', count: totalInvites },\n        { step: '链接点击', count: totalClicks },\n        { step: '用户注册', count: totalRegistrations },\n        { step: '用户激活', count: totalActivations },\n      ];\n\n      return {\n        type: 'bar',\n        title: '邀请转化漏斗',\n        subtitle: '展示用户从邀请到激活的完整转化路径',\n        data: {\n          labels: funnelData.map(d => d.step),\n          datasets: [{\n            label: '用户数量',\n            data: funnelData.map(d => d.count),\n            backgroundColor: [\n              this.colorThemes.default[0],\n              this.colorThemes.default[1],\n              this.colorThemes.default[2],\n              this.colorThemes.default[3],\n            ],\n            borderColor: [\n              this.colorThemes.dark[0],\n              this.colorThemes.dark[1],\n              this.colorThemes.dark[2],\n              this.colorThemes.dark[3],\n            ],\n            borderWidth: 2,\n          }],\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: false,\n            },\n            tooltip: {\n              enabled: true,\n              mode: 'point',\n            },\n          },\n          scales: {\n            x: {\n              display: true,\n              title: {\n                display: true,\n                text: '转化步骤',\n              },\n            },\n            y: {\n              display: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: '用户数量',\n              },\n            },\n          },\n        },\n      };\n    } catch (error) {\n      console.error('Failed to generate conversion funnel chart:', error);\n      throw new Error('Failed to generate conversion funnel chart');\n    }\n  }\n\n  /**\n   * 生成平台分布饼图\n   */\n  async generatePlatformDistributionChart(period: TimePeriod): Promise<ChartConfig> {\n    try {\n      const query = `\n        SELECT \n          se.platform,\n          COUNT(*) as share_count\n        FROM share_events se\n        WHERE se.timestamp BETWEEN ? AND ?\n        AND se.event_type = 'share'\n        GROUP BY se.platform\n        ORDER BY share_count DESC\n      `;\n\n      const results = await this.db.query(query, [period.start, period.end]);\n\n      const labels = results.map((row: any) => this.getPlatformDisplayName(row.platform));\n      const data = results.map((row: any) => parseInt(row.share_count, 10) || 0);\n\n      return {\n        type: 'doughnut',\n        title: '分享平台分布',\n        subtitle: '各平台分享次数占比',\n        data: {\n          labels,\n          datasets: [{\n            label: '分享次数',\n            data,\n            backgroundColor: this.colorThemes.default.slice(0, labels.length),\n            borderColor: this.colorThemes.dark.slice(0, labels.length),\n            borderWidth: 2,\n          }],\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'right',\n            },\n            tooltip: {\n              enabled: true,\n              mode: 'point',\n            },\n          },\n        },\n      };\n    } catch (error) {\n      console.error('Failed to generate platform distribution chart:', error);\n      throw new Error('Failed to generate platform distribution chart');\n    }\n  }\n\n  /**\n   * 生成排行榜柱状图\n   */\n  async generateLeaderboardChart(period: TimePeriod, limit: number = 10): Promise<ChartConfig> {\n    try {\n      const query = `\n        SELECT \n          u.name as user_name,\n          COUNT(DISTINCT ir.id) as invite_count\n        FROM users u\n        JOIN invite_codes ic ON u.id = ic.inviter_id\n        LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n        WHERE ic.created_at BETWEEN ? AND ?\n        GROUP BY u.id, u.name\n        HAVING invite_count > 0\n        ORDER BY invite_count DESC\n        LIMIT ?\n      `;\n\n      const results = await this.db.query(query, [period.start, period.end, limit]);\n\n      const labels = results.map((row: any) => row.user_name);\n      const data = results.map((row: any) => parseInt(row.invite_count, 10) || 0);\n\n      return {\n        type: 'bar',\n        title: '邀请排行榜',\n        subtitle: `前${limit}名邀请者`,\n        data: {\n          labels,\n          datasets: [{\n            label: '邀请数量',\n            data,\n            backgroundColor: this.colorThemes.default[0],\n            borderColor: this.colorThemes.dark[0],\n            borderWidth: 1,\n          }],\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: false,\n            },\n          },\n          scales: {\n            x: {\n              display: true,\n              title: {\n                display: true,\n                text: '用户',\n              },\n            },\n            y: {\n              display: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: '邀请数量',\n              },\n            },\n          },\n        },\n      };\n    } catch (error) {\n      console.error('Failed to generate leaderboard chart:', error);\n      throw new Error('Failed to generate leaderboard chart');\n    }\n  }\n\n  /**\n   * 生成用户活跃度热力图数据\n   */\n  async generateUserActivityHeatmap(period: TimePeriod): Promise<{\n    data: Array<{ x: string; y: string; value: number }>\n    config: any\n  }> {\n    try {\n      const query = `\n        SELECT \n          HOUR(ic.created_at) as hour,\n          DAYNAME(ic.created_at) as day_name,\n          COUNT(*) as activity_count\n        FROM invite_codes ic\n        WHERE ic.created_at BETWEEN ? AND ?\n        GROUP BY HOUR(ic.created_at), DAYNAME(ic.created_at), DAYOFWEEK(ic.created_at)\n        ORDER BY DAYOFWEEK(ic.created_at), HOUR(ic.created_at)\n      `;\n\n      const results = await this.db.query(query, [period.start, period.end]);\n\n      const data = results.map((row: any) => ({\n        x: `${row.hour}:00`,\n        y: row.day_name,\n        value: parseInt(row.activity_count, 10) || 0,\n      }));\n\n      return {\n        data,\n        config: {\n          title: '用户活跃度热力图',\n          subtitle: '按时间和星期分布的邀请活动',\n          colorScale: ['#f3f4f6', '#3b82f6'],\n          tooltip: {\n            format: (d: any) => `${d.y} ${d.x}: ${d.value} 次邀请`,\n          },\n        },\n      };\n    } catch (error) {\n      console.error('Failed to generate user activity heatmap:', error);\n      throw new Error('Failed to generate user activity heatmap');\n    }\n  }\n\n  /**\n   * 生成转化率对比图\n   */\n  async generateConversionComparisonChart(periods: TimePeriod[]): Promise<ChartConfig> {\n    try {\n      const conversionData = [];\n\n      for (const period of periods) {\n        const query = `\n          SELECT \n            COUNT(DISTINCT ic.id) as total_invites,\n            COUNT(DISTINCT ir.id) as total_registrations\n          FROM invite_codes ic\n          LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n          WHERE ic.created_at BETWEEN ? AND ?\n        `;\n\n        const result = await this.db.queryOne<{\n          total_invites: number | string;\n          total_registrations: number | string;\n        }>(query, [period.start, period.end]);\n        const totalInvites = Number(result?.total_invites) || 0;\n        const totalRegistrations = Number(result?.total_registrations) || 0;\n        const conversionRate = totalInvites > 0 ? (totalRegistrations / totalInvites) * 100 : 0;\n\n        conversionData.push({\n          period: `${period.start.toLocaleDateString()} - ${period.end.toLocaleDateString()}`,\n          conversionRate,\n        });\n      }\n\n      return {\n        type: 'line',\n        title: '转化率趋势对比',\n        subtitle: '不同时期的转化率变化',\n        data: {\n          labels: conversionData.map(d => d.period),\n          datasets: [{\n            label: '转化率 (%)',\n            data: conversionData.map(d => d.conversionRate),\n            borderColor: this.colorThemes.default[1],\n            backgroundColor: this.colorThemes.pastel[1],\n            fill: true,\n            tension: 0.4,\n          }],\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top',\n            },\n          },\n          scales: {\n            y: {\n              display: true,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: '转化率 (%)',\n              },\n            },\n          },\n        },\n      };\n    } catch (error) {\n      console.error('Failed to generate conversion comparison chart:', error);\n      throw new Error('Failed to generate conversion comparison chart');\n    }\n  }\n\n  /**\n   * 生成实时数据仪表盘\n   */\n  async generateRealTimeDashboard(): Promise<{\n    metrics: Array<{\n      title: string\n      value: number\n      change: number\n      trend: 'up' | 'down' | 'stable'\n      format: 'number' | 'percentage' | 'currency'\n    }>\n    charts: ChartConfig[]\n  }> {\n    try {\n      // 获取实时指标\n      const today = new Date();\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n\n      const todayQuery = `\n        SELECT \n          COUNT(DISTINCT ic.id) as today_invites,\n          COUNT(DISTINCT ir.id) as today_registrations\n        FROM invite_codes ic\n        LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n        WHERE DATE(ic.created_at) = CURDATE()\n      `;\n\n      const yesterdayQuery = `\n        SELECT \n          COUNT(DISTINCT ic.id) as yesterday_invites,\n          COUNT(DISTINCT ir.id) as yesterday_registrations\n        FROM invite_codes ic\n        LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n        WHERE DATE(ic.created_at) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)\n      `;\n\n      const [todayResult, yesterdayResult] = await Promise.all([\n        this.db.queryOne<{\n          today_invites: number | string;\n          today_registrations: number | string;\n        }>(todayQuery),\n        this.db.queryOne<{\n          yesterday_invites: number | string;\n          yesterday_registrations: number | string;\n        }>(yesterdayQuery),\n      ]);\n\n      const todayInvites = Number(todayResult?.today_invites) || 0;\n      const todayRegistrations = Number(todayResult?.today_registrations) || 0;\n      const yesterdayInvites = Number(yesterdayResult?.yesterday_invites) || 0;\n      const yesterdayRegistrations = Number(yesterdayResult?.yesterday_registrations) || 0;\n\n      const inviteChange = yesterdayInvites > 0 ? ((todayInvites - yesterdayInvites) / yesterdayInvites) * 100 : 0;\n      const registrationChange = yesterdayRegistrations > 0 ? ((todayRegistrations - yesterdayRegistrations) / yesterdayRegistrations) * 100 : 0;\n      const conversionRate = todayInvites > 0 ? (todayRegistrations / todayInvites) * 100 : 0;\n\n      const metrics = [\n        {\n          title: '今日邀请',\n          value: todayInvites,\n          change: inviteChange,\n          trend: inviteChange > 0 ? 'up' as const : inviteChange < 0 ? 'down' as const : 'stable' as const,\n          format: 'number' as const,\n        },\n        {\n          title: '今日注册',\n          value: todayRegistrations,\n          change: registrationChange,\n          trend: registrationChange > 0 ? 'up' as const : registrationChange < 0 ? 'down' as const : 'stable' as const,\n          format: 'number' as const,\n        },\n        {\n          title: '转化率',\n          value: conversionRate,\n          change: 0, // 需要计算\n          trend: 'stable' as const,\n          format: 'percentage' as const,\n        },\n      ];\n\n      // 生成小型图表\n      const last7DaysPeriod: TimePeriod = {\n        start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n        end: new Date(),\n      };\n\n      const trendChart = await this.generateInviteTrendChart(last7DaysPeriod, 'day');\n      trendChart.title = '7天趋势';\n\n      return {\n        metrics,\n        charts: [trendChart],\n      };\n    } catch (error) {\n      console.error('Failed to generate real-time dashboard:', error);\n      throw new Error('Failed to generate real-time dashboard');\n    }\n  }\n\n  /**\n   * 生成地理分布图数据\n   */\n  async generateGeographicDistribution(period: TimePeriod): Promise<{\n    type: 'map'\n    data: Array<{\n      region: string\n      value: number\n      coordinates?: [number, number]\n    }>\n  }> {\n    try {\n      // 这里需要用户地理位置数据，暂时返回模拟数据\n      const mockData = [\n        { region: '北京', value: 45, coordinates: [116.4074, 39.9042] as [number, number] },\n        { region: '上海', value: 38, coordinates: [121.4737, 31.2304] as [number, number] },\n        { region: '广州', value: 32, coordinates: [113.2644, 23.1291] as [number, number] },\n        { region: '深圳', value: 28, coordinates: [114.0579, 22.5431] as [number, number] },\n        { region: '杭州', value: 22, coordinates: [120.1551, 30.2741] as [number, number] },\n      ];\n\n      return {\n        type: 'map',\n        data: mockData,\n      };\n    } catch (error) {\n      console.error('Failed to generate geographic distribution:', error);\n      throw new Error('Failed to generate geographic distribution');\n    }\n  }\n\n  /**\n   * 获取图表颜色主题\n   */\n  getChartColorThemes(): { [themeName: string]: string[] } {\n    return this.colorThemes;\n  }\n\n  /**\n   * 导出图表为图片\n   */\n  async exportChartAsImage(chartConfig: ChartConfig, format: 'png' | 'jpg' | 'svg'): Promise<Buffer> {\n    try {\n      // 这里应该使用图表渲染库（如Chart.js + Canvas）\n      // 暂时返回空Buffer\n      console.log(`Exporting chart as ${format}:`, chartConfig.title);\n      return Buffer.from(`Chart image placeholder for ${chartConfig.title}`);\n    } catch (error) {\n      console.error('Failed to export chart as image:', error);\n      throw new Error('Failed to export chart as image');\n    }\n  }\n\n  /**\n   * 获取平台显示名称\n   */\n  private getPlatformDisplayName(platform: string): string {\n    const platformNames: { [key: string]: string } = {\n      'wechat': '微信',\n      'qq': 'QQ',\n      'dingtalk': '钉钉',\n      'wework': '企业微信',\n      'email': '邮件',\n      'link': '链接复制',\n    };\n    return platformNames[platform] || platform;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/FraudDetectionService.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 123. Maximum allowed is 120.","line":214,"column":1,"nodeType":"Program","messageId":"max","endLine":214,"endColumn":124},{"ruleId":"max-len","severity":1,"message":"This line has a length of 131. Maximum allowed is 120.","line":601,"column":1,"nodeType":"Program","messageId":"max","endLine":601,"endColumn":132},{"ruleId":"max-len","severity":1,"message":"This line has a length of 123. Maximum allowed is 120.","line":625,"column":1,"nodeType":"Program","messageId":"max","endLine":625,"endColumn":124}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 防作弊检测服务\n * 实现基础的防作弊检测机制，包括IP频率限制、设备指纹检测、自我邀请检测等\n */\n\nimport { DatabaseService } from '../database';\n\nexport interface FraudDetectionResult {\n  isValid: boolean\n  riskLevel: 'low' | 'medium' | 'high'\n  reasons: string[]\n  actions: FraudAction[]\n}\n\nexport interface FraudAction {\n  type: 'block' | 'review' | 'warn' | 'monitor'\n  description: string\n  duration?: number // 持续时间（分钟）\n}\n\nexport interface DeviceFingerprint {\n  userAgent: string\n  screenResolution: string\n  timezone: string\n  language: string\n  platform: string\n  cookieEnabled: boolean\n  hash: string\n}\n\nexport interface RegistrationAttempt {\n  ip: string\n  userAgent: string\n  email: string\n  inviteCode?: string\n  deviceFingerprint?: DeviceFingerprint\n  timestamp: Date\n}\n\nexport interface FraudDetectionService {\n  // IP频率检测\n  checkIPFrequency(ip: string): Promise<FraudDetectionResult>\n\n  // 设备指纹检测\n  checkDeviceFingerprint(fingerprint: DeviceFingerprint): Promise<FraudDetectionResult>\n\n  // 自我邀请检测\n  checkSelfInvitation(inviterId: string, inviteeEmail: string, ip: string): Promise<FraudDetectionResult>\n\n  // 批量注册检测\n  checkBatchRegistration(attempt: RegistrationAttempt): Promise<FraudDetectionResult>\n\n  // 综合风险评估\n  assessRegistrationRisk(attempt: RegistrationAttempt, inviterId?: string): Promise<FraudDetectionResult>\n\n  // 记录可疑行为\n  recordSuspiciousActivity(activity: SuspiciousActivity): Promise<void>\n\n  // 获取用户风险等级\n  getUserRiskLevel(userId: string): Promise<'low' | 'medium' | 'high'>\n\n  // 更新用户风险等级\n  updateUserRiskLevel(userId: string, level: 'low' | 'medium' | 'high', reason: string): Promise<void>\n\n  // 检查用户是否被禁止\n  isUserBanned(userId: string): Promise<boolean>\n\n  // 禁止用户参与邀请活动\n  banUser(userId: string, reason: string, duration?: number): Promise<void>\n}\n\nexport interface SuspiciousActivity {\n  userId?: string\n  ip: string\n  type: 'ip_frequency' | 'device_reuse' | 'self_invitation' | 'batch_registration' | 'pattern_anomaly'\n  description: string\n  severity: 'low' | 'medium' | 'high'\n  metadata?: Record<string, any>\n  timestamp: Date\n}\n\nexport class FraudDetectionServiceImpl implements FraudDetectionService {\n  private readonly IP_FREQUENCY_LIMIT = 5; // 每小时最多5次注册\n  private readonly DEVICE_REUSE_LIMIT = 3; // 同一设备最多3次注册\n  private readonly BATCH_TIME_WINDOW = 300; // 5分钟内的批量检测窗口\n  private readonly BATCH_COUNT_THRESHOLD = 3; // 批量注册阈值\n\n  constructor(private db: DatabaseService) {}\n\n  /**\n   * 检查IP频率限制\n   */\n  async checkIPFrequency(ip: string): Promise<FraudDetectionResult> {\n    try {\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n\n      // 查询过去1小时内该IP的注册次数\n      const query = `\n        SELECT COUNT(*) as count\n        FROM users \n        WHERE registration_ip = ? \n        AND created_at > ?\n      `;\n\n      const result = await this.db.queryOne<{ count: number | string }>(query, [ip, oneHourAgo]);\n      const registrationCount = Number(result?.count) || 0;\n\n      if (registrationCount >= this.IP_FREQUENCY_LIMIT) {\n        return {\n          isValid: false,\n          riskLevel: 'high',\n          reasons: [`IP ${ip} 在过去1小时内注册次数过多 (${registrationCount}次)`],\n          actions: [{\n            type: 'block',\n            description: '暂时阻止该IP注册',\n            duration: 60, // 1小时\n          }],\n        };\n      } else if (registrationCount >= Math.floor(this.IP_FREQUENCY_LIMIT * 0.7)) {\n        return {\n          isValid: true,\n          riskLevel: 'medium',\n          reasons: [`IP ${ip} 注册频率较高 (${registrationCount}次)`],\n          actions: [{\n            type: 'monitor',\n            description: '监控该IP的后续行为',\n          }],\n        };\n      }\n\n      return {\n        isValid: true,\n        riskLevel: 'low',\n        reasons: [],\n        actions: [],\n      };\n    } catch (error) {\n      console.error('Failed to check IP frequency:', error);\n      return {\n        isValid: true,\n        riskLevel: 'low',\n        reasons: ['检测失败，默认通过'],\n        actions: [],\n      };\n    }\n  }\n\n  /**\n   * 检查设备指纹\n   */\n  async checkDeviceFingerprint(fingerprint: DeviceFingerprint): Promise<FraudDetectionResult> {\n    try {\n      // 查询该设备指纹的使用次数\n      const query = `\n        SELECT COUNT(DISTINCT user_id) as user_count\n        FROM device_fingerprints \n        WHERE fingerprint_hash = ?\n      `;\n\n      const result = await this.db.queryOne<{ user_count: number | string }>(query, [fingerprint.hash]);\n      const userCount = Number(result?.user_count) || 0;\n\n      if (userCount >= this.DEVICE_REUSE_LIMIT) {\n        return {\n          isValid: false,\n          riskLevel: 'high',\n          reasons: [`设备指纹已被${userCount}个用户使用，超过限制`],\n          actions: [{\n            type: 'block',\n            description: '阻止该设备注册新账户',\n          }],\n        };\n      } else if (userCount >= Math.floor(this.DEVICE_REUSE_LIMIT * 0.7)) {\n        return {\n          isValid: true,\n          riskLevel: 'medium',\n          reasons: [`设备指纹已被${userCount}个用户使用`],\n          actions: [{\n            type: 'review',\n            description: '需要人工审核',\n          }],\n        };\n      }\n\n      return {\n        isValid: true,\n        riskLevel: 'low',\n        reasons: [],\n        actions: [],\n      };\n    } catch (error) {\n      console.error('Failed to check device fingerprint:', error);\n      return {\n        isValid: true,\n        riskLevel: 'low',\n        reasons: ['检测失败，默认通过'],\n        actions: [],\n      };\n    }\n  }\n\n  /**\n   * 检查自我邀请\n   */\n  async checkSelfInvitation(inviterId: string, inviteeEmail: string, ip: string): Promise<FraudDetectionResult> {\n    try {\n      // 检查邀请人的邮箱\n      const inviterQuery = `\n        SELECT email, registration_ip \n        FROM users \n        WHERE id = ?\n      `;\n\n      const inviter = await this.db.queryOne<{ email: string; registration_ip: string | null }>(inviterQuery, [inviterId]);\n\n      if (!inviter) {\n        return {\n          isValid: false,\n          riskLevel: 'high',\n          reasons: ['邀请人不存在'],\n          actions: [{\n            type: 'block',\n            description: '阻止无效邀请',\n          }],\n        };\n      }\n\n      // 检查是否为自我邀请（相同邮箱）\n      if (inviter.email === inviteeEmail) {\n        return {\n          isValid: false,\n          riskLevel: 'high',\n          reasons: ['检测到自我邀请行为'],\n          actions: [{\n            type: 'block',\n            description: '阻止自我邀请并记录违规行为',\n          }],\n        };\n      }\n\n      // 检查是否来自相同IP\n      if (inviter.registration_ip === ip) {\n        return {\n          isValid: false,\n          riskLevel: 'high',\n          reasons: ['邀请人和被邀请人来自相同IP'],\n          actions: [{\n            type: 'block',\n            description: '阻止相同IP邀请',\n          }],\n        };\n      }\n\n      // 检查邮箱域名相似性（可能的变体邮箱）\n      const inviterDomain = inviter.email.split('@')[1];\n      const inviteeDomain = inviteeEmail.split('@')[1];\n\n      if (inviterDomain === inviteeDomain) {\n        const inviterLocal = inviter.email.split('@')[0];\n        const inviteeLocal = inviteeEmail.split('@')[0];\n\n        // 检查是否为相似的邮箱前缀（如添加数字、点等）\n        if (this.isSimilarEmailPrefix(inviterLocal, inviteeLocal)) {\n          return {\n            isValid: false,\n            riskLevel: 'medium',\n            reasons: ['检测到相似邮箱模式'],\n            actions: [{\n              type: 'review',\n              description: '需要人工审核相似邮箱',\n            }],\n          };\n        }\n      }\n\n      return {\n        isValid: true,\n        riskLevel: 'low',\n        reasons: [],\n        actions: [],\n      };\n    } catch (error) {\n      console.error('Failed to check self invitation:', error);\n      return {\n        isValid: true,\n        riskLevel: 'low',\n        reasons: ['检测失败，默认通过'],\n        actions: [],\n      };\n    }\n  }\n\n  /**\n   * 检查批量注册\n   */\n  async checkBatchRegistration(attempt: RegistrationAttempt): Promise<FraudDetectionResult> {\n    try {\n      const timeWindow = new Date(attempt.timestamp.getTime() - this.BATCH_TIME_WINDOW * 1000);\n\n      // 检查时间窗口内的注册模式\n      const patterns = await Promise.all([\n        this.checkIPBatchPattern(attempt.ip, timeWindow),\n        this.checkUserAgentBatchPattern(attempt.userAgent, timeWindow),\n        this.checkEmailBatchPattern(attempt.email, timeWindow),\n      ]);\n\n      const suspiciousPatterns = patterns.filter(p => p.isSuspicious);\n\n      if (suspiciousPatterns.length >= 2) {\n        return {\n          isValid: false,\n          riskLevel: 'high',\n          reasons: suspiciousPatterns.map(p => p.reason),\n          actions: [{\n            type: 'block',\n            description: '检测到批量注册模式，暂时阻止',\n          }],\n        };\n      } else if (suspiciousPatterns.length === 1) {\n        return {\n          isValid: true,\n          riskLevel: 'medium',\n          reasons: suspiciousPatterns.map(p => p.reason),\n          actions: [{\n            type: 'monitor',\n            description: '监控可能的批量注册行为',\n          }],\n        };\n      }\n\n      return {\n        isValid: true,\n        riskLevel: 'low',\n        reasons: [],\n        actions: [],\n      };\n    } catch (error) {\n      console.error('Failed to check batch registration:', error);\n      return {\n        isValid: true,\n        riskLevel: 'low',\n        reasons: ['检测失败，默认通过'],\n        actions: [],\n      };\n    }\n  }\n\n  /**\n   * 综合风险评估\n   */\n  async assessRegistrationRisk(attempt: RegistrationAttempt, inviterId?: string): Promise<FraudDetectionResult> {\n    try {\n      const checks = await Promise.all([\n        this.checkIPFrequency(attempt.ip),\n        attempt.deviceFingerprint ? this.checkDeviceFingerprint(attempt.deviceFingerprint) : null,\n        inviterId ? this.checkSelfInvitation(inviterId, attempt.email, attempt.ip) : null,\n        this.checkBatchRegistration(attempt),\n      ]);\n\n      const validChecks = checks.filter(check => check !== null) as FraudDetectionResult[];\n\n      // 计算综合风险等级\n      const highRiskChecks = validChecks.filter(check => check.riskLevel === 'high');\n      const mediumRiskChecks = validChecks.filter(check => check.riskLevel === 'medium');\n      const invalidChecks = validChecks.filter(check => !check.isValid);\n\n      let finalRiskLevel: 'low' | 'medium' | 'high' = 'low';\n      let isValid = true;\n      const allReasons: string[] = [];\n      const allActions: FraudAction[] = [];\n\n      // 收集所有原因和行动\n      validChecks.forEach(check => {\n        allReasons.push(...check.reasons);\n        allActions.push(...check.actions);\n      });\n\n      // 确定最终风险等级和有效性\n      if (invalidChecks.length > 0 || highRiskChecks.length > 0) {\n        isValid = false;\n        finalRiskLevel = 'high';\n      } else if (mediumRiskChecks.length >= 2) {\n        isValid = false;\n        finalRiskLevel = 'high';\n      } else if (mediumRiskChecks.length === 1) {\n        finalRiskLevel = 'medium';\n      }\n\n      // 记录可疑活动\n      if (finalRiskLevel !== 'low') {\n        await this.recordSuspiciousActivity({\n          ip: attempt.ip,\n          type: 'pattern_anomaly',\n          description: `综合风险评估: ${finalRiskLevel}`,\n          severity: finalRiskLevel,\n          metadata: {\n            attempt,\n            inviterId,\n            checks: validChecks,\n          },\n          timestamp: new Date(),\n        });\n      }\n\n      return {\n        isValid,\n        riskLevel: finalRiskLevel,\n        reasons: allReasons,\n        actions: allActions,\n      };\n    } catch (error) {\n      console.error('Failed to assess registration risk:', error);\n      return {\n        isValid: true,\n        riskLevel: 'low',\n        reasons: ['风险评估失败，默认通过'],\n        actions: [],\n      };\n    }\n  }\n\n  /**\n   * 记录可疑行为\n   */\n  async recordSuspiciousActivity(activity: SuspiciousActivity): Promise<void> {\n    try {\n      const query = `\n        INSERT INTO suspicious_activities (\n          user_id, ip, type, description, severity, metadata, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?)\n      `;\n\n      await this.db.execute(query, [\n        activity.userId || null,\n        activity.ip,\n        activity.type,\n        activity.description,\n        activity.severity,\n        JSON.stringify(activity.metadata || {}),\n        activity.timestamp,\n      ]);\n    } catch (error) {\n      console.error('Failed to record suspicious activity:', error);\n    }\n  }\n\n  /**\n   * 获取用户风险等级\n   */\n  async getUserRiskLevel(userId: string): Promise<'low' | 'medium' | 'high'> {\n    try {\n      const query = `\n        SELECT risk_level \n        FROM user_risk_profiles \n        WHERE user_id = ?\n      `;\n\n      const result = await this.db.queryOne<{ risk_level: 'low' | 'medium' | 'high' }>(query, [userId]);\n      return result?.risk_level || 'low';\n    } catch (error) {\n      console.error('Failed to get user risk level:', error);\n      return 'low';\n    }\n  }\n\n  /**\n   * 更新用户风险等级\n   */\n  async updateUserRiskLevel(userId: string, level: 'low' | 'medium' | 'high', reason: string): Promise<void> {\n    try {\n      const query = `\n        INSERT INTO user_risk_profiles (user_id, risk_level, reason, updated_at)\n        VALUES (?, ?, ?, NOW())\n        ON DUPLICATE KEY UPDATE\n          risk_level = VALUES(risk_level),\n          reason = VALUES(reason),\n          updated_at = VALUES(updated_at)\n      `;\n\n      await this.db.execute(query, [userId, level, reason]);\n    } catch (error) {\n      console.error('Failed to update user risk level:', error);\n    }\n  }\n\n  /**\n   * 检查用户是否被禁止\n   */\n  async isUserBanned(userId: string): Promise<boolean> {\n    try {\n      const query = `\n        SELECT id \n        FROM user_bans \n        WHERE user_id = ? \n        AND (expires_at IS NULL OR expires_at > NOW())\n        AND is_active = 1\n      `;\n\n      const result = await this.db.queryOne(query, [userId]);\n      return !!result;\n    } catch (error) {\n      console.error('Failed to check user ban status:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 禁止用户参与邀请活动\n   */\n  async banUser(userId: string, reason: string, duration?: number): Promise<void> {\n    try {\n      const expiresAt = duration ? new Date(Date.now() + duration * 60 * 1000) : null;\n\n      const query = `\n        INSERT INTO user_bans (user_id, reason, expires_at, created_at, is_active)\n        VALUES (?, ?, ?, NOW(), 1)\n      `;\n\n      await this.db.execute(query, [userId, reason, expiresAt]);\n\n      // 同时更新用户风险等级\n      await this.updateUserRiskLevel(userId, 'high', `被禁止: ${reason}`);\n    } catch (error) {\n      console.error('Failed to ban user:', error);\n    }\n  }\n\n  // 私有辅助方法\n\n  /**\n   * 检查邮箱前缀相似性\n   */\n  private isSimilarEmailPrefix(prefix1: string, prefix2: string): boolean {\n    // 移除数字和特殊字符后比较\n    const clean1 = prefix1.replace(/[0-9._-]/g, '').toLowerCase();\n    const clean2 = prefix2.replace(/[0-9._-]/g, '').toLowerCase();\n\n    if (clean1 === clean2 && clean1.length > 0) {\n      return true;\n    }\n\n    // 检查编辑距离\n    return this.calculateEditDistance(prefix1, prefix2) <= 2;\n  }\n\n  /**\n   * 计算编辑距离\n   */\n  private calculateEditDistance(str1: string, str2: string): number {\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));\n\n    for (let i = 0; i <= str1.length; i++) {\n      matrix[0][i] = i;\n    }\n\n    for (let j = 0; j <= str2.length; j++) {\n      matrix[j][0] = j;\n    }\n\n    for (let j = 1; j <= str2.length; j++) {\n      for (let i = 1; i <= str1.length; i++) {\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        matrix[j][i] = Math.min(\n          matrix[j][i - 1] + 1,\n          matrix[j - 1][i] + 1,\n          matrix[j - 1][i - 1] + indicator,\n        );\n      }\n    }\n\n    return matrix[str2.length][str1.length];\n  }\n\n  /**\n   * 检查IP批量模式\n   */\n  private async checkIPBatchPattern(ip: string, timeWindow: Date): Promise<{isSuspicious: boolean, reason: string}> {\n    const query = `\n      SELECT COUNT(*) as count\n      FROM users \n      WHERE registration_ip = ? \n      AND created_at > ?\n    `;\n\n    const result = await this.db.queryOne<{ count: number | string }>(query, [ip, timeWindow]);\n    const count = Number(result?.count) || 0;\n\n    if (count >= this.BATCH_COUNT_THRESHOLD) {\n      return {\n        isSuspicious: true,\n        reason: `IP ${ip} 在短时间内注册${count}个账户`,\n      };\n    }\n\n    return { isSuspicious: false, reason: '' };\n  }\n\n  /**\n   * 检查User-Agent批量模式\n   */\n  private async checkUserAgentBatchPattern(userAgent: string, timeWindow: Date): Promise<{isSuspicious: boolean, reason: string}> {\n    const query = `\n      SELECT COUNT(*) as count\n      FROM users \n      WHERE user_agent = ? \n      AND created_at > ?\n    `;\n\n    const result = await this.db.queryOne<{ count: number | string }>(query, [userAgent, timeWindow]);\n    const count = Number(result?.count) || 0;\n\n    if (count >= this.BATCH_COUNT_THRESHOLD) {\n      return {\n        isSuspicious: true,\n        reason: `相同User-Agent在短时间内注册${count}个账户`,\n      };\n    }\n\n    return { isSuspicious: false, reason: '' };\n  }\n\n  /**\n   * 检查邮箱批量模式\n   */\n  private async checkEmailBatchPattern(email: string, timeWindow: Date): Promise<{isSuspicious: boolean, reason: string}> {\n    const domain = email.split('@')[1];\n\n    const query = `\n      SELECT COUNT(*) as count\n      FROM users \n      WHERE email LIKE ? \n      AND created_at > ?\n    `;\n\n    const result = await this.db.queryOne<{ count: number | string }>(query, [`%@${domain}`, timeWindow]);\n    const count = Number(result?.count) || 0;\n\n    if (count >= this.BATCH_COUNT_THRESHOLD * 2) {\n      return {\n        isSuspicious: true,\n        reason: `域名 ${domain} 在短时间内注册${count}个账户`,\n      };\n    }\n\n    return { isSuspicious: false, reason: '' };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/InvitationActivityService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/InvitationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/InviteRegistrationHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/LeaderboardService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/NotificationEventHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/NotificationScheduler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/NotificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/ReportGenerationService.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 124. Maximum allowed is 120.","line":293,"column":1,"nodeType":"Program","messageId":"max","endLine":293,"endColumn":125}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 报表生成服务\n * 提供各种邀请数据报表的生成和导出功能\n */\n\nimport { DatabaseService } from '../database';\nimport { TimePeriod, LeaderboardEntry, SharePlatform } from '../types';\n\nexport interface ReportData {\n  title: string\n  generatedAt: Date\n  period: TimePeriod\n  summary: ReportSummary\n  sections: ReportSection[]\n}\n\nexport interface ReportSummary {\n  totalInvites: number\n  totalRegistrations: number\n  totalActivations: number\n  conversionRate: number\n  topPerformer: {\n    userId: string\n    userName: string\n    inviteCount: number\n  }\n  growthRate: number\n}\n\nexport interface ReportSection {\n  title: string\n  type: 'table' | 'chart' | 'metric' | 'text'\n  data: any\n  description?: string\n}\n\nexport interface ChartData {\n  type: 'line' | 'bar' | 'pie' | 'area'\n  labels: string[]\n  datasets: Array<{\n    label: string\n    data: number[]\n    backgroundColor?: string | string[]\n    borderColor?: string\n  }>\n}\n\ntype NumberLike = number | string | null | undefined\n\ninterface InviteSummaryRow {\n  total_invites: NumberLike\n  total_registrations: NumberLike\n  total_activations: NumberLike\n}\n\ninterface TopPerformerRow {\n  id: string\n  name: string\n  invite_count: NumberLike\n  total_credits: NumberLike\n  user_id?: string\n  user_name?: string\n}\n\ninterface TrendRow {\n  date: string\n  invites: NumberLike\n  registrations: NumberLike\n}\n\ninterface UserInfoRow {\n  id: string\n  name: string\n  email: string\n}\n\ninterface UserStatsRow {\n  total_invites: NumberLike\n  successful_registrations: NumberLike\n  active_invitees: NumberLike\n  total_rewards_earned: NumberLike\n}\n\nexport interface ReportGenerationService {\n  // 生成月度邀请报告\n  generateMonthlyReport(year: number, month: number): Promise<ReportData>\n\n  // 生成用户个人报告\n  generateUserReport(userId: string, period: TimePeriod): Promise<ReportData>\n\n  // 生成平台统计报告\n  generatePlatformReport(period: TimePeriod): Promise<ReportData>\n\n  // 生成转化率分析报告\n  generateConversionReport(period: TimePeriod): Promise<ReportData>\n\n  // 导出报告为PDF\n  exportReportToPDF(reportData: ReportData): Promise<Buffer>\n\n  // 导出报告为Excel\n  exportReportToExcel(reportData: ReportData): Promise<Buffer>\n\n  // 导出数据为CSV\n  exportDataToCSV(data: any[], filename: string): Promise<string>\n\n  // 获取报告模板\n  getReportTemplates(): Promise<Array<{\n    id: string\n    name: string\n    description: string\n    type: 'monthly' | 'user' | 'platform' | 'conversion'\n  }>>\n\n  // 调度自动报告生成\n  scheduleAutomaticReports(): Promise<void>\n}\n\nexport class ReportGenerationServiceImpl implements ReportGenerationService {\n  constructor(private db: DatabaseService) {}\n\n  /**\n   * 生成月度邀请报告\n   */\n  async generateMonthlyReport(year: number, month: number): Promise<ReportData> {\n    try {\n      const startDate = new Date(year, month - 1, 1);\n      const endDate = new Date(year, month, 0, 23, 59, 59);\n      const period: TimePeriod = { start: startDate, end: endDate };\n\n      // 获取基础统计数据\n      const summary = await this.getReportSummary(period);\n\n      // 生成各个报告部分\n      const sections: ReportSection[] = [];\n\n      // 1. 邀请趋势图\n      const trendData = await this.getInviteTrendData(period);\n      sections.push({\n        title: '邀请趋势',\n        type: 'chart',\n        data: {\n          type: 'line',\n          labels: trendData.map(d => d.date),\n          datasets: [\n            {\n              label: '邀请数',\n              data: trendData.map(d => d.invites),\n              borderColor: '#3b82f6',\n              backgroundColor: 'rgba(59, 130, 246, 0.1)',\n            },\n            {\n              label: '注册数',\n              data: trendData.map(d => d.registrations),\n              borderColor: '#10b981',\n              backgroundColor: 'rgba(16, 185, 129, 0.1)',\n            },\n          ],\n        } as ChartData,\n        description: '显示每日邀请和注册数量变化趋势',\n      });\n\n      // 2. 排行榜\n      const leaderboard = await this.getTopPerformers(period, 10);\n      sections.push({\n        title: '邀请排行榜',\n        type: 'table',\n        data: {\n          headers: ['排名', '用户名', '邀请数', '注册数', '奖励积分'],\n          rows: leaderboard.map((entry, index) => [\n            index + 1,\n            entry.userName,\n            entry.inviteCount,\n            entry.inviteCount, // 简化处理\n            entry.rewards.totalCredits,\n          ]),\n        },\n        description: '本月邀请表现最佳的用户',\n      });\n\n      // 3. 平台分析\n      const platformData = await this.getPlatformAnalysis(period);\n      sections.push({\n        title: '分享平台分析',\n        type: 'chart',\n        data: {\n          type: 'pie',\n          labels: platformData.map(p => p.platform),\n          datasets: [{\n            label: '分享次数',\n            data: platformData.map(p => p.shareCount),\n            backgroundColor: [\n              '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4',\n            ],\n          }],\n        } as ChartData,\n        description: '各分享平台的使用情况分布',\n      });\n\n      // 4. 转化率分析\n      const conversionData = await this.getConversionAnalysis(period);\n      sections.push({\n        title: '转化率分析',\n        type: 'metric',\n        data: {\n          metrics: [\n            { label: '邀请到点击', value: `${conversionData.inviteToClick.toFixed(1)}%` },\n            { label: '点击到注册', value: `${conversionData.clickToRegister.toFixed(1)}%` },\n            { label: '注册到激活', value: `${conversionData.registerToActivate.toFixed(1)}%` },\n            { label: '整体转化率', value: `${conversionData.overallConversion.toFixed(1)}%` },\n          ],\n        },\n        description: '邀请流程各环节的转化率表现',\n      });\n\n      return {\n        title: `${year}年${month}月邀请系统月度报告`,\n        generatedAt: new Date(),\n        period,\n        summary,\n        sections,\n      };\n    } catch (error) {\n      console.error('Failed to generate monthly report:', error);\n      throw new Error('Failed to generate monthly report');\n    }\n  }\n\n  /**\n   * 生成用户个人报告\n   */\n  async generateUserReport(userId: string, period: TimePeriod): Promise<ReportData> {\n    try {\n      // 获取用户基本信息\n      const userInfo = await this.getUserInfo(userId);\n\n      // 获取用户统计数据\n      const userStats = await this.getUserStats(userId, period);\n\n      // 生成报告部分\n      const sections: ReportSection[] = [];\n\n      // 1. 个人成就概览\n      sections.push({\n        title: '个人成就',\n        type: 'metric',\n        data: {\n          metrics: [\n            { label: '总邀请数', value: userStats.totalInvites.toString() },\n            { label: '成功注册', value: userStats.successfulRegistrations.toString() },\n            { label: '活跃用户', value: userStats.activeInvitees.toString() },\n            { label: '获得奖励', value: `${userStats.totalRewardsEarned} 积分` },\n          ],\n        },\n      });\n\n      // 2. 邀请历史\n      const inviteHistory = await this.getUserInviteHistory(userId, period);\n      sections.push({\n        title: '邀请历史',\n        type: 'table',\n        data: {\n          headers: ['邀请码', '被邀请人', '注册时间', '状态'],\n          rows: inviteHistory.map(h => [\n            h.inviteCode,\n            h.inviteeName || h.inviteeEmail || '未知',\n            h.registeredAt?.toLocaleDateString() || '-',\n            h.isActivated ? '已激活' : '未激活',\n          ]),\n        },\n      });\n\n      // 3. 个人趋势\n      const personalTrend = await this.getUserTrendData(userId, period);\n      sections.push({\n        title: '邀请趋势',\n        type: 'chart',\n        data: {\n          type: 'area',\n          labels: personalTrend.map(d => d.date),\n          datasets: [{\n            label: '累计邀请',\n            data: personalTrend.map(d => d.cumulativeInvites),\n            backgroundColor: 'rgba(59, 130, 246, 0.2)',\n            borderColor: '#3b82f6',\n          }],\n        } as ChartData,\n      });\n\n      const summary: ReportSummary = {\n        totalInvites: userStats.totalInvites,\n        totalRegistrations: userStats.successfulRegistrations,\n        totalActivations: userStats.activeInvitees,\n        conversionRate: userStats.totalInvites > 0 ? (userStats.successfulRegistrations / userStats.totalInvites) * 100 : 0,\n        topPerformer: {\n          userId: userInfo.id,\n          userName: userInfo.name,\n          inviteCount: userStats.totalInvites,\n        },\n        growthRate: 0, // 需要计算\n      };\n\n      return {\n        title: `${userInfo.name} 的邀请报告`,\n        generatedAt: new Date(),\n        period,\n        summary,\n        sections,\n      };\n    } catch (error) {\n      console.error('Failed to generate user report:', error);\n      throw new Error('Failed to generate user report');\n    }\n  }\n\n  /**\n   * 生成平台统计报告\n   */\n  async generatePlatformReport(period: TimePeriod): Promise<ReportData> {\n    try {\n      const summary = await this.getReportSummary(period);\n      const sections: ReportSection[] = [];\n\n      // 1. 平台概览\n      const platformOverview = await this.getPlatformOverview(period);\n      sections.push({\n        title: '平台概览',\n        type: 'metric',\n        data: {\n          metrics: [\n            { label: '总用户数', value: platformOverview.totalUsers.toString() },\n            { label: '活跃邀请者', value: platformOverview.activeInviters.toString() },\n            { label: '平均邀请数', value: platformOverview.averageInvites.toFixed(1) },\n            { label: '参与率', value: `${platformOverview.participationRate.toFixed(1)}%` },\n          ],\n        },\n      });\n\n      // 2. 增长趋势\n      const growthTrend = await this.getGrowthTrendData(period);\n      sections.push({\n        title: '增长趋势',\n        type: 'chart',\n        data: {\n          type: 'line',\n          labels: growthTrend.map(d => d.date),\n          datasets: [\n            {\n              label: '新增邀请者',\n              data: growthTrend.map(d => d.newInviters),\n              borderColor: '#10b981',\n            },\n            {\n              label: '新增注册',\n              data: growthTrend.map(d => d.newRegistrations),\n              borderColor: '#3b82f6',\n            },\n          ],\n        } as ChartData,\n      });\n\n      // 3. 地区分布（如果有地区数据）\n      const regionData = await this.getRegionDistribution(period);\n      if (regionData.length > 0) {\n        sections.push({\n          title: '地区分布',\n          type: 'chart',\n          data: {\n            type: 'bar',\n            labels: regionData.map(r => r.region),\n            datasets: [{\n              label: '邀请数',\n              data: regionData.map(r => r.inviteCount),\n              backgroundColor: '#3b82f6',\n            }],\n          } as ChartData,\n        });\n      }\n\n      return {\n        title: '平台邀请统计报告',\n        generatedAt: new Date(),\n        period,\n        summary,\n        sections,\n      };\n    } catch (error) {\n      console.error('Failed to generate platform report:', error);\n      throw new Error('Failed to generate platform report');\n    }\n  }\n\n  /**\n   * 生成转化率分析报告\n   */\n  async generateConversionReport(period: TimePeriod): Promise<ReportData> {\n    try {\n      const summary = await this.getReportSummary(period);\n      const sections: ReportSection[] = [];\n\n      // 1. 转化漏斗\n      const funnelData = await this.getConversionFunnelData(period);\n      sections.push({\n        title: '转化漏斗',\n        type: 'chart',\n        data: {\n          type: 'bar',\n          labels: funnelData.map(f => f.step),\n          datasets: [{\n            label: '用户数',\n            data: funnelData.map(f => f.count),\n            backgroundColor: '#3b82f6',\n          }],\n        } as ChartData,\n        description: '展示用户从邀请到激活的完整转化路径',\n      });\n\n      // 2. 平台转化率对比\n      const platformConversion = await this.getPlatformConversionData(period);\n      sections.push({\n        title: '平台转化率对比',\n        type: 'chart',\n        data: {\n          type: 'bar',\n          labels: platformConversion.map(p => p.platform),\n          datasets: [{\n            label: '转化率 (%)',\n            data: platformConversion.map(p => p.conversionRate),\n            backgroundColor: '#10b981',\n          }],\n        } as ChartData,\n      });\n\n      // 3. 时间段转化率\n      const timeConversion = await this.getTimeBasedConversion(period);\n      sections.push({\n        title: '时间段转化率分析',\n        type: 'table',\n        data: {\n          headers: ['时间段', '邀请数', '注册数', '转化率'],\n          rows: timeConversion.map(t => [\n            t.timeRange,\n            t.invites,\n            t.registrations,\n            `${t.conversionRate.toFixed(1)}%`,\n          ]),\n        },\n      });\n\n      return {\n        title: '邀请转化率分析报告',\n        generatedAt: new Date(),\n        period,\n        summary,\n        sections,\n      };\n    } catch (error) {\n      console.error('Failed to generate conversion report:', error);\n      throw new Error('Failed to generate conversion report');\n    }\n  }\n\n  /**\n   * 导出报告为PDF\n   */\n  async exportReportToPDF(reportData: ReportData): Promise<Buffer> {\n    try {\n      // 这里应该使用PDF生成库（如puppeteer或jsPDF）\n      // 暂时返回空Buffer\n      console.log('Exporting report to PDF:', reportData.title);\n      return Buffer.from('PDF content placeholder');\n    } catch (error) {\n      console.error('Failed to export report to PDF:', error);\n      throw new Error('Failed to export report to PDF');\n    }\n  }\n\n  /**\n   * 导出报告为Excel\n   */\n  async exportReportToExcel(reportData: ReportData): Promise<Buffer> {\n    try {\n      // 这里应该使用Excel生成库（如exceljs）\n      // 暂时返回空Buffer\n      console.log('Exporting report to Excel:', reportData.title);\n      return Buffer.from('Excel content placeholder');\n    } catch (error) {\n      console.error('Failed to export report to Excel:', error);\n      throw new Error('Failed to export report to Excel');\n    }\n  }\n\n  /**\n   * 导出数据为CSV\n   */\n  async exportDataToCSV(data: any[], filename: string): Promise<string> {\n    try {\n      if (data.length === 0) {\n        return '';\n      }\n\n      const headers = Object.keys(data[0]);\n      const csvContent = [\n        headers.join(','),\n        ...data.map(row =>\n          headers.map(header => {\n            const value = row[header];\n            // 处理包含逗号的值\n            return typeof value === 'string' && value.includes(',')\n              ? `\"${value}\"`\n              : value;\n          }).join(','),\n        ),\n      ].join('\\n');\n\n      console.log(`CSV exported: ${filename}, ${data.length} rows`);\n      return csvContent;\n    } catch (error) {\n      console.error('Failed to export data to CSV:', error);\n      throw new Error('Failed to export data to CSV');\n    }\n  }\n\n  /**\n   * 获取报告模板\n   */\n  async getReportTemplates(): Promise<Array<{\n    id: string\n    name: string\n    description: string\n    type: 'monthly' | 'user' | 'platform' | 'conversion'\n  }>> {\n    return [\n      {\n        id: 'monthly',\n        name: '月度邀请报告',\n        description: '包含月度邀请统计、排行榜和趋势分析',\n        type: 'monthly',\n      },\n      {\n        id: 'user',\n        name: '用户个人报告',\n        description: '个人邀请成就和历史记录',\n        type: 'user',\n      },\n      {\n        id: 'platform',\n        name: '平台统计报告',\n        description: '整体平台邀请数据和增长分析',\n        type: 'platform',\n      },\n      {\n        id: 'conversion',\n        name: '转化率分析报告',\n        description: '详细的转化漏斗和优化建议',\n        type: 'conversion',\n      },\n    ];\n  }\n\n  /**\n   * 调度自动报告生成\n   */\n  async scheduleAutomaticReports(): Promise<void> {\n    try {\n      // 这里应该实现定时任务调度\n      // 例如每月1号生成上月报告\n      console.log('Automatic report generation scheduled');\n    } catch (error) {\n      console.error('Failed to schedule automatic reports:', error);\n      throw new Error('Failed to schedule automatic reports');\n    }\n  }\n\n  // 私有辅助方法\n\n  private async getReportSummary(period: TimePeriod): Promise<ReportSummary> {\n    const query = `\n      SELECT \n        COUNT(DISTINCT ic.id) as total_invites,\n        COUNT(DISTINCT ir.id) as total_registrations,\n        COUNT(DISTINCT CASE WHEN ir.is_activated = 1 THEN ir.id END) as total_activations\n      FROM invite_codes ic\n      LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n      WHERE ic.created_at BETWEEN ? AND ?\n    `;\n\n    const result = await this.db.queryOne<InviteSummaryRow>(query, [period.start, period.end]);\n\n    const totalInvites = this.toNumber(result?.total_invites);\n    const totalRegistrations = this.toNumber(result?.total_registrations);\n    const totalActivations = this.toNumber(result?.total_activations);\n    const conversionRate = totalInvites > 0 ? (totalRegistrations / totalInvites) * 100 : 0;\n\n    // 获取最佳表现者\n    const topPerformerQuery = `\n      SELECT u.id, u.name, COUNT(DISTINCT ir.id) as invite_count\n      FROM users u\n      JOIN invite_codes ic ON u.id = ic.inviter_id\n      LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n      WHERE ic.created_at BETWEEN ? AND ?\n      GROUP BY u.id, u.name\n      ORDER BY invite_count DESC\n      LIMIT 1\n    `;\n\n    const topPerformer = await this.db.queryOne<TopPerformerRow>(topPerformerQuery, [period.start, period.end]);\n\n    return {\n      totalInvites,\n      totalRegistrations,\n      totalActivations,\n      conversionRate,\n      topPerformer: {\n        userId: topPerformer?.id || '',\n        userName: topPerformer?.name || '无',\n        inviteCount: this.toNumber(topPerformer?.invite_count),\n      },\n      growthRate: 0, // 需要与上期对比计算\n    };\n  }\n\n  private async getInviteTrendData(period: TimePeriod): Promise<Array<{\n    date: string\n    invites: number\n    registrations: number\n  }>> {\n    const query = `\n      SELECT \n        DATE(ic.created_at) as date,\n        COUNT(DISTINCT ic.id) as invites,\n        COUNT(DISTINCT ir.id) as registrations\n      FROM invite_codes ic\n      LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id AND DATE(ir.registered_at) = DATE(ic.created_at)\n      WHERE ic.created_at BETWEEN ? AND ?\n      GROUP BY DATE(ic.created_at)\n      ORDER BY date\n    `;\n\n    const results = await this.db.query<TrendRow>(query, [period.start, period.end]);\n\n    return results.map((row) => ({\n      date: row.date,\n      invites: this.toNumber(row.invites),\n      registrations: this.toNumber(row.registrations),\n    }));\n  }\n\n  private async getTopPerformers(period: TimePeriod, limit: number): Promise<LeaderboardEntry[]> {\n    const query = `\n      SELECT \n        u.id as user_id,\n        u.name as user_name,\n        COUNT(DISTINCT ir.id) as invite_count,\n        SUM(CASE WHEN r.type = 'ai_credits' THEN r.amount ELSE 0 END) as total_credits\n      FROM users u\n      JOIN invite_codes ic ON u.id = ic.inviter_id\n      LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n      LEFT JOIN rewards r ON u.id = r.user_id\n      WHERE ic.created_at BETWEEN ? AND ?\n      GROUP BY u.id, u.name\n      ORDER BY invite_count DESC\n      LIMIT ?\n    `;\n\n    const results = await this.db.query<TopPerformerRow>(query, [period.start, period.end, limit]);\n\n    return results.map((row, index: number) => ({\n      userId: row.user_id || row.id,\n      userName: row.user_name || row.name,\n      inviteCount: this.toNumber(row.invite_count),\n      rank: index + 1,\n      rewards: {\n        totalCredits: this.toNumber(row.total_credits),\n        badges: [],\n        titles: [],\n        premiumDays: 0,\n      },\n    }));\n  }\n\n  // 其他私有方法的占位实现\n  private async getPlatformAnalysis(period: TimePeriod): Promise<Array<{ platform: string; shareCount: number }>> {\n    return [\n      { platform: '微信', shareCount: 45 },\n      { platform: 'QQ', shareCount: 23 },\n      { platform: '邮件', shareCount: 18 },\n      { platform: '链接', shareCount: 14 },\n    ];\n  }\n\n  private async getConversionAnalysis(period: TimePeriod): Promise<{\n    inviteToClick: number\n    clickToRegister: number\n    registerToActivate: number\n    overallConversion: number\n  }> {\n    return {\n      inviteToClick: 25.5,\n      clickToRegister: 35.2,\n      registerToActivate: 68.7,\n      overallConversion: 15.8,\n    };\n  }\n\n  private async getUserInfo(userId: string): Promise<{ id: string; name: string; email: string }> {\n    const query = 'SELECT id, name, email FROM users WHERE id = ?';\n    const result = await this.db.queryOne<UserInfoRow>(query, [userId]);\n    return result || { id: userId, name: '未知用户', email: '' };\n  }\n\n  private async getUserStats(userId: string, period: TimePeriod): Promise<{\n    totalInvites: number\n    successfulRegistrations: number\n    activeInvitees: number\n    totalRewardsEarned: number\n  }> {\n    const query = `\n      SELECT \n        COUNT(DISTINCT ic.id) as total_invites,\n        COUNT(DISTINCT ir.id) as successful_registrations,\n        COUNT(DISTINCT CASE WHEN ir.is_activated = 1 THEN ir.id END) as active_invitees,\n        COALESCE(SUM(CASE WHEN r.type = 'ai_credits' THEN r.amount ELSE 0 END), 0) as total_rewards_earned\n      FROM invite_codes ic\n      LEFT JOIN invite_registrations ir ON ic.id = ir.invite_code_id\n      LEFT JOIN rewards r ON ? = r.user_id\n      WHERE ic.inviter_id = ? AND ic.created_at BETWEEN ? AND ?\n    `;\n\n    const result = await this.db.queryOne<UserStatsRow>(query, [userId, userId, period.start, period.end]);\n\n    return {\n      totalInvites: this.toNumber(result?.total_invites),\n      successfulRegistrations: this.toNumber(result?.successful_registrations),\n      activeInvitees: this.toNumber(result?.active_invitees),\n      totalRewardsEarned: this.toNumber(result?.total_rewards_earned),\n    };\n  }\n\n  // 其他辅助方法的简化实现\n  private async getUserInviteHistory(userId: string, period: TimePeriod): Promise<any[]> { return []; }\n  private async getUserTrendData(userId: string, period: TimePeriod): Promise<any[]> { return []; }\n  private async getPlatformOverview(period: TimePeriod): Promise<any> { return {}; }\n  private async getGrowthTrendData(period: TimePeriod): Promise<any[]> { return []; }\n  private async getRegionDistribution(period: TimePeriod): Promise<any[]> { return []; }\n  private async getConversionFunnelData(period: TimePeriod): Promise<any[]> { return []; }\n  private async getPlatformConversionData(period: TimePeriod): Promise<any[]> { return []; }\n  private async getTimeBasedConversion(period: TimePeriod): Promise<any[]> { return []; }\n\n  private toNumber(value: NumberLike): number {\n    if (typeof value === 'number') {\n      return value;\n    }\n    if (typeof value === 'string') {\n      const parsed = parseFloat(value);\n      return Number.isNaN(parsed) ? 0 : parsed;\n    }\n    return 0;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/RewardConfigService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/RewardEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/ShareContentGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/ShareSDKIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/ShareService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/ShareTrackingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/services/StatisticsUpdateService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/invitation/utils/deviceFingerprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/logging/client-logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/logging/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/logging/formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/logging/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/logging/transports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/logging/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/middleware/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/middleware/rateLimit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/mobile/performance.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 128. Maximum allowed is 120.","line":137,"column":1,"nodeType":"Program","messageId":"max","endLine":137,"endColumn":129}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 移动端性能监控工具\n * 监控移动端性能指标和用户体验\n */\n\n// 性能指标类型定义\ninterface PerformanceMetrics {\n  lcp: number; // Largest Contentful Paint\n  fid: number; // First Input Delay\n  cls: number; // Cumulative Layout Shift\n  fcp: number; // First Contentful Paint\n  ttfb: number; // Time to First Byte\n}\n\ninterface MobileMetrics {\n  touchResponseTime: number;\n  scrollPerformance: number;\n  memoryUsage: number;\n  batteryLevel?: number;\n  networkType: string;\n  devicePixelRatio: number;\n}\n\ninterface UserExperienceMetrics {\n  pageLoadTime: number;\n  interactionTime: number;\n  errorCount: number;\n  crashCount: number;\n  sessionDuration: number;\n}\n\n// 性能监控类\nexport class MobilePerformanceMonitor {\n  private metrics: Partial<PerformanceMetrics> = {};\n  private mobileMetrics: Partial<MobileMetrics> = {};\n  private uxMetrics: Partial<UserExperienceMetrics> = {};\n  private observers: PerformanceObserver[] = [];\n  private startTime: number = Date.now();\n\n  constructor() {\n    this.initializeMonitoring();\n  }\n\n  /**\n   * 初始化性能监控\n   */\n  private initializeMonitoring(): void {\n    if (typeof window === 'undefined') return;\n\n    // 监控Web Vitals\n    this.observeWebVitals();\n\n    // 监控移动端特定指标\n    this.observeMobileMetrics();\n\n    // 监控用户体验指标\n    this.observeUserExperience();\n\n    // 监控内存使用\n    this.observeMemoryUsage();\n  }\n\n  /**\n   * 监控Web Vitals指标\n   */\n  private observeWebVitals(): void {\n    // LCP (Largest Contentful Paint)\n    if ('PerformanceObserver' in window) {\n      try {\n        const lcpObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          const lastEntry = entries[entries.length - 1] as any;\n          this.metrics.lcp = lastEntry.startTime;\n        });\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n        this.observers.push(lcpObserver);\n      } catch (error) {\n        console.warn('LCP monitoring not supported:', error);\n      }\n\n      // FID (First Input Delay)\n      try {\n        const fidObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry: any) => {\n            this.metrics.fid = entry.processingStart - entry.startTime;\n          });\n        });\n        fidObserver.observe({ entryTypes: ['first-input'] });\n        this.observers.push(fidObserver);\n      } catch (error) {\n        console.warn('FID monitoring not supported:', error);\n      }\n\n      // CLS (Cumulative Layout Shift)\n      try {\n        let clsValue = 0;\n        const clsObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry: any) => {\n            if (!entry.hadRecentInput) {\n              clsValue += entry.value;\n              this.metrics.cls = clsValue;\n            }\n          });\n        });\n        clsObserver.observe({ entryTypes: ['layout-shift'] });\n        this.observers.push(clsObserver);\n      } catch (error) {\n        console.warn('CLS monitoring not supported:', error);\n      }\n    }\n\n    // FCP (First Contentful Paint)\n    if (performance.getEntriesByType) {\n      const paintEntries = performance.getEntriesByType('paint');\n      const fcpEntry = (paintEntries.find as any)(entry => entry.name === 'first-contentful-paint');\n      if (fcpEntry) {\n        this.metrics.fcp = fcpEntry.startTime;\n      }\n    }\n\n    // TTFB (Time to First Byte)\n    if (performance.timing) {\n      this.metrics.ttfb = performance.timing.responseStart - performance.timing.requestStart;\n    }\n  }\n\n  /**\n   * 监控移动端特定指标\n   */\n  private observeMobileMetrics(): void {\n    // 设备像素比\n    this.mobileMetrics.devicePixelRatio = window.devicePixelRatio || 1;\n\n    // 网络类型\n    const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n    if (connection) {\n      this.mobileMetrics.networkType = connection.effectiveType || connection.type || 'unknown';\n    }\n\n    // 电池状态（如果支持）\n    if ('getBattery' in navigator) {\n      (navigator as any).getBattery().then((battery: any) => {\n        this.mobileMetrics.batteryLevel = battery.level * 100;\n      }).catch(() => {\n        // 电池API不支持\n      });\n    }\n\n    // 触摸响应时间监控\n    this.monitorTouchResponse();\n\n    // 滚动性能监控\n    this.monitorScrollPerformance();\n  }\n\n  /**\n   * 监控触摸响应时间\n   */\n  private monitorTouchResponse(): void {\n    let touchStartTime = 0;\n    const touchResponseTimes: number[] = [];\n\n    document.addEventListener('touchstart', () => {\n      touchStartTime = performance.now();\n    }, { passive: true });\n\n    document.addEventListener('touchend', () => {\n      if (touchStartTime > 0) {\n        const responseTime = performance.now() - touchStartTime;\n        touchResponseTimes.push(responseTime);\n\n        // 保持最近100次的记录\n        if (touchResponseTimes.length > 100) {\n          touchResponseTimes.shift();\n        }\n\n        // 计算平均响应时间\n        this.mobileMetrics.touchResponseTime =\n          touchResponseTimes.reduce((sum, time) => sum + time, 0) / touchResponseTimes.length;\n      }\n    }, { passive: true });\n  }\n\n  /**\n   * 监控滚动性能\n   */\n  private monitorScrollPerformance(): void {\n    let scrollStartTime = 0;\n    let frameCount = 0;\n    let totalFrameTime = 0;\n\n    const measureScrollPerformance = () => {\n      if (scrollStartTime > 0) {\n        frameCount++;\n        const currentTime = performance.now();\n        totalFrameTime += currentTime - scrollStartTime;\n\n        // 计算平均帧时间\n        const avgFrameTime = totalFrameTime / frameCount;\n        this.mobileMetrics.scrollPerformance = 1000 / avgFrameTime; // FPS\n\n        scrollStartTime = currentTime;\n      }\n    };\n\n    document.addEventListener('scroll', () => {\n      if (scrollStartTime === 0) {\n        scrollStartTime = performance.now();\n        frameCount = 0;\n        totalFrameTime = 0;\n      }\n      requestAnimationFrame(measureScrollPerformance);\n    }, { passive: true });\n  }\n\n  /**\n   * 监控用户体验指标\n   */\n  private observeUserExperience(): void {\n    // 页面加载时间\n    window.addEventListener('load', () => {\n      this.uxMetrics.pageLoadTime = Date.now() - this.startTime;\n    });\n\n    // 交互时间监控\n    let interactionStartTime = 0;\n    const interactionTimes: number[] = [];\n\n    ['click', 'touchstart', 'keydown'].forEach(eventType => {\n      document.addEventListener(eventType, () => {\n        interactionStartTime = performance.now();\n      }, { passive: true });\n    });\n\n    ['click', 'touchend', 'keyup'].forEach(eventType => {\n      document.addEventListener(eventType, () => {\n        if (interactionStartTime > 0) {\n          const interactionTime = performance.now() - interactionStartTime;\n          interactionTimes.push(interactionTime);\n\n          if (interactionTimes.length > 50) {\n            interactionTimes.shift();\n          }\n\n          this.uxMetrics.interactionTime =\n            interactionTimes.reduce((sum, time) => sum + time, 0) / interactionTimes.length;\n        }\n      }, { passive: true });\n    });\n\n    // 错误计数\n    let errorCount = 0;\n    window.addEventListener('error', () => {\n      errorCount++;\n      this.uxMetrics.errorCount = errorCount;\n    });\n\n    // 会话时长\n    setInterval(() => {\n      this.uxMetrics.sessionDuration = Date.now() - this.startTime;\n    }, 30000); // 每30秒更新一次\n  }\n\n  /**\n   * 监控内存使用\n   */\n  private observeMemoryUsage(): void {\n    if ('memory' in performance) {\n      const updateMemoryUsage = () => {\n        const memory = (performance as any).memory;\n        this.mobileMetrics.memoryUsage = memory.usedJSHeapSize / 1024 / 1024; // MB\n      };\n\n      updateMemoryUsage();\n      setInterval(updateMemoryUsage, 10000); // 每10秒更新一次\n    }\n  }\n\n  /**\n   * 获取当前性能指标\n   */\n  public getMetrics(): {\n    webVitals: Partial<PerformanceMetrics>;\n    mobile: Partial<MobileMetrics>;\n    userExperience: Partial<UserExperienceMetrics>;\n  } {\n    return {\n      webVitals: { ...this.metrics },\n      mobile: { ...this.mobileMetrics },\n      userExperience: { ...this.uxMetrics },\n    };\n  }\n\n  /**\n   * 获取性能评分\n   */\n  public getPerformanceScore(): {\n    overall: number;\n    webVitals: number;\n    mobile: number;\n    userExperience: number;\n  } {\n    const webVitalsScore = this.calculateWebVitalsScore();\n    const mobileScore = this.calculateMobileScore();\n    const uxScore = this.calculateUXScore();\n\n    const overall = (webVitalsScore + mobileScore + uxScore) / 3;\n\n    return {\n      overall: Math.round(overall),\n      webVitals: Math.round(webVitalsScore),\n      mobile: Math.round(mobileScore),\n      userExperience: Math.round(uxScore),\n    };\n  }\n\n  /**\n   * 计算Web Vitals评分\n   */\n  private calculateWebVitalsScore(): number {\n    let score = 100;\n\n    // LCP评分 (目标: <2.5s)\n    if (this.metrics.lcp) {\n      if (this.metrics.lcp > 4000) score -= 30;\n      else if (this.metrics.lcp > 2500) score -= 15;\n    }\n\n    // FID评分 (目标: <100ms)\n    if (this.metrics.fid) {\n      if (this.metrics.fid > 300) score -= 25;\n      else if (this.metrics.fid > 100) score -= 10;\n    }\n\n    // CLS评分 (目标: <0.1)\n    if (this.metrics.cls) {\n      if (this.metrics.cls > 0.25) score -= 25;\n      else if (this.metrics.cls > 0.1) score -= 10;\n    }\n\n    return Math.max(0, score);\n  }\n\n  /**\n   * 计算移动端评分\n   */\n  private calculateMobileScore(): number {\n    let score = 100;\n\n    // 触摸响应时间评分 (目标: <100ms)\n    if (this.mobileMetrics.touchResponseTime) {\n      if (this.mobileMetrics.touchResponseTime > 200) score -= 30;\n      else if (this.mobileMetrics.touchResponseTime > 100) score -= 15;\n    }\n\n    // 滚动性能评分 (目标: >30fps)\n    if (this.mobileMetrics.scrollPerformance) {\n      if (this.mobileMetrics.scrollPerformance < 20) score -= 25;\n      else if (this.mobileMetrics.scrollPerformance < 30) score -= 10;\n    }\n\n    // 内存使用评分 (目标: <100MB)\n    if (this.mobileMetrics.memoryUsage) {\n      if (this.mobileMetrics.memoryUsage > 200) score -= 20;\n      else if (this.mobileMetrics.memoryUsage > 100) score -= 10;\n    }\n\n    return Math.max(0, score);\n  }\n\n  /**\n   * 计算用户体验评分\n   */\n  private calculateUXScore(): number {\n    let score = 100;\n\n    // 页面加载时间评分 (目标: <3s)\n    if (this.uxMetrics.pageLoadTime) {\n      if (this.uxMetrics.pageLoadTime > 5000) score -= 25;\n      else if (this.uxMetrics.pageLoadTime > 3000) score -= 10;\n    }\n\n    // 交互时间评分 (目标: <50ms)\n    if (this.uxMetrics.interactionTime) {\n      if (this.uxMetrics.interactionTime > 100) score -= 20;\n      else if (this.uxMetrics.interactionTime > 50) score -= 10;\n    }\n\n    // 错误率评分\n    if (this.uxMetrics.errorCount && this.uxMetrics.sessionDuration) {\n      const errorRate = this.uxMetrics.errorCount / (this.uxMetrics.sessionDuration / 60000); // 每分钟错误数\n      if (errorRate > 1) score -= 30;\n      else if (errorRate > 0.5) score -= 15;\n    }\n\n    return Math.max(0, score);\n  }\n\n  /**\n   * 生成性能报告\n   */\n  public generateReport(): string {\n    const metrics = this.getMetrics();\n    const scores = this.getPerformanceScore();\n\n    const report = `\n移动端性能报告\n================\n\n总体评分: ${scores.overall}/100\n\nWeb Vitals (${scores.webVitals}/100):\n- LCP: ${metrics.webVitals.lcp ? `${metrics.webVitals.lcp.toFixed(0)}ms` : 'N/A'}\n- FID: ${metrics.webVitals.fid ? `${metrics.webVitals.fid.toFixed(0)}ms` : 'N/A'}\n- CLS: ${metrics.webVitals.cls ? metrics.webVitals.cls.toFixed(3) : 'N/A'}\n- FCP: ${metrics.webVitals.fcp ? `${metrics.webVitals.fcp.toFixed(0)}ms` : 'N/A'}\n- TTFB: ${metrics.webVitals.ttfb ? `${metrics.webVitals.ttfb.toFixed(0)}ms` : 'N/A'}\n\n移动端指标 (${scores.mobile}/100):\n- 触摸响应: ${metrics.mobile.touchResponseTime ? `${metrics.mobile.touchResponseTime.toFixed(0)}ms` : 'N/A'}\n- 滚动性能: ${metrics.mobile.scrollPerformance ? `${metrics.mobile.scrollPerformance.toFixed(0)}fps` : 'N/A'}\n- 内存使用: ${metrics.mobile.memoryUsage ? `${metrics.mobile.memoryUsage.toFixed(1)}MB` : 'N/A'}\n- 网络类型: ${metrics.mobile.networkType || 'N/A'}\n- 设备像素比: ${metrics.mobile.devicePixelRatio || 'N/A'}\n- 电池电量: ${metrics.mobile.batteryLevel ? `${metrics.mobile.batteryLevel.toFixed(0)}%` : 'N/A'}\n\n用户体验 (${scores.userExperience}/100):\n- 页面加载: ${metrics.userExperience.pageLoadTime ? `${metrics.userExperience.pageLoadTime}ms` : 'N/A'}\n- 交互时间: ${metrics.userExperience.interactionTime ? `${metrics.userExperience.interactionTime.toFixed(0)}ms` : 'N/A'}\n- 错误次数: ${metrics.userExperience.errorCount || 0}\n- 会话时长: ${metrics.userExperience.sessionDuration ? `${(metrics.userExperience.sessionDuration / 1000).toFixed(0)}s` : 'N/A'}\n\n建议:\n${this.generateRecommendations(scores)}\n    `.trim();\n\n    return report;\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateRecommendations(scores: ReturnType<typeof this.getPerformanceScore>): string {\n    const recommendations: string[] = [];\n\n    if (scores.webVitals < 80) {\n      recommendations.push('- 优化Web Vitals指标，考虑代码分割和资源预加载');\n    }\n\n    if (scores.mobile < 80) {\n      recommendations.push('- 优化移动端性能，减少触摸延迟和提升滚动流畅度');\n    }\n\n    if (scores.userExperience < 80) {\n      recommendations.push('- 改善用户体验，减少页面加载时间和交互延迟');\n    }\n\n    if (this.mobileMetrics.memoryUsage && this.mobileMetrics.memoryUsage > 100) {\n      recommendations.push('- 优化内存使用，考虑减少DOM节点和清理未使用的资源');\n    }\n\n    if (this.metrics.lcp && this.metrics.lcp > 2500) {\n      recommendations.push('- 优化最大内容绘制时间，考虑图片优化和关键资源优先加载');\n    }\n\n    return recommendations.length > 0 ? recommendations.join('\\n') : '- 性能表现良好，继续保持！';\n  }\n\n  /**\n   * 清理监控器\n   */\n  public dispose(): void {\n    this.observers.forEach(observer => {\n      observer.disconnect();\n    });\n    this.observers = [];\n  }\n}\n\n// 创建全局性能监控实例\nexport const mobilePerformanceMonitor = new MobilePerformanceMonitor();\n\n// 导出性能监控Hook\nexport const useMobilePerformance = () => {\n  return {\n    getMetrics: () => mobilePerformanceMonitor.getMetrics(),\n    getScore: () => mobilePerformanceMonitor.getPerformanceScore(),\n    generateReport: () => mobilePerformanceMonitor.generateReport(),\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/Bookmark.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/Comment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/ContributionLog.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/Follow.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 149. Maximum allowed is 120.","line":22,"column":1,"nodeType":"Program","messageId":"max","endLine":22,"endColumn":150}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 关注模型\n * 用户关注和粉丝系统\n */\nimport mongoose, { Document, Model, Schema, Types } from 'mongoose';\n\nexport interface IFollow {\n  follower: mongoose.Types.ObjectId // 关注者\n  following: mongoose.Types.ObjectId // 被关注者\n  status: 'active' | 'blocked' // 关注状态\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface FollowDocument extends IFollow, Document<Types.ObjectId, any, IFollow> {\n  _id: Types.ObjectId;\n}\n\nexport interface FollowModelType extends Model<FollowDocument> {\n  getFollowing(userId: mongoose.Types.ObjectId, page?: number, limit?: number): Promise<FollowDocument[]>;\n  getFollowers(userId: mongoose.Types.ObjectId, page?: number, limit?: number): Promise<FollowDocument[]>;\n  isFollowing(followerId: mongoose.Types.ObjectId, followingId: mongoose.Types.ObjectId): Promise<boolean | { _id: mongoose.Types.ObjectId } | null>;\n  getFollowStats(userId: mongoose.Types.ObjectId): Promise<{ followingCount: number; followersCount: number }>;\n  getMutualFollows(userId1: mongoose.Types.ObjectId, userId2: mongoose.Types.ObjectId): Promise<any[]>;\n}\n\nconst FollowSchema = new Schema<FollowDocument, FollowModelType>({\n  follower: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  following: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  status: {\n    type: String,\n    enum: ['active', 'blocked'],\n    default: 'active',\n  },\n}, {\n  timestamps: true,\n});\n\n// 复合索引：确保用户不能重复关注同一人\nFollowSchema.index({ follower: 1, following: 1 }, { unique: true });\nFollowSchema.index({ follower: 1, status: 1, createdAt: -1 });\nFollowSchema.index({ following: 1, status: 1, createdAt: -1 });\n\n// 验证：用户不能关注自己\nFollowSchema.pre('save', function (next) {\n  if (this.follower.equals(this.following)) {\n    const error = new Error('用户不能关注自己');\n    return next(error);\n  }\n  next();\n});\n\n// 静态方法：获取用户的关注列表\nFollowSchema.statics.getFollowing = function (\n  this: FollowModelType,\n  userId: mongoose.Types.ObjectId,\n  page: number = 1,\n  limit: number = 20,\n): Promise<FollowDocument[]> {\n  const skip = (page - 1) * limit;\n\n  return (this.find as any)({ follower: userId, status: 'active' })\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limit)\n      .populate('following', 'name avatar bio followersCount followingCount')\n        .exec();\n};\n\n// 静态方法：获取用户的粉丝列表\nFollowSchema.statics.getFollowers = function (\n  this: FollowModelType,\n  userId: mongoose.Types.ObjectId,\n  page: number = 1,\n  limit: number = 20,\n): Promise<FollowDocument[]> {\n  const skip = (page - 1) * limit;\n\n  return (this.find as any)({ following: userId, status: 'active' })\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limit)\n      .populate('follower', 'name avatar bio followersCount followingCount')\n        .exec();\n};\n\n// 静态方法：检查关注关系\nFollowSchema.statics.isFollowing = function (\n  this: FollowModelType,\n  followerId: mongoose.Types.ObjectId,\n  followingId: mongoose.Types.ObjectId,\n) {\n  return this.exists({\n    follower: followerId,\n    following: followingId,\n    status: 'active',\n  });\n};\n\n// 静态方法：获取关注统计\nFollowSchema.statics.getFollowStats = function (this: FollowModelType, userId: mongoose.Types.ObjectId) {\n  return Promise.all([\n    (this.countDocuments as any)({ follower: userId, status: 'active' }), // 关注数\n    (this.countDocuments as any)({ following: userId, status: 'active' }), // 粉丝数\n  ]).then(([followingCount, followersCount]) => ({\n    followingCount,\n    followersCount,\n  }));\n};\n\n// 静态方法：获取共同关注\nFollowSchema.statics.getMutualFollows = function (\n  this: FollowModelType,\n  userId1: mongoose.Types.ObjectId,\n  userId2: mongoose.Types.ObjectId,\n): Promise<any[]> {\n  return (this.aggregate as any)([\n    {\n      $match: {\n        follower: userId1,\n        status: 'active',\n      },\n    },\n    {\n      $lookup: {\n        from: 'follows',\n        let: { following: '$following' },\n        pipeline: [\n          {\n            $match: {\n              $expr: {\n                $and: [\n                  { $eq: ['$follower', userId2] },\n                  { $eq: ['$following', '$$following'] },\n                  { $eq: ['$status', 'active'] },\n                ],\n              },\n            },\n          },\n        ],\n        as: 'mutual',\n      },\n    },\n    {\n      $match: {\n        'mutual.0': { $exists: true },\n      },\n    },\n    {\n      $lookup: {\n        from: 'users',\n        localField: 'following',\n        foreignField: '_id',\n        as: 'user',\n      },\n    },\n    {\n      $unwind: '$user',\n    },\n    {\n      $project: {\n        _id: '$user._id',\n        name: '$user.name',\n        avatar: '$user.avatar',\n      },\n    },\n  ]).exec();\n};\n\nconst FollowModel = (mongoose.models.Follow as FollowModelType | undefined) ||\n  mongoose.model<FollowDocument, FollowModelType>('Follow', FollowSchema);\n\nexport default FollowModel;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/GraphTemplate.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 128. Maximum allowed is 120.","line":203,"column":1,"nodeType":"Program","messageId":"max","endLine":203,"endColumn":129}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Schema, Document, Model, Types } from 'mongoose';\n\nimport {\n  GraphNode,\n  GraphEdge,\n  LayoutConfig,\n  ViewConfig,\n} from '@/shared/types/knowledgeGraph';\n\ntype TemplateNode = Omit<GraphNode, 'metadata'> & {\n  position?: { x: number; y: number; z?: number };\n  isVisible?: boolean;\n  isLocked?: boolean;\n};\n\ntype TemplateEdge = GraphEdge;\n\nexport interface GraphTemplateDocument extends Document {\n  name: string;\n  description: string;\n  subject: string;\n  gradeLevel?: string;\n  category: string;\n  nodes: TemplateNode[];\n  edges: TemplateEdge[];\n  layout: LayoutConfig;\n  view: ViewConfig;\n  isOfficial: boolean;\n  usageCount: number;\n  rating: number;\n  tags: string[];\n  authorId?: Types.ObjectId;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface GraphTemplateModelType extends Model<GraphTemplateDocument> {\n  getOfficialTemplates(subject?: string): Promise<GraphTemplateDocument[]>;\n  getPopularTemplates(limit?: number): Promise<GraphTemplateDocument[]>;\n  searchTemplates(searchOptions?: Record<string, any>): Promise<GraphTemplateDocument[]>;\n}\n\n// 图谱模板Schema\nconst GraphTemplateSchema = new Schema<GraphTemplateDocument, GraphTemplateModelType>({\n  name: {\n    type: String,\n    required: true,\n    maxlength: 100,\n    trim: true,\n  },\n  description: {\n    type: String,\n    required: true,\n    maxlength: 500,\n    trim: true,\n  },\n  subject: {\n    type: String,\n    required: true,\n    index: true,\n  },\n  gradeLevel: {\n    type: String,\n    index: true,\n  },\n  category: {\n    type: String,\n    required: true,\n    index: true,\n  },\n  nodes: {\n    type: [{\n      id: { type: String, required: true },\n      label: { type: String, required: true },\n      type: { type: String, required: true },\n      level: { type: Number, required: true },\n      parentId: { type: String },\n      position: {\n        x: { type: Number, default: 0 },\n        y: { type: Number, default: 0 },\n      },\n      isVisible: { type: Boolean, default: true },\n      isLocked: { type: Boolean, default: true },\n    }],\n    default: [],\n  },\n  edges: {\n    type: [{\n      id: { type: String, required: true },\n      source: { type: String, required: true },\n      target: { type: String, required: true },\n      type: { type: String, required: true },\n      weight: { type: Number, default: 1 },\n      metadata: {\n        type: Schema.Types.Mixed,\n        default: {},\n      },\n      isVisible: { type: Boolean, default: true },\n      isDirected: { type: Boolean, default: true },\n    }],\n    default: [],\n  },\n  layout: {\n    type: Schema.Types.Mixed,\n    default: {\n      type: 'force',\n      options: {\n        nodeSpacing: 100,\n        levelSpacing: 150,\n        centerForce: 0.1,\n        linkDistance: 80,\n        linkStrength: 0.5,\n        chargeStrength: -300,\n        collisionRadius: 30,\n        alpha: 0.3,\n        alphaDecay: 0.02,\n        velocityDecay: 0.4,\n      },\n    },\n  },\n  view: {\n    type: Schema.Types.Mixed,\n    default: {\n      showLabels: true,\n      showEdgeLabels: false,\n      nodeSize: 'proportional',\n      edgeWidth: 'fixed',\n      colorScheme: 'default',\n      theme: 'light',\n      animations: true,\n      minimap: true,\n      toolbar: true,\n    },\n  },\n  isOfficial: {\n    type: Boolean,\n    default: false,\n    index: true,\n  },\n  usageCount: {\n    type: Number,\n    default: 0,\n    min: 0,\n  },\n  rating: {\n    type: Number,\n    default: 0,\n    min: 0,\n    max: 5,\n  },\n  tags: [{\n    type: String,\n    trim: true,\n  }],\n  authorId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    index: true,\n  },\n}, {\n  timestamps: true,\n  collection: 'graph_templates',\n});\n\n// 复合索引\nGraphTemplateSchema.index({ subject: 1, gradeLevel: 1 });\nGraphTemplateSchema.index({ category: 1, isOfficial: 1 });\nGraphTemplateSchema.index({ usageCount: -1, rating: -1 });\nGraphTemplateSchema.index({ tags: 1 });\n\n// 虚拟字段\nGraphTemplateSchema.virtual('nodeCount').get(function (this: GraphTemplateDocument) {\n  return this.nodes.length;\n});\n\nGraphTemplateSchema.virtual('edgeCount').get(function (this: GraphTemplateDocument) {\n  return this.edges.length;\n});\n\n// 静态方法\n\n// 获取官方模板\nGraphTemplateSchema.statics.getOfficialTemplates = function (this: GraphTemplateModelType, subject?: string) {\n  const query: Record<string, unknown> = { isOfficial: true };\n  if (subject) {\n    query.subject = subject;\n  }\n\n  return (this.find as any)(query)\n    .sort({ subject: 1, usageCount: -1 })\n    .populate('authorId', 'name avatar') as any;\n};\n\n// 获取热门模板\nGraphTemplateSchema.statics.getPopularTemplates = function (this: GraphTemplateModelType, limit: number = 10) {\n  return (this.find as any)({ isOfficial: false })\n    .sort({ usageCount: -1, rating: -1, createdAt: -1 })\n    .limit(limit)\n    .populate('authorId', 'name avatar') as any;\n};\n\n// 搜索模板\nGraphTemplateSchema.statics.searchTemplates = function (this: GraphTemplateModelType, searchOptions: Record<string, any> = {}) {\n  const query: Record<string, unknown> = {};\n\n  if (searchOptions.subject) {\n    query.subject = searchOptions.subject;\n  }\n\n  if (searchOptions.gradeLevel) {\n    query.gradeLevel = searchOptions.gradeLevel;\n  }\n\n  if (searchOptions.category) {\n    query.category = searchOptions.category;\n  }\n\n  if (searchOptions.isOfficial !== undefined) {\n    query.isOfficial = searchOptions.isOfficial;\n  }\n\n  if (searchOptions.tags && searchOptions.tags.length > 0) {\n    query.tags = { $in: searchOptions.tags };\n  }\n\n  if (searchOptions.search) {\n    query.$or = [\n      { name: { $regex: searchOptions.search, $options: 'i' } },\n      { description: { $regex: searchOptions.search, $options: 'i' } },\n      { tags: { $regex: searchOptions.search, $options: 'i' } },\n    ];\n  }\n\n  const sortOptions: any = {};\n  if (searchOptions.sortBy === 'usage') {\n    sortOptions.usageCount = -1;\n  } else if (searchOptions.sortBy === 'rating') {\n    sortOptions.rating = -1;\n  } else if (searchOptions.sortBy === 'name') {\n    sortOptions.name = 1;\n  } else {\n    sortOptions.createdAt = -1;\n  }\n\n  return (this.find as any)(query)\n    .sort(sortOptions)\n    .limit(searchOptions.limit || 20)\n    .skip(searchOptions.offset || 0)\n    .populate('authorId', 'name avatar') as any;\n};\n\n// 获取模板分类统计\nGraphTemplateSchema.statics.getCategoryStats = async function () {\n  return (this.aggregate as any)([\n    {\n      $group: {\n        _id: {\n          category: '$category',\n          subject: '$subject',\n        },\n        count: { $sum: 1 },\n        avgRating: { $avg: '$rating' },\n        totalUsage: { $sum: '$usageCount' },\n      },\n    },\n    {\n      $group: {\n        _id: '$_id.category',\n        subjects: {\n          $push: {\n            subject: '$_id.subject',\n            count: '$count',\n            avgRating: '$avgRating',\n            totalUsage: '$totalUsage',\n          },\n        },\n        totalCount: { $sum: '$count' },\n        avgRating: { $avg: '$avgRating' },\n        totalUsage: { $sum: '$totalUsage' },\n      },\n    },\n    { $sort: { totalCount: -1 } },\n  ]);\n};\n\n// 获取用户创建的模板\nGraphTemplateSchema.statics.getUserTemplates = function (userId: string) {\n  return (this.find as any)({\n    authorId: new mongoose.Types.ObjectId(userId),\n    isOfficial: false,\n  })\n  .sort({ updatedAt: -1 });\n};\n\n// 实例方法\n\n// 增加使用次数\nGraphTemplateSchema.methods.incrementUsage = function () {\n  this.usageCount += 1;\n  return this.save();\n};\n\n// 更新评分\nGraphTemplateSchema.methods.updateRating = async function (newRating: number) {\n  // 这里简化处理，实际应该基于多个用户评分计算平均值\n  this.rating = Math.max(0, Math.min(5, newRating));\n  return this.save();\n};\n\n// 克隆模板为用户图谱\nGraphTemplateSchema.methods.cloneForUser = function (userId: string, customName?: string) {\n  const KnowledgeGraph = mongoose.model('KnowledgeGraph');\n\n  // 为节点添加默认元数据\n  const nodesWithMetadata = this.nodes.map((node: any) => ({\n    ...node.toObject(),\n    metadata: {\n      description: '',\n      workCount: 0,\n      reuseCount: 0,\n      color: '#3b82f6',\n      icon: '📝',\n      importance: 0,\n      tags: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n  }));\n\n  return new KnowledgeGraph({\n    userId: new mongoose.Types.ObjectId(userId),\n    name: customName || this.name,\n    description: this.description,\n    type: 'hybrid',\n    subject: this.subject,\n    gradeLevel: this.gradeLevel,\n    nodes: nodesWithMetadata,\n    edges: this.edges,\n    layout: this.layout,\n    view: this.view,\n    templateId: this._id,\n    isPublic: false,\n  });\n};\n\n// 验证模板结构\nGraphTemplateSchema.methods.validateStructure = function () {\n  const errors: string[] = [];\n\n  // 检查节点ID唯一性\n  const nodeIds = this.nodes.map((node: any) => node.id);\n  const uniqueNodeIds = new Set(nodeIds);\n  if (nodeIds.length !== uniqueNodeIds.size) {\n    errors.push('Duplicate node IDs found');\n  }\n\n  // 检查边ID唯一性\n  const edgeIds = this.edges.map((edge: any) => edge.id);\n  const uniqueEdgeIds = new Set(edgeIds);\n  if (edgeIds.length !== uniqueEdgeIds.size) {\n    errors.push('Duplicate edge IDs found');\n  }\n\n  // 检查边的源节点和目标节点是否存在\n  const nodeIdSet = new Set(nodeIds);\n  for (const edge of this.edges) {\n    if (!nodeIdSet.has(edge.source)) {\n      errors.push(`Edge ${edge.id}: source node ${edge.source} not found`);\n    }\n    if (!nodeIdSet.has(edge.target)) {\n      errors.push(`Edge ${edge.id}: target node ${edge.target} not found`);\n    }\n  }\n\n  // 检查是否有根节点\n  const hasRootNode = this.nodes.some((node: any) => node.level === 0);\n  if (!hasRootNode) {\n    errors.push('No root node found (level 0)');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n// 中间件\n\n// 保存前验证\nGraphTemplateSchema.pre('save', function (next) {\n  try {\n    // 基本验证：检查节点和边的数量\n    if (this.nodes.length === 0) {\n      return next(new Error('Template must have at least one node'));\n    }\n\n    // 检查节点ID唯一性\n    const nodeIds = new Set();\n    for (const node of this.nodes) {\n      if (nodeIds.has(node.id)) {\n        return next(new Error(`Duplicate node ID: ${node.id}`));\n      }\n      nodeIds.add(node.id);\n    }\n\n    // 检查边的源节点和目标节点是否存在\n    for (const edge of this.edges) {\n      if (!nodeIds.has(edge.source)) {\n        return next(new Error(`Edge source node not found: ${edge.source}`));\n      }\n      if (!nodeIds.has(edge.target)) {\n        return next(new Error(`Edge target node not found: ${edge.target}`));\n      }\n    }\n\n    next();\n  } catch (error) {\n    next(error as Error);\n  }\n});\n\n// 删除前检查是否被使用\nGraphTemplateSchema.pre('deleteOne', { document: true }, async function (next) {\n  const KnowledgeGraph = mongoose.model('KnowledgeGraph');\n  const usageCount = await (KnowledgeGraph.countDocuments as any)({ templateId: this._id });\n\n  if (usageCount > 0) {\n    return next(new Error('Cannot delete template: it is being used by existing knowledge graphs'));\n  }\n\n  next();\n});\n\n// 创建模型\nexport const GraphTemplateModel: GraphTemplateModelType =\n  (mongoose.models.GraphTemplate as GraphTemplateModelType) ||\n  mongoose.model<GraphTemplateDocument, GraphTemplateModelType>('GraphTemplate', GraphTemplateSchema);\n\nexport default GraphTemplateModel;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/KnowledgeGraph.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 137. Maximum allowed is 120.","line":324,"column":1,"nodeType":"Program","messageId":"max","endLine":324,"endColumn":138},{"ruleId":"max-len","severity":1,"message":"This line has a length of 134. Maximum allowed is 120.","line":405,"column":1,"nodeType":"Program","messageId":"max","endLine":405,"endColumn":135},{"ruleId":"max-len","severity":1,"message":"This line has a length of 127. Maximum allowed is 120.","line":504,"column":1,"nodeType":"Program","messageId":"max","endLine":504,"endColumn":128},{"ruleId":"max-len","severity":1,"message":"This line has a length of 123. Maximum allowed is 120.","line":525,"column":1,"nodeType":"Program","messageId":"max","endLine":525,"endColumn":124}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Schema, Document, Model, Types } from 'mongoose';\n\nimport {\n  GraphNode,\n  GraphEdge,\n  GraphType,\n  NodeType,\n  EdgeType,\n  GraphLayout,\n  LayoutConfig,\n  ViewConfig,\n} from '@/shared/types/knowledgeGraph';\n\n// 知识图谱文档接口\nexport interface KnowledgeGraphDocument extends Document {\n  userId: Types.ObjectId;\n  name: string;\n  description?: string;\n  type: GraphType;\n  subject?: string;\n  gradeLevel?: string;\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n  layout: LayoutConfig;\n  view: ViewConfig;\n  version: number;\n  isPublic: boolean;\n  templateId?: Types.ObjectId;\n  metadata: Record<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n  getNode(nodeId: string): GraphNode | null;\n  getEdge(edgeId: string): GraphEdge | null;\n  addNode(node: GraphNode): void;\n  updateNode(nodeId: string, updates: Partial<GraphNode>): boolean;\n  removeNode(nodeId: string): boolean;\n  addEdge(edge: GraphEdge): void;\n  removeEdge(edgeId: string): boolean;\n  wouldCreateCycle(sourceId: string, targetId: string): boolean;\n  getChildNodes(nodeId: string): GraphNode[];\n  getParentNode(nodeId: string): GraphNode | null;\n  getNodePath(nodeId: string): GraphNode[];\n  calculateStats(): {\n    nodeCount: number;\n    edgeCount: number;\n    workCount: number;\n    averageNodeDegree: number;\n    maxDepth: number;\n    density: number;\n    lastUpdated: Date;\n  };\n}\n\n// 节点Schema\nconst NodeSchema = new Schema({\n  id: {\n    type: String,\n    required: true,\n  },\n  label: {\n    type: String,\n    required: true,\n    maxlength: 50,\n  },\n  type: {\n    type: String,\n    enum: Object.values(NodeType),\n    required: true,\n  },\n  level: {\n    type: Number,\n    required: true,\n    min: 0,\n    max: 10,\n  },\n  parentId: {\n    type: String,\n    default: null,\n  },\n  position: {\n    x: { type: Number, default: 0 },\n    y: { type: Number, default: 0 },\n    z: { type: Number, default: 0 },\n  },\n  metadata: {\n    description: { type: String, maxlength: 500 },\n    workCount: { type: Number, default: 0, min: 0 },\n    reuseCount: { type: Number, default: 0, min: 0 },\n    color: { type: String, default: '#3b82f6' },\n    icon: { type: String, default: '📝' },\n    size: { type: Number, default: 30, min: 10, max: 100 },\n    importance: { type: Number, default: 0, min: 0, max: 1 },\n    tags: [{ type: String }],\n    difficulty: { type: Number, min: 1, max: 5 },\n    createdAt: { type: Date, default: Date.now },\n    updatedAt: { type: Date, default: Date.now },\n  },\n  isVisible: {\n    type: Boolean,\n    default: true,\n  },\n  isLocked: {\n    type: Boolean,\n    default: false,\n  },\n}, { _id: false });\n\n// 边Schema\nconst EdgeSchema = new Schema({\n  id: {\n    type: String,\n    required: true,\n  },\n  source: {\n    type: String,\n    required: true,\n  },\n  target: {\n    type: String,\n    required: true,\n  },\n  type: {\n    type: String,\n    enum: Object.values(EdgeType),\n    required: true,\n  },\n  weight: {\n    type: Number,\n    required: true,\n    min: 0,\n    max: 1,\n    default: 1,\n  },\n  metadata: {\n    strength: { type: Number, min: 0, max: 1, default: 1 },\n    description: { type: String, maxlength: 200 },\n    color: { type: String, default: '#6b7280' },\n    style: {\n      type: String,\n      enum: ['solid', 'dashed', 'dotted'],\n      default: 'solid',\n    },\n    animated: { type: Boolean, default: false },\n    bidirectional: { type: Boolean, default: false },\n    createdAt: { type: Date, default: Date.now },\n  },\n  isVisible: {\n    type: Boolean,\n    default: true,\n  },\n  isDirected: {\n    type: Boolean,\n    default: true,\n  },\n}, { _id: false });\n\n// 布局配置Schema\nconst LayoutConfigSchema = new Schema({\n  type: {\n    type: String,\n    enum: Object.values(GraphLayout),\n    default: GraphLayout.FORCE,\n  },\n  options: {\n    nodeSpacing: { type: Number, default: 100 },\n    levelSpacing: { type: Number, default: 150 },\n    centerForce: { type: Number, default: 0.1 },\n    linkDistance: { type: Number, default: 80 },\n    linkStrength: { type: Number, default: 0.5 },\n    chargeStrength: { type: Number, default: -300 },\n    collisionRadius: { type: Number, default: 30 },\n    alpha: { type: Number, default: 0.3 },\n    alphaDecay: { type: Number, default: 0.02 },\n    velocityDecay: { type: Number, default: 0.4 },\n  },\n}, { _id: false });\n\n// 视图配置Schema\nconst ViewConfigSchema = new Schema({\n  showLabels: { type: Boolean, default: true },\n  showEdgeLabels: { type: Boolean, default: false },\n  nodeSize: {\n    type: String,\n    enum: ['fixed', 'proportional'],\n    default: 'proportional',\n  },\n  edgeWidth: {\n    type: String,\n    enum: ['fixed', 'proportional'],\n    default: 'fixed',\n  },\n  colorScheme: { type: String, default: 'default' },\n  theme: {\n    type: String,\n    enum: ['light', 'dark'],\n    default: 'light',\n  },\n  animations: { type: Boolean, default: true },\n  minimap: { type: Boolean, default: true },\n  toolbar: { type: Boolean, default: true },\n}, { _id: false });\n\n// 知识图谱Schema\nconst KnowledgeGraphSchema = new Schema<KnowledgeGraphDocument>({\n  userId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n    index: true,\n  },\n  name: {\n    type: String,\n    required: true,\n    maxlength: 100,\n    trim: true,\n  },\n  description: {\n    type: String,\n    maxlength: 500,\n    trim: true,\n  },\n  type: {\n    type: String,\n    enum: Object.values(GraphType),\n    required: true,\n    default: GraphType.CUSTOM,\n  },\n  subject: {\n    type: String,\n    index: true,\n  },\n  gradeLevel: {\n    type: String,\n    index: true,\n  },\n  nodes: {\n    type: [NodeSchema],\n    default: [],\n  },\n  edges: {\n    type: [EdgeSchema],\n    default: [],\n  },\n  layout: {\n    type: LayoutConfigSchema,\n    required: true,\n  },\n  view: {\n    type: ViewConfigSchema,\n    required: true,\n  },\n  version: {\n    type: Number,\n    default: 1,\n    min: 1,\n  },\n  isPublic: {\n    type: Boolean,\n    default: false,\n    index: true,\n  },\n  templateId: {\n    type: Schema.Types.ObjectId,\n    ref: 'GraphTemplate',\n    index: true,\n  },\n  metadata: {\n    type: Schema.Types.Mixed,\n    default: {},\n  },\n}, {\n  timestamps: true,\n  collection: 'knowledge_graphs',\n});\n\n// 复合索引\nKnowledgeGraphSchema.index({ userId: 1, type: 1 });\nKnowledgeGraphSchema.index({ subject: 1, gradeLevel: 1 });\nKnowledgeGraphSchema.index({ isPublic: 1, subject: 1 });\nKnowledgeGraphSchema.index({ templateId: 1, createdAt: -1 });\n\n// 虚拟字段\nKnowledgeGraphSchema.virtual('nodeCount').get(function (this: KnowledgeGraphDocument) {\n  return this.nodes.length;\n});\n\nKnowledgeGraphSchema.virtual('edgeCount').get(function (this: KnowledgeGraphDocument) {\n  return this.edges.length;\n});\n\nKnowledgeGraphSchema.virtual('totalWorkCount').get(function (this: KnowledgeGraphDocument) {\n  return this.nodes.reduce((sum, node) => sum + (node.metadata.workCount || 0), 0);\n});\n\n// 实例方法\n\n// 获取节点\nKnowledgeGraphSchema.methods.getNode = function (this: KnowledgeGraphDocument, nodeId: string): GraphNode | null {\n  return (this.nodes as any).find((node: GraphNode) => node.id === nodeId) || null;\n};\n\n// 获取边\nKnowledgeGraphSchema.methods.getEdge = function (this: KnowledgeGraphDocument, edgeId: string): GraphEdge | null {\n  return (this.edges as any).find((edge: GraphEdge) => edge.id === edgeId) || null;\n};\n\n// 添加节点\nKnowledgeGraphSchema.methods.addNode = function (this: KnowledgeGraphDocument, node: GraphNode): void {\n  // 检查节点ID是否已存在\n  if (this.getNode(node.id)) {\n    throw new Error(`Node with id ${node.id} already exists`);\n  }\n\n  // 检查节点数量限制\n  if (this.nodes.length >= 500) {\n    throw new Error('Maximum number of nodes exceeded');\n  }\n\n  this.nodes.push(node);\n  this.version += 1;\n};\n\n// 更新节点\nKnowledgeGraphSchema.methods.updateNode = function (this: KnowledgeGraphDocument, nodeId: string, updates: Partial<GraphNode>): boolean {\n  const nodeIndex = this.nodes.findIndex((node: GraphNode) => node.id === nodeId);\n  if (nodeIndex === -1) {\n    return false;\n  }\n\n  // 不允许更新锁定的节点的某些属性\n  if (this.nodes[nodeIndex].isLocked) {\n    const { id, type, isLocked, ...allowedUpdates } = updates;\n    Object.assign(this.nodes[nodeIndex], allowedUpdates);\n  } else {\n    Object.assign(this.nodes[nodeIndex], updates);\n  }\n\n  this.nodes[nodeIndex].metadata.updatedAt = new Date();\n  this.version += 1;\n  return true;\n};\n\n// 删除节点\nKnowledgeGraphSchema.methods.removeNode = function (this: KnowledgeGraphDocument, nodeId: string): boolean {\n  const nodeIndex = this.nodes.findIndex((node: GraphNode) => node.id === nodeId);\n  if (nodeIndex === -1) {\n    return false;\n  }\n\n  // 不允许删除锁定的节点\n  if (this.nodes[nodeIndex].isLocked) {\n    throw new Error('Cannot delete locked node');\n  }\n\n  // 删除相关的边\n  this.edges = this.edges.filter((edge: GraphEdge) =>\n    edge.source !== nodeId && edge.target !== nodeId,\n  );\n\n  // 删除节点\n  this.nodes.splice(nodeIndex, 1);\n  this.version += 1;\n  return true;\n};\n\n// 添加边\nKnowledgeGraphSchema.methods.addEdge = function (this: KnowledgeGraphDocument, edge: GraphEdge): void {\n  // 检查边ID是否已存在\n  if (this.getEdge(edge.id)) {\n    throw new Error(`Edge with id ${edge.id} already exists`);\n  }\n\n  // 检查源节点和目标节点是否存在\n  if (!this.getNode(edge.source) || !this.getNode(edge.target)) {\n    throw new Error('Source or target node does not exist');\n  }\n\n  // 检查是否会形成循环（对于有向图）\n  if (edge.isDirected && this.wouldCreateCycle(edge.source, edge.target)) {\n    throw new Error('Adding this edge would create a cycle');\n  }\n\n  // 检查边数量限制\n  if (this.edges.length >= 1000) {\n    throw new Error('Maximum number of edges exceeded');\n  }\n\n  this.edges.push(edge);\n  this.version += 1;\n};\n\n// 删除边\nKnowledgeGraphSchema.methods.removeEdge = function (this: KnowledgeGraphDocument, edgeId: string): boolean {\n  const edgeIndex = this.edges.findIndex((edge: GraphEdge) => edge.id === edgeId);\n  if (edgeIndex === -1) {\n    return false;\n  }\n\n  this.edges.splice(edgeIndex, 1);\n  this.version += 1;\n  return true;\n};\n\n// 检查是否会形成循环\nKnowledgeGraphSchema.methods.wouldCreateCycle = function (this: KnowledgeGraphDocument, sourceId: string, targetId: string): boolean {\n  const visited = new Set<string>();\n  const stack = [targetId];\n\n  while (stack.length > 0) {\n    const currentId = stack.pop()!;\n    if (currentId === sourceId) {\n      return true;\n    }\n\n    if (visited.has(currentId)) {\n      continue;\n    }\n    visited.add(currentId);\n\n    // 找到所有从当前节点出发的边\n    const outgoingEdges = this.edges.filter((edge: GraphEdge) =>\n      edge.source === currentId && edge.isDirected,\n    );\n\n    for (const edge of outgoingEdges) {\n      stack.push(edge.target);\n    }\n  }\n    return false;\n};\n\n// 获取节点的子节点\nKnowledgeGraphSchema.methods.getChildNodes = function (this: KnowledgeGraphDocument, nodeId: string): GraphNode[] {\n  const childEdges = this.edges.filter((edge: GraphEdge) =>\n    edge.source === nodeId && edge.type === EdgeType.CONTAINS,\n  );\n\n  return childEdges\n    .map((edge: GraphEdge) => this.getNode(edge.target))\n      .filter((node): node is GraphNode => Boolean(node));\n};\n\n// 获取节点的父节点\nKnowledgeGraphSchema.methods.getParentNode = function (this: KnowledgeGraphDocument, nodeId: string): GraphNode | null {\n  const parentEdge = (this.edges as any).find((edge: GraphEdge) =>\n    edge.target === nodeId && edge.type === EdgeType.CONTAINS,\n  );\n\n  return parentEdge ? this.getNode(parentEdge.source) : null;\n};\n\n// 获取节点路径（从根到指定节点）\nKnowledgeGraphSchema.methods.getNodePath = function (this: KnowledgeGraphDocument, nodeId: string): GraphNode[] {\n  const path: GraphNode[] = [];\n  let currentNode = this.getNode(nodeId);\n\n  while (currentNode) {\n    path.unshift(currentNode);\n    const parent = this.getParentNode(currentNode.id);\n    currentNode = parent;\n  }\n    return path;\n};\n\n// 计算图的基本统计信息\nKnowledgeGraphSchema.methods.calculateStats = function (this: KnowledgeGraphDocument) {\n  const nodeCount = this.nodes.length;\n  const edgeCount = this.edges.length;\n  const workCount = this.nodes.reduce((sum: number, node: GraphNode) =>\n    sum + (node.metadata.workCount || 0), 0,\n  );\n\n  // 计算平均度数\n  const degrees = new Map<string, number>();\n  this.edges.forEach((edge: GraphEdge) => {\n    degrees.set(edge.source, (degrees.get(edge.source) || 0) + 1);\n    degrees.set(edge.target, (degrees.get(edge.target) || 0) + 1);\n  });\n\n  const averageNodeDegree = nodeCount > 0 ?\n    Array.from(degrees.values()).reduce((sum, degree) => sum + degree, 0) / nodeCount : 0;\n\n  // 计算最大深度\n  const maxDepth = Math.max(...this.nodes.map((node: GraphNode) => node.level), 0);\n\n  // 计算图密度\n  const maxPossibleEdges = nodeCount * (nodeCount - 1) / 2;\n  const density = maxPossibleEdges > 0 ? edgeCount / maxPossibleEdges : 0;\n\n  return {\n    nodeCount,\n    edgeCount,\n    workCount,\n    averageNodeDegree,\n    maxDepth,\n    density,\n    lastUpdated: new Date(),\n  };\n};\n\n// 静态方法\n\n// 根据用户ID获取图谱列表\nKnowledgeGraphSchema.statics.findByUserId = function (this: Model<KnowledgeGraphDocument>, userId: string, options: any = {}) {\n  const query: Record<string, unknown> = { userId: new Types.ObjectId(userId) };\n\n  if (options.type) {\n    query.type = options.type;\n  }\n\n  if (options.subject) {\n    query.subject = options.subject;\n  }\n\n  if (options.isPublic !== undefined) {\n    query.isPublic = options.isPublic;\n  }\n    return (this as any).find(query)\n      .sort({ updatedAt: -1 })\n      .limit(options.limit || 50)\n      .skip(options.offset || 0);\n};\n\n// 搜索公开图谱\nKnowledgeGraphSchema.statics.searchPublicGraphs = function (this: Model<KnowledgeGraphDocument>, searchOptions: any = {}) {\n  const query: Record<string, unknown> = { isPublic: true };\n\n  if (searchOptions.subject) {\n    query.subject = searchOptions.subject;\n  }\n\n  if (searchOptions.gradeLevel) {\n    query.gradeLevel = searchOptions.gradeLevel;\n  }\n\n  if (searchOptions.search) {\n    query.$or = [\n      { name: { $regex: searchOptions.search, $options: 'i' } },\n      { description: { $regex: searchOptions.search, $options: 'i' } },\n    ];\n  }\n    return (this as any).find(query)\n      .populate('userId', 'name avatar')\n        .sort({ updatedAt: -1 })\n      .limit(searchOptions.limit || 20)\n      .skip(searchOptions.offset || 0);\n};\n\n// 获取热门图谱\nKnowledgeGraphSchema.statics.getPopularGraphs = function (this: Model<KnowledgeGraphDocument>, limit: number = 10) {\n  return (this as any).aggregate([\n    { $match: { isPublic: true } },\n    {\n      $addFields: {\n        totalWorkCount: {\n          $sum: '$nodes.metadata.workCount',\n        },\n      },\n    },\n    { $sort: { totalWorkCount: -1, updatedAt: -1 } },\n    { $limit: limit },\n    {\n      $lookup: {\n        from: 'users',\n        localField: 'userId',\n        foreignField: '_id',\n        as: 'author',\n      },\n    },\n    { $unwind: '$author' },\n    {\n      $project: {\n        name: 1,\n        description: 1,\n        subject: 1,\n        gradeLevel: 1,\n        nodeCount: { $size: '$nodes' },\n        edgeCount: { $size: '$edges' },\n        totalWorkCount: 1,\n        'author.name': 1,\n        'author.avatar': 1,\n        createdAt: 1,\n        updatedAt: 1,\n      },\n    },\n  ]);\n};\n\n// 中间件\n\n// 保存前验证\nKnowledgeGraphSchema.pre('save', function (next) {\n  // 验证节点ID唯一性\n  const nodeIds = this.nodes.map((node: GraphNode) => node.id);\n  const uniqueNodeIds = new Set(nodeIds);\n  if (nodeIds.length !== uniqueNodeIds.size) {\n    return next(new Error('Duplicate node IDs found'));\n  }\n\n  // 验证边ID唯一性\n  const edgeIds = this.edges.map((edge: GraphEdge) => edge.id);\n  const uniqueEdgeIds = new Set(edgeIds);\n  if (edgeIds.length !== uniqueEdgeIds.size) {\n    return next(new Error('Duplicate edge IDs found'));\n  }\n\n  // 验证边的源节点和目标节点存在\n  for (const edge of this.edges) {\n    if (!this.getNode(edge.source) || !this.getNode(edge.target)) {\n      return next(new Error(`Invalid edge: ${edge.id} - source or target node not found`));\n    }\n  }\n\n  next();\n});\n\n// 更新时间戳\nKnowledgeGraphSchema.pre('save', function (next) {\n  if (this.isModified()) {\n    this.updatedAt = new Date();\n  }\n  next();\n});\n\nexport type KnowledgeGraphModelType = Model<KnowledgeGraphDocument>;\n\nexport const KnowledgeGraphModel: KnowledgeGraphModelType =\n  (mongoose.models.KnowledgeGraph as KnowledgeGraphModelType) ||\n  mongoose.model<KnowledgeGraphDocument>('KnowledgeGraph', KnowledgeGraphSchema);\n\nexport default KnowledgeGraphModel;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/Payment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/Subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/Usage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/User.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/Work.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/WorkMount.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 132. Maximum allowed is 120.","line":203,"column":1,"nodeType":"Program","messageId":"max","endLine":203,"endColumn":133}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mongoose, { Schema, Document, Model, Types } from 'mongoose';\n\nimport { KnowledgeGraphModel } from '@/lib/models/KnowledgeGraph';\nimport type { KnowledgeGraphDocument } from '@/lib/models/KnowledgeGraph';\n\nexport interface WorkMountDocument extends Document {\n  userId: Types.ObjectId;\n  workId: Types.ObjectId;\n  graphId: Types.ObjectId;\n  nodeId: string;\n  position: number;\n  isPrimary: boolean;\n  mountType: 'manual' | 'recommendation' | 'system';\n  metadata?: Record<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface WorkMountModelType extends Model<WorkMountDocument> {\n  findByNode(graphId: string, nodeId: string): Promise<WorkMountDocument[]>;\n  findByWork(workId: string): Promise<WorkMountDocument[]>;\n  findByUserGraph(userId: string, graphId: string): Promise<WorkMountDocument[]>;\n  getNodeStats(graphId: string, nodeId: string): Promise<any>;\n  getGraphStats(graphId: string): Promise<any>;\n  isWorkMounted(workId: string, graphId: string, nodeId: string): Promise<boolean>;\n  getUserMountStats(userId: string): Promise<any>;\n}\n\nconst WorkMountSchema = new Schema<WorkMountDocument, WorkMountModelType>({\n  userId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n    index: true,\n  },\n  workId: {\n    type: Schema.Types.ObjectId,\n    ref: 'Work',\n    required: true,\n    index: true,\n  },\n  graphId: {\n    type: Schema.Types.ObjectId,\n    ref: 'KnowledgeGraph',\n    required: true,\n    index: true,\n  },\n  nodeId: {\n    type: String,\n    required: true,\n    index: true,\n  },\n  position: {\n    type: Number,\n    default: 0,\n    min: 0,\n  },\n  isPrimary: {\n    type: Boolean,\n    default: false,\n  },\n  mountType: {\n    type: String,\n    enum: ['manual', 'recommendation', 'system'],\n    default: 'manual',\n    index: true,\n  },\n  metadata: {\n    type: Schema.Types.Mixed,\n    default: {},\n  },\n}, {\n  timestamps: true,\n  collection: 'work_mounts',\n});\n\n// 复合索引\nWorkMountSchema.index({ userId: 1, graphId: 1 });\nWorkMountSchema.index({ workId: 1, graphId: 1 });\nWorkMountSchema.index({ graphId: 1, nodeId: 1 });\nWorkMountSchema.index({ userId: 1, workId: 1 }, { unique: false });\n\n// 唯一约束：同一个作品在同一个图谱的同一个节点上只能挂载一次\nWorkMountSchema.index({ workId: 1, graphId: 1, nodeId: 1 }, { unique: true });\n\n// 静态方法\n\n// 获取节点上的所有作品\nWorkMountSchema.statics.findByNode = function (this: WorkMountModelType, graphId: string, nodeId: string) {\n  return (this.find as any)({\n    graphId: new Types.ObjectId(graphId),\n    nodeId,\n  })\n      .populate('workId', 'title knowledgePoint subject gradeLevel author createdAt').populate('userId', 'name avatar')\n        .sort({ isPrimary: -1, position: 1, createdAt: -1 });\n};\n\n// 获取作品的所有挂载点\nWorkMountSchema.statics.findByWork = function (this: WorkMountModelType, workId: string) {\n  return (this.find as any)({ workId: new Types.ObjectId(workId) })\n      .populate('graphId', 'name subject gradeLevel').populate('userId', 'name avatar')\n        .sort({ isPrimary: -1, createdAt: -1 });\n};\n\n// 获取用户在指定图谱中的所有挂载\nWorkMountSchema.statics.findByUserGraph = function (this: WorkMountModelType, userId: string, graphId: string) {\n  return (this.find as any)({\n    userId: new Types.ObjectId(userId),\n    graphId: new Types.ObjectId(graphId),\n  })\n      .populate('workId', 'title knowledgePoint subject gradeLevel createdAt')\n        .sort({ nodeId: 1, position: 1, createdAt: -1 });\n};\n\n// 获取节点的作品统计\nWorkMountSchema.statics.getNodeStats = async function (this: WorkMountModelType, graphId: string, nodeId: string) {\n  const stats = await (this.aggregate as any)([\n    {\n      $match: {\n        graphId: new Types.ObjectId(graphId),\n        nodeId,\n      },\n    },\n    {\n      $lookup: {\n        from: 'works',\n        localField: 'workId',\n        foreignField: '_id',\n        as: 'work',\n      },\n    },\n    { $unwind: '$work' },\n    {\n      $group: {\n        _id: null,\n        workCount: { $sum: 1 },\n        totalReuseCount: { $sum: '$work.reuseCount' },\n        subjects: { $addToSet: '$work.subject' },\n        gradeLevels: { $addToSet: '$work.gradeLevel' },\n        authors: { $addToSet: '$work.author' },\n        lastActivity: { $max: '$createdAt' },\n      },\n    },\n  ]);\n\n  return stats[0] || {\n    workCount: 0,\n    totalReuseCount: 0,\n    subjects: [],\n    gradeLevels: [],\n    authors: [],\n    lastActivity: null,\n  };\n};\n\n// 获取图谱的作品统计\nWorkMountSchema.statics.getGraphStats = async function (this: WorkMountModelType, graphId: string) {\n  const stats = await (this.aggregate as any)([\n    {\n      $match: {\n        graphId: new Types.ObjectId(graphId),\n      },\n    },\n    {\n      $lookup: {\n        from: 'works',\n        localField: 'workId',\n        foreignField: '_id',\n        as: 'work',\n      },\n    },\n    { $unwind: '$work' },\n    {\n      $group: {\n        _id: '$nodeId',\n        workCount: { $sum: 1 },\n        totalReuseCount: { $sum: '$work.reuseCount' },\n        lastActivity: { $max: '$createdAt' },\n      },\n    },\n    {\n      $group: {\n        _id: null,\n        totalWorkCount: { $sum: '$workCount' },\n        totalReuseCount: { $sum: '$totalReuseCount' },\n        nodeCount: { $sum: 1 },\n        avgWorksPerNode: { $avg: '$workCount' },\n        lastActivity: { $max: '$lastActivity' },\n      },\n    },\n  ]);\n\n  return stats[0] || {\n    totalWorkCount: 0,\n    totalReuseCount: 0,\n    nodeCount: 0,\n    avgWorksPerNode: 0,\n    lastActivity: null,\n  };\n};\n\n// 检查作品是否已挂载到节点\nWorkMountSchema.statics.isWorkMounted = async function (this: WorkMountModelType, workId: string, graphId: string, nodeId: string) {\n  const mount = await (this.findOne as any)({\n    workId: new Types.ObjectId(workId),\n    graphId: new Types.ObjectId(graphId),\n    nodeId,\n  });\n  return !!mount;\n};\n\n// 获取用户的挂载统计\nWorkMountSchema.statics.getUserMountStats = async function (this: WorkMountModelType, userId: string) {\n  const stats = await (this.aggregate as any)([\n    {\n      $match: {\n        userId: new Types.ObjectId(userId),\n      },\n    },\n    {\n      $group: {\n        _id: '$graphId',\n        mountCount: { $sum: 1 },\n        uniqueNodes: { $addToSet: '$nodeId' },\n        lastActivity: { $max: '$createdAt' },\n      },\n    },\n    {\n      $group: {\n        _id: null,\n        totalMounts: { $sum: '$mountCount' },\n        graphCount: { $sum: 1 },\n        avgMountsPerGraph: { $avg: '$mountCount' },\n        lastActivity: { $max: '$lastActivity' },\n      },\n    },\n  ]);\n\n  return stats[0] || {\n    totalMounts: 0,\n    graphCount: 0,\n    avgMountsPerGraph: 0,\n    lastActivity: null,\n  };\n};\n\n// 实例方法\n\n// 更新挂载位置\nWorkMountSchema.methods.updatePosition = function (newPosition: number) {\n  this.position = newPosition;\n  return this.save();\n};\n\n// 设置为主要挂载点\nWorkMountSchema.methods.setPrimary = async function (this: WorkMountDocument) {\n  // 先将同一作品的其他挂载点设为非主要\n  const mountModel = this.constructor as WorkMountModelType;\n  await (mountModel.updateMany as any)(\n    {\n      workId: this.workId,\n      _id: { $ne: this._id },\n    },\n    { isPrimary: false },\n  );\n\n  // 设置当前挂载点为主要\n  this.isPrimary = true;\n  return this.save();\n};\n\n// 中间件\n\n// 保存前验证\nWorkMountSchema.pre('save', async function (this: WorkMountDocument, next) {\n  // 验证图谱和节点是否存在\n  const graph = await (KnowledgeGraphModel.findById as any)(this.graphId) as KnowledgeGraphDocument | null;\n\n  if (!graph) {\n    return next(new Error('Knowledge graph not found'));\n  }\n\n  const node = graph.getNode(this.nodeId);\n  if (!node) {\n    return next(new Error('Node not found in the knowledge graph'));\n  }\n\n  // 验证用户权限（只能挂载到自己的图谱）\n  const graphUserId = graph.userId as unknown as Types.ObjectId;\n  if (!graphUserId.equals(this.userId)) {\n    return next(new Error('Permission denied: cannot mount work to another user\\'s graph'));\n  }\n\n  next();\n});\n\n// 保存后更新节点统计\nWorkMountSchema.post('save', async function (this: WorkMountDocument) {\n  try {\n    const graph = await (KnowledgeGraphModel.findById as any)(this.graphId);\n\n    if (graph) {\n      const stats = await (this.constructor as WorkMountModelType).getNodeStats(this.graphId.toString(), this.nodeId);\n      const nodeIndex = graph.nodes.findIndex((node: any) => node.id === this.nodeId);\n\n      if (nodeIndex !== -1) {\n        graph.nodes[nodeIndex].metadata.workCount = stats.workCount;\n        graph.nodes[nodeIndex].metadata.reuseCount = stats.totalReuseCount;\n        graph.nodes[nodeIndex].metadata.updatedAt = new Date();\n        await graph.save();\n      }\n    }\n  } catch (error) {\n    console.error('Error updating node stats after mount:', error);\n  }\n});\n\n// 删除后更新节点统计\nWorkMountSchema.post('deleteOne' as any, { document: true } as any, async function (this: WorkMountDocument) {\n  try {\n    const graph = await (KnowledgeGraphModel.findById as any)(this.graphId);\n\n    if (graph) {\n      const stats = await (this.constructor as WorkMountModelType).getNodeStats(this.graphId.toString(), this.nodeId);\n      const nodeIndex = graph.nodes.findIndex((node: any) => node.id === this.nodeId);\n\n      if (nodeIndex !== -1) {\n        graph.nodes[nodeIndex].metadata.workCount = stats.workCount;\n        graph.nodes[nodeIndex].metadata.reuseCount = stats.totalReuseCount;\n        graph.nodes[nodeIndex].metadata.updatedAt = new Date();\n        await graph.save();\n      }\n    }\n  } catch (error) {\n    console.error('Error updating node stats after unmount:', error);\n  }\n});\n\nexport const WorkMountModel: WorkMountModelType =\n  (mongoose.models.WorkMount as WorkMountModelType) ||\n  mongoose.model<WorkMountDocument, WorkMountModelType>('WorkMount', WorkMountSchema);\n\nexport default WorkMountModel;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/models/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/mongodb.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/monitoring/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/monitoring/context.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 128. Maximum allowed is 120.","line":340,"column":1,"nodeType":"Program","messageId":"max","endLine":340,"endColumn":129}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 监控上下文管理\n */\n\nimport { MONITORING_TAGS } from './config';\nimport { sentry } from './sentry';\n\n/**\n * 用户上下文接口\n */\nexport interface UserContext {\n  id?: string;\n  email?: string;\n  username?: string;\n  role?: string;\n  subscription?: string;\n  isAuthenticated?: boolean;\n}\n\n/**\n * 请求上下文接口\n */\nexport interface RequestContext {\n  id?: string;\n  method?: string;\n  url?: string;\n  userAgent?: string;\n  ip?: string;\n  referer?: string;\n  headers?: Record<string, string>;\n  query?: Record<string, any>;\n  body?: any;\n  startTime?: number;\n  endTime?: number;\n  duration?: number;\n  statusCode?: number;\n}\n\n/**\n * 设备上下文接口\n */\nexport interface DeviceContext {\n  type?: 'desktop' | 'mobile' | 'tablet';\n  os?: string;\n  browser?: string;\n  version?: string;\n  viewport?: {\n    width: number;\n    height: number;\n  };\n  connection?: {\n    type?: string;\n    effectiveType?: string;\n    downlink?: number;\n    rtt?: number;\n  };\n}\n\n/**\n * 应用上下文接口\n */\nexport interface AppContext {\n  version?: string;\n  environment?: string;\n  buildId?: string;\n  feature?: string;\n  component?: string;\n  route?: string;\n  action?: string;\n}\n\n/**\n * 业务上下文接口\n */\nexport interface BusinessContext {\n  workId?: string;\n  userId?: string;\n  sessionId?: string;\n  experimentId?: string;\n  feature?: string;\n  action?: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * 监控上下文管理器\n */\nclass MonitoringContextManager {\n  private userContext: UserContext = {};\n  private requestContext: RequestContext = {};\n  private deviceContext: DeviceContext = {};\n  private appContext: AppContext = {};\n  private businessContext: BusinessContext = {};\n\n  /**\n   * 设置用户上下文\n   */\n  setUser(user: UserContext) {\n    this.userContext = { ...this.userContext, ...user };\n\n    // 同步到Sentry\n    sentry.setUser({\n      id: (user.id || (user as any)._id),\n      email: user.email,\n      username: user.username,\n    });\n\n    // 设置标签\n    if (user.role) {\n      sentry.setTag(MONITORING_TAGS.USER_ID, (user.id || (user as any)._id) || 'anonymous');\n      sentry.setTag('user.role', user.role);\n    }\n\n    if (user.subscription) {\n      sentry.setTag('user.subscription', user.subscription);\n    }\n  }\n\n  /**\n   * 设置请求上下文\n   */\n  setRequest(request: RequestContext) {\n    this.requestContext = { ...this.requestContext, ...request };\n\n    // 同步到Sentry\n    sentry.setContext('request', {\n      id: request.id,\n      method: request.method,\n      url: request.url,\n      headers: this.sanitizeHeaders(request.headers),\n      query: request.query,\n      duration: request.duration,\n      statusCode: request.statusCode,\n    });\n\n    // 设置标签\n    if (request.id) {\n      sentry.setTag(MONITORING_TAGS.REQUEST_ID, request.id);\n    }\n\n    if (request.method) {\n      sentry.setTag(MONITORING_TAGS.METHOD, request.method);\n    }\n\n    if (request.url) {\n      sentry.setTag(MONITORING_TAGS.ENDPOINT, this.extractEndpoint(request.url));\n    }\n\n    if (request.statusCode) {\n      sentry.setTag(MONITORING_TAGS.STATUS_CODE, request.statusCode.toString());\n    }\n  }\n\n  /**\n   * 设置设备上下文\n   */\n  setDevice(device: DeviceContext) {\n    this.deviceContext = { ...this.deviceContext, ...device };\n\n    // 同步到Sentry\n    sentry.setContext('device', {\n      type: device.type,\n      os: device.os,\n      browser: device.browser,\n      version: device.version,\n      viewport: device.viewport,\n      connection: device.connection,\n    });\n\n    // 设置标签\n    if (device.os) {\n      sentry.setTag(MONITORING_TAGS.OS, device.os);\n    }\n\n    if (device.browser) {\n      sentry.setTag(MONITORING_TAGS.BROWSER, device.browser);\n    }\n\n    if (device.type) {\n      sentry.setTag(MONITORING_TAGS.DEVICE, device.type);\n    }\n  }\n\n  /**\n   * 设置应用上下文\n   */\n  setApp(app: AppContext) {\n    this.appContext = { ...this.appContext, ...app };\n\n    // 同步到Sentry\n    sentry.setContext('app', {\n      version: app.version,\n      environment: app.environment,\n      buildId: app.buildId,\n      feature: app.feature,\n      component: app.component,\n      route: app.route,\n      action: app.action,\n    });\n\n    // 设置标签\n    if (app.version) {\n      sentry.setTag(MONITORING_TAGS.VERSION, app.version);\n    }\n\n    if (app.environment) {\n      sentry.setTag(MONITORING_TAGS.ENVIRONMENT, app.environment);\n    }\n\n    if (app.feature) {\n      sentry.setTag('app.feature', app.feature);\n    }\n  }\n\n  /**\n   * 设置业务上下文\n   */\n  setBusiness(business: BusinessContext) {\n    this.businessContext = { ...this.businessContext, ...business };\n\n    // 同步到Sentry\n    sentry.setContext('business', {\n      workId: business.workId,\n      userId: business.userId,\n      sessionId: business.sessionId,\n      experimentId: business.experimentId,\n      feature: business.feature,\n      action: business.action,\n      metadata: business.metadata,\n    });\n\n    // 设置标签\n    if (business.workId) {\n      sentry.setTag('business.workId', business.workId);\n    }\n\n    if (business.sessionId) {\n      sentry.setTag('business.sessionId', business.sessionId);\n    }\n\n    if (business.feature) {\n      sentry.setTag('business.feature', business.feature);\n    }\n  }\n\n  /**\n   * 添加面包屑\n   */\n  addBreadcrumb(message: string, category?: string, data?: any, level?: 'debug' | 'info' | 'warning' | 'error') {\n    sentry.addBreadcrumb({\n      message,\n      category: category || 'custom',\n      level: level || 'info',\n      data,\n      timestamp: Date.now(),\n    });\n  }\n\n  /**\n   * 获取当前上下文\n   */\n  getCurrentContext() {\n    return {\n      user: this.userContext,\n      request: this.requestContext,\n      device: this.deviceContext,\n      app: this.appContext,\n      business: this.businessContext,\n    };\n  }\n\n  /**\n   * 清除上下文\n   */\n  clearContext() {\n    this.userContext = {};\n    this.requestContext = {};\n    this.deviceContext = {};\n    this.appContext = {};\n    this.businessContext = {};\n  }\n\n  /**\n   * 清除用户上下文\n   */\n  clearUser() {\n    this.userContext = {};\n    sentry.setUser({});\n  }\n\n  /**\n   * 从浏览器环境自动设置设备上下文\n   */\n  autoSetDeviceContext() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const device: DeviceContext = {};\n\n    // 检测设备类型\n    const userAgent = navigator.userAgent;\n    if (/Mobile|Android|iPhone|iPad/.test(userAgent)) {\n      device.type = /iPad/.test(userAgent) ? 'tablet' : 'mobile';\n    } else {\n      device.type = 'desktop';\n    }\n\n    // 检测操作系统\n    if (/Windows/.test(userAgent)) {\n      device.os = 'Windows';\n    } else if (/Mac/.test(userAgent)) {\n      device.os = 'macOS';\n    } else if (/Linux/.test(userAgent)) {\n      device.os = 'Linux';\n    } else if (/Android/.test(userAgent)) {\n      device.os = 'Android';\n    } else if (/iPhone|iPad/.test(userAgent)) {\n      device.os = 'iOS';\n    }\n\n    // 检测浏览器\n    if (/Chrome/.test(userAgent)) {\n      device.browser = 'Chrome';\n    } else if (/Firefox/.test(userAgent)) {\n      device.browser = 'Firefox';\n    } else if (/Safari/.test(userAgent)) {\n      device.browser = 'Safari';\n    } else if (/Edge/.test(userAgent)) {\n      device.browser = 'Edge';\n    }\n\n    // 获取视口信息\n    device.viewport = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n\n    // 获取网络连接信息\n    const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n    if (connection) {\n      device.connection = {\n        type: connection.type,\n        effectiveType: connection.effectiveType,\n        downlink: connection.downlink,\n        rtt: connection.rtt,\n      };\n    }\n\n    this.setDevice(device);\n  }\n\n  /**\n   * 清理敏感的请求头\n   */\n  private sanitizeHeaders(headers?: Record<string, string>): Record<string, string> {\n    if (!headers) {\n      return {};\n    }\n\n    const sanitized: Record<string, string> = {};\n    const sensitiveHeaders = ['authorization', 'cookie', 'x-api-key', 'x-auth-token'];\n\n    Object.entries(headers).forEach(([key, value]) => {\n      if (sensitiveHeaders.includes(key.toLowerCase())) {\n        sanitized[key] = '[REDACTED]';\n      } else {\n        sanitized[key] = value;\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * 从URL提取端点\n   */\n  private extractEndpoint(url: string): string {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.pathname;\n    } catch {\n      return url;\n    }\n  }\n}\n\n// 创建全局上下文管理器实例\nexport const monitoringContext = new MonitoringContextManager();\n\n/**\n * React Hook: 使用监控上下文\n */\nexport function useMonitoringContext() {\n  return {\n    setUser: monitoringContext.setUser.bind(monitoringContext),\n    setRequest: monitoringContext.setRequest.bind(monitoringContext),\n    setDevice: monitoringContext.setDevice.bind(monitoringContext),\n    setApp: monitoringContext.setApp.bind(monitoringContext),\n    setBusiness: monitoringContext.setBusiness.bind(monitoringContext),\n    addBreadcrumb: monitoringContext.addBreadcrumb.bind(monitoringContext),\n    getCurrentContext: monitoringContext.getCurrentContext.bind(monitoringContext),\n    clearContext: monitoringContext.clearContext.bind(monitoringContext),\n    clearUser: monitoringContext.clearUser.bind(monitoringContext),\n    autoSetDeviceContext: monitoringContext.autoSetDeviceContext.bind(monitoringContext),\n  };\n}\n\n/**\n * 自动设置基础上下文\n */\nexport function initializeMonitoringContext() {\n  // 设置应用上下文\n  monitoringContext.setApp({\n    version: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n    environment: process.env.NODE_ENV || 'development',\n    buildId: process.env.NEXT_PUBLIC_BUILD_ID,\n  });\n\n  // 在浏览器环境中自动设置设备上下文\n  if (typeof window !== 'undefined') {\n    monitoringContext.autoSetDeviceContext();\n  }\n}\n\nexport default monitoringContext;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/monitoring/filters.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":400,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":404,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 监控过滤器\n */\n\nimport { shouldIgnoreError, categorizeError, getErrorSeverity } from './config';\n\n/**\n * 错误过滤结果接口\n */\nexport interface ErrorFilterResult {\n  shouldReport: boolean;\n  category: string;\n  severity: string;\n  tags: Record<string, string>;\n  fingerprint?: string[];\n  reason?: string;\n}\n\n/**\n * 请求过滤结果接口\n */\nexport interface RequestFilterResult {\n  shouldTrack: boolean;\n  sampleRate: number;\n  tags: Record<string, string>;\n  reason?: string;\n}\n\n/**\n * 错误过滤器类\n */\nexport class ErrorFilter {\n  private rateLimiter = new Map<string, { count: number; resetTime: number }>();\n  private readonly RATE_LIMIT_WINDOW = 60000; // 1分钟\n  private readonly RATE_LIMIT_MAX = 10; // 每分钟最多10个相同错误\n\n  /**\n   * 过滤错误\n   */\n  filterError(error: Error, context?: {\n    url?: string;\n    userId?: string;\n    userAgent?: string;\n    component?: string;\n  }): ErrorFilterResult {\n    const result: ErrorFilterResult = {\n      shouldReport: true,\n      category: categorizeError(error),\n      severity: getErrorSeverity(error),\n      tags: {},\n    };\n\n    // 检查是否应该忽略\n    if (shouldIgnoreError(error, context?.url)) {\n      result.shouldReport = false;\n      result.reason = 'Error matches ignore patterns';\n      return result;\n    }\n\n    // 检查频率限制\n    const fingerprint = this.generateErrorFingerprint(error, context);\n    if (this.isRateLimited(fingerprint)) {\n      result.shouldReport = false;\n      result.reason = 'Rate limited';\n      return result;\n    }\n\n    // 设置指纹\n    result.fingerprint = [fingerprint];\n\n    // 设置标签\n    result.tags = {\n      category: result.category,\n      severity: result.severity,\n      ...this.extractErrorTags(error, context),\n    };\n\n    return result;\n  }\n\n  /**\n   * 生成错误指纹\n   */\n  private generateErrorFingerprint(error: Error, context?: any): string {\n    const components = [\n      error.name,\n      error.message.replace(/\\d+/g, 'N'), // 替换数字为N\n      context?.component || 'unknown',\n      context?.url ? this.normalizeUrl(context.url) : 'unknown',\n    ];\n\n    return components.join('|');\n  }\n\n  /**\n   * 检查是否被频率限制\n   */\n  private isRateLimited(fingerprint: string): boolean {\n    const now = Date.now();\n    const entry = this.rateLimiter.get(fingerprint);\n\n    if (!entry) {\n      this.rateLimiter.set(fingerprint, { count: 1, resetTime: now + this.RATE_LIMIT_WINDOW });\n      return false;\n    }\n\n    if (now > entry.resetTime) {\n      // 重置计数器\n      this.rateLimiter.set(fingerprint, { count: 1, resetTime: now + this.RATE_LIMIT_WINDOW });\n      return false;\n    }\n\n    entry.count++;\n    return entry.count > this.RATE_LIMIT_MAX;\n  }\n\n  /**\n   * 提取错误标签\n   */\n  private extractErrorTags(error: Error, context?: any): Record<string, string> {\n    const tags: Record<string, string> = {};\n\n    // 从错误堆栈中提取信息\n    if (error.stack) {\n      const stackLines = error.stack.split('\\n');\n      const firstLine = (stackLines.find as any)(line => line.includes('.tsx') || line.includes('.ts') || line.includes('.js'));\n      if (firstLine) {\n        const match = firstLine.match(/\\/([^\\/]+\\.(tsx?|jsx?)):/);\n        if (match) {\n          tags.file = match[1];\n        }\n      }\n    }\n\n    // 从上下文中提取标签\n    if (context?.component) {\n      tags.component = context.component;\n    }\n\n    if (context?.userAgent) {\n      const browser = this.extractBrowser(context.userAgent);\n      if (browser) {\n        tags.browser = browser;\n      }\n    }\n\n    return tags;\n  }\n\n  /**\n   * 规范化URL\n   */\n  private normalizeUrl(url: string): string {\n    try {\n      const urlObj = new URL(url);\n      // 移除查询参数和哈希\n      return urlObj.pathname;\n    } catch {\n      return url;\n    }\n  }\n\n  /**\n   * 从User Agent提取浏览器信息\n   */\n  private extractBrowser(userAgent: string): string | null {\n    if (/Chrome/.test(userAgent)) return 'Chrome';\n    if (/Firefox/.test(userAgent)) return 'Firefox';\n    if (/Safari/.test(userAgent)) return 'Safari';\n    if (/Edge/.test(userAgent)) return 'Edge';\n    return null;\n  }\n\n  /**\n   * 清理过期的频率限制记录\n   */\n  cleanupRateLimiter() {\n    const now = Date.now();\n    for (const [key, entry] of this.rateLimiter.entries()) {\n      if (now > entry.resetTime) {\n        this.rateLimiter.delete(key);\n      }\n    }\n  }\n}\n\n/**\n * 请求过滤器类\n */\nexport class RequestFilter {\n  /**\n   * 过滤请求\n   */\n  filterRequest(request: {\n    method: string;\n    url: string;\n    userAgent?: string;\n    duration?: number;\n    statusCode?: number;\n  }): RequestFilterResult {\n    const result: RequestFilterResult = {\n      shouldTrack: true,\n      sampleRate: 1.0,\n      tags: {},\n    };\n\n    // 检查是否应该忽略的URL\n    if (this.shouldIgnoreUrl(request.url)) {\n      result.shouldTrack = false;\n      result.reason = 'URL matches ignore patterns';\n      return result;\n    }\n\n    // 设置采样率\n    result.sampleRate = this.calculateSampleRate(request);\n\n    // 设置标签\n    result.tags = {\n      method: request.method,\n      endpoint: this.extractEndpoint(request.url),\n      status_category: this.getStatusCategory(request.statusCode),\n      ...this.extractRequestTags(request),\n    };\n\n    return result;\n  }\n\n  /**\n   * 检查是否应该忽略URL\n   */\n  private shouldIgnoreUrl(url: string): boolean {\n    const ignoredPatterns = [\n      /\\/_next\\//,\n      /\\/api\\/health/,\n      /\\/favicon\\.ico/,\n      /\\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$/,\n      /\\/webpack-hmr/,\n    ];\n\n    return ignoredPatterns.some(pattern => pattern.test(url));\n  }\n\n  /**\n   * 计算采样率\n   */\n  private calculateSampleRate(request: any): number {\n    // 根据请求类型调整采样率\n    if (request.url.includes('/api/')) {\n      return 0.5; // API请求50%采样\n    }\n\n    if (request.statusCode >= 400) {\n      return 1.0; // 错误请求100%采样\n    }\n\n    if (request.duration && request.duration > 2000) {\n      return 1.0; // 慢请求100%采样\n    }\n\n    return 0.1; // 其他请求10%采样\n  }\n\n  /**\n   * 提取端点\n   */\n  private extractEndpoint(url: string): string {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.pathname.replace(/\\/\\d+/g, '/:id'); // 替换数字ID为参数\n    } catch {\n      return url;\n    }\n  }\n\n  /**\n   * 获取状态码分类\n   */\n  private getStatusCategory(statusCode?: number): string {\n    if (!statusCode) return 'unknown';\n\n    if (statusCode < 300) return '2xx';\n    if (statusCode < 400) return '3xx';\n    if (statusCode < 500) return '4xx';\n    return '5xx';\n  }\n\n  /**\n   * 提取请求标签\n   */\n  private extractRequestTags(request: any): Record<string, string> {\n    const tags: Record<string, string> = {};\n\n    if (request.userAgent) {\n      const browser = this.extractBrowser(request.userAgent);\n      if (browser) {\n        tags.browser = browser;\n      }\n    }\n\n    if (request.duration) {\n      if (request.duration > 5000) {\n        tags.performance = 'very_slow';\n      } else if (request.duration > 2000) {\n        tags.performance = 'slow';\n      } else if (request.duration > 1000) {\n        tags.performance = 'normal';\n      } else {\n        tags.performance = 'fast';\n      }\n    }\n\n    return tags;\n  }\n\n  /**\n   * 从User Agent提取浏览器信息\n   */\n  private extractBrowser(userAgent: string): string | null {\n    if (/Chrome/.test(userAgent)) return 'Chrome';\n    if (/Firefox/.test(userAgent)) return 'Firefox';\n    if (/Safari/.test(userAgent)) return 'Safari';\n    if (/Edge/.test(userAgent)) return 'Edge';\n    return null;\n  }\n}\n\n/**\n * 性能过滤器类\n */\nexport class PerformanceFilter {\n  /**\n   * 过滤性能数据\n   */\n  filterPerformance(metric: {\n    name: string;\n    value: number;\n    url?: string;\n    component?: string;\n  }): { shouldReport: boolean; tags: Record<string, string> } {\n    const result = {\n      shouldReport: true,\n      tags: {} as Record<string, string>,\n    };\n\n    // 设置标签\n    result.tags = {\n      metric: metric.name,\n      ...this.categorizePerformance(metric),\n    };\n\n    return result;\n  }\n\n  /**\n   * 性能分类\n   */\n  private categorizePerformance(metric: any): Record<string, string> {\n    const tags: Record<string, string> = {};\n\n    if (metric.name === 'FCP' || metric.name === 'LCP') {\n      if (metric.value > 4000) {\n        tags.performance_grade = 'poor';\n      } else if (metric.value > 2500) {\n        tags.performance_grade = 'needs_improvement';\n      } else {\n        tags.performance_grade = 'good';\n      }\n    }\n\n    if (metric.name === 'CLS') {\n      if (metric.value > 0.25) {\n        tags.performance_grade = 'poor';\n      } else if (metric.value > 0.1) {\n        tags.performance_grade = 'needs_improvement';\n      } else {\n        tags.performance_grade = 'good';\n      }\n    }\n\n    if (metric.component) {\n      tags.component = metric.component;\n    }\n\n    return tags;\n  }\n}\n\n// 创建全局过滤器实例\nexport const errorFilter = new ErrorFilter();\nexport const requestFilter = new RequestFilter();\nexport const performanceFilter = new PerformanceFilter();\n\n// 定期清理频率限制记录\nif (typeof window !== 'undefined') {\n  setInterval(() => {\n    errorFilter.cleanupRateLimiter();\n  }, 300000); // 每5分钟清理一次\n}\n\nexport default {\n  errorFilter,\n  requestFilter,\n  performanceFilter,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/monitoring/health.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/monitoring/index.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":87,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":90,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 监控系统入口文件\n */\n\n// 导出所有监控模块\nexport { sentry, initSentry, reportError, setSentryUser, setSentryRequestContext } from './sentry';\nexport { monitoringContext, useMonitoringContext, initializeMonitoringContext } from './context';\nexport { errorFilter, requestFilter, performanceFilter } from './filters';\nexport { performanceMonitor, recordPerformanceMetric, PerformanceTimer, withPerformanceMonitoring } from './performance';\nexport { healthManager, createHealthCheckMiddleware } from './health';\nexport { getMonitoringConfig } from './config';\n\n// 导出类型\nexport type { UserContext, RequestContext, DeviceContext, AppContext, BusinessContext } from './context';\nexport type { PerformanceMetric, WebVitalsMetric, ResourceMetric, MemoryMetric } from './performance';\nexport type { HealthCheckResult, SystemHealth, HealthCheckFunction } from './health';\nexport type { MonitoringConfig } from './config';\n\nimport { getMonitoringConfig } from './config';\nimport { initializeMonitoringContext } from './context';\nimport { performanceMonitor } from './performance';\nimport { initSentry } from './sentry';\n\n/**\n * 初始化监控系统\n */\nexport function initializeMonitoring() {\n  const config = getMonitoringConfig();\n\n  // 初始化Sentry\n  if (config.sentry.enabled) {\n    initSentry();\n  }\n\n  // 初始化监控上下文\n  initializeMonitoringContext();\n\n  // 初始化性能监控\n  if (config.performance.enabled) {\n    performanceMonitor.init();\n  }\n\n  console.log('Monitoring system initialized', {\n    sentry: config.sentry.enabled,\n    performance: config.performance.enabled,\n    health: config.health.enabled,\n  });\n}\n\n/**\n * 监控系统状态\n */\nexport function getMonitoringStatus() {\n  const config = getMonitoringConfig();\n\n  return {\n    sentry: {\n      enabled: config.sentry.enabled,\n      environment: config.sentry.environment,\n      debug: config.sentry.debug,\n    },\n    performance: {\n      enabled: config.performance.enabled,\n      sampleRate: config.performance.sampleRate,\n    },\n    health: {\n      enabled: config.health.enabled,\n      interval: config.health.interval,\n    },\n    alerts: {\n      enabled: config.alerts.enabled,\n      channels: Object.keys(config.alerts.channels).filter(\n        key => config.alerts.channels[key as keyof typeof config.alerts.channels],\n      ),\n    },\n  };\n}\n\n// 自动初始化（仅在浏览器环境）\nif (typeof window !== 'undefined') {\n  // 延迟初始化，避免阻塞页面加载\n  setTimeout(() => {\n    initializeMonitoring();\n  }, 1000);\n}\n\nexport default {\n  initializeMonitoring,\n  getMonitoringStatus,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/monitoring/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/monitoring/sentry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/notification/notification-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/alerts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/code-splitting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/custom-metrics.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 124. Maximum allowed is 120.","line":566,"column":1,"nodeType":"Program","messageId":"max","endLine":566,"endColumn":125},{"ruleId":"max-len","severity":1,"message":"This line has a length of 143. Maximum allowed is 120.","line":568,"column":1,"nodeType":"Program","messageId":"max","endLine":568,"endColumn":144},{"ruleId":"max-len","severity":1,"message":"This line has a length of 150. Maximum allowed is 120.","line":571,"column":1,"nodeType":"Program","messageId":"max","endLine":571,"endColumn":151}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 自定义性能指标收集系统\n */\nimport { logger } from '@/lib/logging/logger';\n\n/**\n * 自定义指标类型\n */\nexport interface CustomMetric {\n  name: string;\n  value: number;\n  unit: 'ms' | 'bytes' | 'count' | 'percentage' | 'score';\n  category: 'performance' | 'user-experience' | 'business' | 'technical';\n  timestamp: number;\n  tags?: Record<string, string | number>;\n  metadata?: Record<string, any>;\n}\n\n/**\n * 性能计时器\n */\nexport interface PerformanceTimer {\n  name: string;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  tags?: Record<string, string | number>;\n}\n\n/**\n * 指标收集器配置\n */\nexport interface MetricsCollectorConfig {\n  // 是否启用\n  enabled?: boolean;\n  // 缓冲区大小\n  bufferSize?: number;\n  // 自动上报间隔（毫秒）\n  reportInterval?: number;\n  // 上报端点\n  reportEndpoint?: string;\n  // 是否在控制台输出\n  debug?: boolean;\n  // 指标过滤器\n  filter?: (metric: CustomMetric) => boolean;\n  // 指标转换器\n  transform?: (metric: CustomMetric) => CustomMetric;\n}\n\n/**\n * 自定义指标收集器\n */\nexport class CustomMetricsCollector {\n  private config: Required<MetricsCollectorConfig>;\n  private metrics: CustomMetric[] = [];\n  private timers: Map<string, PerformanceTimer> = new Map();\n  private reportTimer?: NodeJS.Timeout;\n  private isReporting = false;\n\n  constructor(config: MetricsCollectorConfig = {}) {\n    this.config = {\n      enabled: true,\n      bufferSize: 100,\n      reportInterval: 30000, // 30秒\n      reportEndpoint: '/api/analytics/custom-metrics',\n      debug: process.env.NODE_ENV === 'development',\n      filter: () => true,\n      transform: (metric) => metric,\n      ...config,\n    };\n  }\n\n  /**\n   * 开始收集\n   */\n  start(): void {\n    if (!this.config.enabled) {\n      return;\n    }\n\n    this.startAutoReporting();\n    logger.info('Custom metrics collector started', {\n      bufferSize: this.config.bufferSize,\n      reportInterval: this.config.reportInterval,\n    });\n  }\n\n  /**\n   * 停止收集\n   */\n  stop(): void {\n    this.stopAutoReporting();\n    this.reportMetrics(); // 最后一次上报\n    logger.info('Custom metrics collector stopped');\n  }\n\n  /**\n   * 记录指标\n   */\n  recordMetric(metric: Omit<CustomMetric, 'timestamp'>): void {\n    if (!this.config.enabled) {\n      return;\n    }\n\n    const fullMetric: CustomMetric = {\n      ...metric,\n      timestamp: Date.now(),\n    };\n\n    // 应用过滤器\n    if (!this.config.filter(fullMetric)) {\n      return;\n    }\n\n    // 应用转换器\n    const transformedMetric = this.config.transform(fullMetric);\n\n    this.metrics.push(transformedMetric);\n\n    if (this.config.debug) {\n      console.log(`[Custom Metrics] ${transformedMetric.name}:`, {\n        value: transformedMetric.value,\n        unit: transformedMetric.unit,\n        category: transformedMetric.category,\n      });\n    }\n\n    // 检查缓冲区大小\n    if (this.metrics.length >= this.config.bufferSize) {\n      this.reportMetrics();\n    }\n\n    logger.debug('Custom metric recorded', {\n      name: transformedMetric.name,\n      value: transformedMetric.value,\n      category: transformedMetric.category,\n    });\n  }\n\n  /**\n   * 开始计时\n   */\n  startTimer(name: string, tags?: Record<string, string | number>): void {\n    if (!this.config.enabled) {\n      return;\n    }\n\n    const timer: PerformanceTimer = {\n      name,\n      startTime: performance.now(),\n      tags,\n    };\n\n    this.timers.set(name, timer);\n  }\n\n  /**\n   * 结束计时并记录指标\n   */\n  endTimer(name: string, additionalTags?: Record<string, string | number>): number | null {\n    if (!this.config.enabled) {\n      return null;\n    }\n\n    const timer = this.timers.get(name);\n    if (!timer) {\n      logger.warn('Timer not found', { name });\n      return null;\n    }\n\n    timer.endTime = performance.now();\n    timer.duration = timer.endTime - timer.startTime;\n\n    // 记录计时指标\n    this.recordMetric({\n      name: `timer.${name}`,\n      value: timer.duration,\n      unit: 'ms',\n      category: 'performance',\n      tags: {\n        ...timer.tags,\n        ...additionalTags,\n      },\n    });\n\n    this.timers.delete(name);\n    return timer.duration;\n  }\n\n  /**\n   * 记录计数指标\n   */\n  recordCount(name: string, value: number = 1, tags?: Record<string, string | number>): void {\n    this.recordMetric({\n      name,\n      value,\n      unit: 'count',\n      category: 'business',\n      tags,\n    });\n  }\n\n  /**\n   * 记录内存使用指标\n   */\n  recordMemoryUsage(name: string = 'memory.usage'): void {\n    if (typeof window === 'undefined' || !('memory' in performance)) {\n      return;\n    }\n\n    const memory = (performance as any).memory;\n\n    this.recordMetric({\n      name: `${name}.used`,\n      value: memory.usedJSHeapSize,\n      unit: 'bytes',\n      category: 'technical',\n    });\n\n    this.recordMetric({\n      name: `${name}.total`,\n      value: memory.totalJSHeapSize,\n      unit: 'bytes',\n      category: 'technical',\n    });\n\n    this.recordMetric({\n      name: `${name}.limit`,\n      value: memory.jsHeapSizeLimit,\n      unit: 'bytes',\n      category: 'technical',\n    });\n\n    this.recordMetric({\n      name: `${name}.usage_percentage`,\n      value: (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100,\n      unit: 'percentage',\n      category: 'technical',\n    });\n  }\n\n  /**\n   * 记录网络指标\n   */\n  recordNetworkMetrics(): void {\n    if (typeof navigator === 'undefined' || !('connection' in navigator)) {\n      return;\n    }\n\n    const connection = (navigator as any).connection;\n\n    if (connection.effectiveType) {\n      this.recordMetric({\n        name: 'network.effective_type',\n        value: this.getConnectionTypeScore(connection.effectiveType),\n        unit: 'score',\n        category: 'technical',\n        tags: { type: connection.effectiveType },\n      });\n    }\n\n    if (connection.downlink) {\n      this.recordMetric({\n        name: 'network.downlink',\n        value: connection.downlink,\n        unit: 'count',\n        category: 'technical',\n      });\n    }\n\n    if (connection.rtt) {\n      this.recordMetric({\n        name: 'network.rtt',\n        value: connection.rtt,\n        unit: 'ms',\n        category: 'technical',\n      });\n    }\n  }\n\n  /**\n   * 记录用户交互指标\n   */\n  recordUserInteraction(action: string, element?: string, duration?: number): void {\n    this.recordMetric({\n      name: 'user.interaction',\n      value: duration || 1,\n      unit: duration ? 'ms' : 'count',\n      category: 'user-experience',\n      tags: {\n        action,\n        element: element || 'unknown',\n      },\n    });\n  }\n\n  /**\n   * 记录页面加载指标\n   */\n  recordPageLoadMetrics(): void {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n    if (!navigation) {\n      return;\n    }\n\n    // DNS 查询时间\n    this.recordMetric({\n      name: 'page.dns_lookup',\n      value: navigation.domainLookupEnd - navigation.domainLookupStart,\n      unit: 'ms',\n      category: 'performance',\n    });\n\n    // TCP 连接时间\n    this.recordMetric({\n      name: 'page.tcp_connect',\n      value: navigation.connectEnd - navigation.connectStart,\n      unit: 'ms',\n      category: 'performance',\n    });\n\n    // 请求响应时间\n    this.recordMetric({\n      name: 'page.request_response',\n      value: navigation.responseEnd - navigation.requestStart,\n      unit: 'ms',\n      category: 'performance',\n    });\n\n    // DOM 解析时间\n    this.recordMetric({\n      name: 'page.dom_parse',\n      value: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n      unit: 'ms',\n      category: 'performance',\n    });\n\n    // 页面完全加载时间\n    this.recordMetric({\n      name: 'page.load_complete',\n      value: navigation.loadEventEnd - navigation.loadEventStart,\n      unit: 'ms',\n      category: 'performance',\n    });\n  }\n\n  /**\n   * 记录资源加载指标\n   */\n  recordResourceMetrics(): void {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const resources = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\n    const resourceStats = this.analyzeResources(resources);\n\n    Object.entries(resourceStats).forEach(([type, stats]) => {\n      this.recordMetric({\n        name: `resource.${type}.count`,\n        value: stats.count,\n        unit: 'count',\n        category: 'performance',\n      });\n\n      this.recordMetric({\n        name: `resource.${type}.total_size`,\n        value: stats.totalSize,\n        unit: 'bytes',\n        category: 'performance',\n      });\n\n      this.recordMetric({\n        name: `resource.${type}.avg_duration`,\n        value: stats.avgDuration,\n        unit: 'ms',\n        category: 'performance',\n      });\n    });\n  }\n\n  /**\n   * 分析资源统计\n   */\n  private analyzeResources(resources: PerformanceResourceTiming[]): Record<string, any> {\n    const stats: Record<string, { count: number; totalSize: number; totalDuration: number; avgDuration: number }> = {};\n\n    resources.forEach(resource => {\n      const type = this.getResourceType(resource.name);\n\n      if (!stats[type]) {\n        stats[type] = { count: 0, totalSize: 0, totalDuration: 0, avgDuration: 0 };\n      }\n\n      stats[type].count++;\n      stats[type].totalSize += resource.transferSize || 0;\n      stats[type].totalDuration += resource.duration;\n    });\n\n    // 计算平均值\n    Object.values(stats).forEach(stat => {\n      stat.avgDuration = stat.count > 0 ? stat.totalDuration / stat.count : 0;\n    });\n\n    return stats;\n  }\n\n  /**\n   * 获取资源类型\n   */\n  private getResourceType(url: string): string {\n    if (url.includes('.js')) return 'javascript';\n    if (url.includes('.css')) return 'stylesheet';\n    if (url.match(/\\.(jpg|jpeg|png|gif|webp|svg)$/i)) return 'image';\n    if (url.match(/\\.(woff|woff2|ttf|eot)$/i)) return 'font';\n    if (url.includes('/api/')) return 'api';\n    return 'other';\n  }\n\n  /**\n   * 获取连接类型评分\n   */\n  private getConnectionTypeScore(type: string): number {\n    const scores: Record<string, number> = {\n      'slow-2g': 1,\n      '2g': 2,\n      '3g': 3,\n      '4g': 4,\n      '5g': 5,\n    };\n    return scores[type] || 0;\n  }\n\n  /**\n   * 开始自动上报\n   */\n  private startAutoReporting(): void {\n    if (this.config.reportInterval > 0) {\n      this.reportTimer = setInterval(() => {\n        this.reportMetrics();\n      }, this.config.reportInterval);\n    }\n  }\n\n  /**\n   * 停止自动上报\n   */\n  private stopAutoReporting(): void {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer);\n      this.reportTimer = undefined;\n    }\n  }\n\n  /**\n   * 上报指标\n   */\n  private async reportMetrics(): Promise<void> {\n    if (this.isReporting || this.metrics.length === 0) {\n      return;\n    }\n\n    this.isReporting = true;\n    const metricsToReport = [...this.metrics];\n    this.metrics = [];\n\n    try {\n      await this.sendMetrics(metricsToReport);\n      logger.debug('Custom metrics reported', { count: metricsToReport.length });\n    } catch (error) {\n      logger.error('Failed to report custom metrics', error instanceof Error ? error : new Error(String(error)));\n      // 将指标放回缓冲区\n      this.metrics.unshift(...metricsToReport);\n    } finally {\n      this.isReporting = false;\n    }\n  }\n\n  /**\n   * 发送指标到服务器\n   */\n  private async sendMetrics(metrics: CustomMetric[]): Promise<void> {\n    if (!this.config.reportEndpoint) {\n      return;\n    }\n\n    const body = JSON.stringify({\n      metrics,\n      timestamp: Date.now(),\n      url: typeof window !== 'undefined' ? window.location.href : '',\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n    });\n\n    const response = await fetch(this.config.reportEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n  }\n\n  /**\n   * 获取当前指标\n   */\n  getMetrics(): CustomMetric[] {\n    return [...this.metrics];\n  }\n\n  /**\n   * 获取活动计时器\n   */\n  getActiveTimers(): PerformanceTimer[] {\n    return Array.from(this.timers.values());\n  }\n\n  /**\n   * 清除所有指标\n   */\n  clearMetrics(): void {\n    this.metrics = [];\n    this.timers.clear();\n  }\n\n  /**\n   * 获取指标统计\n   */\n  getMetricsStats(): {\n    total: number;\n    byCategory: Record<string, number>;\n    byUnit: Record<string, number>;\n  } {\n    const stats = {\n      total: this.metrics.length,\n      byCategory: {} as Record<string, number>,\n      byUnit: {} as Record<string, number>,\n    };\n\n    this.metrics.forEach(metric => {\n      stats.byCategory[metric.category] = (stats.byCategory[metric.category] || 0) + 1;\n      stats.byUnit[metric.unit] = (stats.byUnit[metric.unit] || 0) + 1;\n    });\n\n    return stats;\n  }\n}\n\n/**\n * 全局自定义指标收集器实例\n */\nexport const globalCustomMetricsCollector = new CustomMetricsCollector();\n\n/**\n * 便捷函数\n */\nexport const metrics = {\n  record: (metric: Omit<CustomMetric, 'timestamp'>) => globalCustomMetricsCollector.recordMetric(metric),\n  startTimer: (name: string, tags?: Record<string, string | number>) => globalCustomMetricsCollector.startTimer(name, tags),\n  endTimer: (name: string, tags?: Record<string, string | number>) => globalCustomMetricsCollector.endTimer(name, tags),\n  count: (name: string, value?: number, tags?: Record<string, string | number>) => globalCustomMetricsCollector.recordCount(name, value, tags),\n  memory: () => globalCustomMetricsCollector.recordMemoryUsage(),\n  network: () => globalCustomMetricsCollector.recordNetworkMetrics(),\n  interaction: (action: string, element?: string, duration?: number) => globalCustomMetricsCollector.recordUserInteraction(action, element, duration),\n  pageLoad: () => globalCustomMetricsCollector.recordPageLoadMetrics(),\n  resources: () => globalCustomMetricsCollector.recordResourceMetrics(),\n};\n\nexport default CustomMetricsCollector;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/first-paint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/memory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/metrics.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 128. Maximum allowed is 120.","line":276,"column":1,"nodeType":"Program","messageId":"max","endLine":276,"endColumn":129}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 性能指标监控和收集\n */\nimport { logger } from '@/lib/logging/logger';\n\n/**\n * Web Vitals指标\n */\nexport interface WebVitals {\n  // Core Web Vitals\n  LCP: number | null; // Largest Contentful Paint\n  FID: number | null; // First Input Delay\n  CLS: number | null; // Cumulative Layout Shift\n\n  // Other Web Vitals\n  FCP: number | null; // First Contentful Paint\n  TTFB: number | null; // Time to First Byte\n  INP: number | null; // Interaction to Next Paint\n}\n\n/**\n * 自定义性能指标\n */\nexport interface CustomMetrics {\n  // 页面加载指标\n  domContentLoaded: number | null;\n  windowLoad: number | null;\n  firstPaint: number | null;\n\n  // 资源加载指标\n  totalResources: number;\n  failedResources: number;\n  totalResourceSize: number;\n\n  // 网络指标\n  connectionType: string | null;\n  effectiveType: string | null;\n  downlink: number | null;\n  rtt: number | null;\n\n  // 内存指标\n  usedJSHeapSize: number | null;\n  totalJSHeapSize: number | null;\n  jsHeapSizeLimit: number | null;\n\n  // 用户交互指标\n  timeToInteractive: number | null;\n  totalBlockingTime: number | null;\n}\n\n/**\n * 性能报告\n */\nexport interface PerformanceReport {\n  url: string;\n  timestamp: Date;\n  userAgent: string;\n  webVitals: WebVitals;\n  customMetrics: CustomMetrics;\n  resourceTiming: PerformanceResourceTiming[];\n  navigationTiming: PerformanceNavigationTiming | null;\n  metadata: {\n    sessionId: string;\n    userId?: string;\n    deviceType: 'mobile' | 'tablet' | 'desktop';\n    connectionType: string;\n    viewport: { width: number; height: number };\n  };\n}\n\n/**\n * 性能阈值配置\n */\nexport interface PerformanceThresholds {\n  LCP: { good: number; needsImprovement: number };\n  FID: { good: number; needsImprovement: number };\n  CLS: { good: number; needsImprovement: number };\n  FCP: { good: number; needsImprovement: number };\n  TTFB: { good: number; needsImprovement: number };\n}\n\n/**\n * 性能监控器\n */\nexport class PerformanceMonitor {\n  private webVitals: WebVitals = {\n    LCP: null,\n    FID: null,\n    CLS: null,\n    FCP: null,\n    TTFB: null,\n    INP: null,\n  };\n\n  private customMetrics: CustomMetrics = {\n    domContentLoaded: null,\n    windowLoad: null,\n    firstPaint: null,\n    totalResources: 0,\n    failedResources: 0,\n    totalResourceSize: 0,\n    connectionType: null,\n    effectiveType: null,\n    downlink: null,\n    rtt: null,\n    usedJSHeapSize: null,\n    totalJSHeapSize: null,\n    jsHeapSizeLimit: null,\n    timeToInteractive: null,\n    totalBlockingTime: null,\n  };\n\n  private thresholds: PerformanceThresholds = {\n    LCP: { good: 2500, needsImprovement: 4000 },\n    FID: { good: 100, needsImprovement: 300 },\n    CLS: { good: 0.1, needsImprovement: 0.25 },\n    FCP: { good: 1800, needsImprovement: 3000 },\n    TTFB: { good: 800, needsImprovement: 1800 },\n  };\n\n  private observers: PerformanceObserver[] = [];\n  private sessionId: string;\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.initializeMonitoring();\n  }\n\n  /**\n   * 初始化性能监控\n   */\n  private initializeMonitoring(): void {\n    // 监控Web Vitals\n    this.observeWebVitals();\n\n    // 监控资源加载\n    this.observeResourceTiming();\n\n    // 监控导航时间\n    this.observeNavigationTiming();\n\n    // 监控长任务\n    this.observeLongTasks();\n\n    // 监控布局偏移\n    this.observeLayoutShift();\n\n    // 监控内存使用\n    this.observeMemoryUsage();\n\n    // 监控网络信息\n    this.observeNetworkInformation();\n\n    logger.info('Performance monitoring initialized', { sessionId: this.sessionId });\n  }\n\n  /**\n   * 监控Web Vitals\n   */\n  private observeWebVitals(): void {\n    // LCP (Largest Contentful Paint)\n    if ('PerformanceObserver' in window) {\n      try {\n        const lcpObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          const lastEntry = entries[entries.length - 1] as any;\n          this.webVitals.LCP = Math.round(lastEntry.startTime);\n\n          logger.debug('LCP measured', { value: this.webVitals.LCP });\n        });\n\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n        this.observers.push(lcpObserver);\n      } catch (error) {\n        logger.warn('LCP observation failed', { error: error instanceof Error ? error.message : String(error) });\n      }\n\n      // FID (First Input Delay)\n      try {\n        const fidObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry: any) => {\n            this.webVitals.FID = Math.round(entry.processingStart - entry.startTime);\n            logger.debug('FID measured', { value: this.webVitals.FID });\n          });\n        });\n\n        fidObserver.observe({ entryTypes: ['first-input'] });\n        this.observers.push(fidObserver);\n      } catch (error) {\n        logger.warn('FID observation failed', { error: error instanceof Error ? error.message : String(error) });\n      }\n\n      // FCP (First Contentful Paint)\n      try {\n        const fcpObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          entries.forEach((entry) => {\n            if (entry.name === 'first-contentful-paint') {\n              this.webVitals.FCP = Math.round(entry.startTime);\n              logger.debug('FCP measured', { value: this.webVitals.FCP });\n            }\n          });\n        });\n\n        fcpObserver.observe({ entryTypes: ['paint'] });\n        this.observers.push(fcpObserver);\n      } catch (error) {\n        logger.warn('FCP observation failed', { error: error instanceof Error ? error.message : String(error) });\n      }\n    }\n\n    // 使用web-vitals库的降级方案\n    this.measureWebVitalsWithLibrary();\n  }\n\n  /**\n   * 使用web-vitals库测量（降级方案）\n   */\n  private measureWebVitalsWithLibrary(): void {\n    // 这里应该导入web-vitals库\n    // import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';\n\n    // 为了演示，我们模拟测量\n    setTimeout(() => {\n      if (this.webVitals.LCP === null) {\n        this.webVitals.LCP = Math.round(performance.now() + Math.random() * 1000);\n      }\n      if (this.webVitals.FCP === null) {\n        this.webVitals.FCP = Math.round(performance.now() * 0.6);\n      }\n      if (this.webVitals.TTFB === null) {\n        this.webVitals.TTFB = Math.round(performance.timing?.responseStart - performance.timing?.requestStart || 0);\n      }\n    }, 1000);\n  }\n\n  /**\n   * 监控资源加载时间\n   */\n  private observeResourceTiming(): void {\n    if ('PerformanceObserver' in window) {\n      try {\n        const resourceObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries() as PerformanceResourceTiming[];\n\n          entries.forEach((entry) => {\n            this.customMetrics.totalResources++;\n            this.customMetrics.totalResourceSize += entry.transferSize || 0;\n\n            // 检查失败的资源\n            if (entry.transferSize === 0 && entry.decodedBodySize === 0) {\n              this.customMetrics.failedResources++;\n            }\n          });\n        });\n\n        resourceObserver.observe({ entryTypes: ['resource'] });\n        this.observers.push(resourceObserver);\n      } catch (error) {\n        logger.warn('Resource timing observation failed', { error: error instanceof Error ? error.message : String(error) });\n      }\n    }\n  }\n\n  /**\n   * 监控导航时间\n   */\n  private observeNavigationTiming(): void {\n    if ('PerformanceObserver' in window) {\n      try {\n        const navigationObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries() as PerformanceNavigationTiming[];\n\n          entries.forEach((entry) => {\n            this.customMetrics.domContentLoaded = Math.round(entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart);\n            this.customMetrics.windowLoad = Math.round(entry.loadEventEnd - entry.loadEventStart);\n\n            // 计算TTFB\n            if (this.webVitals.TTFB === null) {\n              this.webVitals.TTFB = Math.round(entry.responseStart - entry.requestStart);\n            }\n          });\n        });\n\n        navigationObserver.observe({ entryTypes: ['navigation'] });\n        this.observers.push(navigationObserver);\n      } catch (error) {\n        logger.warn('Navigation timing observation failed', { error: error instanceof Error ? error.message : String(error) });\n      }\n    }\n  }\n\n  /**\n   * 监控长任务\n   */\n  private observeLongTasks(): void {\n    if ('PerformanceObserver' in window) {\n      try {\n        const longTaskObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          let totalBlockingTime = 0;\n\n          entries.forEach((entry) => {\n            // 长任务超过50ms的部分被认为是阻塞时间\n            if (entry.duration > 50) {\n              totalBlockingTime += entry.duration - 50;\n            }\n          });\n\n          this.customMetrics.totalBlockingTime = (this.customMetrics.totalBlockingTime || 0) + totalBlockingTime;\n        });\n\n        longTaskObserver.observe({ entryTypes: ['longtask'] });\n        this.observers.push(longTaskObserver);\n      } catch (error) {\n        logger.warn('Long task observation failed', { error: error instanceof Error ? error.message : String(error) });\n      }\n    }\n  }\n\n  /**\n   * 监控布局偏移\n   */\n  private observeLayoutShift(): void {\n    if ('PerformanceObserver' in window) {\n      try {\n        let clsValue = 0;\n        let sessionValue = 0;\n        let sessionEntries: any[] = [];\n\n        const clsObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n\n          entries.forEach((entry: any) => {\n            // 只计算非用户输入引起的布局偏移\n            if (!entry.hadRecentInput) {\n              const firstSessionEntry = sessionEntries[0];\n              const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n              // 如果条目与上一个条目的时间间隔小于1秒且与第一个条目的时间间隔小于5秒，则包含在当前会话中\n              if (sessionValue &&\n                  entry.startTime - lastSessionEntry.startTime < 1000 &&\n                  entry.startTime - firstSessionEntry.startTime < 5000) {\n                sessionValue += entry.value;\n                sessionEntries.push(entry);\n              } else {\n                sessionValue = entry.value;\n                sessionEntries = [entry];\n              }\n\n              // 如果当前会话值大于当前CLS值，则更新CLS\n              if (sessionValue > clsValue) {\n                clsValue = sessionValue;\n                this.webVitals.CLS = Math.round(clsValue * 10000) / 10000;\n              }\n            }\n          });\n        });\n\n        clsObserver.observe({ entryTypes: ['layout-shift'] });\n        this.observers.push(clsObserver);\n      } catch (error) {\n        logger.warn('Layout shift observation failed', { error: error instanceof Error ? error.message : String(error) });\n      }\n    }\n  }\n\n  /**\n   * 监控内存使用\n   */\n  private observeMemoryUsage(): void {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      this.customMetrics.usedJSHeapSize = memory.usedJSHeapSize;\n      this.customMetrics.totalJSHeapSize = memory.totalJSHeapSize;\n      this.customMetrics.jsHeapSizeLimit = memory.jsHeapSizeLimit;\n    }\n  }\n\n  /**\n   * 监控网络信息\n   */\n  private observeNetworkInformation(): void {\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      this.customMetrics.connectionType = connection.type || null;\n      this.customMetrics.effectiveType = connection.effectiveType || null;\n      this.customMetrics.downlink = connection.downlink || null;\n      this.customMetrics.rtt = connection.rtt || null;\n    }\n  }\n\n  /**\n   * 获取性能报告\n   */\n  getPerformanceReport(): PerformanceReport {\n    return {\n      url: window.location.href,\n      timestamp: new Date(),\n      userAgent: navigator.userAgent,\n      webVitals: { ...this.webVitals },\n      customMetrics: { ...this.customMetrics },\n      resourceTiming: performance.getEntriesByType('resource') as PerformanceResourceTiming[],\n      navigationTiming: performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming || null,\n      metadata: {\n        sessionId: this.sessionId,\n        deviceType: this.getDeviceType(),\n        connectionType: this.customMetrics.effectiveType || 'unknown',\n        viewport: {\n          width: window.innerWidth,\n          height: window.innerHeight,\n        },\n      },\n    };\n  }\n\n  /**\n   * 评估性能等级\n   */\n  evaluatePerformance(): {\n    overall: 'good' | 'needs-improvement' | 'poor';\n    scores: Record<keyof WebVitals, 'good' | 'needs-improvement' | 'poor' | 'unknown'>;\n    recommendations: string[];\n  } {\n    const scores: Record<keyof WebVitals, 'good' | 'needs-improvement' | 'poor' | 'unknown'> = {\n      LCP: 'unknown',\n      FID: 'unknown',\n      CLS: 'unknown',\n      FCP: 'unknown',\n      TTFB: 'unknown',\n      INP: 'unknown',\n    };\n\n    const recommendations: string[] = [];\n\n    // 评估LCP\n    if (this.webVitals.LCP !== null) {\n      if (this.webVitals.LCP <= this.thresholds.LCP.good) {\n        scores.LCP = 'good';\n      } else if (this.webVitals.LCP <= this.thresholds.LCP.needsImprovement) {\n        scores.LCP = 'needs-improvement';\n        recommendations.push('优化最大内容绘制时间：压缩图片、使用CDN、优化服务器响应时间');\n      } else {\n        scores.LCP = 'poor';\n        recommendations.push('最大内容绘制时间过长：检查关键资源加载、优化渲染路径');\n      }\n    }\n\n    // 评估FID\n    if (this.webVitals.FID !== null) {\n      if (this.webVitals.FID <= this.thresholds.FID.good) {\n        scores.FID = 'good';\n      } else if (this.webVitals.FID <= this.thresholds.FID.needsImprovement) {\n        scores.FID = 'needs-improvement';\n        recommendations.push('优化首次输入延迟：减少JavaScript执行时间、使用Web Workers');\n      } else {\n        scores.FID = 'poor';\n        recommendations.push('首次输入延迟过长：分解长任务、延迟非关键JavaScript');\n      }\n    }\n\n    // 评估CLS\n    if (this.webVitals.CLS !== null) {\n      if (this.webVitals.CLS <= this.thresholds.CLS.good) {\n        scores.CLS = 'good';\n      } else if (this.webVitals.CLS <= this.thresholds.CLS.needsImprovement) {\n        scores.CLS = 'needs-improvement';\n        recommendations.push('优化累积布局偏移：为图片和广告预留空间、避免动态插入内容');\n      } else {\n        scores.CLS = 'poor';\n        recommendations.push('累积布局偏移过大：检查动态内容加载、优化字体加载');\n      }\n    }\n\n    // 评估FCP\n    if (this.webVitals.FCP !== null) {\n      if (this.webVitals.FCP <= this.thresholds.FCP.good) {\n        scores.FCP = 'good';\n      } else if (this.webVitals.FCP <= this.thresholds.FCP.needsImprovement) {\n        scores.FCP = 'needs-improvement';\n        recommendations.push('优化首次内容绘制：内联关键CSS、优化字体加载');\n      } else {\n        scores.FCP = 'poor';\n        recommendations.push('首次内容绘制过慢：减少渲染阻塞资源、优化关键渲染路径');\n      }\n    }\n\n    // 评估TTFB\n    if (this.webVitals.TTFB !== null) {\n      if (this.webVitals.TTFB <= this.thresholds.TTFB.good) {\n        scores.TTFB = 'good';\n      } else if (this.webVitals.TTFB <= this.thresholds.TTFB.needsImprovement) {\n        scores.TTFB = 'needs-improvement';\n        recommendations.push('优化首字节时间：使用CDN、优化服务器配置、启用缓存');\n      } else {\n        scores.TTFB = 'poor';\n        recommendations.push('首字节时间过长：检查服务器性能、数据库查询优化');\n      }\n    }\n\n    // 计算总体评分\n    const scoreValues = Object.values(scores).filter(score => score !== 'unknown');\n    const goodCount = scoreValues.filter(score => score === 'good').length;\n    const poorCount = scoreValues.filter(score => score === 'poor').length;\n\n    let overall: 'good' | 'needs-improvement' | 'poor';\n    if (poorCount > 0) {\n      overall = 'poor';\n    } else if (goodCount === scoreValues.length) {\n      overall = 'good';\n    } else {\n      overall = 'needs-improvement';\n    }\n\n    return { overall, scores, recommendations };\n  }\n\n  /**\n   * 发送性能报告\n   */\n  async sendReport(endpoint: string): Promise<void> {\n    try {\n      const report = this.getPerformanceReport();\n\n      await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(report),\n      });\n\n      logger.info('Performance report sent', { sessionId: this.sessionId });\n    } catch (error) {\n      logger.error('Failed to send performance report', error instanceof Error ? error : new Error(String(error)));\n    }\n  }\n\n  /**\n   * 清理监控器\n   */\n  cleanup(): void {\n    this.observers.forEach(observer => {\n      observer.disconnect();\n    });\n    this.observers = [];\n\n    logger.info('Performance monitor cleaned up', { sessionId: this.sessionId });\n  }\n\n  /**\n   * 生成会话ID\n   */\n  private generateSessionId(): string {\n    return `perf_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n  }\n\n  /**\n   * 获取设备类型\n   */\n  private getDeviceType(): 'mobile' | 'tablet' | 'desktop' {\n    const width = window.innerWidth;\n\n    if (width < 768) {\n      return 'mobile';\n    } else if (width < 1024) {\n      return 'tablet';\n    } else {\n      return 'desktop';\n    }\n  }\n}\n\n/**\n * 性能工具函数\n */\nexport class PerformanceUtils {\n  /**\n   * 测量函数执行时间\n   */\n  static measureFunction<T>(fn: () => T, name?: string): { result: T; duration: number } {\n    const start = performance.now();\n    const result = fn();\n    const duration = performance.now() - start;\n\n    if (name) {\n      logger.debug(`Function ${name} executed`, { duration });\n    }\n\n    return { result, duration };\n  }\n\n  /**\n   * 测量异步函数执行时间\n   */\n  static async measureAsyncFunction<T>(fn: () => Promise<T>, name?: string): Promise<{ result: T; duration: number }> {\n    const start = performance.now();\n    const result = await fn();\n    const duration = performance.now() - start;\n\n    if (name) {\n      logger.debug(`Async function ${name} executed`, { duration });\n    }\n\n    return { result, duration };\n  }\n\n  /**\n   * 创建性能标记\n   */\n  static mark(name: string): void {\n    if ('performance' in window && 'mark' in performance) {\n      performance.mark(name);\n    }\n  }\n\n  /**\n   * 测量两个标记之间的时间\n   */\n  static measure(name: string, startMark: string, endMark: string): number | null {\n    if ('performance' in window && 'measure' in performance) {\n      try {\n        performance.measure(name, startMark, endMark);\n        const entries = performance.getEntriesByName(name, 'measure');\n        return entries.length > 0 ? entries[entries.length - 1].duration : null;\n      } catch (error) {\n        logger.warn('Performance measure failed', { name, startMark, endMark, error: error instanceof Error ? error.message : String(error) });\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 获取资源加载时间\n   */\n  static getResourceTiming(url: string): PerformanceResourceTiming | null {\n    const entries = performance.getEntriesByName(url, 'resource') as PerformanceResourceTiming[];\n    return entries.length > 0 ? entries[entries.length - 1] : null;\n  }\n\n  /**\n   * 检查浏览器支持\n   */\n  static checkSupport(): {\n    performanceObserver: boolean;\n    navigationTiming: boolean;\n    resourceTiming: boolean;\n    userTiming: boolean;\n    memoryInfo: boolean;\n    networkInformation: boolean;\n  } {\n    return {\n      performanceObserver: 'PerformanceObserver' in window,\n      navigationTiming: 'PerformanceNavigationTiming' in window,\n      resourceTiming: 'PerformanceResourceTiming' in window,\n      userTiming: 'performance' in window && 'mark' in performance,\n      memoryInfo: 'memory' in performance,\n      networkInformation: 'connection' in navigator,\n    };\n  }\n}\n\nexport default PerformanceMonitor;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/preload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/recommendations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/tuning.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 134. Maximum allowed is 120.","line":621,"column":1,"nodeType":"Program","messageId":"max","endLine":621,"endColumn":135}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 性能调优工具\n * 基于测试结果自动调优系统性能参数\n */\n\ninterface PerformanceMetrics {\n  lcp: number;\n  fcp: number;\n  cls: number;\n  ttfb: number;\n  loadTime: number;\n  memoryUsage: number;\n  cacheHitRate: number;\n  networkRequests: number;\n  totalBytes: number;\n}\n\ninterface TuningRecommendation {\n  category: 'cache' | 'network' | 'rendering' | 'memory' | 'database';\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  implementation: string;\n  expectedImprovement: string;\n  effort: 'low' | 'medium' | 'high';\n  code?: string;\n}\n\ninterface TuningConfig {\n  cache: {\n    ttl: { [key: string]: number };\n    maxSize: { [key: string]: number };\n    strategy: { [key: string]: string };\n  };\n  network: {\n    preloadThreshold: number;\n    compressionLevel: number;\n    cdnEnabled: boolean;\n  };\n  rendering: {\n    virtualScrollThreshold: number;\n    lazyLoadOffset: number;\n    imageQuality: number;\n  };\n  memory: {\n    gcThreshold: number;\n    maxHeapSize: number;\n    cleanupInterval: number;\n  };\n}\n\nexport class PerformanceTuner {\n  private currentConfig: TuningConfig;\n  private baselineMetrics: PerformanceMetrics | null = null;\n\n  constructor() {\n    this.currentConfig = this.getDefaultConfig();\n  }\n\n  private getDefaultConfig(): TuningConfig {\n    return {\n      cache: {\n        ttl: {\n          user: 3600,      // 1小时\n          work: 1800,      // 30分钟\n          ranking: 300,    // 5分钟\n          graph: 7200,      // 2小时\n        },\n        maxSize: {\n          user: 1000,\n          work: 5000,\n          ranking: 100,\n          graph: 500,\n        },\n        strategy: {\n          user: 'lru',\n          work: 'lfu',\n          ranking: 'ttl',\n          graph: 'lru',\n        },\n      },\n      network: {\n        preloadThreshold: 0.7,\n        compressionLevel: 6,\n        cdnEnabled: true,\n      },\n      rendering: {\n        virtualScrollThreshold: 100,\n        lazyLoadOffset: 200,\n        imageQuality: 80,\n      },\n      memory: {\n        gcThreshold: 100 * 1024 * 1024, // 100MB\n        maxHeapSize: 512 * 1024 * 1024, // 512MB\n        cleanupInterval: 60000, // 1分钟\n      },\n    };\n  }\n\n  setBaseline(metrics: PerformanceMetrics): void {\n    this.baselineMetrics = { ...metrics };\n  }\n\n  analyzePerformance(metrics: PerformanceMetrics): TuningRecommendation[] {\n    const recommendations: TuningRecommendation[] = [];\n\n    // 分析LCP性能\n    if (metrics.lcp > 2500) {\n      recommendations.push(...this.analyzeLCP(metrics));\n    }\n\n    // 分析FCP性能\n    if (metrics.fcp > 1800) {\n      recommendations.push(...this.analyzeFCP(metrics));\n    }\n\n    // 分析CLS稳定性\n    if (metrics.cls > 0.1) {\n      recommendations.push(...this.analyzeCLS(metrics));\n    }\n\n    // 分析TTFB响应时间\n    if (metrics.ttfb > 800) {\n      recommendations.push(...this.analyzeTTFB(metrics));\n    }\n\n    // 分析缓存效率\n    if (metrics.cacheHitRate < 0.9) {\n      recommendations.push(...this.analyzeCache(metrics));\n    }\n\n    // 分析内存使用\n    if (metrics.memoryUsage > 150 * 1024 * 1024) {\n      recommendations.push(...this.analyzeMemory(metrics));\n    }\n\n    // 分析网络性能\n    if (metrics.networkRequests > 50 || metrics.totalBytes > 3 * 1024 * 1024) {\n      recommendations.push(...this.analyzeNetwork(metrics));\n    }\n\n    return this.prioritizeRecommendations(recommendations);\n  }\n\n  private analyzeLCP(metrics: PerformanceMetrics): TuningRecommendation[] {\n    const recommendations: TuningRecommendation[] = [];\n\n    if (metrics.lcp > 4000) {\n      recommendations.push({\n        category: 'rendering',\n        priority: 'high',\n        title: '优化最大内容绘制 (LCP)',\n        description: 'LCP超过4秒，严重影响用户体验',\n        implementation: '实现关键资源预加载和图片优化',\n        expectedImprovement: '减少LCP 30-50%',\n        effort: 'medium',\n        code: `\n// 关键资源预加载\n<link rel=\"preload\" href=\"/critical.css\" as=\"style\">\n<link rel=\"preload\" href=\"/hero-image.webp\" as=\"image\">\n\n// 图片优化\nconst optimizedImage = {\n  src: '/image.webp',\n  fallback: '/image.jpg',\n  loading: 'eager', // 关键图片立即加载\n  sizes: '(max-width: 768px) 100vw, 50vw'\n};`,\n      });\n    } else if (metrics.lcp > 2500) {\n      recommendations.push({\n        category: 'cache',\n        priority: 'medium',\n        title: '增强缓存策略',\n        description: 'LCP可通过更好的缓存策略进一步优化',\n        implementation: '调整缓存TTL和预热策略',\n        expectedImprovement: '减少LCP 15-25%',\n        effort: 'low',\n        code: `\n// 调整缓存配置\nconst cacheConfig = {\n  staticAssets: { ttl: 31536000 }, // 1年\n  apiResponses: { ttl: 300 },      // 5分钟\n  userContent: { ttl: 1800 }       // 30分钟\n};`,\n      });\n    }\n\n    return recommendations;\n  }\n\n  private analyzeFCP(metrics: PerformanceMetrics): TuningRecommendation[] {\n    const recommendations: TuningRecommendation[] = [];\n\n    if (metrics.fcp > 2500) {\n      recommendations.push({\n        category: 'network',\n        priority: 'high',\n        title: '优化首次内容绘制 (FCP)',\n        description: 'FCP过慢影响用户感知性能',\n        implementation: '减少阻塞渲染的资源',\n        expectedImprovement: '减少FCP 25-40%',\n        effort: 'medium',\n        code: `\n// 内联关键CSS\n<style>\n  /* 关键路径CSS */\n  .hero { display: block; }\n</style>\n\n// 异步加载非关键CSS\n<link rel=\"preload\" href=\"/non-critical.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n<noscript><link rel=\"stylesheet\" href=\"/non-critical.css\"></noscript>`,\n      });\n    }\n\n    return recommendations;\n  }\n\n  private analyzeCLS(metrics: PerformanceMetrics): TuningRecommendation[] {\n    const recommendations: TuningRecommendation[] = [];\n\n    if (metrics.cls > 0.25) {\n      recommendations.push({\n        category: 'rendering',\n        priority: 'high',\n        title: '修复累积布局偏移 (CLS)',\n        description: 'CLS过高导致用户体验不佳',\n        implementation: '为动态内容预留空间',\n        expectedImprovement: '减少CLS 60-80%',\n        effort: 'medium',\n        code: `\n// 为图片预留空间\n.image-container {\n  aspect-ratio: 16 / 9;\n  background: #f0f0f0;\n}\n\n// 为动态内容预留空间\n.dynamic-content {\n  min-height: 200px;\n  transition: height 0.3s ease;\n}`,\n      });\n    } else if (metrics.cls > 0.1) {\n      recommendations.push({\n        category: 'rendering',\n        priority: 'medium',\n        title: '进一步优化布局稳定性',\n        description: 'CLS可以进一步优化以提升用户体验',\n        implementation: '优化字体加载和动画',\n        expectedImprovement: '减少CLS 20-30%',\n        effort: 'low',\n        code: `\n// 字体显示优化\n@font-face {\n  font-family: 'CustomFont';\n  src: url('/font.woff2') format('woff2');\n  font-display: swap;\n}\n\n// 避免布局抖动的动画\n.smooth-animation {\n  transform: translateY(0);\n  transition: transform 0.3s ease;\n}`,\n      });\n    }\n\n    return recommendations;\n  }\n\n  private analyzeTTFB(metrics: PerformanceMetrics): TuningRecommendation[] {\n    const recommendations: TuningRecommendation[] = [];\n\n    if (metrics.ttfb > 1200) {\n      recommendations.push({\n        category: 'database',\n        priority: 'high',\n        title: '优化服务器响应时间 (TTFB)',\n        description: 'TTFB过高表明服务器性能需要优化',\n        implementation: '优化数据库查询和服务器配置',\n        expectedImprovement: '减少TTFB 40-60%',\n        effort: 'high',\n        code: `\n// 数据库查询优化\nconst optimizedQuery = {\n  // 使用索引\n  index: { userId: 1, createdAt: -1 },\n  // 限制返回字段\n  projection: { title: 1, summary: 1, createdAt: 1 },\n  // 分页查询\n  limit: 20,\n  skip: page * 20\n};\n\n// 连接池优化\nconst dbConfig = {\n  maxPoolSize: 10,\n  minPoolSize: 2,\n  maxIdleTimeMS: 30000\n};`,\n      });\n    } else if (metrics.ttfb > 800) {\n      recommendations.push({\n        category: 'cache',\n        priority: 'medium',\n        title: '增强服务端缓存',\n        description: 'TTFB可通过更好的服务端缓存优化',\n        implementation: '实现多层缓存策略',\n        expectedImprovement: '减少TTFB 20-35%',\n        effort: 'medium',\n        code: `\n// 多层缓存策略\nconst cacheStrategy = {\n  L1: 'memory',    // 内存缓存\n  L2: 'redis',     // Redis缓存\n  L3: 'database'   // 数据库\n};\n\n// API响应缓存\napp.get('/api/data', cache('5 minutes'), handler);`,\n      });\n    }\n\n    return recommendations;\n  }\n\n  private analyzeCache(metrics: PerformanceMetrics): TuningRecommendation[] {\n    const recommendations: TuningRecommendation[] = [];\n\n    if (metrics.cacheHitRate < 0.8) {\n      recommendations.push({\n        category: 'cache',\n        priority: 'high',\n        title: '提升缓存命中率',\n        description: `当前缓存命中率${(metrics.cacheHitRate * 100).toFixed(1)}%，需要优化`,\n        implementation: '调整缓存策略和预热机制',\n        expectedImprovement: '提升命中率至90%+',\n        effort: 'medium',\n        code: `\n// 智能缓存预热\nconst warmupStrategy = {\n  popular: { preload: true, ttl: 3600 },\n  recent: { preload: true, ttl: 1800 },\n  trending: { preload: true, ttl: 300 }\n};\n\n// 缓存策略优化\nconst cachePolicy = {\n  user: { strategy: 'lru', size: 2000, ttl: 7200 },\n  content: { strategy: 'lfu', size: 5000, ttl: 3600 }\n};`,\n      });\n    }\n\n    return recommendations;\n  }\n\n  private analyzeMemory(metrics: PerformanceMetrics): TuningRecommendation[] {\n    const recommendations: TuningRecommendation[] = [];\n\n    const memoryMB = metrics.memoryUsage / (1024 * 1024);\n\n    if (memoryMB > 200) {\n      recommendations.push({\n        category: 'memory',\n        priority: 'high',\n        title: '优化内存使用',\n        description: `内存使用${memoryMB.toFixed(1)}MB，需要优化`,\n        implementation: '实现内存清理和对象池',\n        expectedImprovement: '减少内存使用30-50%',\n        effort: 'medium',\n        code: `\n// 对象池模式\nclass ObjectPool {\n  private pool: any[] = [];\n  \n  acquire() {\n    return this.pool.pop() || (this.create as any)();\n  }\n  \n  release(obj: any) {\n    this.reset(obj);\n    this.pool.push(obj);\n  }\n}\n\n// 内存清理\nuseEffect(() => {\n  const cleanup = () => {\n    // 清理大对象引用\n    heavyDataRef.current = null;\n    // 清理事件监听器\n    window.removeEventListener('resize', handler);\n  };\n  \n  return cleanup;\n}, []);`,\n      });\n    }\n\n    return recommendations;\n  }\n\n  private analyzeNetwork(metrics: PerformanceMetrics): TuningRecommendation[] {\n    const recommendations: TuningRecommendation[] = [];\n\n    if (metrics.networkRequests > 50) {\n      recommendations.push({\n        category: 'network',\n        priority: 'medium',\n        title: '减少网络请求数量',\n        description: `当前${metrics.networkRequests}个请求，建议合并优化`,\n        implementation: '合并请求和资源打包',\n        expectedImprovement: '减少请求数30-50%',\n        effort: 'medium',\n        code: `\n// 请求合并\nconst batchAPI = {\n  async fetchMultiple(requests: string[]) {\n    return fetch('/api/batch', {\n      method: 'POST',\n      body: JSON.stringify({ requests })\n    });\n  }\n};\n\n// 资源打包\nconst bundleConfig = {\n  splitChunks: {\n    chunks: 'all',\n    cacheGroups: {\n      vendor: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        name: 'vendors',\n        chunks: 'all'\n      }\n    }\n  }\n};`,\n      });\n    }\n\n    if (metrics.totalBytes > 3 * 1024 * 1024) {\n      recommendations.push({\n        category: 'network',\n        priority: 'medium',\n        title: '减少传输数据量',\n        description: `传输${(metrics.totalBytes / 1024 / 1024).toFixed(1)}MB数据，建议压缩优化`,\n        implementation: '启用压缩和优化资源',\n        expectedImprovement: '减少传输量40-60%',\n        effort: 'low',\n        code: `\n// Gzip压缩\napp.use(compression({\n  level: 6,\n  threshold: 1024,\n  filter: (req, res) => {\n    return compression.filter(req, res);\n  }\n}));\n\n// 图片优化\nconst imageOptimization = {\n  format: 'webp',\n  quality: 80,\n  progressive: true,\n  sizes: [320, 640, 1024, 1920]\n};`,\n      });\n    }\n\n    return recommendations;\n  }\n\n  private prioritizeRecommendations(recommendations: TuningRecommendation[]): TuningRecommendation[] {\n    return recommendations.sort((a, b) => {\n      // 优先级排序\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];\n\n      if (priorityDiff !== 0) return priorityDiff;\n\n      // 努力程度排序（低努力优先）\n      const effortOrder = { low: 3, medium: 2, high: 1 };\n      return effortOrder[b.effort] - effortOrder[a.effort];\n    });\n  }\n\n  generateTuningPlan(metrics: PerformanceMetrics): {\n    recommendations: TuningRecommendation[];\n    estimatedImprovement: string;\n    implementationOrder: string[];\n    timeline: string;\n  } {\n    const recommendations = this.analyzePerformance(metrics);\n\n    // 估算整体改进效果\n    const highPriorityCount = recommendations.filter(r => r.priority === 'high').length;\n    const mediumPriorityCount = recommendations.filter(r => r.priority === 'medium').length;\n\n    let estimatedImprovement = '10-20%';\n    if (highPriorityCount >= 3) {\n      estimatedImprovement = '40-60%';\n    } else if (highPriorityCount >= 1 || mediumPriorityCount >= 3) {\n      estimatedImprovement = '25-40%';\n    }\n\n    // 实施顺序\n    const implementationOrder = recommendations\n      .filter(r => r.priority === 'high')\n      .map(r => r.title)\n      .concat(\n        recommendations\n          .filter(r => r.priority === 'medium' && r.effort === 'low')\n          .map(r => r.title),\n      );\n\n    // 时间线估算\n    const totalEffort = recommendations.reduce((sum, r) => {\n      const effortPoints = { low: 1, medium: 3, high: 7 };\n      return sum + effortPoints[r.effort];\n    }, 0);\n\n    let timeline = '1-2周';\n    if (totalEffort > 20) {\n      timeline = '1-2月';\n    } else if (totalEffort > 10) {\n      timeline = '3-4周';\n    }\n\n    return {\n      recommendations,\n      estimatedImprovement,\n      implementationOrder,\n      timeline,\n    };\n  }\n\n  applyAutoTuning(metrics: PerformanceMetrics): TuningConfig {\n    const newConfig = { ...this.currentConfig };\n\n    // 自动调整缓存TTL\n    if (metrics.cacheHitRate < 0.85) {\n      // 增加TTL以提高命中率\n      Object.keys(newConfig.cache.ttl).forEach(key => {\n        newConfig.cache.ttl[key] *= 1.5;\n      });\n    }\n\n    // 自动调整虚拟滚动阈值\n    if (metrics.memoryUsage > 100 * 1024 * 1024) {\n      // 降低阈值以减少内存使用\n      newConfig.rendering.virtualScrollThreshold = Math.max(50,\n        newConfig.rendering.virtualScrollThreshold * 0.8,\n      );\n    }\n\n    // 自动调整图片质量\n    if (metrics.totalBytes > 2 * 1024 * 1024) {\n      // 降低图片质量以减少传输量\n      newConfig.rendering.imageQuality = Math.max(60,\n        newConfig.rendering.imageQuality - 10,\n      );\n    }\n\n    // 自动调整预加载阈值\n    if (metrics.lcp > 3000) {\n      // 提高预加载阈值以改善LCP\n      newConfig.network.preloadThreshold = Math.min(0.9,\n        newConfig.network.preloadThreshold + 0.1,\n      );\n    }\n\n    this.currentConfig = newConfig;\n    return newConfig;\n  }\n\n  exportConfig(): string {\n    return JSON.stringify(this.currentConfig, null, 2);\n  }\n\n  importConfig(configJson: string): void {\n    try {\n      this.currentConfig = JSON.parse(configJson);\n    } catch (error) {\n      throw new Error('Invalid configuration JSON');\n    }\n  }\n\n  compareWithBaseline(currentMetrics: PerformanceMetrics): {\n    improvements: { [key: string]: number };\n    regressions: { [key: string]: number };\n    summary: string;\n  } {\n    if (!this.baselineMetrics) {\n      throw new Error('No baseline metrics set');\n    }\n\n    const improvements: { [key: string]: number } = {};\n    const regressions: { [key: string]: number } = {};\n\n    const metrics = [\n      'lcp', 'fcp', 'cls', 'ttfb', 'loadTime', 'memoryUsage',\n    ] as const;\n\n    metrics.forEach(metric => {\n      const baseline = this.baselineMetrics![metric];\n      const current = currentMetrics[metric];\n      const change = ((baseline - current) / baseline) * 100;\n\n      if (change > 5) {\n        improvements[metric] = change;\n      } else if (change < -5) {\n        regressions[metric] = Math.abs(change);\n      }\n    });\n\n    // 缓存命中率特殊处理（越高越好）\n    const cacheChange = ((currentMetrics.cacheHitRate - this.baselineMetrics.cacheHitRate) / this.baselineMetrics.cacheHitRate) * 100;\n    if (cacheChange > 5) {\n      improvements.cacheHitRate = cacheChange;\n    } else if (cacheChange < -5) {\n      regressions.cacheHitRate = Math.abs(cacheChange);\n    }\n\n    const improvementCount = Object.keys(improvements).length;\n    const regressionCount = Object.keys(regressions).length;\n\n    let summary = '';\n    if (improvementCount > regressionCount) {\n      summary = `性能整体提升，${improvementCount}项指标改善，${regressionCount}项指标下降`;\n    } else if (regressionCount > improvementCount) {\n      summary = `性能有所下降，${regressionCount}项指标下降，${improvementCount}项指标改善`;\n    } else {\n      summary = `性能基本持平，${improvementCount}项指标改善，${regressionCount}项指标下降`;\n    }\n\n    return { improvements, regressions, summary };\n  }\n}\n\n// 全局性能调优器实例\nexport const globalPerformanceTuner = new PerformanceTuner();\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/performance/web-vitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/pwa/sw-register.ts","messages":[{"ruleId":"no-alert","severity":1,"message":"Unexpected confirm.","line":27,"column":17,"nodeType":"CallExpression","messageId":"unexpected","endLine":27,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Service Worker注册和管理\n */\n\nexport const registerServiceWorker = async () => {\n  if (typeof window === 'undefined' || !('serviceWorker' in navigator)) {\n    return;\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.register('/sw.js', {\n      scope: '/',\n    });\n\n    console.log('Service Worker registered successfully:', registration);\n\n    // 监听更新\n    registration.addEventListener('updatefound', () => {\n      const newWorker = registration.installing;\n      if (newWorker) {\n        newWorker.addEventListener('statechange', () => {\n          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n            // 新版本可用\n            console.log('New version available');\n\n            // 可以在这里显示更新提示\n            if (window.confirm('发现新版本，是否立即更新？')) {\n              newWorker.postMessage({ type: 'SKIP_WAITING' });\n              window.location.reload();\n            }\n          }\n        });\n      }\n    });\n\n    // 监听控制器变化\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      console.log('Service Worker controller changed');\n      window.location.reload();\n    });\n\n    return registration;\n  } catch (error) {\n    console.error('Service Worker registration failed:', error);\n  }\n};\n\n// 注销Service Worker\nexport const unregisterServiceWorker = async () => {\n  if (typeof window === 'undefined' || !('serviceWorker' in navigator)) {\n    return;\n  }\n\n  try {\n    const registration = await navigator.serviceWorker.getRegistration();\n    if (registration) {\n      await registration.unregister();\n      console.log('Service Worker unregistered');\n    }\n  } catch (error) {\n    console.error('Service Worker unregistration failed:', error);\n  }\n};\n\n// 发送消息给Service Worker\nexport const sendMessageToSW = (message: any) => {\n  if (typeof window === 'undefined' || !navigator.serviceWorker.controller) {\n    return;\n  }\n\n  navigator.serviceWorker.controller.postMessage(message);\n};\n\n// 存储离线操作\nexport const storeOfflineOperation = (operation: {\n  type: string;\n  url: string;\n  method: string;\n  headers?: Record<string, string>;\n  body?: string;\n}) => {\n  sendMessageToSW({\n    type: 'STORE_OFFLINE_OPERATION',\n    operation,\n  });\n};\n\n// 检查网络状态\nexport const isOnline = () => {\n  return typeof window !== 'undefined' ? navigator.onLine : true;\n};\n\n// 网络状态监听器\nexport const addNetworkListener = (callback: (isOnline: boolean) => void) => {\n  if (typeof window === 'undefined') return;\n\n  const handleOnline = () => callback(true);\n  const handleOffline = () => callback(false);\n\n  window.addEventListener('online', handleOnline);\n  window.addEventListener('offline', handleOffline);\n\n  return () => {\n    window.removeEventListener('online', handleOnline);\n    window.removeEventListener('offline', handleOffline);\n  };\n};\n\n// 请求通知权限\nexport const requestNotificationPermission = async () => {\n  if (typeof window === 'undefined' || !('Notification' in window)) {\n    return 'not-supported';\n  }\n\n  if (Notification.permission === 'granted') {\n    return 'granted';\n  }\n\n  if (Notification.permission === 'denied') {\n    return 'denied';\n  }\n\n  const permission = await Notification.requestPermission();\n  return permission;\n};\n\n// 显示本地通知\nexport const showNotification = (title: string, options?: NotificationOptions) => {\n  if (typeof window === 'undefined' || Notification.permission !== 'granted') {\n    return;\n  }\n\n  return new Notification(title, {\n    icon: '/icons/icon-192x192.svg',\n    badge: '/icons/icon.svg',\n    ...options,\n  });\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/queryClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/quota/quota-checker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/quota/quotaManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/recovery/advanced-retry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/recovery/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/recovery/recovery-strategies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/redis.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign instance to a variable before exporting as module default","line":163,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":163,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Redis from 'ioredis';\n\nconst REDIS_URL = process.env.REDIS_URL || 'redis://localhost:6379';\n\nlet redis: Redis | null = null;\n\n/**\n * Get Redis client instance with connection pooling\n */\nexport function getRedisClient(): Redis {\n  if (!redis) {\n    redis = new Redis(REDIS_URL, {\n      enableReadyCheck: false,\n      maxRetriesPerRequest: 3,\n      lazyConnect: true,\n      keepAlive: 30000,\n      connectTimeout: 10000,\n      commandTimeout: 5000,\n    });\n\n    redis.on('connect', () => {\n      console.log('✅ Redis connected successfully');\n    });\n\n    redis.on('error', (error) => {\n      console.error('❌ Redis connection error:', error);\n    });\n\n    redis.on('close', () => {\n      console.log('🔌 Redis connection closed');\n    });\n  }\n\n  return redis;\n}\n\n/**\n * Disconnect from Redis\n */\nexport async function disconnectRedis() {\n  if (redis) {\n    await redis.quit();\n    redis = null;\n    console.log('✅ Redis disconnected');\n  }\n}\n\n/**\n * Check Redis connection status\n */\nexport async function getRedisStatus() {\n  try {\n    const client = getRedisClient();\n    const pong = await client.ping();\n    return {\n      isConnected: pong === 'PONG',\n      status: client.status,\n      url: REDIS_URL.replace(/\\/\\/.*@/, '//***@'), // Hide credentials\n    };\n  } catch (error) {\n    return {\n      isConnected: false,\n      status: 'error',\n      error: error instanceof Error ? error.message : 'Unknown error',\n    };\n  }\n}\n\n/**\n * Redis utility functions\n */\nexport class RedisService {\n  private client: Redis;\n\n  constructor() {\n    this.client = getRedisClient();\n  }\n\n  /**\n   * Set a key-value pair with optional expiration\n   */\n  async set(key: string, value: string | object, ttlSeconds?: number): Promise<void> {\n    const serializedValue = typeof value === 'object' ? JSON.stringify(value) : value;\n\n    if (ttlSeconds) {\n      await this.client.setex(key, ttlSeconds, serializedValue);\n    } else {\n      await this.client.set(key, serializedValue);\n    }\n  }\n\n  /**\n   * Get a value by key\n   */\n  async get(key: string): Promise<string | null> {\n    return await this.client.get(key);\n  }\n\n  /**\n   * Get and parse JSON value\n   */\n  async getJSON<T>(key: string): Promise<T | null> {\n    const value = await this.get(key);\n    if (!value) return null;\n\n    try {\n      return JSON.parse(value) as T;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Delete a key\n   */\n  async del(key: string): Promise<number> {\n    return await this.client.del(key);\n  }\n\n  /**\n   * Check if key exists\n   */\n  async exists(key: string): Promise<boolean> {\n    const result = await this.client.exists(key);\n    return result === 1;\n  }\n\n  /**\n   * Increment a counter\n   */\n  async incr(key: string): Promise<number> {\n    return await this.client.incr(key);\n  }\n\n  /**\n   * Set expiration for a key\n   */\n  async expire(key: string, seconds: number): Promise<boolean> {\n    const result = await this.client.expire(key, seconds);\n    return result === 1;\n  }\n\n  /**\n   * Get Redis connection status\n   */\n  async getStatus() {\n    try {\n      const pong = await this.client.ping();\n      return {\n        isConnected: pong === 'PONG',\n        status: this.client.status,\n      };\n    } catch (error) {\n      return {\n        isConnected: false,\n        status: 'error',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n}\n\nexport default new RedisService();\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/responsive/breakpoints.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/retry/circuitBreaker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/retry/exponentialBackoff.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/retry/retryPolicy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/aiContentFilter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/backup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/contentValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/encryption.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/headers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/privacy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/security-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/sensitiveWords.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/thirdPartyFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/security/xssFilter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/seo/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/seo/service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/seo/sitemap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/seo/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/services/contributionService.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign instance to a variable before exporting as module default","line":970,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":970,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 贡献度计算服务\n */\n\nimport { ObjectId } from 'mongodb';\n\nimport {\n  CONTRIBUTION_POINTS,\n  CACHE_CONFIG,\n  LEADERBOARD_CONFIG,\n  ACHIEVEMENTS,\n  TRENDING_WORKS_CONFIG,\n  TIME_PERIODS,\n} from '@/lib/config/contribution';\nimport ContributionLog, { ContributionLogDocument } from '@/lib/models/ContributionLog';\nimport User from '@/lib/models/User';\nimport Work from '@/lib/models/Work';\nimport redis from '@/lib/redis';\nimport {\n  ContributionType,\n  ContributionRecord,\n  ContributionStats,\n  ContributionHistoryQuery,\n  ContributionHistory,\n  LeaderboardQuery,\n  LeaderboardResponse,\n  LeaderboardType,\n  LeaderboardEntry,\n  TrendingWork,\n  TrendingWorksResponse,\n  ContributionCalculationRequest,\n  Achievement,\n} from '@/shared/types/contribution';\nimport { handleServiceError } from '@/shared/utils/standardErrorHandler';\n\n\nclass ContributionService {\n  /**\n   * 创建贡献度记录\n   */\n  async createContribution(request: ContributionCalculationRequest): Promise<ContributionRecord> {\n    try {\n      const contributionLog = new ContributionLog({\n        userId: new ObjectId(request.userId),\n        type: request.type,\n        points: request.points || this.getPointsForType(request.type),\n        workId: request.workId ? new ObjectId(request.workId) : undefined,\n        description: request.metadata?.description || `获得${request.type}贡献度`,\n        metadata: request.metadata || {},\n      });\n\n      const savedLog = await contributionLog.save();\n\n      // 更新用户总贡献度缓存\n      await this.invalidateUserCache(request.userId);\n\n      // 检查成就解锁\n      await this.checkAchievements(request.userId);\n\n      // 异步更新排行榜缓存\n      this.updateLeaderboardCache().catch(console.error);\n\n      return this.formatContributionRecord(savedLog);\n    } catch (error) {\n      handleServiceError(error, '创建贡献度记录');\n      throw error;\n    }\n  }\n\n  /**\n   * 记录作品创作贡献度\n   */\n  async recordCreationContribution(userId: string, workId: string, workTitle: string): Promise<ContributionRecord> {\n    return await this.createContribution({\n      userId,\n      type: ContributionType.WORK_CREATION,\n      workId,\n      metadata: {\n        description: `发布作品《${workTitle}》`,\n        workTitle,\n        contributionType: 'creation',\n      },\n    });\n  }\n\n  /**\n   * 记录作品复用贡献度\n   */\n  async recordReuseContribution(\n    originalAuthorId: string,\n    workId: string,\n    workTitle: string,\n    reuserUserId: string,\n  ): Promise<ContributionRecord> {\n    return await this.createContribution({\n      userId: originalAuthorId,\n      type: ContributionType.WORK_REUSED,\n      workId,\n      metadata: {\n        description: `作品《${workTitle}》被复用`,\n        workTitle,\n        reuserUserId,\n        contributionType: 'reuse',\n      },\n    });\n  }\n\n  /**\n   * 获取用户贡献度统计\n   */\n  async getUserContributionStats(userId: string): Promise<ContributionStats> {\n    try {\n      const cacheKey = CACHE_CONFIG.KEYS.USER_CONTRIBUTION(userId);\n      const cached = await redis.get(cacheKey);\n\n      if (cached) {\n        return JSON.parse(cached);\n      }\n\n      // 聚合查询用户贡献度统计\n      const stats = await (ContributionLog.aggregate as any)([\n        { $match: { userId: new ObjectId(userId) } },\n        {\n          $group: {\n            _id: null,\n            totalPoints: { $sum: '$points' },\n            creationPoints: {\n              $sum: { $cond: [{ $eq: ['$type', ContributionType.WORK_CREATION] }, '$points', 0] },\n            },\n            reusePoints: {\n              $sum: { $cond: [{ $eq: ['$type', ContributionType.WORK_REUSED] }, '$points', 0] },\n            },\n            bonusPoints: {\n              $sum: { $cond: [{ $eq: ['$type', ContributionType.MILESTONE_REACHED] }, '$points', 0] },\n            },\n            recordCount: { $sum: 1 },\n            lastActivity: { $max: '$createdAt' },\n          },\n        },\n      ]);\n\n      const userStats = stats[0] || {\n        totalPoints: 0,\n        creationPoints: 0,\n        reusePoints: 0,\n        bonusPoints: 0,\n        recordCount: 0,\n        lastActivity: new Date(),\n      };\n\n      // 获取作品数量统计\n      const worksCount = await (Work.countDocuments as any)({ author: new ObjectId(userId), status: 'published' });\n\n      // 获取被复用次数\n      const reuseCount = await (ContributionLog.countDocuments as any)({\n        userId: new ObjectId(userId),\n        type: ContributionType.WORK_REUSED,\n      });\n\n      const result: ContributionStats = {\n        userId,\n        totalPoints: userStats.totalPoints,\n        creationPoints: userStats.creationPoints,\n        reusePoints: userStats.reusePoints,\n        bonusPoints: userStats.bonusPoints,\n        worksCount,\n        reuseCount,\n        lastUpdated: new Date(),\n      };\n\n      // 缓存结果\n      await redis.set(cacheKey, JSON.stringify(result), CACHE_CONFIG.TTL.USER_STATS);\n\n      return result;\n    } catch (error) {\n      handleServiceError(error, '获取用户贡献度统计');\n      throw error;\n    }\n  }\n\n  /**\n   * 获取排行榜\n   */\n  async getLeaderboard(query: LeaderboardQuery = {}): Promise<LeaderboardResponse> {\n    try {\n      const {\n        type = 'total',\n        limit = LEADERBOARD_CONFIG.DEFAULT_LIMIT,\n        offset = 0,\n        includeUserRank = false,\n        userId,\n      } = query;\n\n      const cacheKey = `${CACHE_CONFIG.KEYS.LEADERBOARD_ALL}:${type}:${limit}:${offset}`;\n      const cached = await redis.get(cacheKey);\n\n      if (cached && !includeUserRank) {\n        return JSON.parse(cached);\n      }\n\n      let startDate: Date | undefined;\n\n      // 根据类型设置时间范围\n      if (type === 'weekly') {\n        startDate = new Date(Date.now() - TIME_PERIODS.WEEKLY.duration);\n      } else if (type === 'monthly') {\n        startDate = new Date(Date.now() - TIME_PERIODS.MONTHLY.duration);\n      }\n\n      // 获取排行榜数据\n      let matchCondition = {};\n      if (startDate) {\n        matchCondition = { createdAt: { $gte: startDate } };\n      }\n\n      const leaderboardData = await (ContributionLog.aggregate as any)([\n        { $match: matchCondition },\n        {\n          $group: {\n            _id: '$userId',\n            totalPoints: { $sum: '$points' },\n            creationPoints: {\n              $sum: { $cond: [{ $eq: ['$type', ContributionType.WORK_CREATION] }, '$points', 0] },\n            },\n            reusePoints: {\n              $sum: { $cond: [{ $eq: ['$type', ContributionType.WORK_REUSED] }, '$points', 0] },\n            },\n            recordCount: { $sum: 1 },\n            lastActivity: { $max: '$createdAt' },\n          },\n        },\n        { $sort: { totalPoints: -1 } },\n        { $skip: offset },\n        { $limit: limit },\n        {\n          $lookup: {\n            from: 'users',\n            localField: '_id',\n            foreignField: '_id',\n            as: 'user',\n          },\n        },\n        { $unwind: '$user' },\n        {\n          $lookup: {\n            from: 'works',\n            let: { userId: '$_id' },\n            pipeline: [\n              { $match: { $expr: { $eq: ['$author', '$$userId'] }, status: 'published' } },\n              { $count: 'count' },\n            ],\n            as: 'worksCount',\n          },\n        },\n        {\n          $project: {\n            userId: { $toString: '$_id' },\n            userName: '$user.name',\n            userAvatar: '$user.avatar',\n            totalPoints: 1,\n            creationPoints: 1,\n            reusePoints: 1,\n            creationCount: { $ifNull: [{ $arrayElemAt: ['$worksCount.count', 0] }, 0] },\n            reuseCount: { $divide: ['$reusePoints', CONTRIBUTION_POINTS.reuse.points] },\n            recordCount: 1,\n            lastActivity: 1,\n          },\n        },\n      ]);\n\n      // 格式化排行榜数据\n      const entries: LeaderboardEntry[] = leaderboardData.map((entry, index) => ({\n        userId: entry.userId,\n        userName: entry.userName,\n        userAvatar: entry.userAvatar,\n        totalPoints: entry.totalPoints,\n        rank: offset + index + 1,\n        creationCount: entry.creationCount,\n        reuseCount: Math.floor(entry.reuseCount),\n        lastActivity: entry.lastActivity.toISOString(),\n      }));\n\n      let userRank: LeaderboardEntry | undefined;\n\n      // 如果需要包含用户排名信息\n      if (includeUserRank && userId) {\n        userRank = await this.getUserRankInLeaderboard(userId, type);\n      }\n\n      const result: LeaderboardResponse = {\n        type: type as LeaderboardType,\n        entries,\n        total: entries.length,\n        userRank,\n        lastUpdated: new Date(),\n      };\n\n      // 缓存结果（不包含用户特定信息）\n      if (!includeUserRank) {\n        await redis.set(cacheKey, JSON.stringify(result), CACHE_CONFIG.TTL.LEADERBOARD);\n      }\n\n      return result;\n    } catch (error) {\n      handleServiceError(error, '获取排行榜');\n      throw error;\n    }\n  }\n\n  /**\n   * 获取用户在排行榜中的排名信息\n   */\n  async getUserRankInLeaderboard(userId: string, type: string = 'total'): Promise<LeaderboardEntry | undefined> {\n    try {\n      let startDate: Date | undefined;\n\n      if (type === 'weekly') {\n        startDate = new Date(Date.now() - TIME_PERIODS.WEEKLY.duration);\n      } else if (type === 'monthly') {\n        startDate = new Date(Date.now() - TIME_PERIODS.MONTHLY.duration);\n      }\n\n      let matchCondition = {};\n      if (startDate) {\n        matchCondition = { createdAt: { $gte: startDate } };\n      }\n\n      // 获取用户积分\n      const userStats = await (ContributionLog.aggregate as any)([\n        { $match: { ...matchCondition, userId: new ObjectId(userId) } },\n        {\n          $group: {\n            _id: null,\n            totalPoints: { $sum: '$points' },\n            lastActivity: { $max: '$createdAt' },\n          },\n        },\n      ]);\n\n      if (!userStats.length) {\n        return undefined;\n      }\n\n      const userPoints = userStats[0].totalPoints;\n\n      // 计算排名\n      const rankData = await (ContributionLog.aggregate as any)([\n        { $match: matchCondition },\n        {\n          $group: {\n            _id: '$userId',\n            totalPoints: { $sum: '$points' },\n          },\n        },\n        {\n          $match: {\n            totalPoints: { $gt: userPoints },\n          },\n        },\n        { $count: 'count' },\n      ]);\n\n      const rank = (rankData[0]?.count || 0) + 1;\n\n      // 获取用户信息\n      const user = await (User.findById as any)(userId).select('name avatar');\n      if (!user) {\n        return undefined;\n      }\n\n      // 获取创作和复用统计\n      const worksCount = await (Work.countDocuments as any)({ author: new ObjectId(userId), status: 'published' });\n      const reuseCount = await (ContributionLog.countDocuments as any)({\n        userId: new ObjectId(userId),\n        type: ContributionType.WORK_REUSED,\n      });\n\n      return {\n        userId,\n        userName: user.name,\n        userAvatar: user.avatar,\n        totalPoints: userPoints,\n        rank,\n        creationCount: worksCount,\n        reuseCount,\n        lastActivity: userStats[0].lastActivity.toISOString(),\n      };\n    } catch (error) {\n      handleServiceError(error, '获取用户排名');\n      return undefined;\n    }\n  }\n\n  /**\n   * 获取热门作品推荐\n   */\n  async getTrendingWorks(period: 'daily' | 'weekly' | 'monthly' = 'weekly', limit: number = TRENDING_WORKS_CONFIG.DEFAULT_LIMIT): Promise<TrendingWorksResponse> {\n    try {\n      const cacheKey = CACHE_CONFIG.KEYS.TRENDING_WORKS(period);\n      const cached = await redis.get(cacheKey);\n\n      if (cached) {\n        return JSON.parse(cached);\n      }\n\n      const now = new Date();\n      let startDate: Date;\n\n      switch (period) {\n        case 'daily':\n          startDate = new Date(now.getTime() - TIME_PERIODS.DAILY.duration);\n          break;\n        case 'weekly':\n          startDate = new Date(now.getTime() - TIME_PERIODS.WEEKLY.duration);\n          break;\n        case 'monthly':\n          startDate = new Date(now.getTime() - TIME_PERIODS.MONTHLY.duration);\n          break;\n        default:\n          startDate = new Date(now.getTime() - TIME_PERIODS.WEEKLY.duration);\n      }\n\n      // 计算热门作品\n      const trendingWorks = await (Work.aggregate as any)([\n        {\n          $match: {\n            status: 'published',\n            publishedAt: { $gte: startDate },\n          },\n        },\n        {\n          $lookup: {\n            from: 'contributionlogs',\n            let: { workId: '$_id' },\n            pipeline: [\n              {\n                $match: {\n                  $expr: { $eq: ['$workId', '$$workId'] },\n                  type: ContributionType.WORK_REUSED,\n                  createdAt: { $gte: startDate },\n                },\n              },\n            ],\n            as: 'recentReuses',\n          },\n        },\n        {\n          $lookup: {\n            from: 'contributionlogs',\n            let: { workId: '$_id' },\n            pipeline: [\n              {\n                $match: {\n                  $expr: { $eq: ['$workId', '$$workId'] },\n                  type: ContributionType.WORK_REUSED,\n                },\n              },\n            ],\n            as: 'totalReuses',\n          },\n        },\n        {\n          $lookup: {\n            from: 'users',\n            localField: 'author',\n            foreignField: '_id',\n            as: 'authorInfo',\n          },\n        },\n        { $unwind: '$authorInfo' },\n        {\n          $addFields: {\n            recentReuseCount: { $size: '$recentReuses' },\n            totalReuseCount: { $size: '$totalReuses' },\n            // 时间衰减因子：越新的作品得分越高\n            timeDecay: {\n              $divide: [\n                { $subtract: [now, '$publishedAt'] },\n                1000 * 60 * 60 * 24, // 转换为天数\n              ],\n            },\n          },\n        },\n        {\n          $addFields: {\n            // 热门度评分算法\n            trendingScore: {\n              $add: [\n                { $multiply: ['$recentReuseCount', TRENDING_WORKS_CONFIG.WEIGHT_FACTORS.RECENT_REUSE] },\n                { $multiply: ['$totalReuseCount', TRENDING_WORKS_CONFIG.WEIGHT_FACTORS.TOTAL_REUSE] },\n                {\n                  $multiply: [\n                    { $max: [0, { $subtract: [30, '$timeDecay'] }] }, // 30天内的新作品加分\n                    TRENDING_WORKS_CONFIG.WEIGHT_FACTORS.CREATION_TIME,\n                  ],\n                },\n              ],\n            },\n          },\n        },\n        {\n          $match: {\n            totalReuseCount: { $gte: TRENDING_WORKS_CONFIG.MIN_REUSE_COUNT },\n          },\n        },\n        { $sort: { trendingScore: -1 } },\n        { $limit: limit },\n        {\n          $project: {\n            workId: { $toString: '$_id' },\n            title: 1,\n            authorId: { $toString: '$author' },\n            authorName: '$authorInfo.name',\n            reuseCount: '$totalReuseCount',\n            viewCount: { $ifNull: ['$viewCount', 0] },\n            trendingScore: { $round: ['$trendingScore', 2] },\n            createdAt: '$publishedAt',\n            thumbnail: '$thumbnail',\n            tags: { $ifNull: ['$tags', []] },\n          },\n        },\n      ]);\n\n      const result: TrendingWorksResponse = {\n        works: trendingWorks,\n        period,\n        lastUpdated: new Date(),\n      };\n\n      // 缓存结果\n      await redis.set(cacheKey, JSON.stringify(result), TRENDING_WORKS_CONFIG.CACHE_TTL);\n\n      return result;\n    } catch (error) {\n      handleServiceError(error, '获取热门作品推荐');\n      throw error;\n    }\n  }\n\n  /**\n   * 获取用户排名\n   */\n  async getUserRank(userId: string): Promise<{ rank: number; totalPoints: number } | null> {\n    try {\n      // 获取用户积分\n      const userStats = await (ContributionLog.aggregate as any)([\n        { $match: { userId: new ObjectId(userId) } },\n        { $group: { _id: null, totalPoints: { $sum: '$points' } } },\n      ]);\n\n      if (!userStats.length) {\n        return null;\n      }\n\n      const userPoints = userStats[0].totalPoints;\n\n      // 计算排名\n      const rankData = await (ContributionLog.aggregate as any)([\n        {\n          $group: {\n            _id: '$userId',\n            totalPoints: { $sum: '$points' },\n          },\n        },\n        {\n          $group: {\n            _id: null,\n            totalUsers: { $sum: 1 },\n            higherRanked: {\n              $sum: { $cond: [{ $gt: ['$totalPoints', userPoints] }, 1, 0] },\n            },\n          },\n        },\n      ]);\n\n      if (!rankData.length) {\n        return null;\n      }\n\n      const { higherRanked } = rankData[0];\n      const rank = higherRanked + 1;\n\n      return {\n        rank,\n        totalPoints: userPoints,\n      };\n    } catch (error) {\n      handleServiceError(error, '获取用户排名');\n      return null;\n    }\n  }\n\n  /**\n   * 获取贡献度历史\n   */\n  async getContributionHistory(query: ContributionHistoryQuery): Promise<ContributionHistory> {\n    try {\n      const {\n        userId,\n        type,\n        startDate,\n        endDate,\n        limit = 20,\n        offset = 0,\n      } = query;\n\n      // 构建查询条件\n      const matchCondition: any = { userId: new ObjectId(userId) };\n\n      if (type) {\n        matchCondition.type = type;\n      }\n\n      if (startDate || endDate) {\n        matchCondition.createdAt = {};\n        if (startDate) matchCondition.createdAt.$gte = startDate;\n        if (endDate) matchCondition.createdAt.$lte = endDate;\n      }\n\n      // 分页查询\n      const [records, totalCount] = await Promise.all([\n        // 获取记录\n        (ContributionLog.find as any)(matchCondition)\n          .sort({ createdAt: -1 })\n          .skip(offset)\n          .limit(limit)\n          .populate('workId', 'title')\n        .lean(),\n\n        // 获取总数\n        (ContributionLog.countDocuments as any)(matchCondition),\n      ]);\n\n      const formattedRecords: ContributionRecord[] = records.map(record => this.formatContributionRecord(record));\n\n      // 获取汇总统计\n      const userStats = await this.getUserContributionStats(userId);\n\n      // 获取本周和本月的积分\n      const now = new Date();\n      const weekStart = new Date(now.getTime() - TIME_PERIODS.WEEKLY.duration);\n      const monthStart = new Date(now.getTime() - TIME_PERIODS.MONTHLY.duration);\n\n      const weeklyStats = await (ContributionLog.aggregate as any)([\n        {\n          $match: {\n            userId: new ObjectId(userId),\n            createdAt: { $gte: weekStart, $lte: now },\n          },\n        },\n        { $group: { _id: null, totalPoints: { $sum: '$points' } } },\n      ]);\n\n      const monthlyStats = await (ContributionLog.aggregate as any)([\n        {\n          $match: {\n            userId: new ObjectId(userId),\n            createdAt: { $gte: monthStart, $lte: now },\n          },\n        },\n        { $group: { _id: null, totalPoints: { $sum: '$points' } } },\n      ]);\n\n      // 按类型统计\n      const byType: Record<ContributionType, number> = {} as Record<ContributionType, number>;\n      Object.values(ContributionType).forEach(type => {\n        byType[type] = 0;\n      });\n\n      const typeStats = await (ContributionLog.aggregate as any)([\n        { $match: { userId: new ObjectId(userId) } },\n        {\n          $group: {\n            _id: '$type',\n            points: { $sum: '$points' },\n          },\n        },\n      ]);\n\n      typeStats.forEach(stat => {\n        byType[stat._id as ContributionType] = stat.points;\n      });\n\n      return {\n        records: formattedRecords,\n        total: totalCount,\n        hasMore: totalCount > offset + limit,\n        summary: {\n          totalPoints: userStats.totalPoints,\n          thisWeek: weeklyStats[0]?.totalPoints || 0,\n          thisMonth: monthlyStats[0]?.totalPoints || 0,\n          byType,\n        },\n      };\n    } catch (error) {\n      handleServiceError(error, '获取贡献度历史');\n      throw error;\n    }\n  }\n\n  /**\n   * 检查用户成就\n   */\n  async checkAchievements(userId: string): Promise<Achievement[]> {\n    try {\n      const userStats = await this.getUserContributionStats(userId);\n      const unlockedAchievements: Achievement[] = [];\n\n      for (const achievement of ACHIEVEMENTS) {\n        // 检查是否已解锁\n        const existingAchievement = await this.getUserAchievement(userId, achievement.id);\n        if (existingAchievement) continue;\n\n        let isUnlocked = false;\n\n        switch (achievement.requirement.type) {\n          case 'points':\n            isUnlocked = userStats.totalPoints >= achievement.requirement.value;\n            break;\n          case 'count':\n            if (achievement.type === 'creation') {\n              isUnlocked = userStats.worksCount >= achievement.requirement.value;\n            } else if (achievement.type === 'reuse') {\n              isUnlocked = userStats.reuseCount >= achievement.requirement.value;\n            }\n            break;\n          // TODO: 实现 streak 类型的成就检查\n        }\n\n        if (isUnlocked) {\n          await this.unlockAchievement(userId, achievement);\n          unlockedAchievements.push({\n            ...achievement,\n            unlockedAt: new Date().toISOString(),\n          });\n        }\n      }\n\n      return unlockedAchievements;\n    } catch (error) {\n      handleServiceError(error, '检查用户成就');\n      return [];\n    }\n  }\n\n  /**\n   * 清除用户相关缓存\n   */\n  async invalidateUserCache(userId: string): Promise<void> {\n    try {\n      const keys = [\n        CACHE_CONFIG.KEYS.USER_CONTRIBUTION(userId),\n        CACHE_CONFIG.KEYS.CONTRIBUTION_STATS(userId),\n      ];\n\n      await Promise.all(keys.map(key => redis.del(key)));\n    } catch (error) {\n      console.error('清除用户缓存失败:', error);\n    }\n  }\n\n  /**\n   * 获取贡献度类型对应的分数\n   */\n  private getPointsForType(type: ContributionType): number {\n    switch (type) {\n      case ContributionType.WORK_CREATION:\n        return CONTRIBUTION_POINTS.creation.points;\n      case ContributionType.WORK_REUSED:\n        return CONTRIBUTION_POINTS.reuse.points;\n      case ContributionType.WORK_SHARED:\n        return 5;\n      case ContributionType.PROFILE_COMPLETED:\n        return 20;\n      case ContributionType.FIRST_WORK:\n        return 30;\n      case ContributionType.MILESTONE_REACHED:\n        return 100;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * 格式化贡献度记录\n   */\n  private formatContributionRecord(record: any): ContributionRecord {\n    return {\n      id: record._id.toString(),\n      userId: record.userId.toString(),\n      workId: record.workId?.toString(),\n      type: record.type,\n      points: record.points,\n      description: record.description,\n      displayText: this.getDisplayText(record),\n      createdAt: record.createdAt,\n      metadata: record.metadata,\n    };\n  }\n\n  /**\n   * 获取贡献度记录的显示文本\n   */\n  private getDisplayText(record: any): string {\n    switch (record.type) {\n      case ContributionType.WORK_CREATION:\n        return `发布作品《${record.metadata?.workTitle || '未知作品'}》获得 ${record.points} 分`;\n      case ContributionType.WORK_REUSED:\n        return `作品《${record.metadata?.workTitle || '未知作品'}》被复用获得 ${record.points} 分`;\n      case ContributionType.WORK_SHARED:\n        return `作品《${record.metadata?.workTitle || '未知作品'}》被分享获得 ${record.points} 分`;\n      case ContributionType.PROFILE_COMPLETED:\n        return `完善个人资料获得 ${record.points} 分`;\n      case ContributionType.FIRST_WORK:\n        return `首次发布作品获得 ${record.points} 分`;\n      case ContributionType.MILESTONE_REACHED:\n        return `达成里程碑获得 ${record.points} 分：${record.description}`;\n      default:\n        return record.description || `获得 ${record.points} 分`;\n    }\n  }\n\n  /**\n   * 获取用户成就\n   */\n  private async getUserAchievement(userId: string, achievementId: string): Promise<any> {\n    // TODO: 实现成就存储和查询\n    return null;\n  }\n\n  /**\n   * 解锁成就\n   */\n  private async unlockAchievement(userId: string, achievement: any): Promise<void> {\n    try {\n      // 添加奖励积分\n      if (achievement.reward.points > 0) {\n        await this.createContribution({\n          userId,\n          type: ContributionType.MILESTONE_REACHED,\n          points: achievement.reward.points,\n          metadata: {\n            description: `解锁成就：${achievement.title}`,\n            achievementId: achievement.id,\n            achievementTitle: achievement.title,\n          },\n        });\n      }\n\n      // TODO: 保存成就解锁记录到专门的成就表\n    } catch (error) {\n      console.error('解锁成就失败:', error);\n    }\n  }\n\n  /**\n   * 更新排行榜缓存\n   */\n  async updateLeaderboardCache(): Promise<void> {\n    try {\n      const periods = ['total', 'weekly', 'monthly'];\n      const limit = LEADERBOARD_CONFIG.DEFAULT_LIMIT;\n\n      for (const period of periods) {\n        // 清除旧缓存\n        const cacheKey = `${CACHE_CONFIG.KEYS.LEADERBOARD_ALL}:${period}:${limit}:0`;\n        await redis.del(cacheKey);\n\n        // 预热新缓存\n        await this.getLeaderboard({ type: period, limit });\n      }\n\n      // 更新热门作品缓存\n      await this.updateTrendingWorksCache();\n    } catch (error) {\n      console.error('更新排行榜缓存失败:', error);\n    }\n  }\n\n  /**\n   * 更新热门作品缓存\n   */\n  async updateTrendingWorksCache(): Promise<void> {\n    try {\n      const periods: ('daily' | 'weekly' | 'monthly')[] = ['daily', 'weekly', 'monthly'];\n\n      for (const period of periods) {\n        // 清除旧缓存\n        const cacheKey = CACHE_CONFIG.KEYS.TRENDING_WORKS(period);\n        await redis.del(cacheKey);\n\n        // 预热新缓存\n        await this.getTrendingWorks(period);\n      }\n    } catch (error) {\n      console.error('更新热门作品缓存失败:', error);\n    }\n  }\n\n  /**\n   * 获取排行榜统计信息\n   */\n  async getLeaderboardStats(): Promise<{\n    totalUsers: number;\n    activeUsersThisWeek: number;\n    activeUsersThisMonth: number;\n    topContributor: { userId: string; userName: string; totalPoints: number } | null;\n  }> {\n    try {\n      const now = new Date();\n      const weekStart = new Date(now.getTime() - TIME_PERIODS.WEEKLY.duration);\n      const monthStart = new Date(now.getTime() - TIME_PERIODS.MONTHLY.duration);\n\n      // 总用户数\n      const totalUsers = await (User.countDocuments as any)();\n\n      // 本周活跃用户数\n      const activeUsersThisWeek = await (ContributionLog.distinct as any)('userId', {\n        createdAt: { $gte: weekStart },\n      }).then(users => users.length);\n\n      // 本月活跃用户数\n      const activeUsersThisMonth = await (ContributionLog.distinct as any)('userId', {\n        createdAt: { $gte: monthStart },\n      }).then(users => users.length);\n\n      // 总贡献度最高的用户\n      const topContributorData = await (ContributionLog.aggregate as any)([\n        {\n          $group: {\n            _id: '$userId',\n            totalPoints: { $sum: '$points' },\n          },\n        },\n        { $sort: { totalPoints: -1 } },\n        { $limit: 1 },\n        {\n          $lookup: {\n            from: 'users',\n            localField: '_id',\n            foreignField: '_id',\n            as: 'user',\n          },\n        },\n        { $unwind: '$user' },\n        {\n          $project: {\n            userId: { $toString: '$_id' },\n            userName: '$user.name',\n            totalPoints: 1,\n          },\n        },\n      ]);\n\n      const topContributor = topContributorData.length > 0 ? topContributorData[0] : null;\n\n      return {\n        totalUsers,\n        activeUsersThisWeek,\n        activeUsersThisMonth,\n        topContributor,\n      };\n    } catch (error) {\n      handleServiceError(error, '获取排行榜统计信息');\n      throw error;\n    }\n  }\n}\n\nexport default new ContributionService();\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/services/graphAnalysisService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/services/reuseService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/services/workMountService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/services/workService.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign instance to a variable before exporting as module default","line":510,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":510,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Types } from 'mongoose';\n\nimport ContributionLog from '../models/ContributionLog';\nimport User from '../models/User';\nimport Work, {\n  IWork,\n  WorkDocument,\n  TeachingCard,\n  Attribution,\n  getWorkAuthorSummary,\n} from '../models/Work';\n\n\nexport interface CreateWorkRequest {\n  title: string;\n  knowledgePoint: string;\n  subject: string;\n  gradeLevel: string;\n  cards: TeachingCard[];\n  tags?: string[];\n  status?: 'draft' | 'published';\n}\n\nexport interface UpdateWorkRequest {\n  title?: string;\n  knowledgePoint?: string;\n  subject?: string;\n  gradeLevel?: string;\n  cards?: TeachingCard[];\n  tags?: string[];\n  status?: 'draft' | 'published' | 'archived';\n}\n\nexport interface WorkListQuery {\n  author?: string;\n  status?: 'draft' | 'published' | 'archived';\n  subject?: string;\n  gradeLevel?: string;\n  page?: number;\n  limit?: number;\n  sortBy?: 'createdAt' | 'updatedAt' | 'reuseCount';\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface WorkListResponse {\n  works: WorkDocument[];\n  total: number;\n  page: number;\n  totalPages: number;\n}\n\nclass WorkService {\n  /**\n   * 创建新作品\n   */\n  async createWork(userId: string, data: CreateWorkRequest): Promise<WorkDocument> {\n    try {\n      const work = new Work({\n        ...data,\n        author: new Types.ObjectId(userId),\n        status: data.status || 'draft',\n      });\n\n      const savedWork = await work.save();\n\n      // 如果是发布状态，记录贡献度\n      if (data.status === 'published') {\n        await this.recordContribution(userId, savedWork._id, 'creation');\n      }\n\n      return savedWork;\n    } catch (error) {\n      throw new Error(`创建作品失败: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * 更新作品\n   */\n  async updateWork(workId: string, userId: string, data: UpdateWorkRequest): Promise<WorkDocument> {\n    try {\n      const work = await (Work.findOne as any)({\n        _id: workId,\n        author: userId,\n      });\n\n      if (!work) {\n        throw new Error('作品不存在或无权限修改');\n      }\n\n      const wasPublished = work.status === 'published';\n      const willBePublished = data.status === 'published';\n\n      // 更新作品数据\n      Object.assign(work, data);\n      const updatedWork = await work.save();\n\n      // 如果从草稿变为发布，记录贡献度\n      if (!wasPublished && willBePublished) {\n        await this.recordContribution(userId, workId, 'creation');\n      }\n\n      return updatedWork;\n    } catch (error) {\n      throw new Error(`更新作品失败: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * 获取作品详情\n   */\n  async getWorkById(workId: string, userId?: string): Promise<WorkDocument | null> {\n    try {\n      const query: any = { _id: workId };\n\n      // 如果提供了用户ID，可以查看自己的草稿\n      if (!userId) {\n        query.status = 'published';\n      } else {\n        query.$or = [\n          { status: 'published' },\n          { author: userId },\n        ];\n      }\n\n      const work = await (Work.findOne as any)(query)\n        .populate('author', 'name avatar')\n        .populate('originalWork', 'title author');\n\n      return work;\n    } catch (error) {\n      throw new Error(`获取作品失败: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * 获取作品列表\n   */\n  async getWorksList(query: WorkListQuery): Promise<WorkListResponse> {\n    try {\n      const {\n        author,\n        status = 'published',\n        subject,\n        gradeLevel,\n        page = 1,\n        limit = 20,\n        sortBy = 'createdAt',\n        sortOrder = 'desc',\n      } = query;\n\n      const filter: any = { status };\n\n      if (author) {\n        filter.author = author;\n      }\n      if (subject) {\n        filter.subject = subject;\n      }\n      if (gradeLevel) {\n        filter.gradeLevel = gradeLevel;\n      }\n\n      const sort: any = {};\n      sort[sortBy] = sortOrder === 'desc' ? -1 : 1;\n\n      const skip = (page - 1) * limit;\n\n      const [works, total] = await Promise.all([\n        (Work.find as any)(filter)\n          .populate('author', 'name avatar')\n        .sort(sort)\n          .skip(skip)\n          .limit(limit),\n        (Work.countDocuments as any)(filter),\n      ]);\n\n      return {\n        works,\n        total,\n        page,\n        totalPages: Math.ceil(total / limit),\n      };\n    } catch (error) {\n      throw new Error(`获取作品列表失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    }\n  }\n\n  /**\n   * 删除作品\n   */\n  async deleteWork(workId: string, userId: string): Promise<void> {\n    try {\n      const work = await (Work.findOne as any)({\n        _id: workId,\n        author: userId,\n      });\n\n      if (!work) {\n        throw new Error('作品不存在或无权限删除');\n      }\n\n      await (Work.findByIdAndDelete as any)(workId);\n    } catch (error) {\n      throw new Error(`删除作品失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    }\n  }\n\n  /**\n   * 发布作品\n   */\n  async publishWork(workId: string, userId: string): Promise<WorkDocument> {\n    try {\n      const work = await (Work.findOne as any)({\n        _id: workId,\n        author: userId,\n        status: 'draft',\n      });\n\n      if (!work) {\n        throw new Error('草稿不存在或已发布');\n      }\n\n      work.status = 'published';\n      const publishedWork = await work.save();\n\n      // 记录贡献度\n      await this.recordContribution(userId, workId, 'creation');\n\n      return publishedWork;\n    } catch (error) {\n      throw new Error(`发布作品失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    }\n  }\n\n  /**\n   * 获取用户的草稿列表\n   */\n  async getUserDrafts(userId: string): Promise<WorkDocument[]> {\n    try {\n      return await (Work.find as any)({\n        author: userId,\n        status: 'draft',\n      })\n        .sort({ updatedAt: -1 })\n        .limit(50);\n    } catch (error) {\n      throw new Error(`获取草稿列表失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    }\n  }\n\n  /**\n   * 自动保存草稿\n   */\n  async saveDraft(userId: string, data: Partial<CreateWorkRequest>): Promise<WorkDocument> {\n    try {\n      // 查找最近的草稿\n      const draft = await (Work.findOne as any)({\n        author: userId,\n        status: 'draft',\n        title: { $in: ['', '未命名作品', data.title] },\n      }).sort({ updatedAt: -1 });\n\n      if (draft) {\n        // 更新现有草稿\n        Object.assign(draft, data);\n        return await draft.save();\n      } else {\n        // 创建新草稿\n        return await this.createWork(userId, {\n          title: data.title || '未命名作品',\n          knowledgePoint: data.knowledgePoint || '',\n          subject: data.subject || '',\n          gradeLevel: data.gradeLevel || '',\n          cards: data.cards || [],\n          tags: data.tags || [],\n          status: 'draft',\n        });\n      }\n    } catch (error) {\n      throw new Error(`保存草稿失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    }\n  }\n\n  /**\n   * 记录贡献度\n   */\n  private async recordContribution(userId: string, workId: string, type: 'creation' | 'reuse'): Promise<void> {\n    try {\n      const points = type === 'creation' ? 10 : 50;\n\n      await (ContributionLog.create as any)({\n        userId: new Types.ObjectId(userId),\n        type,\n        points,\n        workId: new Types.ObjectId(workId),\n      });\n\n      // 更新用户贡献度分数\n      await (User.findByIdAndUpdate as any)(userId, {\n        $inc: { contributionScore: points },\n      });\n    } catch (error) {\n      console.error('记录贡献度失败:', error);\n    }\n  }\n\n  /**\n   * 搜索作品\n   */\n  async searchWorks(keyword: string, filters?: Partial<WorkListQuery>): Promise<WorkDocument[]> {\n    try {\n      const query: any = {\n        status: 'published',\n        $or: [\n          { title: { $regex: keyword, $options: 'i' } },\n          { knowledgePoint: { $regex: keyword, $options: 'i' } },\n          { tags: { $in: [new RegExp(keyword, 'i')] } },\n        ],\n      };\n\n      if (filters?.subject) {\n        query.subject = filters.subject;\n      }\n      if (filters?.gradeLevel) {\n        query.gradeLevel = filters.gradeLevel;\n      }\n\n      return await (Work.find as any)(query)\n        .populate('author', 'name avatar')\n        .sort({ reuseCount: -1, createdAt: -1 })\n        .limit(filters?.limit || 20);\n    } catch (error) {\n      throw new Error(`搜索作品失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    }\n  }\n\n  /**\n   * 获取智慧广场作品列表（专用方法）\n   */\n  async getWorksForSquare(query: SquareQuery): Promise<SquareResponse> {\n    try {\n      const {\n        subject,\n        gradeLevel,\n        page = 1,\n        limit = 12,\n        sortBy = 'latest',\n        search,\n        tags,\n      } = query;\n\n      const filter: any = { status: 'published' };\n\n      // 筛选条件\n      if (subject) filter.subject = subject;\n      if (gradeLevel) filter.gradeLevel = gradeLevel;\n      if (tags && tags.length > 0) {\n        filter.tags = { $in: tags };\n      }\n\n      // 搜索条件\n      if (search) {\n        filter.$or = [\n          { title: { $regex: search, $options: 'i' } },\n          { knowledgePoint: { $regex: search, $options: 'i' } },\n          { tags: { $in: [new RegExp(search, 'i')] } },\n        ];\n      }\n\n      // 排序条件\n      const sort: any = {};\n      switch (sortBy) {\n        case 'popular':\n          sort.reuseCount = -1;\n          sort.createdAt = -1;\n          break;\n        case 'reuse_count':\n          sort.reuseCount = -1;\n          break;\n        case 'latest':\n        default:\n          sort.createdAt = -1;\n          break;\n      }\n\n      const skip = (page - 1) * limit;\n\n      // 并行查询作品和统计信息\n      const [works, total, filters] = await Promise.all([\n        (Work.find as any)(filter)\n          .populate('author', 'name avatar')\n        .sort(sort)\n          .skip(skip)\n          .limit(limit)\n          .lean(),\n        (Work.countDocuments as any)(filter),\n        this.getSquareFilters(),\n      ]);\n\n      // 转换为卡片数据格式\n      const workCards = works.map(work => this.transformToWorkCard(work));\n\n      return {\n        works: workCards,\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages: Math.ceil(total / limit),\n          hasNext: page < Math.ceil(total / limit),\n          hasPrev: page > 1,\n        },\n        filters,\n      };\n    } catch (error) {\n      throw new Error(`获取智慧广场作品失败: ${error instanceof Error ? error.message : '未知错误'}`);\n    }\n  }\n\n  /**\n   * 获取筛选选项\n   */\n  private async getSquareFilters(): Promise<any> {\n    try {\n      const [subjectStats, gradeLevelStats] = await Promise.all([\n        (Work.aggregate as any)([\n          { $match: { status: 'published' } },\n          { $group: { _id: '$subject', count: { $sum: 1 } } },\n          { $sort: { count: -1 } },\n        ]),\n        (Work.aggregate as any)([\n          { $match: { status: 'published' } },\n          { $group: { _id: '$gradeLevel', count: { $sum: 1 } } },\n          { $sort: { _id: 1 } },\n        ]),\n      ]);\n\n      return {\n        subjects: subjectStats.map(item => ({\n          value: item._id,\n          label: item._id,\n          count: item.count,\n        })),\n        gradeLevels: gradeLevelStats.map(item => ({\n          value: item._id,\n          label: item._id,\n          count: item.count,\n        })),\n        availableTags: [], // TODO: 实现标签统计\n      };\n    } catch (error) {\n      console.error('获取筛选选项失败:', error);\n      return { subjects: [], gradeLevels: [], availableTags: [] };\n    }\n  }\n\n  /**\n   * 转换作品为卡片展示格式\n   */\n  private transformToWorkCard(work: IWork & { _id: Types.ObjectId | string }): any {\n    const authorSummary = getWorkAuthorSummary(work.author);\n\n    return {\n      id: work._id.toString(),\n      title: work.title,\n      knowledgePoint: work.knowledgePoint,\n      subject: work.subject,\n      gradeLevel: work.gradeLevel,\n      author: {\n        id: authorSummary.id,\n        name: authorSummary.name,\n        avatar: authorSummary.avatar ?? undefined,\n      },\n      reuseCount: work.reuseCount || 0,\n      createdAt: work.createdAt.toISOString(),\n      updatedAt: work.updatedAt.toISOString(),\n      tags: work.tags || [],\n      cardCount: work.cards?.length || 0,\n      cardTypes: work.cards?.map((card: any) => card.type) || [],\n    };\n  }\n}\n\n// 智慧广场查询接口\nexport interface SquareQuery {\n  subject?: string;\n  gradeLevel?: string;\n  page?: number;\n  limit?: number;\n  sortBy?: 'latest' | 'popular' | 'reuse_count';\n  search?: string;\n  tags?: string[];\n}\n\n// 智慧广场响应接口\nexport interface SquareResponse {\n  works: any[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n  filters: any;\n}\n\nexport default new WorkService();\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/share/share-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/JestConfigGenerator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/JestConfigGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/MockServiceManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/TestConfigManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/TestConfigManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/TestDataBuilder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/TestDataCleanupManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/TestDataFactory.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 125. Maximum allowed is 120.","line":396,"column":1,"nodeType":"Program","messageId":"max","endLine":396,"endColumn":126}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ObjectId } from 'mongoose';\n\nimport { NodeType, EdgeType, GraphType, GraphLayout } from '@/shared/types/knowledgeGraph';\nimport { User, Work, TeachingCard, Attribution, KnowledgeGraph, GraphNode, GraphEdge } from '@/types';\n\n/**\n * 测试数据工厂系统\n * 提供标准化的测试数据创建、管理和清理功能\n */\n\n// 基础工厂接口\nexport interface TestDataFactory<T> {\n  create(overrides?: Partial<T>): T;\n  createMany(count: number, overrides?: Partial<T>): T[];\n  createWithRelations?(relations: any): T;\n}\n\n// 序列号生成器\nclass SequenceGenerator {\n  private static counters: Map<string, number> = new Map();\n\n  static next(key: string): number {\n    const current = this.counters.get(key) || 0;\n    const next = current + 1;\n    this.counters.set(key, next);\n    return next;\n  }\n\n  static reset(key?: string): void {\n    if (key) {\n      this.counters.delete(key);\n    } else {\n      this.counters.clear();\n    }\n  }\n}\n\n// 用户数据工厂\nexport class UserFactory implements TestDataFactory<User> {\n  private static readonly defaultUser: Omit<User, '_id'> = {\n    email: 'test@example.com',\n    name: 'Test User',\n    avatar: null,\n    password: null,\n    googleId: null,\n    subscription: {\n      plan: 'free',\n      expiresAt: null,\n      autoRenew: false,\n    },\n    usage: {\n      dailyGenerations: 0,\n      dailyReuses: 0,\n      lastResetDate: new Date(),\n    },\n    contributionScore: 0,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n\n  create(overrides: Partial<User> = {}): User {\n    const sequence = SequenceGenerator.next('user');\n\n    return {\n      _id: new ObjectId(),\n      ...UserFactory.defaultUser,\n      email: `test${sequence}@example.com`,\n      name: `Test User ${sequence}`,\n      ...overrides,\n    };\n  }\n\n  createMany(count: number, overrides: Partial<User> = {}): User[] {\n    return Array.from({ length: count }, () => (this.create as any)(overrides));\n  }\n\n  createWithSubscription(plan: 'free' | 'pro' | 'super', overrides: Partial<User> = {}): User {\n    const expiresAt = plan !== 'free' ? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) : null;\n\n    return (this.create as any)({\n      subscription: {\n        plan,\n        expiresAt,\n        autoRenew: plan !== 'free',\n      },\n      ...overrides,\n    });\n  }\n\n  createWithUsage(generations: number, reuses: number, overrides: Partial<User> = {}): User {\n    return (this.create as any)({\n      usage: {\n        dailyGenerations: generations,\n        dailyReuses: reuses,\n        lastResetDate: new Date(),\n      },\n      ...overrides,\n    });\n  }\n\n  createGoogleUser(overrides: Partial<User> = {}): User {\n    const sequence = SequenceGenerator.next('google-user');\n\n    return (this.create as any)({\n      googleId: `google_${sequence}`,\n      password: null,\n      ...overrides,\n    });\n  }\n}\n\n// 教学卡片工厂\nexport class TeachingCardFactory implements TestDataFactory<TeachingCard> {\n  private static readonly cardTypes: TeachingCard['type'][] = [\n    'visualization', 'analogy', 'thinking', 'interaction',\n  ];\n\n  create(overrides: Partial<TeachingCard> = {}): TeachingCard {\n    const sequence = SequenceGenerator.next('card');\n    const type = TeachingCardFactory.cardTypes[sequence % TeachingCardFactory.cardTypes.length];\n\n    return {\n      id: `card_${sequence}`,\n      type,\n      title: `Test Card ${sequence}`,\n      content: `This is test content for card ${sequence}`,\n      editable: true,\n      ...overrides,\n    };\n  }\n\n  createMany(count: number, overrides: Partial<TeachingCard> = {}): TeachingCard[] {\n    return Array.from({ length: count }, () => (this.create as any)(overrides));\n  }\n\n  createByType(type: TeachingCard['type'], overrides: Partial<TeachingCard> = {}): TeachingCard {\n    return (this.create as any)({ type, ...overrides });\n  }\n\n  createSet(): TeachingCard[] {\n    return TeachingCardFactory.cardTypes.map(type => this.createByType(type));\n  }\n}\n\n// 作品数据工厂\nexport class WorkFactory implements TestDataFactory<Work> {\n  private static readonly subjects = ['数学', '语文', '英语', '物理', '化学', '生物'];\n  private static readonly gradeLevels = ['小学', '初中', '高中'];\n  private static readonly statuses: Work['status'][] = ['draft', 'published', 'archived'];\n\n  private cardFactory = new TeachingCardFactory();\n\n  create(overrides: Partial<Work> = {}): Work {\n    const sequence = SequenceGenerator.next('work');\n    const subject = WorkFactory.subjects[sequence % WorkFactory.subjects.length];\n    const gradeLevel = WorkFactory.gradeLevels[sequence % WorkFactory.gradeLevels.length];\n\n    return {\n      _id: new ObjectId(),\n      title: `Test Work ${sequence}`,\n      knowledgePoint: `Knowledge Point ${sequence}`,\n      subject,\n      gradeLevel,\n      author: new ObjectId(),\n      cards: this.cardFactory.createMany(3),\n      tags: [`tag${sequence}`, `${subject.toLowerCase()}`],\n      reuseCount: 0,\n      attribution: [],\n      status: 'draft',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides,\n    };\n  }\n\n  createMany(count: number, overrides: Partial<Work> = {}): Work[] {\n    return Array.from({ length: count }, () => (this.create as any)(overrides));\n  }\n\n  createWithAuthor(author: ObjectId, overrides: Partial<Work> = {}): Work {\n    return (this.create as any)({ author, ...overrides });\n  }\n\n  createPublished(overrides: Partial<Work> = {}): Work {\n    return (this.create as any)({\n      status: 'published',\n      reuseCount: Math.floor(Math.random() * 50),\n      ...overrides,\n    });\n  }\n\n  createWithCards(cardCount: number, overrides: Partial<Work> = {}): Work {\n    return (this.create as any)({\n      cards: this.cardFactory.createMany(cardCount),\n      ...overrides,\n    });\n  }\n\n  createReusedWork(originalWork: Work, newAuthor: ObjectId, overrides: Partial<Work> = {}): Work {\n    const attribution: Attribution = {\n      originalAuthor: originalWork.author,\n      originalWorkId: originalWork._id,\n      originalWorkTitle: originalWork.title,\n    };\n\n    return (this.create as any)({\n      title: `${originalWork.title} (Reused)`,\n      knowledgePoint: originalWork.knowledgePoint,\n      subject: originalWork.subject,\n      gradeLevel: originalWork.gradeLevel,\n      author: newAuthor,\n      originalWork: originalWork._id,\n      attribution: [attribution],\n      cards: originalWork.cards.map(card => ({ ...card, id: `${card.id}_reused` })),\n      ...overrides,\n    });\n  }\n}\n\n// 知识图谱节点工厂\nexport class GraphNodeFactory implements TestDataFactory<GraphNode> {\n  create(overrides: Partial<GraphNode> = {}): GraphNode {\n    const sequence = SequenceGenerator.next('node');\n\n    return {\n      id: `node_${sequence}`,\n      label: `Node ${sequence}`,\n      type: NodeType.CONCEPT,\n      level: 0,\n      parentId: null,\n      position: { x: 0, y: 0, z: 0 },\n      metadata: {\n        description: `Description for node ${sequence}`,\n        workCount: 0,\n        reuseCount: 0,\n        color: '#3b82f6',\n        icon: '📝',\n        size: 30,\n        importance: 0.5,\n        tags: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      isVisible: true,\n      isLocked: false,\n      ...overrides,\n    };\n  }\n\n  createMany(count: number, overrides: Partial<GraphNode> = {}): GraphNode[] {\n    return Array.from({ length: count }, () => (this.create as any)(overrides));\n  }\n\n  createWithParent(parentId: string, overrides: Partial<GraphNode> = {}): GraphNode {\n    return (this.create as any)({ parentId, level: 1, ...overrides });\n  }\n\n  createHierarchy(depth: number, childrenPerLevel: number = 2): GraphNode[] {\n    const nodes: GraphNode[] = [];\n\n    // Create root node\n    const root = (this.create as any)({ level: 0, label: 'Root Node' });\n    nodes.push(root);\n\n    // Create hierarchy\n    let currentLevelNodes = [root];\n\n    for (let level = 1; level < depth; level++) {\n      const nextLevelNodes: GraphNode[] = [];\n\n      for (const parent of currentLevelNodes) {\n        for (let i = 0; i < childrenPerLevel; i++) {\n          const child = this.createWithParent(parent.id, {\n            level,\n            label: `${parent.label} - Child ${i + 1}`,\n          });\n          nodes.push(child);\n          nextLevelNodes.push(child);\n        }\n      }\n\n      currentLevelNodes = nextLevelNodes;\n    }\n\n    return nodes;\n  }\n}\n\n// 知识图谱边工厂\nexport class GraphEdgeFactory implements TestDataFactory<GraphEdge> {\n  create(overrides: Partial<GraphEdge> = {}): GraphEdge {\n    const sequence = SequenceGenerator.next('edge');\n\n    return {\n      id: `edge_${sequence}`,\n      source: `node_${sequence}`,\n      target: `node_${sequence + 1}`,\n      type: EdgeType.CONTAINS,\n      weight: 1,\n      metadata: {\n        strength: 1,\n        description: `Edge ${sequence} description`,\n        color: '#6b7280',\n        style: 'solid',\n        animated: false,\n        createdAt: new Date(),\n      },\n      isVisible: true,\n      isDirected: true,\n      ...overrides,\n    };\n  }\n\n  createMany(count: number, overrides: Partial<GraphEdge> = {}): GraphEdge[] {\n    return Array.from({ length: count }, () => (this.create as any)(overrides));\n  }\n\n  createBetween(sourceId: string, targetId: string, overrides: Partial<GraphEdge> = {}): GraphEdge {\n    return (this.create as any)({ source: sourceId, target: targetId, ...overrides });\n  }\n\n  createHierarchyEdges(nodes: GraphNode[]): GraphEdge[] {\n    const edges: GraphEdge[] = [];\n\n    for (const node of nodes) {\n      if (node.parentId) {\n        const edge = this.createBetween(node.parentId, node.id, {\n          type: EdgeType.CONTAINS,\n        });\n        edges.push(edge);\n      }\n    }\n\n    return edges;\n  }\n}\n\n// 知识图谱工厂\nexport class KnowledgeGraphFactory implements TestDataFactory<KnowledgeGraph> {\n  private nodeFactory = new GraphNodeFactory();\n  private edgeFactory = new GraphEdgeFactory();\n\n  create(overrides: Partial<KnowledgeGraph> = {}): KnowledgeGraph {\n    const sequence = SequenceGenerator.next('graph');\n    const nodes = this.nodeFactory.createMany(5);\n    const edges = this.edgeFactory.createMany(4);\n\n    return {\n      _id: new ObjectId(),\n      userId: new ObjectId(),\n      name: `Test Graph ${sequence}`,\n      description: `Test knowledge graph ${sequence}`,\n      type: GraphType.CUSTOM,\n      subject: '数学',\n      gradeLevel: '初中',\n      nodes,\n      edges,\n      layout: {\n        type: GraphLayout.FORCE,\n        options: {\n          nodeSpacing: 100,\n          levelSpacing: 150,\n          centerForce: 0.1,\n          linkDistance: 80,\n          linkStrength: 0.5,\n          chargeStrength: -300,\n          collisionRadius: 30,\n          alpha: 0.3,\n          alphaDecay: 0.02,\n          velocityDecay: 0.4,\n        },\n      },\n      view: {\n        showLabels: true,\n        showEdgeLabels: false,\n        nodeSize: 'proportional',\n        edgeWidth: 'fixed',\n        colorScheme: 'default',\n        theme: 'light',\n        animations: true,\n        minimap: true,\n        toolbar: true,\n      },\n      version: 1,\n      isPublic: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides,\n    };\n  }\n\n  createMany(count: number, overrides: Partial<KnowledgeGraph> = {}): KnowledgeGraph[] {\n    return Array.from({ length: count }, () => (this.create as any)(overrides));\n  }\n\n  createWithHierarchy(depth: number, childrenPerLevel: number = 2, overrides: Partial<KnowledgeGraph> = {}): KnowledgeGraph {\n    const nodes = this.nodeFactory.createHierarchy(depth, childrenPerLevel);\n    const edges = this.edgeFactory.createHierarchyEdges(nodes);\n\n    return (this.create as any)({\n      nodes,\n      edges,\n      ...overrides,\n    });\n  }\n\n  createPublic(overrides: Partial<KnowledgeGraph> = {}): KnowledgeGraph {\n    return (this.create as any)({ isPublic: true, ...overrides });\n  }\n\n  createForUser(userId: ObjectId, overrides: Partial<KnowledgeGraph> = {}): KnowledgeGraph {\n    return (this.create as any)({ userId, ...overrides });\n  }\n}\n\n// 主工厂类 - 统一管理所有工厂\nexport class TestDataFactory {\n  public readonly user = new UserFactory();\n  public readonly card = new TeachingCardFactory();\n  public readonly work = new WorkFactory();\n  public readonly node = new GraphNodeFactory();\n  public readonly edge = new GraphEdgeFactory();\n  public readonly graph = new KnowledgeGraphFactory();\n\n  /**\n   * 重置所有序列号计数器\n   */\n  resetSequences(): void {\n    SequenceGenerator.reset();\n  }\n\n  /**\n   * 创建完整的用户-作品关系数据\n   */\n  createUserWithWorks(workCount: number = 3): { user: User; works: Work[] } {\n    const user = this(user.create as any)();\n    const works = this.work.createMany(workCount, { author: user._id });\n\n    return { user, works };\n  }\n\n  /**\n   * 创建作品复用关系链\n   */\n  createReuseChain(length: number): { users: User[]; works: Work[] } {\n    const users = this.user.createMany(length);\n    const works: Work[] = [];\n\n    // 创建原始作品\n    const originalWork = this.work.createWithAuthor(users[0]._id, { status: 'published' });\n    works.push(originalWork);\n\n    // 创建复用链\n    let currentWork = originalWork;\n    for (let i = 1; i < length; i++) {\n      const reusedWork = this.work.createReusedWork(currentWork, users[i]._id);\n      works.push(reusedWork);\n      currentWork = reusedWork;\n    }\n\n    return { users, works };\n  }\n\n  /**\n   * 创建知识图谱与作品的关联数据\n   */\n  createGraphWithWorks(nodeCount: number = 5, workCount: number = 10): {\n    user: User;\n    graph: KnowledgeGraph;\n    works: Work[];\n  } {\n    const user = this(user.create as any)();\n    const graph = this.graph.createForUser(user._id);\n    const works = this.work.createMany(workCount, { author: user._id });\n\n    // 为节点分配作品\n    graph.nodes.forEach((node, index) => {\n      const nodeWorks = works.slice(index * 2, (index + 1) * 2);\n      node.metadata.workCount = nodeWorks.length;\n    });\n\n    return { user, graph, works };\n  }\n\n  /**\n   * 创建多用户协作场景数据\n   */\n  createCollaborationScenario(): {\n    users: User[];\n    originalWorks: Work[];\n    reusedWorks: Work[];\n    graphs: KnowledgeGraph[];\n  } {\n    const users = this.user.createMany(5);\n    const originalWorks = users.map(user =>\n      this.work.createWithAuthor(user._id, { status: 'published' }),\n    );\n\n    const reusedWorks: Work[] = [];\n    // 每个用户复用其他用户的作品\n    users.forEach((user, userIndex) => {\n      originalWorks.forEach((originalWork, workIndex) => {\n        if (userIndex !== workIndex) {\n          const reused = this.work.createReusedWork(originalWork, user._id);\n          reusedWorks.push(reused);\n        }\n      });\n    });\n\n    const graphs = users.map(user => this.graph.createForUser(user._id));\n\n    return { users, originalWorks, reusedWorks, graphs };\n  }\n}\n\n// 默认导出单例实例\nexport const testDataFactory = new TestDataFactory();\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/TestDataRelationshipManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/TestDatabaseManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/TestEnvironment.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/TestEnvironment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/analytics/HistoricalDataManager.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 121. Maximum allowed is 120.","line":259,"column":1,"nodeType":"Program","messageId":"max","endLine":259,"endColumn":122}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Historical Data Manager\n *\n * Manages the storage, retrieval, and lifecycle of test execution history data.\n * Provides efficient data access patterns for trend analysis and reporting.\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface TestExecutionRecord {\n  id: string;\n  timestamp: Date;\n  testSuite: string;\n  testFile: string;\n  testName: string;\n  status: 'passed' | 'failed' | 'skipped';\n  duration: number;\n  error?: {\n    message: string;\n    stack?: string;\n    type: string;\n  };\n  coverage?: {\n    statements: number;\n    branches: number;\n    functions: number;\n    lines: number;\n  };\n  performance?: {\n    memoryUsage: number;\n    cpuUsage: number;\n    executionTime: number;\n  };\n  environment: {\n    nodeVersion: string;\n    platform: string;\n    ci: boolean;\n    branch: string;\n    commit: string;\n  };\n  metadata?: Record<string, any>;\n}\n\nexport interface TestSuiteRecord {\n  id: string;\n  timestamp: Date;\n  suiteName: string;\n  totalTests: number;\n  passedTests: number;\n  failedTests: number;\n  skippedTests: number;\n  duration: number;\n  coverage: {\n    statements: number;\n    branches: number;\n    functions: number;\n    lines: number;\n  };\n  performance: {\n    totalMemory: number;\n    peakMemory: number;\n    averageExecutionTime: number;\n  };\n  environment: {\n    nodeVersion: string;\n    platform: string;\n    ci: boolean;\n    branch: string;\n    commit: string;\n  };\n  tests: TestExecutionRecord[];\n}\n\nexport interface DataRetentionPolicy {\n  maxAge: number; // days\n  maxRecords: number;\n  compressionThreshold: number; // days after which to compress data\n  archiveThreshold: number; // days after which to archive data\n}\n\nexport interface QueryOptions {\n  startDate?: Date;\n  endDate?: Date;\n  testSuite?: string;\n  testFile?: string;\n  status?: 'passed' | 'failed' | 'skipped';\n  branch?: string;\n  limit?: number;\n  offset?: number;\n  sortBy?: 'timestamp' | 'duration' | 'testName';\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface AggregationOptions {\n  groupBy: 'day' | 'week' | 'month' | 'testSuite' | 'testFile';\n  metrics: ('count' | 'duration' | 'coverage' | 'performance')[];\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport class HistoricalDataManager extends EventEmitter {\n  private storage: Map<string, TestSuiteRecord[]> = new Map();\n  private testRecords: Map<string, TestExecutionRecord[]> = new Map();\n  private retentionPolicy: DataRetentionPolicy;\n  private compressionEnabled: boolean = true;\n  private archiveEnabled: boolean = true;\n\n  constructor(retentionPolicy?: Partial<DataRetentionPolicy>) {\n    super();\n\n    this.retentionPolicy = {\n      maxAge: 90, // 90 days\n      maxRecords: 100000,\n      compressionThreshold: 30, // 30 days\n      archiveThreshold: 60, // 60 days\n      ...retentionPolicy,\n    };\n\n    // Start cleanup interval\n    this.startCleanupInterval();\n  }\n\n  /**\n   * Store a test suite execution record\n   */\n  async storeTestSuiteRecord(record: TestSuiteRecord): Promise<void> {\n    const key = this.generateSuiteKey(record.suiteName);\n    const records = this.storage.get(key) || [];\n\n    records.push(record);\n\n    // Sort by timestamp (newest first)\n    records.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    this.storage.set(key, records);\n\n    // Store individual test records\n    for (const test of record.tests) {\n      await this.storeTestRecord(test);\n    }\n\n    this.emit('suiteRecordStored', record);\n\n    // Apply retention policy\n    await this.applyRetentionPolicy(key);\n  }\n\n  /**\n   * Store an individual test execution record\n   */\n  async storeTestRecord(record: TestExecutionRecord): Promise<void> {\n    const key = this.generateTestKey(record.testFile, record.testName);\n    const records = this.testRecords.get(key) || [];\n\n    records.push(record);\n\n    // Sort by timestamp (newest first)\n    records.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    this.testRecords.set(key, records);\n\n    this.emit('testRecordStored', record);\n  }\n\n  /**\n   * Query test suite records\n   */\n  async queryTestSuiteRecords(\n    suiteName?: string,\n    options?: QueryOptions,\n  ): Promise<TestSuiteRecord[]> {\n    let allRecords: TestSuiteRecord[] = [];\n\n    if (suiteName) {\n      const key = this.generateSuiteKey(suiteName);\n      allRecords = this.storage.get(key) || [];\n    } else {\n      // Get all records from all suites\n      for (const records of this.storage.values()) {\n        allRecords.push(...records);\n      }\n      // Sort by timestamp\n      allRecords.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n    }\n\n    return this.applyQueryFilters(allRecords, options);\n  }\n\n  /**\n   * Query individual test records\n   */\n  async queryTestRecords(\n    testFile?: string,\n    testName?: string,\n    options?: QueryOptions,\n  ): Promise<TestExecutionRecord[]> {\n    let allRecords: TestExecutionRecord[] = [];\n\n    if (testFile && testName) {\n      const key = this.generateTestKey(testFile, testName);\n      allRecords = this.testRecords.get(key) || [];\n    } else if (testFile) {\n      // Get all records for a specific test file\n      for (const [key, records] of this.testRecords.entries()) {\n        if (key.startsWith(`${testFile}:`)) {\n          allRecords.push(...records);\n        }\n      }\n      allRecords.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n    } else {\n      // Get all test records\n      for (const records of this.testRecords.values()) {\n        allRecords.push(...records);\n      }\n      allRecords.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n    }\n\n    return this.applyTestQueryFilters(allRecords, options);\n  }\n\n  /**\n   * Get aggregated data for trend analysis\n   */\n  async getAggregatedData(options: AggregationOptions): Promise<any[]> {\n    const allSuiteRecords = await this.queryTestSuiteRecords();\n\n    // Filter by date range\n    const filteredRecords = allSuiteRecords.filter(record => {\n      if (options.startDate && record.timestamp < options.startDate) return false;\n      if (options.endDate && record.timestamp > options.endDate) return false;\n      return true;\n    });\n\n    // Group data\n    const grouped = this.groupRecords(filteredRecords, options.groupBy);\n\n    // Calculate metrics for each group\n    const aggregated = Object.entries(grouped).map(([key, records]) => {\n      const metrics: any = { group: key, count: records.length };\n\n      if (options.metrics.includes('duration')) {\n        metrics.averageDuration = records.reduce((sum, r) => sum + r.duration, 0) / records.length;\n        metrics.totalDuration = records.reduce((sum, r) => sum + r.duration, 0);\n      }\n\n      if (options.metrics.includes('coverage')) {\n        metrics.averageCoverage = {\n          statements: records.reduce((sum, r) => sum + r.coverage.statements, 0) / records.length,\n          branches: records.reduce((sum, r) => sum + r.coverage.branches, 0) / records.length,\n          functions: records.reduce((sum, r) => sum + r.coverage.functions, 0) / records.length,\n          lines: records.reduce((sum, r) => sum + r.coverage.lines, 0) / records.length,\n        };\n      }\n\n      if (options.metrics.includes('performance')) {\n        metrics.averagePerformance = {\n          totalMemory: records.reduce((sum, r) => sum + r.performance.totalMemory, 0) / records.length,\n          peakMemory: Math.max(...records.map(r => r.performance.peakMemory)),\n          averageExecutionTime: records.reduce((sum, r) => sum + r.performance.averageExecutionTime, 0) / records.length,\n        };\n      }\n\n      return metrics;\n    });\n\n    return aggregated.sort((a, b) => a.group.localeCompare(b.group));\n  }\n\n  /**\n   * Get test failure patterns\n   */\n  async getFailurePatterns(days: number = 30): Promise<any[]> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - days * 24 * 60 * 60 * 1000);\n\n    const failedTests = await this.queryTestRecords(undefined, undefined, {\n      startDate,\n      endDate,\n      status: 'failed',\n    });\n\n    // Group by error type and message\n    const patterns = new Map<string, {\n      count: number;\n      tests: string[];\n      errorType: string;\n      errorMessage: string;\n      firstSeen: Date;\n      lastSeen: Date;\n    }>();\n\n    for (const test of failedTests) {\n      if (!test.error) continue;\n\n      const key = `${test.error.type}:${test.error.message}`;\n      const existing = patterns.get(key);\n\n      if (existing) {\n        existing.count++;\n        existing.tests.push(`${test.testFile}:${test.testName}`);\n        existing.lastSeen = test.timestamp > existing.lastSeen ? test.timestamp : existing.lastSeen;\n      } else {\n        patterns.set(key, {\n          count: 1,\n          tests: [`${test.testFile}:${test.testName}`],\n          errorType: test.error.type,\n          errorMessage: test.error.message,\n          firstSeen: test.timestamp,\n          lastSeen: test.timestamp,\n        });\n      }\n    }\n\n    return Array.from(patterns.values())\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 20); // Top 20 failure patterns\n  }\n\n  /**\n   * Get flaky test analysis\n   */\n  async getFlakyTests(days: number = 30, threshold: number = 0.1): Promise<any[]> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - days * 24 * 60 * 60 * 1000);\n\n    const testStats = new Map<string, {\n      total: number;\n      failed: number;\n      testFile: string;\n      testName: string;\n      flakiness: number;\n      recentFailures: Date[];\n    }>();\n\n    const allTests = await this.queryTestRecords(undefined, undefined, {\n      startDate,\n      endDate,\n    });\n\n    for (const test of allTests) {\n      const key = `${test.testFile}:${test.testName}`;\n      const existing = testStats.get(key);\n\n      if (existing) {\n        existing.total++;\n        if (test.status === 'failed') {\n          existing.failed++;\n          existing.recentFailures.push(test.timestamp);\n        }\n      } else {\n        testStats.set(key, {\n          total: 1,\n          failed: test.status === 'failed' ? 1 : 0,\n          testFile: test.testFile,\n          testName: test.testName,\n          flakiness: 0,\n          recentFailures: test.status === 'failed' ? [test.timestamp] : [],\n        });\n      }\n    }\n\n    // Calculate flakiness and filter\n    const flakyTests = Array.from(testStats.values())\n      .map(stat => ({\n        ...stat,\n        flakiness: stat.total > 0 ? stat.failed / stat.total : 0,\n      }))\n      .filter(stat => stat.flakiness > threshold && stat.total >= 5) // At least 5 runs\n      .sort((a, b) => b.flakiness - a.flakiness);\n\n    return flakyTests;\n  }\n\n  /**\n   * Export historical data\n   */\n  async exportData(format: 'json' | 'csv' = 'json'): Promise<string> {\n    const allSuiteRecords = await this.queryTestSuiteRecords();\n\n    if (format === 'json') {\n      return JSON.stringify({\n        exportDate: new Date(),\n        totalRecords: allSuiteRecords.length,\n        retentionPolicy: this.retentionPolicy,\n        data: allSuiteRecords,\n      }, null, 2);\n    } else {\n      // CSV format\n      const headers = [\n        'timestamp', 'suiteName', 'totalTests', 'passedTests', 'failedTests',\n        'skippedTests', 'duration', 'coverageStatements', 'coverageBranches',\n        'coverageFunctions', 'coverageLines', 'totalMemory', 'peakMemory',\n        'averageExecutionTime', 'nodeVersion', 'platform', 'ci', 'branch', 'commit',\n      ];\n\n      const rows = allSuiteRecords.map(record => [\n        record.timestamp.toISOString(),\n        record.suiteName,\n        record.totalTests,\n        record.passedTests,\n        record.failedTests,\n        record.skippedTests,\n        record.duration,\n        record.coverage.statements,\n        record.coverage.branches,\n        record.coverage.functions,\n        record.coverage.lines,\n        record.performance.totalMemory,\n        record.performance.peakMemory,\n        record.performance.averageExecutionTime,\n        record.environment.nodeVersion,\n        record.environment.platform,\n        record.environment.ci,\n        record.environment.branch,\n        record.environment.commit,\n      ]);\n\n      return [headers.join(','), ...rows.map(row => row.join(','))].join('\\n');\n    }\n  }\n\n  /**\n   * Import historical data\n   */\n  async importData(data: string, format: 'json' | 'csv' = 'json'): Promise<void> {\n    if (format === 'json') {\n      const parsed = JSON.parse(data);\n\n      if (parsed.data && Array.isArray(parsed.data)) {\n        for (const record of parsed.data) {\n          // Ensure timestamp is a Date object\n          const recordWithDate = {\n            ...record,\n            timestamp: new Date(record.timestamp),\n          };\n          await this.storeTestSuiteRecord(recordWithDate);\n        }\n      }\n    } else {\n      // CSV format parsing would be implemented here\n      throw new Error('CSV import not yet implemented');\n    }\n\n    this.emit('dataImported', { format, recordCount: this.getTotalRecords() });\n  }\n\n  /**\n   * Get storage statistics\n   */\n  getStorageStats(): {\n    totalSuiteRecords: number;\n    totalTestRecords: number;\n    oldestRecord: Date | null;\n    newestRecord: Date | null;\n    storageSize: number;\n  } {\n    let totalSuiteRecords = 0;\n    let totalTestRecords = 0;\n    let oldestRecord: Date | null = null;\n    let newestRecord: Date | null = null;\n\n    for (const records of this.storage.values()) {\n      totalSuiteRecords += records.length;\n\n      for (const record of records) {\n        if (!oldestRecord || record.timestamp < oldestRecord) {\n          oldestRecord = record.timestamp;\n        }\n        if (!newestRecord || record.timestamp > newestRecord) {\n          newestRecord = record.timestamp;\n        }\n      }\n    }\n\n    for (const records of this.testRecords.values()) {\n      totalTestRecords += records.length;\n    }\n\n    return {\n      totalSuiteRecords,\n      totalTestRecords,\n      oldestRecord,\n      newestRecord,\n      storageSize: this.calculateStorageSize(),\n    };\n  }\n\n  /**\n   * Clear all historical data\n   */\n  async clearAllData(): Promise<void> {\n    this.storage.clear();\n    this.testRecords.clear();\n    this.emit('dataCleared');\n  }\n\n  /**\n   * Private helper methods\n   */\n  private generateSuiteKey(suiteName: string): string {\n    return `suite:${suiteName}`;\n  }\n\n  private generateTestKey(testFile: string, testName: string): string {\n    return `${testFile}:${testName}`;\n  }\n\n  private applyQueryFilters(\n    records: TestSuiteRecord[],\n    options?: QueryOptions,\n  ): TestSuiteRecord[] {\n    let filtered = records;\n\n    if (options?.startDate) {\n      filtered = filtered.filter(r => r.timestamp >= options.startDate!);\n    }\n\n    if (options?.endDate) {\n      filtered = filtered.filter(r => r.timestamp <= options.endDate!);\n    }\n\n    if (options?.branch) {\n      filtered = filtered.filter(r => r.environment.branch === options.branch);\n    }\n\n    // Apply sorting\n    if (options?.sortBy) {\n      filtered.sort((a, b) => {\n        let aVal: any, bVal: any;\n\n        switch (options.sortBy) {\n          case 'timestamp':\n            aVal = a.timestamp.getTime();\n            bVal = b.timestamp.getTime();\n            break;\n          case 'duration':\n            aVal = a.duration;\n            bVal = b.duration;\n            break;\n          default:\n            aVal = a.suiteName;\n            bVal = b.suiteName;\n        }\n\n        const result = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n        return options.sortOrder === 'desc' ? -result : result;\n      });\n    }\n\n    // Apply pagination\n    if (options?.offset || options?.limit) {\n      const start = options.offset || 0;\n      const end = options.limit ? start + options.limit : undefined;\n      filtered = filtered.slice(start, end);\n    }\n\n    return filtered;\n  }\n\n  private applyTestQueryFilters(\n    records: TestExecutionRecord[],\n    options?: QueryOptions,\n  ): TestExecutionRecord[] {\n    let filtered = records;\n\n    if (options?.startDate) {\n      filtered = filtered.filter(r => r.timestamp >= options.startDate!);\n    }\n\n    if (options?.endDate) {\n      filtered = filtered.filter(r => r.timestamp <= options.endDate!);\n    }\n\n    if (options?.status) {\n      filtered = filtered.filter(r => r.status === options.status);\n    }\n\n    if (options?.testSuite) {\n      filtered = filtered.filter(r => r.testSuite === options.testSuite);\n    }\n\n    if (options?.testFile) {\n      filtered = filtered.filter(r => r.testFile === options.testFile);\n    }\n\n    if (options?.branch) {\n      filtered = filtered.filter(r => r.environment.branch === options.branch);\n    }\n\n    // Apply sorting\n    if (options?.sortBy) {\n      filtered.sort((a, b) => {\n        let aVal: any, bVal: any;\n\n        switch (options.sortBy) {\n          case 'timestamp':\n            aVal = a.timestamp.getTime();\n            bVal = b.timestamp.getTime();\n            break;\n          case 'duration':\n            aVal = a.duration;\n            bVal = b.duration;\n            break;\n          case 'testName':\n            aVal = a.testName;\n            bVal = b.testName;\n            break;\n          default:\n            aVal = a.timestamp.getTime();\n            bVal = b.timestamp.getTime();\n        }\n\n        const result = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n        return options.sortOrder === 'desc' ? -result : result;\n      });\n    }\n\n    // Apply pagination\n    if (options?.offset || options?.limit) {\n      const start = options.offset || 0;\n      const end = options.limit ? start + options.limit : undefined;\n      filtered = filtered.slice(start, end);\n    }\n\n    return filtered;\n  }\n\n  private groupRecords(records: TestSuiteRecord[], groupBy: string): Record<string, TestSuiteRecord[]> {\n    const grouped: Record<string, TestSuiteRecord[]> = {};\n\n    for (const record of records) {\n      let key: string;\n\n      switch (groupBy) {\n        case 'day':\n          key = record.timestamp.toISOString().split('T')[0];\n          break;\n        case 'week':\n          const weekStart = new Date(record.timestamp);\n          weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n          key = weekStart.toISOString().split('T')[0];\n          break;\n        case 'month':\n          key = record.timestamp.toISOString().substring(0, 7);\n          break;\n        case 'testSuite':\n          key = record.suiteName;\n          break;\n        default:\n          key = 'all';\n      }\n\n      if (!grouped[key]) {\n        grouped[key] = [];\n      }\n      grouped[key].push(record);\n    }\n\n    return grouped;\n  }\n\n  private async applyRetentionPolicy(key: string): Promise<void> {\n    const records = this.storage.get(key) || [];\n    const cutoffDate = new Date(Date.now() - this.retentionPolicy.maxAge * 24 * 60 * 60 * 1000);\n\n    // Remove old records\n    const filteredRecords = records.filter(record => record.timestamp > cutoffDate);\n\n    // Limit number of records\n    if (filteredRecords.length > this.retentionPolicy.maxRecords) {\n      filteredRecords.splice(this.retentionPolicy.maxRecords);\n    }\n\n    this.storage.set(key, filteredRecords);\n\n    if (filteredRecords.length < records.length) {\n      this.emit('recordsCleanedUp', {\n        key,\n        removedCount: records.length - filteredRecords.length,\n      });\n    }\n  }\n\n  private startCleanupInterval(): void {\n    // Run cleanup every hour\n    setInterval(async () => {\n      for (const key of this.storage.keys()) {\n        await this.applyRetentionPolicy(key);\n      }\n    }, 60 * 60 * 1000);\n  }\n\n  private calculateStorageSize(): number {\n    let size = 0;\n\n    for (const records of this.storage.values()) {\n      size += JSON.stringify(records).length;\n    }\n\n    for (const records of this.testRecords.values()) {\n      size += JSON.stringify(records).length;\n    }\n\n    return size;\n  }\n\n  private getTotalRecords(): number {\n    let total = 0;\n\n    for (const records of this.storage.values()) {\n      total += records.length;\n    }\n\n    return total;\n  }\n\n  private generateSuiteKey(suiteName: string): string {\n    return `suite:${suiteName}`;\n  }\n\n  private generateTestKey(testFile: string, testName: string): string {\n    return `${testFile}:${testName}`;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/analytics/QualityPredictor.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 124. Maximum allowed is 120.","line":670,"column":1,"nodeType":"Program","messageId":"max","endLine":670,"endColumn":125}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Quality Predictor\n *\n * Implements machine learning-inspired models to predict test quality metrics,\n * identify potential issues before they occur, and provide proactive recommendations\n * for maintaining high test quality.\n */\n\nimport { EventEmitter } from 'events';\n\nimport { HistoricalDataManager, TestSuiteRecord } from './HistoricalDataManager';\nimport { TrendAnalyzer, TrendAnalysis } from './TrendAnalyzer';\n\nexport interface QualityMetrics {\n  coverage: number;\n  passRate: number;\n  executionTime: number;\n  memoryUsage: number;\n  flakiness: number;\n  stability: number;\n  maintainability: number;\n}\n\nexport interface QualityPrediction {\n  metric: keyof QualityMetrics;\n  currentValue: number;\n  predictedValue: number;\n  confidence: number;\n  timeframe: number; // days\n  trend: 'improving' | 'degrading' | 'stable';\n  riskLevel: 'low' | 'medium' | 'high';\n  factors: QualityFactor[];\n}\n\nexport interface QualityFactor {\n  name: string;\n  impact: number; // -1 to 1\n  confidence: number;\n  description: string;\n  category: 'code' | 'test' | 'environment' | 'process';\n}\n\nexport interface RiskAssessment {\n  overallRisk: 'low' | 'medium' | 'high';\n  riskScore: number; // 0-100\n  criticalAreas: string[];\n  predictions: QualityPrediction[];\n  recommendations: QualityRecommendation[];\n  timeToAction: number; // days until action needed\n}\n\nexport interface QualityRecommendation {\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  category: 'coverage' | 'performance' | 'stability' | 'maintenance';\n  title: string;\n  description: string;\n  actionItems: string[];\n  estimatedImpact: number; // 0-100\n  estimatedEffort: 'low' | 'medium' | 'high';\n  timeframe: string;\n}\n\nexport interface ModelFeatures {\n  // Historical metrics\n  avgCoverage: number;\n  avgPassRate: number;\n  avgExecutionTime: number;\n  avgMemoryUsage: number;\n\n  // Trend features\n  coverageTrend: number;\n  passRateTrend: number;\n  executionTimeTrend: number;\n  memoryUsageTrend: number;\n\n  // Volatility features\n  coverageVolatility: number;\n  passRateVolatility: number;\n  executionTimeVolatility: number;\n\n  // Code change features\n  testCountChange: number;\n  codeChurnRate: number;\n\n  // Environmental features\n  ciFailureRate: number;\n  deploymentFrequency: number;\n}\n\nexport interface PredictionModel {\n  name: string;\n  version: string;\n  accuracy: number;\n  lastTrained: Date;\n  features: string[];\n  predict(features: ModelFeatures): number;\n  getFeatureImportance(): Record<string, number>;\n}\n\nexport class QualityPredictor extends EventEmitter {\n  private dataManager: HistoricalDataManager;\n  private trendAnalyzer: TrendAnalyzer;\n  private models: Map<string, PredictionModel> = new Map();\n  private predictionCache: Map<string, any> = new Map();\n  private cacheTimeout: number = 10 * 60 * 1000; // 10 minutes\n\n  constructor(dataManager: HistoricalDataManager, trendAnalyzer: TrendAnalyzer) {\n    super();\n    this.dataManager = dataManager;\n    this.trendAnalyzer = trendAnalyzer;\n\n    // Initialize prediction models\n    this.initializePredictionModels();\n  }\n\n  /**\n   * Predict quality metrics for the next period\n   */\n  async predictQualityMetrics(days: number = 7): Promise<QualityPrediction[]> {\n    const cacheKey = `quality-predictions-${days}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) return cached;\n\n    const features = await this.extractModelFeatures();\n    const predictions: QualityPrediction[] = [];\n\n    // Predict each quality metric\n    const metrics: (keyof QualityMetrics)[] = [\n      'coverage', 'passRate', 'executionTime', 'memoryUsage',\n      'flakiness', 'stability', 'maintainability',\n    ];\n\n    for (const metric of metrics) {\n      const model = this.models.get(metric);\n      if (model) {\n        const prediction = await this.predictMetric(metric, features, days);\n        predictions.push(prediction);\n      }\n    }\n\n    this.setCachedResult(cacheKey, predictions);\n    return predictions;\n  }\n\n  /**\n   * Assess overall quality risk\n   */\n  async assessQualityRisk(days: number = 30): Promise<RiskAssessment> {\n    const predictions = await this.predictQualityMetrics(days);\n    const criticalAreas: string[] = [];\n    let totalRisk = 0;\n    let riskCount = 0;\n\n    // Calculate risk for each prediction\n    for (const prediction of predictions) {\n      if (prediction.riskLevel === 'high') {\n        criticalAreas.push(prediction.metric);\n        totalRisk += 80;\n        riskCount++;\n      } else if (prediction.riskLevel === 'medium') {\n        totalRisk += 50;\n        riskCount++;\n      } else {\n        totalRisk += 20;\n        riskCount++;\n      }\n    }\n\n    const riskScore = riskCount > 0 ? totalRisk / riskCount : 0;\n    const overallRisk: 'low' | 'medium' | 'high' =\n      riskScore > 70 ? 'high' : riskScore > 40 ? 'medium' : 'low';\n\n    // Generate recommendations\n    const recommendations = await this.generateQualityRecommendations(predictions);\n\n    // Calculate time to action\n    const timeToAction = this.calculateTimeToAction(predictions);\n\n    return {\n      overallRisk,\n      riskScore,\n      criticalAreas,\n      predictions,\n      recommendations,\n      timeToAction,\n    };\n  }\n\n  /**\n   * Generate proactive quality recommendations\n   */\n  async generateQualityRecommendations(\n    predictions?: QualityPrediction[],\n  ): Promise<QualityRecommendation[]> {\n    if (!predictions) {\n      predictions = await this.predictQualityMetrics();\n    }\n\n    const recommendations: QualityRecommendation[] = [];\n\n    for (const prediction of predictions) {\n      const metricRecommendations = this.generateMetricRecommendations(prediction);\n      recommendations.push(...metricRecommendations);\n    }\n\n    // Sort by priority and impact\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n      const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];\n      if (priorityDiff !== 0) return priorityDiff;\n      return b.estimatedImpact - a.estimatedImpact;\n    });\n  }\n\n  /**\n   * Identify quality factors affecting predictions\n   */\n  async identifyQualityFactors(metric: keyof QualityMetrics): Promise<QualityFactor[]> {\n    const model = this.models.get(metric);\n    if (!model) return [];\n\n    const featureImportance = model.getFeatureImportance();\n    const factors: QualityFactor[] = [];\n\n    // Convert feature importance to quality factors\n    for (const [feature, importance] of Object.entries(featureImportance)) {\n      const factor = this.convertFeatureToFactor(feature, importance);\n      if (factor) {\n        factors.push(factor);\n      }\n    }\n\n    return factors.sort((a, b) => Math.abs(b.impact) - Math.abs(a.impact));\n  }\n\n  /**\n   * Train prediction models with historical data\n   */\n  async trainModels(days: number = 90): Promise<void> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - days * 24 * 60 * 60 * 1000);\n\n    const records = await this.dataManager.queryTestSuiteRecords(undefined, {\n      startDate,\n      endDate,\n      sortBy: 'timestamp',\n      sortOrder: 'asc',\n    });\n\n    if (records.length < 30) {\n      throw new Error('Insufficient data for model training. Need at least 30 records.');\n    }\n\n    // Prepare training data\n    const trainingData = await this.prepareTrainingData(records);\n\n    // Train each model\n    for (const [metricName, model] of this.models.entries()) {\n      await this.trainModel(model, trainingData, metricName);\n    }\n\n    this.emit('modelsRetrained', {\n      recordCount: records.length,\n      timeframe: days,\n      models: Array.from(this.models.keys()),\n    });\n  }\n\n  /**\n   * Validate model accuracy\n   */\n  async validateModels(testDays: number = 14): Promise<Record<string, number>> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - testDays * 24 * 60 * 60 * 1000);\n\n    const testRecords = await this.dataManager.queryTestSuiteRecords(undefined, {\n      startDate,\n      endDate,\n    });\n\n    const accuracies: Record<string, number> = {};\n\n    for (const [metricName, model] of this.models.entries()) {\n      const accuracy = await this.validateModel(model, testRecords, metricName);\n      accuracies[metricName] = accuracy;\n    }\n\n    return accuracies;\n  }\n\n  /**\n   * Get model performance statistics\n   */\n  getModelStats(): Record<string, any> {\n    const stats: Record<string, any> = {};\n\n    for (const [name, model] of this.models.entries()) {\n      stats[name] = {\n        accuracy: model.accuracy,\n        lastTrained: model.lastTrained,\n        version: model.version,\n        featureCount: model.features.length,\n      };\n    }\n\n    return stats;\n  }\n\n  /**\n   * Private helper methods\n   */\n  private initializePredictionModels(): void {\n    // Initialize simple linear regression models for each metric\n    const metrics = ['coverage', 'passRate', 'executionTime', 'memoryUsage', 'flakiness', 'stability', 'maintainability'];\n\n    for (const metric of metrics) {\n      this.models.set(metric, new LinearRegressionModel(metric));\n    }\n  }\n\n  private async extractModelFeatures(): Promise<ModelFeatures> {\n    const records = await this.dataManager.queryTestSuiteRecords(undefined, {\n      limit: 30,\n      sortBy: 'timestamp',\n      sortOrder: 'desc',\n    });\n\n    if (records.length === 0) {\n      throw new Error('No historical data available for feature extraction');\n    }\n\n    // Calculate averages\n    const avgCoverage = records.reduce((sum, r) =>\n      sum + (r.coverage.statements + r.coverage.branches + r.coverage.functions + r.coverage.lines) / 4, 0,\n    ) / records.length;\n\n    const avgPassRate = records.reduce((sum, r) =>\n      sum + (r.totalTests > 0 ? r.passedTests / r.totalTests : 0), 0,\n    ) / records.length;\n\n    const avgExecutionTime = records.reduce((sum, r) => sum + r.duration, 0) / records.length;\n    const avgMemoryUsage = records.reduce((sum, r) => sum + r.performance.peakMemory, 0) / records.length;\n\n    // Calculate trends (simple slope calculation)\n    const coverageTrend = this.calculateSimpleTrend(records.map(r =>\n      (r.coverage.statements + r.coverage.branches + r.coverage.functions + r.coverage.lines) / 4,\n    ));\n    const passRateTrend = this.calculateSimpleTrend(records.map(r =>\n      r.totalTests > 0 ? r.passedTests / r.totalTests : 0,\n    ));\n    const executionTimeTrend = this.calculateSimpleTrend(records.map(r => r.duration));\n    const memoryUsageTrend = this.calculateSimpleTrend(records.map(r => r.performance.peakMemory));\n\n    // Calculate volatility (standard deviation)\n    const coverageValues = records.map(r =>\n      (r.coverage.statements + r.coverage.branches + r.coverage.functions + r.coverage.lines) / 4,\n    );\n    const coverageVolatility = this.calculateVolatility(coverageValues);\n\n    const passRateValues = records.map(r => r.totalTests > 0 ? r.passedTests / r.totalTests : 0);\n    const passRateVolatility = this.calculateVolatility(passRateValues);\n\n    const executionTimeValues = records.map(r => r.duration);\n    const executionTimeVolatility = this.calculateVolatility(executionTimeValues);\n\n    // Calculate change metrics\n    const testCountChange = records.length > 1 ?\n      (records[0].totalTests - records[records.length - 1].totalTests) / records.length : 0;\n\n    const codeChurnRate = this.calculateCodeChurnRate(records);\n    const ciFailureRate = records.reduce((sum, r) =>\n      sum + (r.environment.ci && r.failedTests > 0 ? 1 : 0), 0,\n    ) / records.length;\n\n    return {\n      avgCoverage,\n      avgPassRate,\n      avgExecutionTime,\n      avgMemoryUsage,\n      coverageTrend,\n      passRateTrend,\n      executionTimeTrend,\n      memoryUsageTrend,\n      coverageVolatility,\n      passRateVolatility,\n      executionTimeVolatility,\n      testCountChange,\n      codeChurnRate,\n      ciFailureRate,\n      deploymentFrequency: 1, // Placeholder\n    };\n  }\n\n  private async predictMetric(\n    metric: keyof QualityMetrics,\n    features: ModelFeatures,\n    days: number,\n  ): Promise<QualityPrediction> {\n    const model = this.models.get(metric)!;\n    const currentValue = this.getCurrentMetricValue(metric, features);\n    const predictedValue = model.predict(features);\n\n    // Calculate confidence based on model accuracy and prediction stability\n    const confidence = Math.min(model.accuracy * 0.9, 0.95);\n\n    // Determine trend\n    const trend: 'improving' | 'degrading' | 'stable' =\n      Math.abs(predictedValue - currentValue) < 0.05 ? 'stable' :\n      predictedValue > currentValue ? 'improving' : 'degrading';\n\n    // Assess risk level\n    const riskLevel = this.assessMetricRisk(metric, currentValue, predictedValue, trend);\n\n    // Get quality factors\n    const factors = await this.identifyQualityFactors(metric);\n\n    return {\n      metric,\n      currentValue,\n      predictedValue,\n      confidence,\n      timeframe: days,\n      trend,\n      riskLevel,\n      factors: factors.slice(0, 5), // Top 5 factors\n    };\n  }\n\n  private getCurrentMetricValue(metric: keyof QualityMetrics, features: ModelFeatures): number {\n    switch (metric) {\n      case 'coverage':\n        return features.avgCoverage;\n      case 'passRate':\n        return features.avgPassRate;\n      case 'executionTime':\n        return features.avgExecutionTime;\n      case 'memoryUsage':\n        return features.avgMemoryUsage;\n      case 'flakiness':\n        return features.ciFailureRate;\n      case 'stability':\n        return 1 - features.passRateVolatility;\n      case 'maintainability':\n        return 1 - features.codeChurnRate;\n      default:\n        return 0;\n    }\n  }\n\n  private assessMetricRisk(\n    metric: keyof QualityMetrics,\n    current: number,\n    predicted: number,\n    trend: 'improving' | 'degrading' | 'stable',\n  ): 'low' | 'medium' | 'high' {\n    const change = Math.abs(predicted - current);\n    const relativeChange = current > 0 ? change / current : change;\n\n    // Metric-specific risk thresholds\n    const thresholds = {\n      coverage: { low: 0.02, medium: 0.05 },\n      passRate: { low: 0.02, medium: 0.05 },\n      executionTime: { low: 0.1, medium: 0.2 },\n      memoryUsage: { low: 0.1, medium: 0.2 },\n      flakiness: { low: 0.05, medium: 0.1 },\n      stability: { low: 0.02, medium: 0.05 },\n      maintainability: { low: 0.05, medium: 0.1 },\n    };\n\n    const threshold = thresholds[metric] || { low: 0.05, medium: 0.1 };\n\n    if (trend === 'degrading') {\n      if (relativeChange > threshold.medium) return 'high';\n      if (relativeChange > threshold.low) return 'medium';\n    }\n\n    return 'low';\n  }\n\n  private generateMetricRecommendations(prediction: QualityPrediction): QualityRecommendation[] {\n    const recommendations: QualityRecommendation[] = [];\n\n    if (prediction.riskLevel === 'high' || prediction.trend === 'degrading') {\n      const recommendation = this.createMetricRecommendation(prediction);\n      if (recommendation) {\n        recommendations.push(recommendation);\n      }\n    }\n\n    return recommendations;\n  }\n\n  private createMetricRecommendation(prediction: QualityPrediction): QualityRecommendation | null {\n    const templates: Record<string, Partial<QualityRecommendation>> = {\n      coverage: {\n        category: 'coverage',\n        title: 'Improve Test Coverage',\n        description: 'Test coverage is predicted to decline. Focus on adding tests for uncovered code.',\n        actionItems: [\n          'Identify uncovered code paths',\n          'Add unit tests for new features',\n          'Implement coverage gates in CI/CD',\n          'Review and update existing tests',\n        ],\n        estimatedEffort: 'medium',\n      },\n      passRate: {\n        category: 'stability',\n        title: 'Improve Test Stability',\n        description: 'Test pass rate is predicted to decline. Focus on fixing flaky and failing tests.',\n        actionItems: [\n          'Identify and fix flaky tests',\n          'Improve test data management',\n          'Review test environment setup',\n          'Add better error handling in tests',\n        ],\n        estimatedEffort: 'high',\n      },\n      executionTime: {\n        category: 'performance',\n        title: 'Optimize Test Performance',\n        description: 'Test execution time is predicted to increase. Focus on performance optimization.',\n        actionItems: [\n          'Profile slow tests',\n          'Implement parallel test execution',\n          'Optimize test data setup',\n          'Remove unnecessary test operations',\n        ],\n        estimatedEffort: 'medium',\n      },\n      memoryUsage: {\n        category: 'performance',\n        title: 'Optimize Memory Usage',\n        description: 'Memory usage is predicted to increase. Focus on memory optimization.',\n        actionItems: [\n          'Check for memory leaks in tests',\n          'Improve test data cleanup',\n          'Optimize test fixtures',\n          'Review test isolation',\n        ],\n        estimatedEffort: 'medium',\n      },\n    };\n\n    const template = templates[prediction.metric];\n    if (!template) return null;\n\n    const priority: 'low' | 'medium' | 'high' | 'critical' =\n      prediction.riskLevel === 'high' ? 'critical' :\n      prediction.riskLevel === 'medium' ? 'high' : 'medium';\n\n    return {\n      priority,\n      category: template.category!,\n      title: template.title!,\n      description: template.description!,\n      actionItems: template.actionItems!,\n      estimatedImpact: prediction.confidence * 100,\n      estimatedEffort: template.estimatedEffort as 'low' | 'medium' | 'high',\n      timeframe: `${prediction.timeframe} days`,\n    };\n  }\n\n  private calculateTimeToAction(predictions: QualityPrediction[]): number {\n    const highRiskPredictions = predictions.filter(p => p.riskLevel === 'high');\n\n    if (highRiskPredictions.length === 0) {\n      return 30; // No immediate action needed\n    }\n\n    // Return the shortest timeframe for high-risk predictions\n    return Math.min(...highRiskPredictions.map(p => p.timeframe));\n  }\n\n  private convertFeatureToFactor(feature: string, importance: number): QualityFactor | null {\n    const factorMap: Record<string, Partial<QualityFactor>> = {\n      avgCoverage: {\n        name: 'Average Coverage',\n        category: 'test',\n        description: 'Historical test coverage levels',\n      },\n      coverageTrend: {\n        name: 'Coverage Trend',\n        category: 'test',\n        description: 'Direction of coverage change over time',\n      },\n      passRateTrend: {\n        name: 'Pass Rate Trend',\n        category: 'test',\n        description: 'Direction of test pass rate change',\n      },\n      codeChurnRate: {\n        name: 'Code Churn',\n        category: 'code',\n        description: 'Rate of code changes affecting tests',\n      },\n      ciFailureRate: {\n        name: 'CI Failure Rate',\n        category: 'environment',\n        description: 'Frequency of CI/CD pipeline failures',\n      },\n    };\n\n    const factorTemplate = factorMap[feature];\n    if (!factorTemplate) return null;\n\n    return {\n      name: factorTemplate.name!,\n      impact: importance,\n      confidence: Math.abs(importance),\n      description: factorTemplate.description!,\n      category: factorTemplate.category as 'code' | 'test' | 'environment' | 'process',\n    };\n  }\n\n  private calculateSimpleTrend(values: number[]): number {\n    if (values.length < 2) return 0;\n\n    const first = values[values.length - 1];\n    const last = values[0];\n\n    return first !== 0 ? (last - first) / first : 0;\n  }\n\n  private calculateVolatility(values: number[]): number {\n    if (values.length < 2) return 0;\n\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n\n    return mean > 0 ? Math.sqrt(variance) / mean : 0;\n  }\n\n  private calculateCodeChurnRate(records: TestSuiteRecord[]): number {\n    if (records.length < 2) return 0;\n\n    let totalChurn = 0;\n    for (let i = 1; i < records.length; i++) {\n      const current = records[i - 1];\n      const previous = records[i];\n      const churn = Math.abs(current.totalTests - previous.totalTests) /\n                   Math.max(previous.totalTests, 1);\n      totalChurn += churn;\n    }\n\n    return totalChurn / (records.length - 1);\n  }\n\n  private async prepareTrainingData(records: TestSuiteRecord[]): Promise<any[]> {\n    // This would prepare training data for machine learning models\n    // For now, return a simplified version\n    return records.map(record => ({\n      features: {\n        coverage: (record.coverage.statements + record.coverage.branches +\n                  record.coverage.functions + record.coverage.lines) / 4,\n        passRate: record.totalTests > 0 ? record.passedTests / record.totalTests : 0,\n        executionTime: record.duration,\n        memoryUsage: record.performance.peakMemory,\n      },\n      timestamp: record.timestamp,\n    }));\n  }\n\n  private async trainModel(model: PredictionModel, trainingData: any[], metricName: string): Promise<void> {\n    // Simplified training - in a real implementation, this would use actual ML algorithms\n    model.accuracy = 0.8 + Math.random() * 0.15; // Simulate training accuracy\n    model.lastTrained = new Date();\n  }\n\n  private async validateModel(model: PredictionModel, testRecords: TestSuiteRecord[], metricName: string): Promise<number> {\n    // Simplified validation - in a real implementation, this would test predictions against actual values\n    return 0.7 + Math.random() * 0.2; // Simulate validation accuracy\n  }\n\n  private getCachedResult(key: string): any {\n    const cached = this.predictionCache.get(key);\n    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  private setCachedResult(key: string, data: any): void {\n    this.predictionCache.set(key, {\n      data,\n      timestamp: Date.now(),\n    });\n  }\n}\n\n/**\n * Simple Linear Regression Model Implementation\n */\nclass LinearRegressionModel implements PredictionModel {\n  name: string;\n  version: string = '1.0.0';\n  accuracy: number = 0;\n  lastTrained: Date = new Date();\n  features: string[] = [\n    'avgCoverage', 'avgPassRate', 'avgExecutionTime', 'avgMemoryUsage',\n    'coverageTrend', 'passRateTrend', 'executionTimeTrend', 'memoryUsageTrend',\n    'coverageVolatility', 'passRateVolatility', 'executionTimeVolatility',\n    'testCountChange', 'codeChurnRate', 'ciFailureRate',\n  ];\n\n  private weights: Record<string, number> = {};\n  private bias: number = 0;\n\n  constructor(metricName: string) {\n    this.name = `${metricName}_predictor`;\n\n    // Initialize with random weights (in a real implementation, these would be learned)\n    for (const feature of this.features) {\n      this.weights[feature] = (Math.random() - 0.5) * 0.1;\n    }\n  }\n\n  predict(features: ModelFeatures): number {\n    let prediction = this.bias;\n\n    for (const [feature, weight] of Object.entries(this.weights)) {\n      const featureValue = (features as any)[feature] || 0;\n      prediction += weight * featureValue;\n    }\n\n    // Ensure prediction is within reasonable bounds\n    return Math.max(0, Math.min(1, prediction));\n  }\n\n  getFeatureImportance(): Record<string, number> {\n    // Return normalized weights as feature importance\n    const maxWeight = Math.max(...Object.values(this.weights).map(Math.abs));\n    const importance: Record<string, number> = {};\n\n    for (const [feature, weight] of Object.entries(this.weights)) {\n      importance[feature] = maxWeight > 0 ? weight / maxWeight : 0;\n    }\n\n    return importance;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/analytics/RecommendationEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/analytics/TrendAnalyzer.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 128. Maximum allowed is 120.","line":696,"column":1,"nodeType":"Program","messageId":"max","endLine":696,"endColumn":129}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Trend Analyzer\n *\n * Provides intelligent analysis of test execution trends, performance patterns,\n * and quality metrics over time. Generates insights and predictions based on\n * historical data.\n */\n\nimport { EventEmitter } from 'events';\n\nimport { HistoricalDataManager, TestSuiteRecord, TestExecutionRecord } from './HistoricalDataManager';\n\nexport interface TrendPoint {\n  timestamp: Date;\n  value: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface TrendAnalysis {\n  trend: 'increasing' | 'decreasing' | 'stable' | 'volatile';\n  slope: number;\n  correlation: number;\n  confidence: number;\n  dataPoints: TrendPoint[];\n  prediction?: {\n    nextValue: number;\n    confidence: number;\n    timeframe: number; // days\n  };\n}\n\nexport interface CoverageTrend {\n  statements: TrendAnalysis;\n  branches: TrendAnalysis;\n  functions: TrendAnalysis;\n  lines: TrendAnalysis;\n  overall: TrendAnalysis;\n  recommendations: string[];\n}\n\nexport interface PerformanceTrend {\n  executionTime: TrendAnalysis;\n  memoryUsage: TrendAnalysis;\n  testCount: TrendAnalysis;\n  failureRate: TrendAnalysis;\n  recommendations: string[];\n}\n\nexport interface QualityTrend {\n  passRate: TrendAnalysis;\n  flakiness: TrendAnalysis;\n  testStability: TrendAnalysis;\n  codeChurn: TrendAnalysis;\n  recommendations: string[];\n}\n\nexport interface SeasonalPattern {\n  pattern: 'daily' | 'weekly' | 'monthly';\n  strength: number;\n  peaks: number[];\n  valleys: number[];\n  description: string;\n}\n\nexport interface Anomaly {\n  timestamp: Date;\n  metric: string;\n  expectedValue: number;\n  actualValue: number;\n  severity: 'low' | 'medium' | 'high';\n  description: string;\n  possibleCauses: string[];\n}\n\nexport interface TrendInsight {\n  type: 'improvement' | 'degradation' | 'anomaly' | 'pattern';\n  severity: 'low' | 'medium' | 'high';\n  title: string;\n  description: string;\n  metrics: string[];\n  timeframe: string;\n  actionItems: string[];\n  confidence: number;\n}\n\nexport class TrendAnalyzer extends EventEmitter {\n  private dataManager: HistoricalDataManager;\n  private analysisCache: Map<string, any> = new Map();\n  private cacheTimeout: number = 5 * 60 * 1000; // 5 minutes\n\n  constructor(dataManager: HistoricalDataManager) {\n    super();\n    this.dataManager = dataManager;\n  }\n\n  /**\n   * Analyze coverage trends over time\n   */\n  async analyzeCoverageTrends(days: number = 30): Promise<CoverageTrend> {\n    const cacheKey = `coverage-trends-${days}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) return cached;\n\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - days * 24 * 60 * 60 * 1000);\n\n    const records = await this.dataManager.queryTestSuiteRecords(undefined, {\n      startDate,\n      endDate,\n      sortBy: 'timestamp',\n      sortOrder: 'asc',\n    });\n\n    const coverageTrend: CoverageTrend = {\n      statements: await this.analyzeCoverageMetric(records, 'statements'),\n      branches: await this.analyzeCoverageMetric(records, 'branches'),\n      functions: await this.analyzeCoverageMetric(records, 'functions'),\n      lines: await this.analyzeCoverageMetric(records, 'lines'),\n      overall: await this.analyzeOverallCoverage(records),\n      recommendations: [],\n    };\n\n    // Generate recommendations\n    coverageTrend.recommendations = this.generateCoverageRecommendations(coverageTrend);\n\n    this.setCachedResult(cacheKey, coverageTrend);\n    return coverageTrend;\n  }\n\n  /**\n   * Analyze performance trends over time\n   */\n  async analyzePerformanceTrends(days: number = 30): Promise<PerformanceTrend> {\n    const cacheKey = `performance-trends-${days}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) return cached;\n\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - days * 24 * 60 * 60 * 1000);\n\n    const records = await this.dataManager.queryTestSuiteRecords(undefined, {\n      startDate,\n      endDate,\n      sortBy: 'timestamp',\n      sortOrder: 'asc',\n    });\n\n    const performanceTrend: PerformanceTrend = {\n      executionTime: await this.analyzeExecutionTimeTrend(records),\n      memoryUsage: await this.analyzeMemoryUsageTrend(records),\n      testCount: await this.analyzeTestCountTrend(records),\n      failureRate: await this.analyzeFailureRateTrend(records),\n      recommendations: [],\n    };\n\n    // Generate recommendations\n    performanceTrend.recommendations = this.generatePerformanceRecommendations(performanceTrend);\n\n    this.setCachedResult(cacheKey, performanceTrend);\n    return performanceTrend;\n  }\n\n  /**\n   * Analyze quality trends over time\n   */\n  async analyzeQualityTrends(days: number = 30): Promise<QualityTrend> {\n    const cacheKey = `quality-trends-${days}`;\n    const cached = this.getCachedResult(cacheKey);\n    if (cached) return cached;\n\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - days * 24 * 60 * 60 * 1000);\n\n    const records = await this.dataManager.queryTestSuiteRecords(undefined, {\n      startDate,\n      endDate,\n      sortBy: 'timestamp',\n      sortOrder: 'asc',\n    });\n\n    const qualityTrend: QualityTrend = {\n      passRate: await this.analyzePassRateTrend(records),\n      flakiness: await this.analyzeFlakinessOverTime(days),\n      testStability: await this.analyzeTestStabilityTrend(records),\n      codeChurn: await this.analyzeCodeChurnTrend(records),\n      recommendations: [],\n    };\n\n    // Generate recommendations\n    qualityTrend.recommendations = this.generateQualityRecommendations(qualityTrend);\n\n    this.setCachedResult(cacheKey, qualityTrend);\n    return qualityTrend;\n  }\n\n  /**\n   * Detect seasonal patterns in test data\n   */\n  async detectSeasonalPatterns(days: number = 90): Promise<SeasonalPattern[]> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - days * 24 * 60 * 60 * 1000);\n\n    const records = await this.dataManager.queryTestSuiteRecords(undefined, {\n      startDate,\n      endDate,\n      sortBy: 'timestamp',\n      sortOrder: 'asc',\n    });\n\n    const patterns: SeasonalPattern[] = [];\n\n    // Analyze daily patterns\n    const dailyPattern = this.analyzeDailyPattern(records);\n    if (dailyPattern.strength > 0.3) {\n      patterns.push(dailyPattern);\n    }\n\n    // Analyze weekly patterns\n    const weeklyPattern = this.analyzeWeeklyPattern(records);\n    if (weeklyPattern.strength > 0.3) {\n      patterns.push(weeklyPattern);\n    }\n\n    return patterns;\n  }\n\n  /**\n   * Detect anomalies in test metrics\n   */\n  async detectAnomalies(days: number = 30, sensitivity: number = 2): Promise<Anomaly[]> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - days * 24 * 60 * 60 * 1000);\n\n    const records = await this.dataManager.queryTestSuiteRecords(undefined, {\n      startDate,\n      endDate,\n      sortBy: 'timestamp',\n      sortOrder: 'asc',\n    });\n\n    const anomalies: Anomaly[] = [];\n\n    // Detect execution time anomalies\n    const executionTimeAnomalies = this.detectMetricAnomalies(\n      records.map(r => ({ timestamp: r.timestamp, value: r.duration })),\n      'execution_time',\n      sensitivity,\n    );\n    anomalies.push(...executionTimeAnomalies);\n\n    // Detect coverage anomalies\n    const coverageAnomalies = this.detectMetricAnomalies(\n      records.map(r => ({\n        timestamp: r.timestamp,\n        value: (r.coverage.statements + r.coverage.branches + r.coverage.functions + r.coverage.lines) / 4,\n      })),\n      'coverage',\n      sensitivity,\n    );\n    anomalies.push(...coverageAnomalies);\n\n    // Detect failure rate anomalies\n    const failureRateAnomalies = this.detectMetricAnomalies(\n      records.map(r => ({\n        timestamp: r.timestamp,\n        value: r.totalTests > 0 ? r.failedTests / r.totalTests : 0,\n      })),\n      'failure_rate',\n      sensitivity,\n    );\n    anomalies.push(...failureRateAnomalies);\n\n    return anomalies.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  /**\n   * Generate comprehensive trend insights\n   */\n  async generateTrendInsights(days: number = 30): Promise<TrendInsight[]> {\n    const insights: TrendInsight[] = [];\n\n    // Analyze coverage trends\n    const coverageTrends = await this.analyzeCoverageTrends(days);\n    insights.push(...this.extractCoverageInsights(coverageTrends, days));\n\n    // Analyze performance trends\n    const performanceTrends = await this.analyzePerformanceTrends(days);\n    insights.push(...this.extractPerformanceInsights(performanceTrends, days));\n\n    // Analyze quality trends\n    const qualityTrends = await this.analyzeQualityTrends(days);\n    insights.push(...this.extractQualityInsights(qualityTrends, days));\n\n    // Detect anomalies\n    const anomalies = await this.detectAnomalies(days);\n    insights.push(...this.convertAnomaliesToInsights(anomalies));\n\n    // Sort by severity and confidence\n    return insights.sort((a, b) => {\n      const severityOrder = { high: 3, medium: 2, low: 1 };\n      const severityDiff = severityOrder[b.severity] - severityOrder[a.severity];\n      if (severityDiff !== 0) return severityDiff;\n      return b.confidence - a.confidence;\n    });\n  }\n\n  /**\n   * Predict future trends based on historical data\n   */\n  async predictTrends(metric: string, days: number = 30, forecastDays: number = 7): Promise<TrendPoint[]> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - days * 24 * 60 * 60 * 1000);\n\n    const records = await this.dataManager.queryTestSuiteRecords(undefined, {\n      startDate,\n      endDate,\n      sortBy: 'timestamp',\n      sortOrder: 'asc',\n    });\n\n    const dataPoints = this.extractMetricValues(records, metric);\n\n    if (dataPoints.length < 5) {\n      return []; // Not enough data for prediction\n    }\n\n    return this.generatePrediction(dataPoints, forecastDays);\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async analyzeCoverageMetric(\n    records: TestSuiteRecord[],\n    metric: 'statements' | 'branches' | 'functions' | 'lines',\n  ): Promise<TrendAnalysis> {\n    const dataPoints: TrendPoint[] = records.map(record => ({\n      timestamp: record.timestamp,\n      value: record.coverage[metric],\n      metadata: { suiteName: record.suiteName },\n    }));\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private async analyzeOverallCoverage(records: TestSuiteRecord[]): Promise<TrendAnalysis> {\n    const dataPoints: TrendPoint[] = records.map(record => ({\n      timestamp: record.timestamp,\n      value: (record.coverage.statements + record.coverage.branches +\n              record.coverage.functions + record.coverage.lines) / 4,\n      metadata: { suiteName: record.suiteName },\n    }));\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private async analyzeExecutionTimeTrend(records: TestSuiteRecord[]): Promise<TrendAnalysis> {\n    const dataPoints: TrendPoint[] = records.map(record => ({\n      timestamp: record.timestamp,\n      value: record.duration,\n      metadata: { suiteName: record.suiteName, testCount: record.totalTests },\n    }));\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private async analyzeMemoryUsageTrend(records: TestSuiteRecord[]): Promise<TrendAnalysis> {\n    const dataPoints: TrendPoint[] = records.map(record => ({\n      timestamp: record.timestamp,\n      value: record.performance.peakMemory,\n      metadata: { suiteName: record.suiteName },\n    }));\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private async analyzeTestCountTrend(records: TestSuiteRecord[]): Promise<TrendAnalysis> {\n    const dataPoints: TrendPoint[] = records.map(record => ({\n      timestamp: record.timestamp,\n      value: record.totalTests,\n      metadata: { suiteName: record.suiteName },\n    }));\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private async analyzeFailureRateTrend(records: TestSuiteRecord[]): Promise<TrendAnalysis> {\n    const dataPoints: TrendPoint[] = records.map(record => ({\n      timestamp: record.timestamp,\n      value: record.totalTests > 0 ? record.failedTests / record.totalTests : 0,\n      metadata: { suiteName: record.suiteName, failedTests: record.failedTests },\n    }));\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private async analyzePassRateTrend(records: TestSuiteRecord[]): Promise<TrendAnalysis> {\n    const dataPoints: TrendPoint[] = records.map(record => ({\n      timestamp: record.timestamp,\n      value: record.totalTests > 0 ? record.passedTests / record.totalTests : 0,\n      metadata: { suiteName: record.suiteName, passedTests: record.passedTests },\n    }));\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private async analyzeFlakinessOverTime(days: number): Promise<TrendAnalysis> {\n    const flakyTests = await this.dataManager.getFlakyTests(days);\n\n    // Group flaky tests by day to create a trend\n    const dailyFlakiness = new Map<string, number>();\n\n    for (const test of flakyTests) {\n      for (const failure of test.recentFailures) {\n        const day = failure.toISOString().split('T')[0];\n        dailyFlakiness.set(day, (dailyFlakiness.get(day) || 0) + 1);\n      }\n    }\n\n    const dataPoints: TrendPoint[] = Array.from(dailyFlakiness.entries()).map(([day, count]) => ({\n      timestamp: new Date(day),\n      value: count,\n      metadata: { day },\n    }));\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private async analyzeTestStabilityTrend(records: TestSuiteRecord[]): Promise<TrendAnalysis> {\n    const dataPoints: TrendPoint[] = records.map(record => {\n      const stability = record.totalTests > 0 ?\n        (record.passedTests + record.skippedTests) / record.totalTests : 1;\n\n      return {\n        timestamp: record.timestamp,\n        value: stability,\n        metadata: { suiteName: record.suiteName },\n      };\n    });\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private async analyzeCodeChurnTrend(records: TestSuiteRecord[]): Promise<TrendAnalysis> {\n    // Estimate code churn based on test count changes\n    const dataPoints: TrendPoint[] = [];\n\n    for (let i = 1; i < records.length; i++) {\n      const current = records[i];\n      const previous = records[i - 1];\n\n      const churn = Math.abs(current.totalTests - previous.totalTests) /\n                   Math.max(previous.totalTests, 1);\n\n      dataPoints.push({\n        timestamp: current.timestamp,\n        value: churn,\n        metadata: {\n          suiteName: current.suiteName,\n          testCountChange: current.totalTests - previous.totalTests,\n        },\n      });\n    }\n\n    return this.analyzeTrend(dataPoints);\n  }\n\n  private analyzeTrend(dataPoints: TrendPoint[]): TrendAnalysis {\n    if (dataPoints.length < 2) {\n      return {\n        trend: 'stable',\n        slope: 0,\n        correlation: 0,\n        confidence: 0,\n        dataPoints,\n      };\n    }\n\n    // Calculate linear regression\n    const n = dataPoints.length;\n    const xValues = dataPoints.map((_, i) => i);\n    const yValues = dataPoints.map(p => p.value);\n\n    const xMean = xValues.reduce((sum, x) => sum + x, 0) / n;\n    const yMean = yValues.reduce((sum, y) => sum + y, 0) / n;\n\n    let numerator = 0;\n    let denominatorX = 0;\n    let denominatorY = 0;\n\n    for (let i = 0; i < n; i++) {\n      const xDiff = xValues[i] - xMean;\n      const yDiff = yValues[i] - yMean;\n\n      numerator += xDiff * yDiff;\n      denominatorX += xDiff * xDiff;\n      denominatorY += yDiff * yDiff;\n    }\n\n    const correlation = denominatorX === 0 || denominatorY === 0 ? 0 :\n      numerator / Math.sqrt(denominatorX * denominatorY);\n\n    const slope = denominatorX === 0 ? 0 : numerator / denominatorX;\n\n    // Determine trend direction\n    let trend: 'increasing' | 'decreasing' | 'stable' | 'volatile';\n    const absCorrelation = Math.abs(correlation);\n\n    if (absCorrelation < 0.3) {\n      trend = 'stable';\n    } else if (absCorrelation < 0.6) {\n      trend = 'volatile';\n    } else {\n      trend = slope > 0 ? 'increasing' : 'decreasing';\n    }\n\n    // Calculate confidence based on correlation strength and data points\n    const confidence = Math.min(absCorrelation * (Math.log(n) / Math.log(10)), 1);\n\n    // Generate prediction if trend is strong enough\n    let prediction;\n    if (confidence > 0.5 && n >= 5) {\n      const lastValue = yValues[yValues.length - 1];\n      const nextValue = lastValue + slope;\n\n      prediction = {\n        nextValue,\n        confidence: confidence * 0.8, // Reduce confidence for predictions\n        timeframe: 1, // 1 day\n      };\n    }\n\n    return {\n      trend,\n      slope,\n      correlation,\n      confidence,\n      dataPoints,\n      prediction,\n    };\n  }\n\n  private analyzeDailyPattern(records: TestSuiteRecord[]): SeasonalPattern {\n    const hourlyData = new Map<number, number[]>();\n\n    for (const record of records) {\n      const hour = record.timestamp.getHours();\n      if (!hourlyData.has(hour)) {\n        hourlyData.set(hour, []);\n      }\n      hourlyData.get(hour)!.push(record.duration);\n    }\n\n    const hourlyAverages = new Map<number, number>();\n    for (const [hour, durations] of hourlyData.entries()) {\n      const average = durations.reduce((sum, d) => sum + d, 0) / durations.length;\n      hourlyAverages.set(hour, average);\n    }\n\n    const values = Array.from(hourlyAverages.values());\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n    const strength = variance > 0 ? Math.sqrt(variance) / mean : 0;\n\n    const peaks: number[] = [];\n    const valleys: number[] = [];\n\n    for (const [hour, average] of hourlyAverages.entries()) {\n      if (average > mean + strength * mean) {\n        peaks.push(hour);\n      } else if (average < mean - strength * mean) {\n        valleys.push(hour);\n      }\n    }\n\n    return {\n      pattern: 'daily',\n      strength: Math.min(strength, 1),\n      peaks,\n      valleys,\n      description: `Daily pattern detected with ${peaks.length} peak hours and ${valleys.length} valley hours`,\n    };\n  }\n\n  private analyzeWeeklyPattern(records: TestSuiteRecord[]): SeasonalPattern {\n    const weeklyData = new Map<number, number[]>();\n\n    for (const record of records) {\n      const dayOfWeek = record.timestamp.getDay();\n      if (!weeklyData.has(dayOfWeek)) {\n        weeklyData.set(dayOfWeek, []);\n      }\n      weeklyData.get(dayOfWeek)!.push(record.duration);\n    }\n\n    const weeklyAverages = new Map<number, number>();\n    for (const [day, durations] of weeklyData.entries()) {\n      const average = durations.reduce((sum, d) => sum + d, 0) / durations.length;\n      weeklyAverages.set(day, average);\n    }\n\n    const values = Array.from(weeklyAverages.values());\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n    const strength = variance > 0 ? Math.sqrt(variance) / mean : 0;\n\n    const peaks: number[] = [];\n    const valleys: number[] = [];\n\n    for (const [day, average] of weeklyAverages.entries()) {\n      if (average > mean + strength * mean) {\n        peaks.push(day);\n      } else if (average < mean - strength * mean) {\n        valleys.push(day);\n      }\n    }\n\n    return {\n      pattern: 'weekly',\n      strength: Math.min(strength, 1),\n      peaks,\n      valleys,\n      description: `Weekly pattern detected with peak days: ${peaks.map(d => ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][d]).join(', ')}`,\n    };\n  }\n\n  private detectMetricAnomalies(\n    dataPoints: { timestamp: Date; value: number }[],\n    metricName: string,\n    sensitivity: number,\n  ): Anomaly[] {\n    if (dataPoints.length < 10) return [];\n\n    const values = dataPoints.map(p => p.value);\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n\n    const anomalies: Anomaly[] = [];\n\n    for (let i = 0; i < dataPoints.length; i++) {\n      const point = dataPoints[i];\n      const zScore = stdDev > 0 ? Math.abs(point.value - mean) / stdDev : 0;\n\n      if (zScore > sensitivity) {\n        const severity: 'low' | 'medium' | 'high' =\n          zScore > sensitivity * 2 ? 'high' :\n          zScore > sensitivity * 1.5 ? 'medium' : 'low';\n\n        anomalies.push({\n          timestamp: point.timestamp,\n          metric: metricName,\n          expectedValue: mean,\n          actualValue: point.value,\n          severity,\n          description: `${metricName} anomaly detected: ${point.value.toFixed(2)} (expected ~${mean.toFixed(2)})`,\n          possibleCauses: this.generateAnomalyCauses(metricName, point.value > mean),\n        });\n      }\n    }\n\n    return anomalies;\n  }\n\n  private generateAnomalyCauses(metric: string, isHigh: boolean): string[] {\n    const causes: Record<string, { high: string[]; low: string[] }> = {\n      execution_time: {\n        high: ['Performance regression', 'Increased test complexity', 'Resource contention', 'Network latency'],\n        low: ['Performance optimization', 'Reduced test scope', 'Caching improvements', 'Hardware upgrade'],\n      },\n      coverage: {\n        high: ['New tests added', 'Code refactoring', 'Better test practices'],\n        low: ['Code added without tests', 'Tests removed', 'Coverage calculation error'],\n      },\n      failure_rate: {\n        high: ['Code regression', 'Environment issues', 'Flaky tests', 'Dependency changes'],\n        low: ['Bug fixes', 'Test improvements', 'Code quality improvements'],\n      },\n    };\n\n    return causes[metric]?.[isHigh ? 'high' : 'low'] || ['Unknown cause'];\n  }\n\n  private generateCoverageRecommendations(trends: CoverageTrend): string[] {\n    const recommendations: string[] = [];\n\n    if (trends.overall.trend === 'decreasing') {\n      recommendations.push('Coverage is declining. Consider implementing coverage gates in CI/CD.');\n    }\n\n    if (trends.branches.correlation < trends.statements.correlation) {\n      recommendations.push('Branch coverage is less stable than statement coverage. Focus on edge case testing.');\n    }\n\n    if (trends.functions.trend === 'stable' && trends.functions.dataPoints.length > 0) {\n      const avgCoverage = trends.functions.dataPoints.reduce((sum, p) => sum + p.value, 0) / trends.functions.dataPoints.length;\n      if (avgCoverage < 90) {\n        recommendations.push('Function coverage is below 90%. Consider adding more unit tests.');\n      }\n    }\n\n    return recommendations;\n  }\n\n  private generatePerformanceRecommendations(trends: PerformanceTrend): string[] {\n    const recommendations: string[] = [];\n\n    if (trends.executionTime.trend === 'increasing') {\n      recommendations.push('Test execution time is increasing. Consider optimizing slow tests or implementing parallel execution.');\n    }\n\n    if (trends.memoryUsage.trend === 'increasing') {\n      recommendations.push('Memory usage is growing. Check for memory leaks in tests or test data cleanup issues.');\n    }\n\n    if (trends.failureRate.trend === 'increasing') {\n      recommendations.push('Failure rate is increasing. Investigate flaky tests and improve test stability.');\n    }\n\n    return recommendations;\n  }\n\n  private generateQualityRecommendations(trends: QualityTrend): string[] {\n    const recommendations: string[] = [];\n\n    if (trends.passRate.trend === 'decreasing') {\n      recommendations.push('Pass rate is declining. Focus on fixing failing tests and improving code quality.');\n    }\n\n    if (trends.flakiness.trend === 'increasing') {\n      recommendations.push('Test flakiness is increasing. Identify and fix unstable tests.');\n    }\n\n    if (trends.codeChurn.trend === 'increasing') {\n      recommendations.push('Code churn is high. Consider stabilizing the codebase and improving test maintenance.');\n    }\n\n    return recommendations;\n  }\n\n  private extractCoverageInsights(trends: CoverageTrend, days: number): TrendInsight[] {\n    const insights: TrendInsight[] = [];\n\n    if (trends.overall.trend === 'decreasing' && trends.overall.confidence > 0.6) {\n      insights.push({\n        type: 'degradation',\n        severity: 'high',\n        title: 'Coverage Declining',\n        description: `Test coverage has been declining over the past ${days} days`,\n        metrics: ['coverage'],\n        timeframe: `${days} days`,\n        actionItems: trends.recommendations,\n        confidence: trends.overall.confidence,\n      });\n    }\n\n    return insights;\n  }\n\n  private extractPerformanceInsights(trends: PerformanceTrend, days: number): TrendInsight[] {\n    const insights: TrendInsight[] = [];\n\n    if (trends.executionTime.trend === 'increasing' && trends.executionTime.confidence > 0.6) {\n      insights.push({\n        type: 'degradation',\n        severity: 'medium',\n        title: 'Test Performance Degrading',\n        description: `Test execution time has been increasing over the past ${days} days`,\n        metrics: ['execution_time'],\n        timeframe: `${days} days`,\n        actionItems: trends.recommendations,\n        confidence: trends.executionTime.confidence,\n      });\n    }\n\n    return insights;\n  }\n\n  private extractQualityInsights(trends: QualityTrend, days: number): TrendInsight[] {\n    const insights: TrendInsight[] = [];\n\n    if (trends.passRate.trend === 'decreasing' && trends.passRate.confidence > 0.6) {\n      insights.push({\n        type: 'degradation',\n        severity: 'high',\n        title: 'Test Quality Declining',\n        description: `Test pass rate has been declining over the past ${days} days`,\n        metrics: ['pass_rate'],\n        timeframe: `${days} days`,\n        actionItems: trends.recommendations,\n        confidence: trends.passRate.confidence,\n      });\n    }\n\n    return insights;\n  }\n\n  private convertAnomaliesToInsights(anomalies: Anomaly[]): TrendInsight[] {\n    return anomalies.map(anomaly => ({\n      type: 'anomaly' as const,\n      severity: anomaly.severity,\n      title: `${anomaly.metric} Anomaly Detected`,\n      description: anomaly.description,\n      metrics: [anomaly.metric],\n      timeframe: 'recent',\n      actionItems: anomaly.possibleCauses.map(cause => `Investigate: ${cause}`),\n      confidence: 0.8,\n    }));\n  }\n\n  private extractMetricValues(records: TestSuiteRecord[], metric: string): TrendPoint[] {\n    return records.map(record => {\n      let value: number;\n\n      switch (metric) {\n        case 'coverage':\n          value = (record.coverage.statements + record.coverage.branches +\n                  record.coverage.functions + record.coverage.lines) / 4;\n          break;\n        case 'execution_time':\n          value = record.duration;\n          break;\n        case 'memory_usage':\n          value = record.performance.peakMemory;\n          break;\n        case 'pass_rate':\n          value = record.totalTests > 0 ? record.passedTests / record.totalTests : 0;\n          break;\n        default:\n          value = 0;\n      }\n\n      return {\n        timestamp: record.timestamp,\n        value,\n        metadata: { suiteName: record.suiteName },\n      };\n    });\n  }\n\n  private generatePrediction(dataPoints: TrendPoint[], forecastDays: number): TrendPoint[] {\n    const analysis = this.analyzeTrend(dataPoints);\n\n    if (!analysis.prediction || analysis.confidence < 0.5) {\n      return [];\n    }\n\n    const predictions: TrendPoint[] = [];\n    const lastPoint = dataPoints[dataPoints.length - 1];\n    const dailyChange = analysis.slope;\n\n    for (let i = 1; i <= forecastDays; i++) {\n      const futureDate = new Date(lastPoint.timestamp.getTime() + i * 24 * 60 * 60 * 1000);\n      const predictedValue = lastPoint.value + (dailyChange * i);\n\n      predictions.push({\n        timestamp: futureDate,\n        value: Math.max(0, predictedValue), // Ensure non-negative values\n        metadata: {\n          predicted: true,\n          confidence: analysis.confidence * (1 - i * 0.1), // Decrease confidence over time\n        },\n      });\n    }\n\n    return predictions;\n  }\n\n  private getCachedResult(key: string): any {\n    const cached = this.analysisCache.get(key);\n    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  private setCachedResult(key: string, data: any): void {\n    this.analysisCache.set(key, {\n      data,\n      timestamp: Date.now(),\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/analytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/cicd/CICDReporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/cicd/DeploymentValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/cicd/PipelineAnalyzer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/cicd/PipelineOptimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/cicd/QualityGateManager.ts","messages":[{"ruleId":"prefer-const","severity":1,"message":"'status' is never reassigned. Use 'const' instead.","line":71,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":71,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Quality Gate Manager\n * Manages automated quality gates for CI/CD pipelines\n */\n\nimport { QualityGate, QualityGateConfig, TestSummary, CoverageInfo } from './types';\n\nexport class QualityGateManager {\n  private gates: Map<string, QualityGateConfig> = new Map();\n  private results: Map<string, QualityGate> = new Map();\n\n  /**\n   * Register a quality gate\n   */\n  registerGate(gate: QualityGateConfig): void {\n    this.gates.set(gate.name, gate);\n  }\n\n  /**\n   * Evaluate all quality gates\n   */\n  async evaluateGates(\n    testSummary: TestSummary,\n    coverage?: CoverageInfo,\n    customMetrics?: Record<string, number>,\n  ): Promise<QualityGate[]> {\n    console.log('🚪 Evaluating quality gates...');\n\n    const results: QualityGate[] = [];\n\n    for (const [name, config] of this.gates) {\n      const result = await this.evaluateGate(config, testSummary, coverage, customMetrics);\n      results.push(result);\n      this.results.set(name, result);\n    }\n\n    return results;\n  }\n\n  /**\n   * Evaluate a single quality gate\n   */\n  private async evaluateGate(\n    config: QualityGateConfig,\n    testSummary: TestSummary,\n    coverage?: CoverageInfo,\n    customMetrics?: Record<string, number>,\n  ): Promise<QualityGate> {\n    let value: number;\n    let status: 'passed' | 'failed' | 'warning';\n\n    switch (config.type) {\n      case 'coverage':\n        value = this.getCoverageValue(coverage, config.name);\n        break;\n      case 'performance':\n        value = testSummary.duration;\n        break;\n      case 'security':\n        value = customMetrics?.securityScore || 0;\n        break;\n      case 'custom':\n        value = customMetrics?.[config.name] || 0;\n        break;\n      default:\n        value = 0;\n    }\n\n    // Evaluate against threshold\n    const passed = this.evaluateThreshold(value, config.threshold, config.operator);\n    status = passed ? 'passed' : (config.blocking ? 'failed' : 'warning');\n\n    return {\n      id: `gate-${config.name}`,\n      name: config.name,\n      type: config.type,\n      status,\n      value,\n      threshold: config.threshold,\n      message: config.message || this.generateMessage(config, value, passed),\n      blocking: config.blocking,\n      details: {\n        operator: config.operator,\n        evaluatedAt: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get coverage value based on gate name\n   */\n  private getCoverageValue(coverage: CoverageInfo | undefined, gateName: string): number {\n    if (!coverage) return 0;\n\n    switch (gateName.toLowerCase()) {\n      case 'statement-coverage':\n      case 'statements':\n        return coverage.statements;\n      case 'branch-coverage':\n      case 'branches':\n        return coverage.branches;\n      case 'function-coverage':\n      case 'functions':\n        return coverage.functions;\n      case 'line-coverage':\n      case 'lines':\n        return coverage.lines;\n      default:\n        // Return overall coverage (average)\n        return (coverage.statements + coverage.branches + coverage.functions + coverage.lines) / 4;\n    }\n  }\n\n  /**\n   * Evaluate threshold condition\n   */\n  private evaluateThreshold(value: number, threshold: number, operator: string): boolean {\n    switch (operator) {\n      case 'gt':\n        return value > threshold;\n      case 'gte':\n        return value >= threshold;\n      case 'lt':\n        return value < threshold;\n      case 'lte':\n        return value <= threshold;\n      case 'eq':\n        return value === threshold;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Generate default message for quality gate\n   */\n  private generateMessage(config: QualityGateConfig, value: number, passed: boolean): string {\n    const status = passed ? 'PASSED' : 'FAILED';\n    const operatorText = this.getOperatorText(config.operator);\n\n    return `${config.name} ${status}: ${value} ${operatorText} ${config.threshold}`;\n  }\n\n  /**\n   * Get human-readable operator text\n   */\n  private getOperatorText(operator: string): string {\n    switch (operator) {\n      case 'gt': return '>';\n      case 'gte': return '>=';\n      case 'lt': return '<';\n      case 'lte': return '<=';\n      case 'eq': return '==';\n      default: return operator;\n    }\n  }\n\n  /**\n   * Check if all blocking gates passed\n   */\n  canProceed(): boolean {\n    for (const result of this.results.values()) {\n      if (result.blocking && result.status === 'failed') {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Get failed gates\n   */\n  getFailedGates(): QualityGate[] {\n    return Array.from(this.results.values()).filter(gate => gate.status === 'failed');\n  }\n\n  /**\n   * Get blocking failed gates\n   */\n  getBlockingFailedGates(): QualityGate[] {\n    return this.getFailedGates().filter(gate => gate.blocking);\n  }\n\n  /**\n   * Generate quality gate report\n   */\n  generateReport(): {\n    summary: {\n      total: number;\n      passed: number;\n      failed: number;\n      warnings: number;\n      blocking: number;\n    };\n    gates: QualityGate[];\n    canProceed: boolean;\n  } {\n    const gates = Array.from(this.results.values());\n\n    return {\n      summary: {\n        total: gates.length,\n        passed: gates.filter(g => g.status === 'passed').length,\n        failed: gates.filter(g => g.status === 'failed').length,\n        warnings: gates.filter(g => g.status === 'warning').length,\n        blocking: gates.filter(g => g.blocking).length,\n      },\n      gates,\n      canProceed: this.canProceed(),\n    };\n  }\n\n  /**\n   * Create default quality gates\n   */\n  static createDefaultGates(): QualityGateConfig[] {\n    return [\n      {\n        name: 'test-pass-rate',\n        type: 'custom',\n        threshold: 95,\n        operator: 'gte',\n        blocking: true,\n        message: 'Test pass rate must be at least 95%',\n      },\n      {\n        name: 'code-coverage',\n        type: 'coverage',\n        threshold: 80,\n        operator: 'gte',\n        blocking: true,\n        message: 'Code coverage must be at least 80%',\n      },\n      {\n        name: 'build-time',\n        type: 'performance',\n        threshold: 300000, // 5 minutes\n        operator: 'lte',\n        blocking: false,\n        message: 'Build time should be under 5 minutes',\n      },\n      {\n        name: 'security-score',\n        type: 'security',\n        threshold: 8,\n        operator: 'gte',\n        blocking: true,\n        message: 'Security score must be at least 8/10',\n      },\n    ];\n  }\n\n  /**\n   * Load gates from configuration\n   */\n  loadGatesFromConfig(config: QualityGateConfig[]): void {\n    config.forEach(gate => this.registerGate(gate));\n  }\n\n  /**\n   * Clear all gates and results\n   */\n  clear(): void {\n    this.gates.clear();\n    this.results.clear();\n  }\n\n  /**\n   * Get gate configuration\n   */\n  getGateConfig(name: string): QualityGateConfig | undefined {\n    return this.gates.get(name);\n  }\n\n  /**\n   * Get gate result\n   */\n  getGateResult(name: string): QualityGate | undefined {\n    return this.results.get(name);\n  }\n\n  /**\n   * Update gate threshold\n   */\n  updateGateThreshold(name: string, threshold: number): boolean {\n    const gate = this.gates.get(name);\n    if (gate) {\n      gate.threshold = threshold;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Enable/disable gate\n   */\n  setGateBlocking(name: string, blocking: boolean): boolean {\n    const gate = this.gates.get(name);\n    if (gate) {\n      gate.blocking = blocking;\n      return true;\n    }\n    return false;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/cicd/TestResultIntegrator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/cicd/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/cicd/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compatibility/BrowserCompatibilityTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compatibility/CompatibilityReporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compatibility/ContainerTestRunner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compatibility/CrossPlatformTestRunner.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 129. Maximum allowed is 120.","line":230,"column":1,"nodeType":"Program","messageId":"max","endLine":230,"endColumn":130},{"ruleId":"max-len","severity":1,"message":"This line has a length of 129. Maximum allowed is 120.","line":250,"column":1,"nodeType":"Program","messageId":"max","endLine":250,"endColumn":130},{"ruleId":"max-len","severity":1,"message":"This line has a length of 129. Maximum allowed is 120.","line":299,"column":1,"nodeType":"Program","messageId":"max","endLine":299,"endColumn":130},{"ruleId":"max-len","severity":1,"message":"This line has a length of 129. Maximum allowed is 120.","line":318,"column":1,"nodeType":"Program","messageId":"max","endLine":318,"endColumn":130}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cross-Platform Test Runner\n * Orchestrates testing across different platforms, Node versions, browsers, and containers\n */\n\nimport { BrowserCompatibilityTester } from './BrowserCompatibilityTester';\nimport { ContainerTestRunner } from './ContainerTestRunner';\nimport { EnvironmentDetector } from './EnvironmentDetector';\nimport { NodeVersionTester } from './NodeVersionTester';\nimport {\n  CompatibilityTestResult,\n  CompatibilityReport,\n  TestEnvironmentConfig,\n  SupportMatrix,\n  PlatformSupport,\n  NodeVersionSupport,\n  BrowserSupport,\n  ContainerSupport,\n} from './types';\n\nexport class CrossPlatformTestRunner {\n  private nodeVersionTester: NodeVersionTester;\n  private browserTester: BrowserCompatibilityTester;\n  private containerRunner: ContainerTestRunner;\n\n  constructor() {\n    this.nodeVersionTester = new NodeVersionTester();\n    this.browserTester = new BrowserCompatibilityTester();\n    this.containerRunner = new ContainerTestRunner();\n  }\n\n  /**\n   * Run comprehensive cross-platform compatibility tests\n   */\n  async runComprehensiveTests(\n    testCommand: string,\n    config?: Partial<TestEnvironmentConfig>,\n  ): Promise<CompatibilityReport> {\n    const startTime = Date.now();\n    console.log('🚀 Starting comprehensive cross-platform compatibility tests...');\n\n    const defaultConfig: TestEnvironmentConfig = {\n      platforms: ['darwin', 'linux', 'win32'],\n      nodeVersions: ['18.17.0', '18.18.0', '20.5.0', '20.8.0'],\n      browsers: [\n        { name: 'chrome', versions: ['latest', '119'], headless: true },\n        { name: 'firefox', versions: ['latest', '118'], headless: true },\n      ],\n      containers: [\n        { runtime: 'docker', image: 'node:18-alpine', nodeVersion: '18.18.0' },\n        { runtime: 'docker', image: 'node:20-alpine', nodeVersion: '20.8.0' },\n      ],\n      parallel: true,\n      timeout: 600000,\n      retries: 2,\n    };\n\n    const finalConfig = { ...defaultConfig, ...config };\n    const results: CompatibilityTestResult[] = [];\n\n    try {\n      // 1. Test current platform with different Node.js versions\n      console.log('📦 Testing Node.js version compatibility...');\n      const nodeResults = await this.testNodeVersions(testCommand, finalConfig);\n      results.push(...nodeResults);\n\n      // 2. Test browser compatibility (if applicable)\n      if (this.shouldTestBrowsers(testCommand)) {\n        console.log('🌐 Testing browser compatibility...');\n        const browserResults = await this.testBrowsers(testCommand, finalConfig);\n        results.push(...browserResults);\n      }\n\n      // 3. Test container environments\n      console.log('🐳 Testing container compatibility...');\n      const containerResults = await this.testContainers(testCommand, finalConfig);\n      results.push(...containerResults);\n\n      // 4. Generate comprehensive report\n      const report = await this.generateCompatibilityReport(results, finalConfig);\n\n      const duration = Date.now() - startTime;\n      console.log(`✅ Cross-platform testing completed in ${duration}ms`);\n\n      return report;\n    } catch (error) {\n      console.error('❌ Cross-platform testing failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Run quick compatibility check\n   */\n  async runQuickCheck(testCommand: string): Promise<{\n    compatible: boolean;\n    issues: string[];\n    recommendations: string[];\n  }> {\n    console.log('⚡ Running quick compatibility check...');\n\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    // Check current environment\n    const envCheck = EnvironmentDetector.checkCompatibility();\n    if (!envCheck.compatible) {\n      issues.push(...envCheck.issues);\n    }\n    recommendations.push(...envCheck.warnings);\n\n    // Quick Node.js version test\n    try {\n      const nodeResult = await this.nodeVersionTester.testSingleVersion(\n        process.version.slice(1), // Remove 'v' prefix\n        testCommand,\n      );\n\n      if (!nodeResult.passed) {\n        issues.push(`Tests fail with current Node.js version ${process.version}`);\n      }\n    } catch (error) {\n      issues.push(`Failed to test current Node.js version: ${error}`);\n    }\n\n    // Check container availability\n    const isContainer = EnvironmentDetector.isContainer();\n    const containerInfo = EnvironmentDetector.getContainerInfo();\n\n    if (isContainer && containerInfo) {\n      recommendations.push(`Running in ${containerInfo.runtime} container`);\n    } else {\n      recommendations.push('Consider testing in containerized environment for consistency');\n    }\n\n    return {\n      compatible: issues.length === 0,\n      issues,\n      recommendations,\n    };\n  }\n\n  /**\n   * Generate platform support matrix\n   */\n  async generateSupportMatrix(): Promise<SupportMatrix> {\n    console.log('📊 Generating platform support matrix...');\n\n    // Platform support\n    const platforms: PlatformSupport[] = [\n      {\n        platform: 'darwin',\n        supported: true,\n        minNodeVersion: '18.0.0',\n        recommendations: ['Use latest macOS for best compatibility'],\n      },\n      {\n        platform: 'linux',\n        supported: true,\n        minNodeVersion: '18.0.0',\n        recommendations: ['Ubuntu 20.04+ or equivalent recommended'],\n      },\n      {\n        platform: 'win32',\n        supported: true,\n        minNodeVersion: '18.0.0',\n        limitations: ['Path separator differences may cause issues'],\n        recommendations: ['Use WSL2 for better compatibility'],\n      },\n    ];\n\n    // Node.js version support\n    const nodeVersionMatrix = await this.nodeVersionTester.getCompatibilityMatrix().catch(() => []);\n    const nodeVersions: NodeVersionSupport[] = nodeVersionMatrix.map(item => ({\n      version: item.version,\n      supported: item.compatible,\n      tested: true,\n      issues: item.issues,\n      recommendations: item.features.length > 0 ?\n        [`Supports features: ${item.features.join(', ')}`] : [],\n    }));\n\n    // Browser support\n    const browserMatrix = await this.browserTester.getBrowserFeatureMatrix().catch(() => []);\n    const browsers: BrowserSupport[] = this.aggregateBrowserSupport(browserMatrix);\n\n    // Container support\n    const containers: ContainerSupport[] = [\n      {\n        runtime: 'docker',\n        baseImages: ['node:18-alpine', 'node:20-alpine', 'node:18-slim', 'node:20-slim'],\n        supported: true,\n        recommendations: ['Alpine images are smaller but may have compatibility issues'],\n      },\n      {\n        runtime: 'podman',\n        baseImages: ['node:18-alpine', 'node:20-alpine'],\n        supported: true,\n        recommendations: ['Drop-in replacement for Docker'],\n      },\n    ];\n\n    return {\n      platforms,\n      nodeVersions,\n      browsers,\n      containers,\n    };\n  }\n\n  /**\n   * Test Node.js versions\n   */\n  private async testNodeVersions(\n    testCommand: string,\n    config: TestEnvironmentConfig,\n  ): Promise<CompatibilityTestResult[]> {\n    if (config.parallel) {\n      // Run tests in parallel for better performance\n      const promises = config.nodeVersions.map(version =>\n        this.nodeVersionTester.testSingleVersion(version, testCommand).catch(error => {\n          // Return a failed result instead of throwing\n          return {\n            environment: { platform: process.platform, arch: process.arch, nodeVersion: `v${version}`, npmVersion: 'unknown', osVersion: 'unknown', cpuCount: 0, totalMemory: 0, availableMemory: 0, timezone: 'UTC', locale: 'en-US' },\n            testSuite: `node-${version}`,\n            passed: false,\n            duration: 0,\n            errors: [{ type: 'version' as const, message: `Failed to test Node.js ${version}: ${error}`, severity: 'critical' as const, affectedTests: ['all'] }],\n            warnings: [],\n            performance: { executionTime: 0, memoryUsage: { peak: 0, average: 0, final: 0 }, cpuUsage: { peak: 0, average: 0 } },\n          };\n        }),\n      );\n      return await Promise.all(promises);\n    } else {\n      // Run tests sequentially\n      const results: CompatibilityTestResult[] = [];\n      for (const version of config.nodeVersions) {\n        try {\n          const result = await this.nodeVersionTester.testSingleVersion(version, testCommand);\n          results.push(result);\n        } catch (error) {\n          results.push({\n            environment: { platform: process.platform, arch: process.arch, nodeVersion: `v${version}`, npmVersion: 'unknown', osVersion: 'unknown', cpuCount: 0, totalMemory: 0, availableMemory: 0, timezone: 'UTC', locale: 'en-US' },\n            testSuite: `node-${version}`,\n            passed: false,\n            duration: 0,\n            errors: [{ type: 'version' as const, message: `Failed to test Node.js ${version}: ${error}`, severity: 'critical' as const, affectedTests: ['all'] }],\n            warnings: [],\n            performance: { executionTime: 0, memoryUsage: { peak: 0, average: 0, final: 0 }, cpuUsage: { peak: 0, average: 0 } },\n          });\n        }\n      }\n      return results;\n    }\n  }\n\n  /**\n   * Test browsers\n   */\n  private async testBrowsers(\n    testCommand: string,\n    config: TestEnvironmentConfig,\n  ): Promise<CompatibilityTestResult[]> {\n    if (config.parallel) {\n      const promises = config.browsers.map(browser =>\n        this.browserTester.testMultipleBrowsers(testCommand, [browser]),\n      );\n      const results = await Promise.all(promises);\n      return results.flat();\n    } else {\n      const results: CompatibilityTestResult[] = [];\n      for (const browser of config.browsers) {\n        const browserResults = await this.browserTester.testMultipleBrowsers(testCommand, [browser]);\n        results.push(...browserResults);\n      }\n      return results;\n    }\n  }\n\n  /**\n   * Test containers\n   */\n  private async testContainers(\n    testCommand: string,\n    config: TestEnvironmentConfig,\n  ): Promise<CompatibilityTestResult[]> {\n    if (config.parallel) {\n      const promises = config.containers.map(container =>\n        this.containerRunner.testSingleContainer(container, testCommand).catch(error => {\n          // Return a failed result instead of throwing\n          return {\n            environment: { platform: 'linux' as NodeJS.Platform, arch: process.arch, nodeVersion: container.nodeVersion, npmVersion: 'unknown', osVersion: 'Container', cpuCount: 0, totalMemory: 0, availableMemory: 0, timezone: 'UTC', locale: 'en-US' },\n            testSuite: `${container.runtime}-${container.image}`,\n            passed: false,\n            duration: 0,\n            errors: [{ type: 'platform' as const, message: `Failed to test container ${container.image}: ${error}`, severity: 'critical' as const, affectedTests: ['all'] }],\n            warnings: [],\n            performance: { executionTime: 0, memoryUsage: { peak: 0, average: 0, final: 0 }, cpuUsage: { peak: 0, average: 0 } },\n          };\n        }),\n      );\n      return await Promise.all(promises);\n    } else {\n      const results: CompatibilityTestResult[] = [];\n      for (const container of config.containers) {\n        try {\n          const result = await this.containerRunner.testSingleContainer(container, testCommand);\n          results.push(result);\n        } catch (error) {\n          results.push({\n            environment: { platform: 'linux' as NodeJS.Platform, arch: process.arch, nodeVersion: container.nodeVersion, npmVersion: 'unknown', osVersion: 'Container', cpuCount: 0, totalMemory: 0, availableMemory: 0, timezone: 'UTC', locale: 'en-US' },\n            testSuite: `${container.runtime}-${container.image}`,\n            passed: false,\n            duration: 0,\n            errors: [{ type: 'platform' as const, message: `Failed to test container ${container.image}: ${error}`, severity: 'critical' as const, affectedTests: ['all'] }],\n            warnings: [],\n            performance: { executionTime: 0, memoryUsage: { peak: 0, average: 0, final: 0 }, cpuUsage: { peak: 0, average: 0 } },\n          });\n        }\n      }\n      return results;\n    }\n  }\n\n  /**\n   * Check if browser testing is applicable\n   */\n  private shouldTestBrowsers(testCommand: string): boolean {\n    // Check if the test command includes browser-related tests\n    const browserKeywords = ['e2e', 'browser', 'playwright', 'puppeteer', 'cypress'];\n    return browserKeywords.some(keyword => testCommand.includes(keyword));\n  }\n\n  /**\n   * Generate comprehensive compatibility report\n   */\n  private async generateCompatibilityReport(\n    results: CompatibilityTestResult[],\n    config: TestEnvironmentConfig,\n  ): Promise<CompatibilityReport> {\n    const totalEnvironments = results.length;\n    const passedEnvironments = results.filter(r => r.passed).length;\n    const failedEnvironments = results.filter(r => !r.passed).length;\n    const warningEnvironments = results.filter(r => r.warnings.length > 0).length;\n\n    // Generate recommendations\n    const recommendations = this.generateRecommendations(results);\n\n    // Generate support matrix\n    const supportMatrix = await this.generateSupportMatrix();\n\n    return {\n      summary: {\n        totalEnvironments,\n        passedEnvironments,\n        failedEnvironments,\n        warningEnvironments,\n      },\n      results,\n      recommendations,\n      supportMatrix,\n    };\n  }\n\n  /**\n   * Generate recommendations based on test results\n   */\n  private generateRecommendations(results: CompatibilityTestResult[]): string[] {\n    const recommendations: string[] = [];\n    const failedResults = results.filter(r => !r.passed);\n\n    if (failedResults.length === 0) {\n      recommendations.push('✅ All environments passed! Your code has excellent cross-platform compatibility.');\n    } else {\n      recommendations.push(`❌ ${failedResults.length} environments failed. Consider the following:`);\n\n      // Analyze failure patterns\n      const nodeFailures = failedResults.filter(r => r.testSuite.startsWith('node-'));\n      const browserFailures = failedResults.filter(r => r.testSuite.includes('chrome') || r.testSuite.includes('firefox'));\n      const containerFailures = failedResults.filter(r => r.testSuite.includes('docker'));\n\n      if (nodeFailures.length > 0) {\n        recommendations.push('🔧 Node.js version issues detected. Consider updating dependencies or using version-specific polyfills.');\n      }\n\n      if (browserFailures.length > 0) {\n        recommendations.push('🌐 Browser compatibility issues detected. Consider adding polyfills or updating browser targets.');\n      }\n\n      if (containerFailures.length > 0) {\n        recommendations.push('🐳 Container environment issues detected. Check Dockerfile and container configuration.');\n      }\n    }\n\n    // Performance recommendations\n    const slowResults = results.filter(r => r.duration > 60000); // > 1 minute\n    if (slowResults.length > 0) {\n      recommendations.push('⚡ Some environments are slow. Consider optimizing test performance or using parallel execution.');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Aggregate browser support information\n   */\n  private aggregateBrowserSupport(browserMatrix: any[]): BrowserSupport[] {\n    const supportMap = new Map<string, BrowserSupport>();\n\n    for (const item of browserMatrix) {\n      if (!supportMap.has(item.browser)) {\n        supportMap.set(item.browser, {\n          browser: item.browser,\n          versions: [],\n          supported: true,\n          polyfillsRequired: [],\n          limitations: [],\n        });\n      }\n\n      const support = supportMap.get(item.browser)!;\n      support.versions.push(item.version);\n\n      // Check for required polyfills\n      const polyfillFeatures = item.features.filter((f: any) => f.polyfillRequired);\n      if (polyfillFeatures.length > 0) {\n        support.polyfillsRequired = [...new Set([\n          ...support.polyfillsRequired || [],\n          ...polyfillFeatures.map((f: any) => f.name),\n        ])];\n      }\n    }\n\n    return Array.from(supportMap.values());\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compatibility/EnvironmentDetector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compatibility/NodeVersionTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compatibility/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compatibility/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compliance/CodeQualityChecker.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 126. Maximum allowed is 120.","line":138,"column":1,"nodeType":"Program","messageId":"max","endLine":138,"endColumn":127},{"ruleId":"max-len","severity":1,"message":"This line has a length of 124. Maximum allowed is 120.","line":153,"column":1,"nodeType":"Program","messageId":"max","endLine":153,"endColumn":125},{"ruleId":"max-len","severity":1,"message":"This line has a length of 122. Maximum allowed is 120.","line":199,"column":1,"nodeType":"Program","messageId":"max","endLine":199,"endColumn":123}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 代码质量标准检查器\n *\n * 实现代码质量标准的自动检查功能\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { ComplianceRule, ComplianceContext, ComplianceResult } from './ComplianceFramework';\n\nexport interface CodeQualityMetrics {\n  complexity: number;\n  maintainabilityIndex: number;\n  linesOfCode: number;\n  duplicateLines: number;\n  testCoverage: number;\n  eslintViolations: number;\n  typeScriptErrors: number;\n}\n\nexport interface CodeQualityStandards {\n  maxComplexity: number;\n  minMaintainabilityIndex: number;\n  maxFileLength: number;\n  maxDuplicatePercentage: number;\n  minTestCoverage: number;\n  maxEslintViolations: number;\n  allowTypeScriptErrors: boolean;\n}\n\nexport class CodeQualityChecker {\n  private standards: CodeQualityStandards;\n\n  constructor(standards: CodeQualityStandards) {\n    this.standards = standards;\n  }\n\n  /**\n   * 获取代码质量检查规则\n   */\n  getCodeQualityRules(): ComplianceRule[] {\n    return [\n      {\n        id: 'code-complexity',\n        name: '代码复杂度检查',\n        description: '检查代码的圈复杂度是否在可接受范围内',\n        category: 'code-quality',\n        severity: 'warning',\n        enabled: true,\n        check: this.checkComplexity.bind(this),\n      },\n      {\n        id: 'maintainability-index',\n        name: '可维护性指数检查',\n        description: '检查代码的可维护性指数',\n        category: 'code-quality',\n        severity: 'warning',\n        enabled: true,\n        check: this.checkMaintainability.bind(this),\n      },\n      {\n        id: 'file-length',\n        name: '文件长度检查',\n        description: '检查文件长度是否过长',\n        category: 'code-quality',\n        severity: 'info',\n        enabled: true,\n        check: this.checkFileLength.bind(this),\n      },\n      {\n        id: 'code-duplication',\n        name: '代码重复检查',\n        description: '检查代码重复率',\n        category: 'code-quality',\n        severity: 'warning',\n        enabled: true,\n        check: this.checkDuplication.bind(this),\n      },\n      {\n        id: 'eslint-compliance',\n        name: 'ESLint规则合规性',\n        description: '检查ESLint规则违规情况',\n        category: 'code-quality',\n        severity: 'error',\n        enabled: true,\n        check: this.checkEslintCompliance.bind(this),\n      },\n      {\n        id: 'typescript-errors',\n        name: 'TypeScript错误检查',\n        description: '检查TypeScript编译错误',\n        category: 'code-quality',\n        severity: 'error',\n        enabled: true,\n        check: this.checkTypeScriptErrors.bind(this),\n      },\n    ];\n  }\n\n  /**\n   * 检查代码复杂度\n   */\n  private async checkComplexity(context: ComplianceContext): Promise<ComplianceResult> {\n    try {\n      const metrics = await this.analyzeCodeMetrics(context.projectPath);\n      const passed = metrics.complexity <= this.standards.maxComplexity;\n      const score = passed ? 100 : Math.max(0, 100 - (metrics.complexity - this.standards.maxComplexity) * 10);\n\n      return {\n        ruleId: 'code-complexity',\n        passed,\n        score,\n        message: passed\n          ? `代码复杂度 ${metrics.complexity} 符合标准 (≤${this.standards.maxComplexity})`\n          : `代码复杂度 ${metrics.complexity} 超出标准 (≤${this.standards.maxComplexity})`,\n        details: `平均圈复杂度: ${metrics.complexity}`,\n        suggestions: passed ? [] : [\n          '重构复杂的函数和方法',\n          '将大型函数拆分为更小的函数',\n          '减少嵌套层级和条件分支',\n        ],\n        evidence: { complexity: metrics.complexity, threshold: this.standards.maxComplexity },\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      return this.createErrorResult('code-complexity', error);\n    }\n  }\n\n  /**\n   * 检查可维护性指数\n   */\n  private async checkMaintainability(context: ComplianceContext): Promise<ComplianceResult> {\n    try {\n      const metrics = await this.analyzeCodeMetrics(context.projectPath);\n      const passed = metrics.maintainabilityIndex >= this.standards.minMaintainabilityIndex;\n      const score = passed ? 100 : Math.max(0, (metrics.maintainabilityIndex / this.standards.minMaintainabilityIndex) * 100);\n\n      return {\n        ruleId: 'maintainability-index',\n        passed,\n        score,\n        message: passed\n          ? `可维护性指数 ${metrics.maintainabilityIndex} 符合标准 (≥${this.standards.minMaintainabilityIndex})`\n          : `可维护性指数 ${metrics.maintainabilityIndex} 低于标准 (≥${this.standards.minMaintainabilityIndex})`,\n        details: `可维护性指数: ${metrics.maintainabilityIndex}`,\n        suggestions: passed ? [] : [\n          '减少代码复杂度',\n          '改善代码注释和文档',\n          '重构难以理解的代码段',\n        ],\n        evidence: { maintainabilityIndex: metrics.maintainabilityIndex, threshold: this.standards.minMaintainabilityIndex },\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      return this.createErrorResult('maintainability-index', error);\n    }\n  }\n\n  /**\n   * 检查文件长度\n   */\n  private async checkFileLength(context: ComplianceContext): Promise<ComplianceResult> {\n    try {\n      const longFiles = await this.findLongFiles(context.projectPath);\n      const passed = longFiles.length === 0;\n      const score = passed ? 100 : Math.max(0, 100 - longFiles.length * 10);\n\n      return {\n        ruleId: 'file-length',\n        passed,\n        score,\n        message: passed\n          ? `所有文件长度符合标准 (≤${this.standards.maxFileLength}行)`\n          : `发现 ${longFiles.length} 个过长文件 (>${this.standards.maxFileLength}行)`,\n        details: longFiles.length > 0 ? `过长文件: ${longFiles.map(f => f.path).join(', ')}` : undefined,\n        suggestions: passed ? [] : [\n          '将大型文件拆分为更小的模块',\n          '提取公共功能到独立文件',\n          '重构冗长的类和函数',\n        ],\n        evidence: { longFiles, threshold: this.standards.maxFileLength },\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      return this.createErrorResult('file-length', error);\n    }\n  }\n\n  /**\n   * 检查代码重复\n   */\n  private async checkDuplication(context: ComplianceContext): Promise<ComplianceResult> {\n    try {\n      const metrics = await this.analyzeCodeMetrics(context.projectPath);\n      const duplicationPercentage = (metrics.duplicateLines / metrics.linesOfCode) * 100;\n      const passed = duplicationPercentage <= this.standards.maxDuplicatePercentage;\n      const score = passed ? 100 : Math.max(0, 100 - (duplicationPercentage - this.standards.maxDuplicatePercentage) * 5);\n\n      return {\n        ruleId: 'code-duplication',\n        passed,\n        score,\n        message: passed\n          ? `代码重复率 ${duplicationPercentage.toFixed(1)}% 符合标准 (≤${this.standards.maxDuplicatePercentage}%)`\n          : `代码重复率 ${duplicationPercentage.toFixed(1)}% 超出标准 (≤${this.standards.maxDuplicatePercentage}%)`,\n        details: `重复行数: ${metrics.duplicateLines} / 总行数: ${metrics.linesOfCode}`,\n        suggestions: passed ? [] : [\n          '提取重复代码到公共函数',\n          '使用设计模式减少代码重复',\n          '创建可复用的组件和工具函数',\n        ],\n        evidence: {\n          duplicateLines: metrics.duplicateLines,\n          totalLines: metrics.linesOfCode,\n          percentage: duplicationPercentage,\n          threshold: this.standards.maxDuplicatePercentage,\n        },\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      return this.createErrorResult('code-duplication', error);\n    }\n  }\n\n  /**\n   * 检查ESLint合规性\n   */\n  private async checkEslintCompliance(context: ComplianceContext): Promise<ComplianceResult> {\n    try {\n      const violations = await this.runEslintCheck(context.projectPath);\n      const passed = violations <= this.standards.maxEslintViolations;\n      const score = passed ? 100 : Math.max(0, 100 - violations * 2);\n\n      return {\n        ruleId: 'eslint-compliance',\n        passed,\n        score,\n        message: passed\n          ? `ESLint检查通过，发现 ${violations} 个违规 (≤${this.standards.maxEslintViolations})`\n          : `ESLint检查失败，发现 ${violations} 个违规 (≤${this.standards.maxEslintViolations})`,\n        details: `ESLint违规数量: ${violations}`,\n        suggestions: passed ? [] : [\n          '修复ESLint报告的代码风格问题',\n          '配置自动格式化工具',\n          '在提交前运行ESLint检查',\n        ],\n        evidence: { violations, threshold: this.standards.maxEslintViolations },\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      return this.createErrorResult('eslint-compliance', error);\n    }\n  }\n\n  /**\n   * 检查TypeScript错误\n   */\n  private async checkTypeScriptErrors(context: ComplianceContext): Promise<ComplianceResult> {\n    try {\n      const errors = await this.runTypeScriptCheck(context.projectPath);\n      const passed = this.standards.allowTypeScriptErrors || errors === 0;\n      const score = passed ? 100 : Math.max(0, 100 - errors * 5);\n\n      return {\n        ruleId: 'typescript-errors',\n        passed,\n        score,\n        message: passed\n          ? `TypeScript编译检查通过，发现 ${errors} 个错误`\n          : `TypeScript编译检查失败，发现 ${errors} 个错误`,\n        details: `TypeScript错误数量: ${errors}`,\n        suggestions: passed ? [] : [\n          '修复TypeScript类型错误',\n          '完善类型定义',\n          '启用严格的TypeScript配置',\n        ],\n        evidence: { errors, allowErrors: this.standards.allowTypeScriptErrors },\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      return this.createErrorResult('typescript-errors', error);\n    }\n  }\n\n  /**\n   * 分析代码指标\n   */\n  private async analyzeCodeMetrics(projectPath: string): Promise<CodeQualityMetrics> {\n    // 这里实现实际的代码分析逻辑\n    // 为了演示，返回模拟数据\n    return {\n      complexity: 8.5,\n      maintainabilityIndex: 75,\n      linesOfCode: 15000,\n      duplicateLines: 450,\n      testCoverage: 92,\n      eslintViolations: 12,\n      typeScriptErrors: 0,\n    };\n  }\n\n  /**\n   * 查找过长文件\n   */\n  private async findLongFiles(projectPath: string): Promise<Array<{path: string, lines: number}>> {\n    const longFiles: Array<{path: string, lines: number}> = [];\n\n    const scanDirectory = (dir: string) => {\n      const files = fs.readdirSync(dir);\n\n      for (const file of files) {\n        const filePath = path.join(dir, file);\n        const stat = fs.statSync(filePath);\n\n        if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {\n          scanDirectory(filePath);\n        } else if (stat.isFile() && (file.endsWith('.ts') || file.endsWith('.tsx') || file.endsWith('.js') || file.endsWith('.jsx'))) {\n          const content = fs.readFileSync(filePath, 'utf8');\n          const lines = content.split('\\n').length;\n\n          if (lines > this.standards.maxFileLength) {\n            longFiles.push({\n              path: path.relative(projectPath, filePath),\n              lines,\n            });\n          }\n        }\n      }\n    };\n\n    try {\n      scanDirectory(projectPath);\n    } catch (error) {\n      // 忽略文件访问错误\n    }\n\n    return longFiles;\n  }\n\n  /**\n   * 运行ESLint检查\n   */\n  private async runEslintCheck(projectPath: string): Promise<number> {\n    // 这里应该实际运行ESLint\n    // 为了演示，返回模拟数据\n    return Math.floor(Math.random() * 20);\n  }\n\n  /**\n   * 运行TypeScript检查\n   */\n  private async runTypeScriptCheck(projectPath: string): Promise<number> {\n    // 这里应该实际运行TypeScript编译检查\n    // 为了演示，返回模拟数据\n    return Math.floor(Math.random() * 5);\n  }\n\n  /**\n   * 创建错误结果\n   */\n  private createErrorResult(ruleId: string, error: any): ComplianceResult {\n    return {\n      ruleId,\n      passed: false,\n      score: 0,\n      message: `检查执行失败: ${error.message}`,\n      timestamp: new Date(),\n    };\n  }\n}\n\nexport const DEFAULT_CODE_QUALITY_STANDARDS: CodeQualityStandards = {\n  maxComplexity: 10,\n  minMaintainabilityIndex: 60,\n  maxFileLength: 300,\n  maxDuplicatePercentage: 5,\n  minTestCoverage: 80,\n  maxEslintViolations: 10,\n  allowTypeScriptErrors: false,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compliance/ComplianceAutomation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compliance/ComplianceChecker.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 130. Maximum allowed is 120.","line":766,"column":1,"nodeType":"Program","messageId":"max","endLine":766,"endColumn":131}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Compliance Checker\n *\n * Comprehensive compliance checking system for code quality standards,\n * test coverage requirements, documentation completeness, and regulatory compliance.\n */\n\nimport { EventEmitter } from 'events';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface ComplianceConfig {\n  codeQuality: CodeQualityConfig;\n  testCoverage: TestCoverageConfig;\n  documentation: DocumentationConfig;\n  security: SecurityConfig;\n  accessibility: AccessibilityConfig;\n  performance: PerformanceConfig;\n  outputPath: string;\n  reportFormats: ('json' | 'html' | 'markdown' | 'xml')[];\n}\n\nexport interface CodeQualityConfig {\n  enabled: boolean;\n  eslintConfigPath?: string;\n  prettierConfigPath?: string;\n  tsConfigPath?: string;\n  sonarQubeConfig?: SonarQubeConfig;\n  customRules: CustomRule[];\n  thresholds: {\n    complexity: number;\n    maintainabilityIndex: number;\n    duplicateLines: number;\n    codeSmells: number;\n  };\n}\n\nexport interface TestCoverageConfig {\n  enabled: boolean;\n  thresholds: {\n    statements: number;\n    branches: number;\n    functions: number;\n    lines: number;\n  };\n  excludePatterns: string[];\n  requireTestFiles: boolean;\n  testFilePatterns: string[];\n}\n\nexport interface DocumentationConfig {\n  enabled: boolean;\n  requiredFiles: string[];\n  apiDocumentation: {\n    required: boolean;\n    format: 'jsdoc' | 'typedoc' | 'swagger';\n    coverage: number;\n  };\n  readmeRequirements: {\n    sections: string[];\n    minimumLength: number;\n  };\n  changelogRequired: boolean;\n}\n\nexport interface SecurityConfig {\n  enabled: boolean;\n  vulnerabilityScanning: boolean;\n  dependencyAudit: boolean;\n  secretsDetection: boolean;\n  codeAnalysis: boolean;\n  allowedLicenses: string[];\n  securityHeaders: string[];\n}\n\nexport interface AccessibilityConfig {\n  enabled: boolean;\n  wcagLevel: 'A' | 'AA' | 'AAA';\n  testPatterns: string[];\n  requiredAttributes: string[];\n  colorContrastRatio: number;\n}\n\nexport interface PerformanceConfig {\n  enabled: boolean;\n  budgets: {\n    bundleSize: number;\n    loadTime: number;\n    memoryUsage: number;\n    cpuUsage: number;\n  };\n  metrics: string[];\n}\n\nexport interface SonarQubeConfig {\n  serverUrl: string;\n  projectKey: string;\n  token: string;\n  qualityGate: string;\n}\n\nexport interface CustomRule {\n  name: string;\n  description: string;\n  pattern: RegExp;\n  severity: 'error' | 'warning' | 'info';\n  message: string;\n  autoFix?: boolean;\n}\n\nexport interface ComplianceResult {\n  timestamp: Date;\n  overall: {\n    passed: boolean;\n    score: number;\n    grade: 'A' | 'B' | 'C' | 'D' | 'F';\n  };\n  categories: {\n    codeQuality: CategoryResult;\n    testCoverage: CategoryResult;\n    documentation: CategoryResult;\n    security: CategoryResult;\n    accessibility: CategoryResult;\n    performance: CategoryResult;\n  };\n  violations: ComplianceViolation[];\n  recommendations: ComplianceRecommendation[];\n  trends: ComplianceTrend[];\n}\n\nexport interface CategoryResult {\n  enabled: boolean;\n  passed: boolean;\n  score: number;\n  details: CategoryDetail[];\n  metrics: Record<string, number>;\n}\n\nexport interface CategoryDetail {\n  check: string;\n  passed: boolean;\n  value: number;\n  threshold: number;\n  message: string;\n}\n\nexport interface ComplianceViolation {\n  category: string;\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  rule: string;\n  message: string;\n  file?: string;\n  line?: number;\n  column?: number;\n  suggestion: string;\n  autoFixable: boolean;\n}\n\nexport interface ComplianceRecommendation {\n  category: string;\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  action: string;\n  estimatedEffort: string;\n  impact: string;\n}\n\nexport interface ComplianceTrend {\n  date: Date;\n  score: number;\n  violations: number;\n  category: string;\n}\n\nexport class ComplianceChecker extends EventEmitter {\n  private config: ComplianceConfig;\n  private results: ComplianceResult | null = null;\n\n  constructor(config: ComplianceConfig) {\n    super();\n    this.config = config;\n  }\n\n  /**\n   * Run comprehensive compliance check\n   */\n  async runComplianceCheck(): Promise<ComplianceResult> {\n    this.emit('complianceStarted');\n\n    const result: ComplianceResult = {\n      timestamp: new Date(),\n      overall: {\n        passed: false,\n        score: 0,\n        grade: 'F',\n      },\n      categories: {\n        codeQuality: await this.checkCodeQuality(),\n        testCoverage: await this.checkTestCoverage(),\n        documentation: await this.checkDocumentation(),\n        security: await this.checkSecurity(),\n        accessibility: await this.checkAccessibility(),\n        performance: await this.checkPerformance(),\n      },\n      violations: [],\n      recommendations: [],\n      trends: await this.loadComplianceTrends(),\n    };\n\n    // Calculate overall score and grade\n    result.overall = this.calculateOverallScore(result.categories);\n\n    // Collect violations and recommendations\n    result.violations = this.collectViolations(result.categories);\n    result.recommendations = this.generateRecommendations(result.categories);\n\n    this.results = result;\n    this.emit('complianceCompleted', result);\n\n    return result;\n  }\n\n  /**\n   * Check code quality compliance\n   */\n  private async checkCodeQuality(): Promise<CategoryResult> {\n    if (!this.config.codeQuality.enabled) {\n      return this.createDisabledResult();\n    }\n\n    this.emit('categoryStarted', 'codeQuality');\n\n    const details: CategoryDetail[] = [];\n    const metrics: Record<string, number> = {};\n\n    try {\n      // ESLint compliance check\n      if (this.config.codeQuality.eslintConfigPath) {\n        const eslintResult = await this.runESLintCheck();\n        details.push({\n          check: 'ESLint Compliance',\n          passed: eslintResult.errors === 0,\n          value: eslintResult.errors,\n          threshold: 0,\n          message: `${eslintResult.errors} ESLint errors found`,\n        });\n        metrics.eslintErrors = eslintResult.errors;\n        metrics.eslintWarnings = eslintResult.warnings;\n      }\n\n      // Prettier compliance check\n      if (this.config.codeQuality.prettierConfigPath) {\n        const prettierResult = await this.runPrettierCheck();\n        details.push({\n          check: 'Code Formatting',\n          passed: prettierResult.unformattedFiles === 0,\n          value: prettierResult.unformattedFiles,\n          threshold: 0,\n          message: `${prettierResult.unformattedFiles} files need formatting`,\n        });\n        metrics.unformattedFiles = prettierResult.unformattedFiles;\n      }\n\n      // TypeScript compliance check\n      if (this.config.codeQuality.tsConfigPath) {\n        const tsResult = await this.runTypeScriptCheck();\n        details.push({\n          check: 'TypeScript Compliance',\n          passed: tsResult.errors === 0,\n          value: tsResult.errors,\n          threshold: 0,\n          message: `${tsResult.errors} TypeScript errors found`,\n        });\n        metrics.typeScriptErrors = tsResult.errors;\n      }\n\n      // Code complexity check\n      const complexityResult = await this.checkCodeComplexity();\n      details.push({\n        check: 'Code Complexity',\n        passed: complexityResult.averageComplexity <= this.config.codeQuality.thresholds.complexity,\n        value: complexityResult.averageComplexity,\n        threshold: this.config.codeQuality.thresholds.complexity,\n        message: `Average complexity: ${complexityResult.averageComplexity}`,\n      });\n      metrics.averageComplexity = complexityResult.averageComplexity;\n      metrics.maxComplexity = complexityResult.maxComplexity;\n\n      // Maintainability index check\n      const maintainabilityResult = await this.checkMaintainabilityIndex();\n      details.push({\n        check: 'Maintainability Index',\n        passed: maintainabilityResult.index >= this.config.codeQuality.thresholds.maintainabilityIndex,\n        value: maintainabilityResult.index,\n        threshold: this.config.codeQuality.thresholds.maintainabilityIndex,\n        message: `Maintainability index: ${maintainabilityResult.index}`,\n      });\n      metrics.maintainabilityIndex = maintainabilityResult.index;\n\n      // Duplicate code check\n      const duplicateResult = await this.checkDuplicateCode();\n      details.push({\n        check: 'Code Duplication',\n        passed: duplicateResult.duplicateLines <= this.config.codeQuality.thresholds.duplicateLines,\n        value: duplicateResult.duplicateLines,\n        threshold: this.config.codeQuality.thresholds.duplicateLines,\n        message: `${duplicateResult.duplicateLines} duplicate lines found`,\n      });\n      metrics.duplicateLines = duplicateResult.duplicateLines;\n\n      // Custom rules check\n      const customRulesResult = await this.checkCustomRules();\n      details.push({\n        check: 'Custom Rules',\n        passed: customRulesResult.violations === 0,\n        value: customRulesResult.violations,\n        threshold: 0,\n        message: `${customRulesResult.violations} custom rule violations`,\n      });\n      metrics.customRuleViolations = customRulesResult.violations;\n\n    } catch (error) {\n      this.emit('categoryError', 'codeQuality', error);\n    }\n\n    const passed = details.every(d => d.passed);\n    const score = this.calculateCategoryScore(details);\n\n    this.emit('categoryCompleted', 'codeQuality', { passed, score });\n\n    return {\n      enabled: true,\n      passed,\n      score,\n      details,\n      metrics,\n    };\n  }\n\n  /**\n   * Check test coverage compliance\n   */\n  private async checkTestCoverage(): Promise<CategoryResult> {\n    if (!this.config.testCoverage.enabled) {\n      return this.createDisabledResult();\n    }\n\n    this.emit('categoryStarted', 'testCoverage');\n\n    const details: CategoryDetail[] = [];\n    const metrics: Record<string, number> = {};\n\n    try {\n      // Load coverage report\n      const coverageData = await this.loadCoverageReport();\n\n      if (coverageData) {\n        // Statement coverage check\n        details.push({\n          check: 'Statement Coverage',\n          passed: coverageData.statements >= this.config.testCoverage.thresholds.statements,\n          value: coverageData.statements,\n          threshold: this.config.testCoverage.thresholds.statements,\n          message: `Statement coverage: ${coverageData.statements}%`,\n        });\n        metrics.statementCoverage = coverageData.statements;\n\n        // Branch coverage check\n        details.push({\n          check: 'Branch Coverage',\n          passed: coverageData.branches >= this.config.testCoverage.thresholds.branches,\n          value: coverageData.branches,\n          threshold: this.config.testCoverage.thresholds.branches,\n          message: `Branch coverage: ${coverageData.branches}%`,\n        });\n        metrics.branchCoverage = coverageData.branches;\n\n        // Function coverage check\n        details.push({\n          check: 'Function Coverage',\n          passed: coverageData.functions >= this.config.testCoverage.thresholds.functions,\n          value: coverageData.functions,\n          threshold: this.config.testCoverage.thresholds.functions,\n          message: `Function coverage: ${coverageData.functions}%`,\n        });\n        metrics.functionCoverage = coverageData.functions;\n\n        // Line coverage check\n        details.push({\n          check: 'Line Coverage',\n          passed: coverageData.lines >= this.config.testCoverage.thresholds.lines,\n          value: coverageData.lines,\n          threshold: this.config.testCoverage.thresholds.lines,\n          message: `Line coverage: ${coverageData.lines}%`,\n        });\n        metrics.lineCoverage = coverageData.lines;\n      }\n\n      // Test file existence check\n      if (this.config.testCoverage.requireTestFiles) {\n        const testFileResult = await this.checkTestFileExistence();\n        details.push({\n          check: 'Test Files Existence',\n          passed: testFileResult.missingTestFiles === 0,\n          value: testFileResult.missingTestFiles,\n          threshold: 0,\n          message: `${testFileResult.missingTestFiles} source files without tests`,\n        });\n        metrics.missingTestFiles = testFileResult.missingTestFiles;\n        metrics.totalSourceFiles = testFileResult.totalSourceFiles;\n      }\n\n    } catch (error) {\n      this.emit('categoryError', 'testCoverage', error);\n    }\n\n    const passed = details.every(d => d.passed);\n    const score = this.calculateCategoryScore(details);\n\n    this.emit('categoryCompleted', 'testCoverage', { passed, score });\n\n    return {\n      enabled: true,\n      passed,\n      score,\n      details,\n      metrics,\n    };\n  }\n\n  /**\n   * Check documentation compliance\n   */\n  private async checkDocumentation(): Promise<CategoryResult> {\n    if (!this.config.documentation.enabled) {\n      return this.createDisabledResult();\n    }\n\n    this.emit('categoryStarted', 'documentation');\n\n    const details: CategoryDetail[] = [];\n    const metrics: Record<string, number> = {};\n\n    try {\n      // Required files check\n      const requiredFilesResult = await this.checkRequiredFiles();\n      details.push({\n        check: 'Required Files',\n        passed: requiredFilesResult.missingFiles === 0,\n        value: requiredFilesResult.missingFiles,\n        threshold: 0,\n        message: `${requiredFilesResult.missingFiles} required files missing`,\n      });\n      metrics.missingRequiredFiles = requiredFilesResult.missingFiles;\n\n      // README quality check\n      const readmeResult = await this.checkReadmeQuality();\n      details.push({\n        check: 'README Quality',\n        passed: readmeResult.score >= 80,\n        value: readmeResult.score,\n        threshold: 80,\n        message: `README quality score: ${readmeResult.score}%`,\n      });\n      metrics.readmeQuality = readmeResult.score;\n\n      // API documentation check\n      if (this.config.documentation.apiDocumentation.required) {\n        const apiDocResult = await this.checkApiDocumentation();\n        details.push({\n          check: 'API Documentation',\n          passed: apiDocResult.coverage >= this.config.documentation.apiDocumentation.coverage,\n          value: apiDocResult.coverage,\n          threshold: this.config.documentation.apiDocumentation.coverage,\n          message: `API documentation coverage: ${apiDocResult.coverage}%`,\n        });\n        metrics.apiDocCoverage = apiDocResult.coverage;\n      }\n\n      // Changelog check\n      if (this.config.documentation.changelogRequired) {\n        const changelogResult = await this.checkChangelog();\n        details.push({\n          check: 'Changelog',\n          passed: changelogResult.exists && changelogResult.upToDate,\n          value: changelogResult.exists ? 1 : 0,\n          threshold: 1,\n          message: changelogResult.exists\n            ? (changelogResult.upToDate ? 'Changelog is up to date' : 'Changelog needs updating')\n            : 'Changelog file missing',\n        });\n        metrics.changelogExists = changelogResult.exists ? 1 : 0;\n        metrics.changelogUpToDate = changelogResult.upToDate ? 1 : 0;\n      }\n\n    } catch (error) {\n      this.emit('categoryError', 'documentation', error);\n    }\n\n    const passed = details.every(d => d.passed);\n    const score = this.calculateCategoryScore(details);\n\n    this.emit('categoryCompleted', 'documentation', { passed, score });\n\n    return {\n      enabled: true,\n      passed,\n      score,\n      details,\n      metrics,\n    };\n  }\n\n  /**\n   * Check security compliance\n   */\n  private async checkSecurity(): Promise<CategoryResult> {\n    if (!this.config.security.enabled) {\n      return this.createDisabledResult();\n    }\n\n    this.emit('categoryStarted', 'security');\n\n    const details: CategoryDetail[] = [];\n    const metrics: Record<string, number> = {};\n\n    try {\n      // Vulnerability scanning\n      if (this.config.security.vulnerabilityScanning) {\n        const vulnResult = await this.runVulnerabilityScanning();\n        details.push({\n          check: 'Vulnerability Scanning',\n          passed: vulnResult.highSeverityVulns === 0,\n          value: vulnResult.highSeverityVulns,\n          threshold: 0,\n          message: `${vulnResult.highSeverityVulns} high severity vulnerabilities found`,\n        });\n        metrics.highSeverityVulns = vulnResult.highSeverityVulns;\n        metrics.totalVulns = vulnResult.totalVulns;\n      }\n\n      // Dependency audit\n      if (this.config.security.dependencyAudit) {\n        const depAuditResult = await this.runDependencyAudit();\n        details.push({\n          check: 'Dependency Audit',\n          passed: depAuditResult.vulnerabilities === 0,\n          value: depAuditResult.vulnerabilities,\n          threshold: 0,\n          message: `${depAuditResult.vulnerabilities} vulnerable dependencies found`,\n        });\n        metrics.vulnerableDependencies = depAuditResult.vulnerabilities;\n      }\n\n      // Secrets detection\n      if (this.config.security.secretsDetection) {\n        const secretsResult = await this.runSecretsDetection();\n        details.push({\n          check: 'Secrets Detection',\n          passed: secretsResult.secrets === 0,\n          value: secretsResult.secrets,\n          threshold: 0,\n          message: `${secretsResult.secrets} potential secrets found`,\n        });\n        metrics.potentialSecrets = secretsResult.secrets;\n      }\n\n      // License compliance\n      const licenseResult = await this.checkLicenseCompliance();\n      details.push({\n        check: 'License Compliance',\n        passed: licenseResult.nonCompliantLicenses === 0,\n        value: licenseResult.nonCompliantLicenses,\n        threshold: 0,\n        message: `${licenseResult.nonCompliantLicenses} non-compliant licenses found`,\n      });\n      metrics.nonCompliantLicenses = licenseResult.nonCompliantLicenses;\n\n    } catch (error) {\n      this.emit('categoryError', 'security', error);\n    }\n\n    const passed = details.every(d => d.passed);\n    const score = this.calculateCategoryScore(details);\n\n    this.emit('categoryCompleted', 'security', { passed, score });\n\n    return {\n      enabled: true,\n      passed,\n      score,\n      details,\n      metrics,\n    };\n  }\n\n  /**\n   * Check accessibility compliance\n   */\n  private async checkAccessibility(): Promise<CategoryResult> {\n    if (!this.config.accessibility.enabled) {\n      return this.createDisabledResult();\n    }\n\n    this.emit('categoryStarted', 'accessibility');\n\n    const details: CategoryDetail[] = [];\n    const metrics: Record<string, number> = {};\n\n    try {\n      // WCAG compliance check\n      const wcagResult = await this.checkWCAGCompliance();\n      details.push({\n        check: `WCAG ${this.config.accessibility.wcagLevel} Compliance`,\n        passed: wcagResult.violations === 0,\n        value: wcagResult.violations,\n        threshold: 0,\n        message: `${wcagResult.violations} WCAG violations found`,\n      });\n      metrics.wcagViolations = wcagResult.violations;\n\n      // Color contrast check\n      const contrastResult = await this.checkColorContrast();\n      details.push({\n        check: 'Color Contrast',\n        passed: contrastResult.failedElements === 0,\n        value: contrastResult.failedElements,\n        threshold: 0,\n        message: `${contrastResult.failedElements} elements with insufficient contrast`,\n      });\n      metrics.contrastFailures = contrastResult.failedElements;\n\n      // Required attributes check\n      const attributesResult = await this.checkRequiredAttributes();\n      details.push({\n        check: 'Required Attributes',\n        passed: attributesResult.missingAttributes === 0,\n        value: attributesResult.missingAttributes,\n        threshold: 0,\n        message: `${attributesResult.missingAttributes} elements missing required attributes`,\n      });\n      metrics.missingAttributes = attributesResult.missingAttributes;\n\n    } catch (error) {\n      this.emit('categoryError', 'accessibility', error);\n    }\n\n    const passed = details.every(d => d.passed);\n    const score = this.calculateCategoryScore(details);\n\n    this.emit('categoryCompleted', 'accessibility', { passed, score });\n\n    return {\n      enabled: true,\n      passed,\n      score,\n      details,\n      metrics,\n    };\n  }\n\n  /**\n   * Check performance compliance\n   */\n  private async checkPerformance(): Promise<CategoryResult> {\n    if (!this.config.performance.enabled) {\n      return this.createDisabledResult();\n    }\n\n    this.emit('categoryStarted', 'performance');\n\n    const details: CategoryDetail[] = [];\n    const metrics: Record<string, number> = {};\n\n    try {\n      // Bundle size check\n      const bundleSizeResult = await this.checkBundleSize();\n      details.push({\n        check: 'Bundle Size',\n        passed: bundleSizeResult.size <= this.config.performance.budgets.bundleSize,\n        value: bundleSizeResult.size,\n        threshold: this.config.performance.budgets.bundleSize,\n        message: `Bundle size: ${bundleSizeResult.size}KB`,\n      });\n      metrics.bundleSize = bundleSizeResult.size;\n\n      // Load time check\n      const loadTimeResult = await this.checkLoadTime();\n      details.push({\n        check: 'Load Time',\n        passed: loadTimeResult.time <= this.config.performance.budgets.loadTime,\n        value: loadTimeResult.time,\n        threshold: this.config.performance.budgets.loadTime,\n        message: `Load time: ${loadTimeResult.time}ms`,\n      });\n      metrics.loadTime = loadTimeResult.time;\n\n      // Memory usage check\n      const memoryResult = await this.checkMemoryUsage();\n      details.push({\n        check: 'Memory Usage',\n        passed: memoryResult.usage <= this.config.performance.budgets.memoryUsage,\n        value: memoryResult.usage,\n        threshold: this.config.performance.budgets.memoryUsage,\n        message: `Memory usage: ${memoryResult.usage}MB`,\n      });\n      metrics.memoryUsage = memoryResult.usage;\n\n    } catch (error) {\n      this.emit('categoryError', 'performance', error);\n    }\n\n    const passed = details.every(d => d.passed);\n    const score = this.calculateCategoryScore(details);\n\n    this.emit('categoryCompleted', 'performance', { passed, score });\n\n    return {\n      enabled: true,\n      passed,\n      score,\n      details,\n      metrics,\n    };\n  }\n\n  /**\n   * Helper methods for specific checks\n   */\n  private async runESLintCheck(): Promise<{ errors: number; warnings: number }> {\n    // Simplified implementation - would use actual ESLint API\n    return { errors: 0, warnings: 2 };\n  }\n\n  private async runPrettierCheck(): Promise<{ unformattedFiles: number }> {\n    // Simplified implementation - would use actual Prettier API\n    return { unformattedFiles: 0 };\n  }\n\n  private async runTypeScriptCheck(): Promise<{ errors: number }> {\n    // Simplified implementation - would use TypeScript compiler API\n    return { errors: 0 };\n  }\n\n  private async checkCodeComplexity(): Promise<{ averageComplexity: number; maxComplexity: number }> {\n    // Simplified implementation - would analyze actual code complexity\n    return { averageComplexity: 3.2, maxComplexity: 8 };\n  }\n\n  private async checkMaintainabilityIndex(): Promise<{ index: number }> {\n    // Simplified implementation - would calculate actual maintainability index\n    return { index: 85 };\n  }\n\n  private async checkDuplicateCode(): Promise<{ duplicateLines: number }> {\n    // Simplified implementation - would detect actual code duplication\n    return { duplicateLines: 15 };\n  }\n\n  private async checkCustomRules(): Promise<{ violations: number }> {\n    // Simplified implementation - would check custom rules\n    return { violations: 0 };\n  }\n\n  private async loadCoverageReport(): Promise<{ statements: number; branches: number; functions: number; lines: number } | null> {\n    try {\n      // Simplified implementation - would load actual coverage report\n      return {\n        statements: 92.5,\n        branches: 88.3,\n        functions: 95.1,\n        lines: 91.8,\n      };\n    } catch {\n      return null;\n    }\n  }\n\n  private async checkTestFileExistence(): Promise<{ missingTestFiles: number; totalSourceFiles: number }> {\n    // Simplified implementation - would check actual test file existence\n    return { missingTestFiles: 3, totalSourceFiles: 45 };\n  }\n\n  private async checkRequiredFiles(): Promise<{ missingFiles: number }> {\n    let missingFiles = 0;\n    for (const file of this.config.documentation.requiredFiles) {\n      if (!fs.existsSync(file)) {\n        missingFiles++;\n      }\n    }\n    return { missingFiles };\n  }\n\n  private async checkReadmeQuality(): Promise<{ score: number }> {\n    // Simplified implementation - would analyze README quality\n    return { score: 85 };\n  }\n\n  private async checkApiDocumentation(): Promise<{ coverage: number }> {\n    // Simplified implementation - would check API documentation coverage\n    return { coverage: 78 };\n  }\n\n  private async checkChangelog(): Promise<{ exists: boolean; upToDate: boolean }> {\n    const exists = fs.existsSync('CHANGELOG.md');\n    return { exists, upToDate: exists };\n  }\n\n  private async runVulnerabilityScanning(): Promise<{ highSeverityVulns: number; totalVulns: number }> {\n    // Simplified implementation - would run actual vulnerability scanning\n    return { highSeverityVulns: 0, totalVulns: 2 };\n  }\n\n  private async runDependencyAudit(): Promise<{ vulnerabilities: number }> {\n    // Simplified implementation - would run actual dependency audit\n    return { vulnerabilities: 1 };\n  }\n\n  private async runSecretsDetection(): Promise<{ secrets: number }> {\n    // Simplified implementation - would run actual secrets detection\n    return { secrets: 0 };\n  }\n\n  private async checkLicenseCompliance(): Promise<{ nonCompliantLicenses: number }> {\n    // Simplified implementation - would check actual license compliance\n    return { nonCompliantLicenses: 0 };\n  }\n\n  private async checkWCAGCompliance(): Promise<{ violations: number }> {\n    // Simplified implementation - would check actual WCAG compliance\n    return { violations: 2 };\n  }\n\n  private async checkColorContrast(): Promise<{ failedElements: number }> {\n    // Simplified implementation - would check actual color contrast\n    return { failedElements: 1 };\n  }\n\n  private async checkRequiredAttributes(): Promise<{ missingAttributes: number }> {\n    // Simplified implementation - would check actual required attributes\n    return { missingAttributes: 0 };\n  }\n\n  private async checkBundleSize(): Promise<{ size: number }> {\n    // Simplified implementation - would check actual bundle size\n    return { size: 245 };\n  }\n\n  private async checkLoadTime(): Promise<{ time: number }> {\n    // Simplified implementation - would measure actual load time\n    return { time: 1200 };\n  }\n\n  private async checkMemoryUsage(): Promise<{ usage: number }> {\n    // Simplified implementation - would measure actual memory usage\n    return { usage: 45 };\n  }\n\n  private async loadComplianceTrends(): Promise<ComplianceTrend[]> {\n    // Simplified implementation - would load actual historical data\n    return [];\n  }\n\n  /**\n   * Utility methods\n   */\n  private createDisabledResult(): CategoryResult {\n    return {\n      enabled: false,\n      passed: true,\n      score: 100,\n      details: [],\n      metrics: {},\n    };\n  }\n\n  private calculateCategoryScore(details: CategoryDetail[]): number {\n    if (details.length === 0) return 100;\n    const passedCount = details.filter(d => d.passed).length;\n    return Math.round((passedCount / details.length) * 100);\n  }\n\n  private calculateOverallScore(categories: ComplianceResult['categories']): ComplianceResult['overall'] {\n    const enabledCategories = Object.values(categories).filter(c => c.enabled);\n    if (enabledCategories.length === 0) {\n      return { passed: true, score: 100, grade: 'A' };\n    }\n\n    const totalScore = enabledCategories.reduce((sum, cat) => sum + cat.score, 0);\n    const averageScore = Math.round(totalScore / enabledCategories.length);\n    const passed = enabledCategories.every(cat => cat.passed);\n\n    let grade: 'A' | 'B' | 'C' | 'D' | 'F';\n    if (averageScore >= 90) grade = 'A';\n    else if (averageScore >= 80) grade = 'B';\n    else if (averageScore >= 70) grade = 'C';\n    else if (averageScore >= 60) grade = 'D';\n    else grade = 'F';\n\n    return { passed, score: averageScore, grade };\n  }\n\n  private collectViolations(categories: ComplianceResult['categories']): ComplianceViolation[] {\n    const violations: ComplianceViolation[] = [];\n\n    Object.entries(categories).forEach(([categoryName, category]) => {\n      if (!category.enabled) return;\n\n      category.details.forEach(detail => {\n        if (!detail.passed) {\n          violations.push({\n            category: categoryName,\n            severity: this.determineSeverity(detail),\n            rule: detail.check,\n            message: detail.message,\n            suggestion: this.generateSuggestion(categoryName, detail),\n            autoFixable: this.isAutoFixable(categoryName, detail),\n          });\n        }\n      });\n    });\n\n    return violations.sort((a, b) => {\n      const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n      return severityOrder[a.severity] - severityOrder[b.severity];\n    });\n  }\n\n  private generateRecommendations(categories: ComplianceResult['categories']): ComplianceRecommendation[] {\n    const recommendations: ComplianceRecommendation[] = [];\n\n    Object.entries(categories).forEach(([categoryName, category]) => {\n      if (!category.enabled || category.passed) return;\n\n      const failedChecks = category.details.filter(d => !d.passed);\n      if (failedChecks.length > 0) {\n        recommendations.push({\n          category: categoryName,\n          priority: this.determinePriority(category.score),\n          title: `Improve ${categoryName} compliance`,\n          description: `${failedChecks.length} checks failed in ${categoryName} category`,\n          action: this.generateCategoryAction(categoryName, failedChecks),\n          estimatedEffort: this.estimateEffort(failedChecks.length),\n          impact: this.estimateImpact(category.score),\n        });\n      }\n    });\n\n    return recommendations;\n  }\n\n  private determineSeverity(detail: CategoryDetail): 'critical' | 'high' | 'medium' | 'low' {\n    const ratio = detail.value / detail.threshold;\n    if (ratio > 2) return 'critical';\n    if (ratio > 1.5) return 'high';\n    if (ratio > 1.2) return 'medium';\n    return 'low';\n  }\n\n  private generateSuggestion(category: string, detail: CategoryDetail): string {\n    const suggestions: Record<string, Record<string, string>> = {\n      codeQuality: {\n        'ESLint Compliance': 'Run `npm run lint:fix` to automatically fix ESLint issues',\n        'Code Formatting': 'Run `npm run format` to format code with Prettier',\n        'TypeScript Compliance': 'Fix TypeScript errors by running `npm run type-check`',\n        'Code Complexity': 'Refactor complex functions to reduce cyclomatic complexity',\n        'Maintainability Index': 'Improve code maintainability by reducing complexity and adding documentation',\n      },\n      testCoverage: {\n        'Statement Coverage': 'Add more unit tests to increase statement coverage',\n        'Branch Coverage': 'Add tests for conditional branches and edge cases',\n        'Function Coverage': 'Ensure all functions have corresponding tests',\n        'Line Coverage': 'Add tests to cover untested lines of code',\n      },\n      documentation: {\n        'Required Files': 'Create missing documentation files',\n        'README Quality': 'Improve README with better structure and content',\n        'API Documentation': 'Add JSDoc comments to public APIs',\n        'Changelog': 'Create and maintain a CHANGELOG.md file',\n      },\n    };\n\n    return suggestions[category]?.[detail.check] || `Address ${detail.check} issues`;\n  }\n\n  private isAutoFixable(category: string, detail: CategoryDetail): boolean {\n    const autoFixableChecks = [\n      'Code Formatting',\n      'ESLint Compliance',\n    ];\n    return autoFixableChecks.includes(detail.check);\n  }\n\n  private determinePriority(score: number): 'high' | 'medium' | 'low' {\n    if (score < 60) return 'high';\n    if (score < 80) return 'medium';\n    return 'low';\n  }\n\n  private generateCategoryAction(category: string, failedChecks: CategoryDetail[]): string {\n    const actions: Record<string, string> = {\n      codeQuality: 'Run linting tools and refactor code to meet quality standards',\n      testCoverage: 'Write additional unit tests to meet coverage thresholds',\n      documentation: 'Create and update documentation files',\n      security: 'Address security vulnerabilities and update dependencies',\n      accessibility: 'Fix accessibility issues and improve WCAG compliance',\n      performance: 'Optimize performance to meet budget requirements',\n    };\n\n    return actions[category] || `Address ${failedChecks.length} failed checks`;\n  }\n\n  private estimateEffort(failedChecksCount: number): string {\n    if (failedChecksCount <= 2) return '1-2 hours';\n    if (failedChecksCount <= 5) return '4-8 hours';\n    if (failedChecksCount <= 10) return '1-2 days';\n    return '3-5 days';\n  }\n\n  private estimateImpact(score: number): string {\n    if (score < 50) return 'High - Critical for production readiness';\n    if (score < 70) return 'Medium - Important for code quality';\n    return 'Low - Nice to have improvement';\n  }\n\n  /**\n   * Generate compliance report\n   */\n  async generateReport(format: 'json' | 'html' | 'markdown' | 'xml' = 'json'): Promise<string> {\n    if (!this.results) {\n      throw new Error('No compliance results available. Run compliance check first.');\n    }\n\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `compliance-report-${timestamp}.${format}`;\n    const filepath = path.join(this.config.outputPath, filename);\n\n    let content: string;\n\n    switch (format) {\n      case 'json':\n        content = JSON.stringify(this.results, null, 2);\n        break;\n      case 'html':\n        content = this.generateHtmlReport(this.results);\n        break;\n      case 'markdown':\n        content = this.generateMarkdownReport(this.results);\n        break;\n      case 'xml':\n        content = this.generateXmlReport(this.results);\n        break;\n      default:\n        throw new Error(`Unsupported report format: ${format}`);\n    }\n\n    // Ensure output directory exists\n    if (!fs.existsSync(this.config.outputPath)) {\n      fs.mkdirSync(this.config.outputPath, { recursive: true });\n    }\n\n    fs.writeFileSync(filepath, content, 'utf8');\n    return filepath;\n  }\n\n  private generateHtmlReport(result: ComplianceResult): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Compliance Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f5f5f5; padding: 20px; border-radius: 5px; }\n        .grade-A { color: #28a745; }\n        .grade-B { color: #17a2b8; }\n        .grade-C { color: #ffc107; }\n        .grade-D { color: #fd7e14; }\n        .grade-F { color: #dc3545; }\n        .category { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }\n        .passed { background: #d4edda; }\n        .failed { background: #f8d7da; }\n        .disabled { background: #e2e3e5; }\n        .violation { margin: 10px 0; padding: 10px; border-left: 4px solid #dc3545; }\n        .recommendation { margin: 10px 0; padding: 10px; border-left: 4px solid #17a2b8; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Compliance Report</h1>\n        <p><strong>Generated:</strong> ${result.timestamp.toLocaleString()}</p>\n        <p><strong>Overall Score:</strong> <span class=\"grade-${result.overall.grade}\">${result.overall.score}% (Grade ${result.overall.grade})</span></p>\n        <p><strong>Status:</strong> ${result.overall.passed ? '✅ PASSED' : '❌ FAILED'}</p>\n    </div>\n\n    <h2>Categories</h2>\n    ${Object.entries(result.categories).map(([name, category]) => `\n        <div class=\"category ${category.enabled ? (category.passed ? 'passed' : 'failed') : 'disabled'}\">\n            <h3>${name.charAt(0).toUpperCase() + name.slice(1)}</h3>\n            ${category.enabled ? `\n                <p><strong>Score:</strong> ${category.score}%</p>\n                <p><strong>Status:</strong> ${category.passed ? '✅ PASSED' : '❌ FAILED'}</p>\n                <ul>\n                    ${category.details.map(detail => `\n                        <li>${detail.check}: ${detail.passed ? '✅' : '❌'} ${detail.message}</li>\n                    `).join('')}\n                </ul>\n            ` : '<p>Disabled</p>'}\n        </div>\n    `).join('')}\n\n    ${result.violations.length > 0 ? `\n        <h2>Violations</h2>\n        ${result.violations.map(violation => `\n            <div class=\"violation\">\n                <strong>${violation.severity.toUpperCase()}</strong> - ${violation.rule}\n                <p>${violation.message}</p>\n                <p><em>Suggestion: ${violation.suggestion}</em></p>\n            </div>\n        `).join('')}\n    ` : ''}\n\n    ${result.recommendations.length > 0 ? `\n        <h2>Recommendations</h2>\n        ${result.recommendations.map(rec => `\n            <div class=\"recommendation\">\n                <strong>${rec.priority.toUpperCase()}</strong> - ${rec.title}\n                <p>${rec.description}</p>\n                <p><strong>Action:</strong> ${rec.action}</p>\n                <p><strong>Effort:</strong> ${rec.estimatedEffort} | <strong>Impact:</strong> ${rec.impact}</p>\n            </div>\n        `).join('')}\n    ` : ''}\n</body>\n</html>`;\n  }\n\n  private generateMarkdownReport(result: ComplianceResult): string {\n    return `# Compliance Report\n\n**Generated:** ${result.timestamp.toLocaleString()}\n**Overall Score:** ${result.overall.score}% (Grade ${result.overall.grade})\n**Status:** ${result.overall.passed ? '✅ PASSED' : '❌ FAILED'}\n\n## Categories\n\n${Object.entries(result.categories).map(([name, category]) => `\n### ${name.charAt(0).toUpperCase() + name.slice(1)}\n\n${category.enabled ? `\n- **Score:** ${category.score}%\n- **Status:** ${category.passed ? '✅ PASSED' : '❌ FAILED'}\n\n${category.details.map(detail => `- ${detail.check}: ${detail.passed ? '✅' : '❌'} ${detail.message}`).join('\\n')}\n` : '- Status: Disabled'}\n`).join('')}\n\n${result.violations.length > 0 ? `\n## Violations\n\n${result.violations.map(violation => `\n### ${violation.severity.toUpperCase()} - ${violation.rule}\n\n${violation.message}\n\n**Suggestion:** ${violation.suggestion}\n`).join('')}\n` : ''}\n\n${result.recommendations.length > 0 ? `\n## Recommendations\n\n${result.recommendations.map(rec => `\n### ${rec.priority.toUpperCase()} - ${rec.title}\n\n${rec.description}\n\n- **Action:** ${rec.action}\n- **Effort:** ${rec.estimatedEffort}\n- **Impact:** ${rec.impact}\n`).join('')}\n` : ''}`;\n  }\n\n  private generateXmlReport(result: ComplianceResult): string {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<compliance-report>\n    <timestamp>${result.timestamp.toISOString()}</timestamp>\n    <overall>\n        <passed>${result.overall.passed}</passed>\n        <score>${result.overall.score}</score>\n        <grade>${result.overall.grade}</grade>\n    </overall>\n    <categories>\n        ${Object.entries(result.categories).map(([name, category]) => `\n        <category name=\"${name}\">\n            <enabled>${category.enabled}</enabled>\n            <passed>${category.passed}</passed>\n            <score>${category.score}</score>\n            <details>\n                ${category.details.map(detail => `\n                <detail>\n                    <check>${detail.check}</check>\n                    <passed>${detail.passed}</passed>\n                    <value>${detail.value}</value>\n                    <threshold>${detail.threshold}</threshold>\n                    <message>${detail.message}</message>\n                </detail>\n                `).join('')}\n            </details>\n        </category>\n        `).join('')}\n    </categories>\n    <violations>\n        ${result.violations.map(violation => `\n        <violation>\n            <category>${violation.category}</category>\n            <severity>${violation.severity}</severity>\n            <rule>${violation.rule}</rule>\n            <message>${violation.message}</message>\n            <suggestion>${violation.suggestion}</suggestion>\n            <autoFixable>${violation.autoFixable}</autoFixable>\n        </violation>\n        `).join('')}\n    </violations>\n</compliance-report>`;\n  }\n}\n\n/**\n * Create compliance checker instance\n */\nexport function createComplianceChecker(config: ComplianceConfig): ComplianceChecker {\n  return new ComplianceChecker(config);\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compliance/ComplianceFramework.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compliance/ComplianceReporter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compliance/ComplianceUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compliance/CoverageComplianceVerifier.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/compliance/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/dashboard/DynamicChartGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/dashboard/NotificationSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/dashboard/RealTimeDashboard.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 121. Maximum allowed is 120.","line":287,"column":1,"nodeType":"Program","messageId":"max","endLine":287,"endColumn":122}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-Time Test Monitoring Dashboard\n *\n * Provides real-time monitoring of test execution status, coverage changes,\n * instant failure notifications, and team collaboration features.\n */\n\nimport { EventEmitter } from 'events';\n\nexport interface TestExecutionStatus {\n  id: string;\n  name: string;\n  status: 'pending' | 'running' | 'passed' | 'failed' | 'skipped';\n  startTime?: Date;\n  endTime?: Date;\n  duration?: number;\n  error?: {\n    message: string;\n    stack?: string;\n  };\n  suite: string;\n  file: string;\n}\n\nexport interface CoverageSnapshot {\n  timestamp: Date;\n  statements: number;\n  branches: number;\n  functions: number;\n  lines: number;\n  files: {\n    [filePath: string]: {\n      statements: number;\n      branches: number;\n      functions: number;\n      lines: number;\n    };\n  };\n}\n\nexport interface DashboardMetrics {\n  totalTests: number;\n  runningTests: number;\n  passedTests: number;\n  failedTests: number;\n  skippedTests: number;\n  pendingTests: number;\n  executionTime: number;\n  coverage: CoverageSnapshot;\n  recentFailures: TestExecutionStatus[];\n  performanceMetrics: {\n    averageTestTime: number;\n    slowestTests: Array<{\n      name: string;\n      duration: number;\n      file: string;\n    }>;\n    memoryUsage: {\n      current: number;\n      peak: number;\n    };\n  };\n}\n\nexport interface NotificationConfig {\n  enabled: boolean;\n  channels: Array<'console' | 'webhook' | 'email' | 'slack'>;\n  thresholds: {\n    failureRate: number;\n    coverageDropThreshold: number;\n    performanceDegradation: number;\n  };\n  webhookUrl?: string;\n  emailRecipients?: string[];\n  slackChannel?: string;\n}\n\nexport interface TeamCollaborationData {\n  activeUsers: Array<{\n    id: string;\n    name: string;\n    lastActivity: Date;\n    currentTests: string[];\n  }>;\n  sharedState: {\n    currentBranch: string;\n    lastCommit: string;\n    testSuiteVersion: string;\n  };\n  collaborativeMetrics: {\n    totalContributors: number;\n    testsPerContributor: { [userId: string]: number };\n    recentActivity: Array<{\n      userId: string;\n      action: string;\n      timestamp: Date;\n      details: any;\n    }>;\n  };\n}\n\nexport class RealTimeDashboard extends EventEmitter {\n  private metrics: DashboardMetrics;\n  private testStatuses: Map<string, TestExecutionStatus> = new Map();\n  private coverageHistory: CoverageSnapshot[] = [];\n  private notificationConfig: NotificationConfig;\n  private collaborationData: TeamCollaborationData;\n  private updateInterval: NodeJS.Timeout | null = null;\n  private isRunning: boolean = false;\n\n  constructor(\n    notificationConfig: Partial<NotificationConfig> = {},\n    updateIntervalMs: number = 1000,\n  ) {\n    super();\n\n    this.notificationConfig = {\n      enabled: true,\n      channels: ['console'],\n      thresholds: {\n        failureRate: 10, // 10% failure rate threshold\n        coverageDropThreshold: 5, // 5% coverage drop threshold\n        performanceDegradation: 50, // 50% performance degradation threshold\n      },\n      ...notificationConfig,\n    };\n\n    this.metrics = this.initializeMetrics();\n    this.collaborationData = this.initializeCollaborationData();\n\n    // Start real-time updates\n    this.startRealTimeUpdates(updateIntervalMs);\n  }\n\n  /**\n   * Initialize default metrics\n   */\n  private initializeMetrics(): DashboardMetrics {\n    return {\n      totalTests: 0,\n      runningTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      skippedTests: 0,\n      pendingTests: 0,\n      executionTime: 0,\n      coverage: {\n        timestamp: new Date(),\n        statements: 0,\n        branches: 0,\n        functions: 0,\n        lines: 0,\n        files: {},\n      },\n      recentFailures: [],\n      performanceMetrics: {\n        averageTestTime: 0,\n        slowestTests: [],\n        memoryUsage: {\n          current: 0,\n          peak: 0,\n        },\n      },\n    };\n  }\n\n  /**\n   * Initialize collaboration data\n   */\n  private initializeCollaborationData(): TeamCollaborationData {\n    return {\n      activeUsers: [],\n      sharedState: {\n        currentBranch: 'main',\n        lastCommit: '',\n        testSuiteVersion: '1.0.0',\n      },\n      collaborativeMetrics: {\n        totalContributors: 0,\n        testsPerContributor: {},\n        recentActivity: [],\n      },\n    };\n  }\n\n  /**\n   * Start real-time updates\n   */\n  private startRealTimeUpdates(intervalMs: number): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n    }\n\n    this.updateInterval = setInterval(() => {\n      this.updateMetrics();\n      this.emit('metricsUpdated', this.metrics);\n    }, intervalMs);\n\n    this.isRunning = true;\n  }\n\n  /**\n   * Stop real-time updates\n   */\n  public stop(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n    this.isRunning = false;\n  }\n\n  /**\n   * Update test execution status\n   */\n  public updateTestStatus(testStatus: TestExecutionStatus): void {\n    const previousStatus = this.testStatuses.get(testStatus.id);\n    this.testStatuses.set(testStatus.id, testStatus);\n\n    // Handle status transitions\n    if (previousStatus?.status !== testStatus.status) {\n      this.handleStatusTransition(previousStatus, testStatus);\n    }\n\n    // Update metrics immediately for critical changes\n    if (testStatus.status === 'failed') {\n      this.updateMetrics();\n      this.handleTestFailure(testStatus);\n    }\n\n    this.emit('testStatusUpdated', testStatus);\n  }\n\n  /**\n   * Update coverage snapshot\n   */\n  public updateCoverage(coverage: CoverageSnapshot): void {\n    const previousCoverage = this.metrics.coverage;\n    this.metrics.coverage = coverage;\n    this.coverageHistory.push(coverage);\n\n    // Keep only last 100 snapshots\n    if (this.coverageHistory.length > 100) {\n      this.coverageHistory = this.coverageHistory.slice(-100);\n    }\n\n    // Check for coverage drops\n    this.checkCoverageDrop(previousCoverage, coverage);\n\n    this.emit('coverageUpdated', coverage);\n  }\n\n  /**\n   * Get current dashboard metrics\n   */\n  public getMetrics(): DashboardMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get coverage history\n   */\n  public getCoverageHistory(): CoverageSnapshot[] {\n    return [...this.coverageHistory];\n  }\n\n  /**\n   * Get test execution timeline\n   */\n  public getTestTimeline(): TestExecutionStatus[] {\n    return Array.from(this.testStatuses.values())\n      .sort((a, b) => {\n        const aTime = a.startTime || new Date(0);\n        const bTime = b.startTime || new Date(0);\n        return bTime.getTime() - aTime.getTime();\n      });\n  }\n\n  /**\n   * Add team member\n   */\n  public addTeamMember(user: {\n    id: string;\n    name: string;\n    currentTests?: string[];\n  }): void {\n    const existingUserIndex = this.collaborationData.activeUsers.findIndex(u => u.id === (user.id || (user as any)._id));\n\n    const userData = {\n      ...user,\n      lastActivity: new Date(),\n      currentTests: user.currentTests || [],\n    };\n\n    if (existingUserIndex >= 0) {\n      this.collaborationData.activeUsers[existingUserIndex] = userData;\n    } else {\n      this.collaborationData.activeUsers.push(userData);\n    }\n\n    this.emit('teamMemberUpdated', userData);\n  }\n\n  /**\n   * Remove team member\n   */\n  public removeTeamMember(userId: string): void {\n    this.collaborationData.activeUsers = this.collaborationData.activeUsers\n      .filter(user => (user.id || (user as any)._id) !== userId);\n\n    this.emit('teamMemberRemoved', userId);\n  }\n\n  /**\n   * Update shared state\n   */\n  public updateSharedState(state: Partial<TeamCollaborationData['sharedState']>): void {\n    this.collaborationData.sharedState = {\n      ...this.collaborationData.sharedState,\n      ...state,\n    };\n\n    this.emit('sharedStateUpdated', this.collaborationData.sharedState);\n  }\n\n  /**\n   * Get collaboration data\n   */\n  public getCollaborationData(): TeamCollaborationData {\n    return { ...this.collaborationData };\n  }\n\n  /**\n   * Configure notifications\n   */\n  public configureNotifications(config: Partial<NotificationConfig>): void {\n    this.notificationConfig = {\n      ...this.notificationConfig,\n      ...config,\n    };\n  }\n\n  /**\n   * Send notification\n   */\n  private async sendNotification(\n    type: 'failure' | 'coverage_drop' | 'performance_issue',\n    message: string,\n    data?: any,\n  ): Promise<void> {\n    if (!this.notificationConfig.enabled) {\n      return;\n    }\n\n    const notification = {\n      type,\n      message,\n      timestamp: new Date(),\n      data,\n    };\n\n    for (const channel of this.notificationConfig.channels) {\n      try {\n        await this.sendToChannel(channel, notification);\n      } catch (error) {\n        console.error(`Failed to send notification to ${channel}:`, error);\n      }\n    }\n\n    this.emit('notificationSent', notification);\n  }\n\n  /**\n   * Send notification to specific channel\n   */\n  private async sendToChannel(\n    channel: string,\n    notification: any,\n  ): Promise<void> {\n    switch (channel) {\n      case 'console':\n        console.log(`[${notification.type.toUpperCase()}] ${notification.message}`);\n        break;\n\n      case 'webhook':\n        if (this.notificationConfig.webhookUrl) {\n          // In a real implementation, you would use fetch or axios\n          console.log(`Webhook notification: ${JSON.stringify(notification)}`);\n        }\n        break;\n\n      case 'email':\n        if (this.notificationConfig.emailRecipients?.length) {\n          console.log(`Email notification to ${this.notificationConfig.emailRecipients.join(', ')}: ${notification.message}`);\n        }\n        break;\n\n      case 'slack':\n        if (this.notificationConfig.slackChannel) {\n          console.log(`Slack notification to ${this.notificationConfig.slackChannel}: ${notification.message}`);\n        }\n        break;\n    }\n  }\n\n  /**\n   * Handle status transitions\n   */\n  private handleStatusTransition(\n    previous: TestExecutionStatus | undefined,\n    current: TestExecutionStatus,\n  ): void {\n    // Log status changes\n    this.collaborationData.collaborativeMetrics.recentActivity.push({\n      userId: 'system',\n      action: 'test_status_change',\n      timestamp: new Date(),\n      details: {\n        testId: current.id,\n        from: previous?.status,\n        to: current.status,\n      },\n    });\n\n    // Keep only last 50 activities\n    if (this.collaborationData.collaborativeMetrics.recentActivity.length > 50) {\n      this.collaborationData.collaborativeMetrics.recentActivity =\n        this.collaborationData.collaborativeMetrics.recentActivity.slice(-50);\n    }\n  }\n\n  /**\n   * Handle test failure\n   */\n  private async handleTestFailure(testStatus: TestExecutionStatus): Promise<void> {\n    // Add to recent failures\n    this.metrics.recentFailures.unshift(testStatus);\n    if (this.metrics.recentFailures.length > 10) {\n      this.metrics.recentFailures = this.metrics.recentFailures.slice(0, 10);\n    }\n\n    // Check failure rate threshold\n    const failureRate = (this.metrics.failedTests / this.metrics.totalTests) * 100;\n    if (failureRate >= this.notificationConfig.thresholds.failureRate) {\n      await this.sendNotification(\n        'failure',\n        `High failure rate detected: ${failureRate.toFixed(1)}% (${this.metrics.failedTests}/${this.metrics.totalTests})`,\n        { failureRate, testStatus },\n      );\n    }\n  }\n\n  /**\n   * Check for coverage drops\n   */\n  private async checkCoverageDrop(\n    previous: CoverageSnapshot,\n    current: CoverageSnapshot,\n  ): Promise<void> {\n    const statementsDrop = previous.statements - current.statements;\n    const branchesDrop = previous.branches - current.branches;\n    const functionsDrop = previous.functions - current.functions;\n    const linesDrop = previous.lines - current.lines;\n\n    const maxDrop = Math.max(statementsDrop, branchesDrop, functionsDrop, linesDrop);\n\n    if (maxDrop >= this.notificationConfig.thresholds.coverageDropThreshold) {\n      await this.sendNotification(\n        'coverage_drop',\n        `Coverage drop detected: ${maxDrop.toFixed(1)}% decrease`,\n        { previous, current, drop: maxDrop },\n      );\n    }\n  }\n\n  /**\n   * Update metrics from current test statuses\n   */\n  private updateMetrics(): void {\n    const statuses = Array.from(this.testStatuses.values());\n\n    this.metrics.totalTests = statuses.length;\n    this.metrics.runningTests = statuses.filter(t => t.status === 'running').length;\n    this.metrics.passedTests = statuses.filter(t => t.status === 'passed').length;\n    this.metrics.failedTests = statuses.filter(t => t.status === 'failed').length;\n    this.metrics.skippedTests = statuses.filter(t => t.status === 'skipped').length;\n    this.metrics.pendingTests = statuses.filter(t => t.status === 'pending').length;\n\n    // Calculate execution time\n    const completedTests = statuses.filter(t => t.endTime && t.startTime);\n    this.metrics.executionTime = completedTests.reduce((sum, test) => {\n      return sum + (test.duration || 0);\n    }, 0);\n\n    // Update performance metrics\n    this.updatePerformanceMetrics(completedTests);\n\n    // Update memory usage\n    if (typeof process !== 'undefined' && process.memoryUsage) {\n      const memUsage = process.memoryUsage();\n      this.metrics.performanceMetrics.memoryUsage.current = memUsage.heapUsed / 1024 / 1024; // MB\n      this.metrics.performanceMetrics.memoryUsage.peak = Math.max(\n        this.metrics.performanceMetrics.memoryUsage.peak,\n        this.metrics.performanceMetrics.memoryUsage.current,\n      );\n    }\n  }\n\n  /**\n   * Update performance metrics\n   */\n  private updatePerformanceMetrics(completedTests: TestExecutionStatus[]): void {\n    if (completedTests.length === 0) return;\n\n    // Calculate average test time\n    const totalDuration = completedTests.reduce((sum, test) => sum + (test.duration || 0), 0);\n    this.metrics.performanceMetrics.averageTestTime = totalDuration / completedTests.length;\n\n    // Find slowest tests\n    this.metrics.performanceMetrics.slowestTests = completedTests\n      .filter(test => test.duration && test.duration > 0)\n      .sort((a, b) => (b.duration || 0) - (a.duration || 0))\n      .slice(0, 5)\n      .map(test => ({\n        name: test.name,\n        duration: test.duration || 0,\n        file: test.file,\n      }));\n  }\n\n  /**\n   * Export dashboard data\n   */\n  public exportData(): {\n    metrics: DashboardMetrics;\n    testStatuses: TestExecutionStatus[];\n    coverageHistory: CoverageSnapshot[];\n    collaborationData: TeamCollaborationData;\n  } {\n    return {\n      metrics: this.getMetrics(),\n      testStatuses: this.getTestTimeline(),\n      coverageHistory: this.getCoverageHistory(),\n      collaborationData: this.getCollaborationData(),\n    };\n  }\n\n  /**\n   * Import dashboard data\n   */\n  public importData(data: {\n    testStatuses?: TestExecutionStatus[];\n    coverageHistory?: CoverageSnapshot[];\n    collaborationData?: Partial<TeamCollaborationData>;\n  }): void {\n    if (data.testStatuses) {\n      this.testStatuses.clear();\n      data.testStatuses.forEach(status => {\n        this.testStatuses.set(status.id, status);\n      });\n    }\n\n    if (data.coverageHistory) {\n      this.coverageHistory = [...data.coverageHistory];\n    }\n\n    if (data.collaborationData) {\n      this.collaborationData = {\n        ...this.collaborationData,\n        ...data.collaborationData,\n      };\n    }\n\n    this.updateMetrics();\n    this.emit('dataImported', data);\n  }\n\n  /**\n   * Reset dashboard\n   */\n  public reset(): void {\n    this.testStatuses.clear();\n    this.coverageHistory = [];\n    this.metrics = this.initializeMetrics();\n    this.collaborationData = this.initializeCollaborationData();\n\n    this.emit('dashboardReset');\n  }\n\n  /**\n   * Get dashboard status\n   */\n  public getStatus(): {\n    isRunning: boolean;\n    totalTests: number;\n    activeUsers: number;\n    lastUpdate: Date;\n  } {\n    return {\n      isRunning: this.isRunning,\n      totalTests: this.metrics.totalTests,\n      activeUsers: this.collaborationData.activeUsers.length,\n      lastUpdate: new Date(),\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/dashboard/TeamCollaborationHub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/dashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/errors/TestError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/helpers/AssertionHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/incremental/AccuracyVerifier.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 126. Maximum allowed is 120.","line":356,"column":1,"nodeType":"Program","messageId":"max","endLine":356,"endColumn":127}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { IncrementalTestRunner, IncrementalTestResult } from './IncrementalTestRunner';\nimport { TestResult } from './TestCacheManager';\n\nexport interface VerificationResult {\n  isAccurate: boolean;\n  missedTests: string[];\n  extraTests: string[];\n  falsePositives: string[];\n  falseNegatives: string[];\n  accuracy: number;\n  precision: number;\n  recall: number;\n  details: VerificationDetails;\n}\n\nexport interface VerificationDetails {\n  incrementalTests: string[];\n  fullTests: string[];\n  incrementalResults: Map<string, TestResult>;\n  fullResults: Map<string, TestResult>;\n  comparisonReport: ComparisonReport[];\n}\n\nexport interface ComparisonReport {\n  testFile: string;\n  incrementalStatus: 'passed' | 'failed' | 'skipped' | 'not_run';\n  fullStatus: 'passed' | 'failed' | 'skipped';\n  match: boolean;\n  reason?: string;\n}\n\nexport interface AccuracyMetrics {\n  totalVerifications: number;\n  accurateVerifications: number;\n  averageAccuracy: number;\n  averagePrecision: number;\n  averageRecall: number;\n  commonMissedPatterns: string[];\n  improvementSuggestions: string[];\n}\n\n/**\n * 增量测试准确性验证器\n * 验证增量测试的准确性，确保不遗漏重要测试\n */\nexport class AccuracyVerifier {\n  private projectRoot: string;\n  private verificationHistory: VerificationResult[] = [];\n  private metricsFile: string;\n\n  constructor(projectRoot: string = process.cwd()) {\n    this.projectRoot = projectRoot;\n    this.metricsFile = path.join(projectRoot, '.test-cache', 'accuracy-metrics.json');\n    this.loadMetricsHistory();\n  }\n\n  /**\n   * 验证增量测试的准确性\n   */\n  async verifyAccuracy(\n    incrementalRunner: IncrementalTestRunner,\n    sampleSize: number = 0.1, // 10%的采样率\n  ): Promise<VerificationResult> {\n    try {\n      // 1. 运行增量测试\n      const incrementalResult = await incrementalRunner.run();\n\n      // 2. 运行完整测试套件（采样）\n      const fullResult = await this.runFullTestSuite(sampleSize);\n\n      // 3. 比较结果\n      const verification = this.compareResults(incrementalResult, fullResult);\n\n      // 4. 记录验证结果\n      this.verificationHistory.push(verification);\n      this.saveMetricsHistory();\n\n      return verification;\n\n    } catch (error) {\n      throw new Error(`Accuracy verification failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * 运行完整测试套件\n   */\n  private async runFullTestSuite(sampleSize: number): Promise<Map<string, TestResult>> {\n    const allTests = await this.findAllTests();\n    const sampleTests = this.sampleTests(allTests, sampleSize);\n\n    const results = new Map<string, TestResult>();\n\n    for (const testFile of sampleTests) {\n      try {\n        const result = await this.runSingleTest(testFile);\n        results.set(testFile, result);\n      } catch (error) {\n        // 记录失败的测试\n        results.set(testFile, {\n          testFile,\n          status: 'failed',\n          duration: 0,\n          timestamp: new Date(),\n          errors: [{ message: error.message }],\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * 采样测试文件\n   */\n  private sampleTests(allTests: string[], sampleSize: number): string[] {\n    if (sampleSize >= 1) {\n      return allTests;\n    }\n\n    const sampleCount = Math.max(1, Math.floor(allTests.length * sampleSize));\n    const sampled: string[] = [];\n\n    // 使用分层采样确保覆盖不同类型的测试\n    const testsByType = this.groupTestsByType(allTests);\n\n    for (const [type, tests] of testsByType.entries()) {\n      const typeCount = Math.max(1, Math.floor(tests.length * sampleSize));\n      const typeSample = this.randomSample(tests, typeCount);\n      sampled.push(...typeSample);\n    }\n\n    return sampled;\n  }\n\n  /**\n   * 按类型分组测试\n   */\n  private groupTestsByType(tests: string[]): Map<string, string[]> {\n    const groups = new Map<string, string[]>();\n\n    for (const test of tests) {\n      let type = 'other';\n\n      if (test.includes('/unit/')) {\n        type = 'unit';\n      } else if (test.includes('/integration/')) {\n        type = 'integration';\n      } else if (test.includes('/e2e/')) {\n        type = 'e2e';\n      } else if (test.includes('/api/')) {\n        type = 'api';\n      } else if (test.includes('/components/')) {\n        type = 'component';\n      }\n\n      if (!groups.has(type)) {\n        groups.set(type, []);\n      }\n      groups.get(type)!.push(test);\n    }\n\n    return groups;\n  }\n\n  /**\n   * 随机采样\n   */\n  private randomSample<T>(array: T[], count: number): T[] {\n    const shuffled = [...array].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n\n  /**\n   * 比较增量测试和完整测试的结果\n   */\n  private compareResults(\n    incrementalResult: IncrementalTestResult,\n    fullResults: Map<string, TestResult>,\n  ): VerificationResult {\n    const incrementalTests = new Set([\n      ...incrementalResult.executionPlan.testsToRun,\n      ...incrementalResult.executionPlan.testsFromCache,\n    ]);\n\n    const fullTests = new Set(fullResults.keys());\n    const incrementalResultsMap = new Map<string, TestResult>();\n\n    // 构建增量测试结果映射\n    for (const result of incrementalResult.results) {\n      incrementalResultsMap.set(result.testFile, result);\n    }\n\n    // 分析差异\n    const missedTests = Array.from(fullTests).filter(test => !incrementalTests.has(test));\n    const extraTests = Array.from(incrementalTests).filter(test => !fullTests.has(test));\n\n    // 分析结果一致性\n    const comparisonReport: ComparisonReport[] = [];\n    const falsePositives: string[] = [];\n    const falseNegatives: string[] = [];\n\n    for (const testFile of fullTests) {\n      const incrementalResult = incrementalResultsMap.get(testFile);\n      const fullResult = fullResults.get(testFile)!;\n\n      const incrementalStatus = incrementalResult?.status || 'not_run';\n      const fullStatus = fullResult.status;\n      const match = incrementalStatus === fullStatus;\n\n      comparisonReport.push({\n        testFile,\n        incrementalStatus,\n        fullStatus,\n        match,\n        reason: match ? undefined : `Expected ${fullStatus}, got ${incrementalStatus}`,\n      });\n\n      // 识别假阳性和假阴性\n      if (!match) {\n        if (incrementalStatus === 'passed' && fullStatus === 'failed') {\n          falsePositives.push(testFile);\n        } else if (incrementalStatus === 'failed' && fullStatus === 'passed') {\n          falseNegatives.push(testFile);\n        }\n      }\n    }\n\n    // 计算准确性指标\n    const totalTests = fullTests.size;\n    const correctPredictions = comparisonReport.filter(r => r.match).length;\n    const accuracy = totalTests > 0 ? correctPredictions / totalTests : 1;\n\n    // 计算精确率和召回率\n    const truePositives = comparisonReport.filter(r =>\n      r.incrementalStatus === 'failed' && r.fullStatus === 'failed',\n    ).length;\n    const predictedPositives = comparisonReport.filter(r =>\n      r.incrementalStatus === 'failed',\n    ).length;\n    const actualPositives = comparisonReport.filter(r =>\n      r.fullStatus === 'failed',\n    ).length;\n\n    const precision = predictedPositives > 0 ? truePositives / predictedPositives : 1;\n    const recall = actualPositives > 0 ? truePositives / actualPositives : 1;\n\n    return {\n      isAccurate: accuracy >= 0.95 && missedTests.length === 0,\n      missedTests,\n      extraTests,\n      falsePositives,\n      falseNegatives,\n      accuracy,\n      precision,\n      recall,\n      details: {\n        incrementalTests: Array.from(incrementalTests),\n        fullTests: Array.from(fullTests),\n        incrementalResults: incrementalResultsMap,\n        fullResults,\n        comparisonReport,\n      },\n    };\n  }\n\n  /**\n   * 查找所有测试文件\n   */\n  private async findAllTests(): Promise<string[]> {\n    const glob = require('glob');\n\n    return glob.sync('**/*.{test,spec}.{ts,tsx,js,jsx}', {\n      cwd: this.projectRoot,\n      absolute: true,\n      ignore: [\n        '**/node_modules/**',\n        '**/dist/**',\n        '**/build/**',\n        '**/.next/**',\n      ],\n    });\n  }\n\n  /**\n   * 运行单个测试\n   */\n  private async runSingleTest(testFile: string): Promise<TestResult> {\n    const startTime = Date.now();\n    const relativePath = path.relative(this.projectRoot, testFile);\n\n    try {\n      const command = `npx jest \"${relativePath}\" --json --silent`;\n      const output = execSync(command, {\n        cwd: this.projectRoot,\n        encoding: 'utf8',\n        timeout: 30000,\n      });\n\n      const duration = Date.now() - startTime;\n      const result = JSON.parse(output);\n\n      return {\n        testFile: relativePath,\n        status: result.success ? 'passed' : 'failed',\n        duration,\n        timestamp: new Date(),\n        errors: result.success ? undefined : [{ message: 'Test failed' }],\n      };\n\n    } catch (error) {\n      const duration = Date.now() - startTime;\n\n      return {\n        testFile: relativePath,\n        status: 'failed',\n        duration,\n        timestamp: new Date(),\n        errors: [{ message: error.message }],\n      };\n    }\n  }\n\n  /**\n   * 分析准确性趋势\n   */\n  analyzeAccuracyTrends(): AccuracyMetrics {\n    if (this.verificationHistory.length === 0) {\n      return {\n        totalVerifications: 0,\n        accurateVerifications: 0,\n        averageAccuracy: 0,\n        averagePrecision: 0,\n        averageRecall: 0,\n        commonMissedPatterns: [],\n        improvementSuggestions: [],\n      };\n    }\n\n    const totalVerifications = this.verificationHistory.length;\n    const accurateVerifications = this.verificationHistory.filter(v => v.isAccurate).length;\n\n    const averageAccuracy = this.verificationHistory.reduce((sum, v) => sum + v.accuracy, 0) / totalVerifications;\n    const averagePrecision = this.verificationHistory.reduce((sum, v) => sum + v.precision, 0) / totalVerifications;\n    const averageRecall = this.verificationHistory.reduce((sum, v) => sum + v.recall, 0) / totalVerifications;\n\n    // 分析常见的遗漏模式\n    const allMissedTests = this.verificationHistory.flatMap(v => v.missedTests);\n    const missedPatterns = this.identifyMissedPatterns(allMissedTests);\n\n    // 生成改进建议\n    const suggestions = this.generateImprovementSuggestions(averageAccuracy, averagePrecision, averageRecall, missedPatterns);\n\n    return {\n      totalVerifications,\n      accurateVerifications,\n      averageAccuracy,\n      averagePrecision,\n      averageRecall,\n      commonMissedPatterns: missedPatterns,\n      improvementSuggestions: suggestions,\n    };\n  }\n\n  /**\n   * 识别遗漏的测试模式\n   */\n  private identifyMissedPatterns(missedTests: string[]): string[] {\n    const patterns = new Map<string, number>();\n\n    for (const test of missedTests) {\n      // 分析文件路径模式\n      const pathParts = test.split('/');\n      for (let i = 0; i < pathParts.length - 1; i++) {\n        const pattern = pathParts.slice(0, i + 1).join('/');\n        patterns.set(pattern, (patterns.get(pattern) || 0) + 1);\n      }\n\n      // 分析文件名模式\n      const fileName = path.basename(test);\n      const namePattern = fileName.replace(/\\.(test|spec)\\.(ts|tsx|js|jsx)$/, '.*');\n      patterns.set(namePattern, (patterns.get(namePattern) || 0) + 1);\n    }\n\n    // 返回出现频率最高的模式\n    return Array.from(patterns.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5)\n      .map(([pattern]) => pattern);\n  }\n\n  /**\n   * 生成改进建议\n   */\n  private generateImprovementSuggestions(\n    accuracy: number,\n    precision: number,\n    recall: number,\n    missedPatterns: string[],\n  ): string[] {\n    const suggestions: string[] = [];\n\n    if (accuracy < 0.9) {\n      suggestions.push('Overall accuracy is low. Consider improving dependency analysis.');\n    }\n\n    if (precision < 0.8) {\n      suggestions.push('High false positive rate. Review test selection criteria.');\n    }\n\n    if (recall < 0.8) {\n      suggestions.push('High false negative rate. Improve change impact analysis.');\n    }\n\n    if (missedPatterns.length > 0) {\n      suggestions.push(`Common missed patterns: ${missedPatterns.join(', ')}. Consider adding specific rules for these patterns.`);\n    }\n\n    if (suggestions.length === 0) {\n      suggestions.push('Incremental testing accuracy is good. Continue monitoring.');\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * 生成验证报告\n   */\n  generateVerificationReport(result: VerificationResult): string {\n    const report = [\n      '# Incremental Test Accuracy Verification Report',\n      '',\n      `**Accuracy**: ${(result.accuracy * 100).toFixed(2)}%`,\n      `**Precision**: ${(result.precision * 100).toFixed(2)}%`,\n      `**Recall**: ${(result.recall * 100).toFixed(2)}%`,\n      `**Is Accurate**: ${result.isAccurate ? '✅ Yes' : '❌ No'}`,\n      '',\n      '## Summary',\n      `- Missed Tests: ${result.missedTests.length}`,\n      `- Extra Tests: ${result.extraTests.length}`,\n      `- False Positives: ${result.falsePositives.length}`,\n      `- False Negatives: ${result.falseNegatives.length}`,\n      '',\n    ];\n\n    if (result.missedTests.length > 0) {\n      report.push('## Missed Tests');\n      result.missedTests.forEach(test => {\n        report.push(`- ${test}`);\n      });\n      report.push('');\n    }\n\n    if (result.falsePositives.length > 0) {\n      report.push('## False Positives');\n      result.falsePositives.forEach(test => {\n        report.push(`- ${test}`);\n      });\n      report.push('');\n    }\n\n    if (result.falseNegatives.length > 0) {\n      report.push('## False Negatives');\n      result.falseNegatives.forEach(test => {\n        report.push(`- ${test}`);\n      });\n      report.push('');\n    }\n\n    // 添加详细比较\n    report.push('## Detailed Comparison');\n    report.push('| Test File | Incremental | Full | Match |');\n    report.push('|-----------|-------------|------|-------|');\n\n    result.details.comparisonReport.forEach(item => {\n      const match = item.match ? '✅' : '❌';\n      report.push(`| ${item.testFile} | ${item.incrementalStatus} | ${item.fullStatus} | ${match} |`);\n    });\n\n    return report.join('\\n');\n  }\n\n  /**\n   * 保存验证报告\n   */\n  async saveVerificationReport(result: VerificationResult, outputPath?: string): Promise<void> {\n    const report = this.generateVerificationReport(result);\n    const filePath = outputPath || path.join(this.projectRoot, '.test-cache', 'verification-report.md');\n\n    // 确保目录存在\n    const dir = path.dirname(filePath);\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(filePath, report, 'utf8');\n  }\n\n  /**\n   * 加载历史指标\n   */\n  private loadMetricsHistory(): void {\n    try {\n      if (fs.existsSync(this.metricsFile)) {\n        const data = JSON.parse(fs.readFileSync(this.metricsFile, 'utf8'));\n        this.verificationHistory = data.history || [];\n      }\n    } catch (error) {\n      console.warn(`Failed to load metrics history: ${error.message}`);\n      this.verificationHistory = [];\n    }\n  }\n\n  /**\n   * 保存历史指标\n   */\n  private saveMetricsHistory(): void {\n    try {\n      const dir = path.dirname(this.metricsFile);\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n      }\n\n      const data = {\n        lastUpdated: new Date().toISOString(),\n        history: this.verificationHistory.slice(-50), // 保留最近50次验证\n      };\n\n      fs.writeFileSync(this.metricsFile, JSON.stringify(data, null, 2), 'utf8');\n    } catch (error) {\n      console.warn(`Failed to save metrics history: ${error.message}`);\n    }\n  }\n\n  /**\n   * 清理历史数据\n   */\n  clearHistory(): void {\n    this.verificationHistory = [];\n    if (fs.existsSync(this.metricsFile)) {\n      fs.unlinkSync(this.metricsFile);\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/incremental/DependencyAnalyzer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/incremental/GitChangeDetector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/incremental/IncrementalTestRunner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/incremental/TestCacheManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/incremental/index.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":20,"column":1,"nodeType":"ImportDeclaration","endLine":20,"endColumn":65},{"ruleId":"import/no-duplicates","severity":1,"message":"'/Users/apple/inspi/inspi-ai-platform/src/lib/testing/incremental/IncrementalTestRunner.ts' imported multiple times.","line":120,"column":45,"nodeType":"Literal","endLine":120,"endColumn":70},{"ruleId":"import/no-duplicates","severity":1,"message":"'/Users/apple/inspi/inspi-ai-platform/src/lib/testing/incremental/IncrementalTestRunner.ts' imported multiple times.","line":121,"column":44,"nodeType":"Literal","endLine":121,"endColumn":69}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 增量测试系统\n *\n * 这个模块提供了完整的增量测试解决方案，包括：\n * - Git变更检测和依赖分析\n * - 受影响测试的智能识别\n * - 测试缓存和结果复用机制\n * - 增量测试的准确性验证\n */\n\nexport { GitChangeDetector } from './GitChangeDetector';\nexport { DependencyAnalyzer } from './DependencyAnalyzer';\nexport { TestCacheManager } from './TestCacheManager';\nexport { IncrementalTestRunner } from './IncrementalTestRunner';\nexport { AccuracyVerifier } from './AccuracyVerifier';\n\n// Import the classes for internal use\nimport { AccuracyVerifier } from './AccuracyVerifier';\nimport type { VerificationResult, AccuracyMetrics } from './AccuracyVerifier';\nimport { IncrementalTestRunner } from './IncrementalTestRunner';\n\nexport type {\n  GitChange,\n  GitCommitInfo,\n  ChangeAnalysis,\n} from './GitChangeDetector';\n\nexport type {\n  FileDependency,\n  DependencyGraph,\n  ImpactAnalysis,\n} from './DependencyAnalyzer';\n\nexport type {\n  TestResult,\n  Coverage,\n  TestError,\n  CacheEntry,\n  CacheStats,\n  CacheOptions,\n} from './TestCacheManager';\n\nexport type {\n  IncrementalTestOptions,\n  TestExecutionPlan,\n  IncrementalTestResult,\n} from './IncrementalTestRunner';\n\nexport type {\n  VerificationResult,\n  VerificationDetails,\n  ComparisonReport,\n  AccuracyMetrics,\n} from './AccuracyVerifier';\n\n/**\n * 增量测试系统的主要入口点\n * 提供简化的API来使用增量测试功能\n */\nexport class IncrementalTestSystem {\n  private runner: IncrementalTestRunner;\n  private verifier: AccuracyVerifier;\n\n  constructor(options: Partial<IncrementalTestOptions> = {}) {\n    this.runner = new IncrementalTestRunner(options);\n    this.verifier = new AccuracyVerifier(options.projectRoot);\n  }\n\n  /**\n   * 运行增量测试\n   */\n  async runIncrementalTests(): Promise<IncrementalTestResult> {\n    return await this.runner.run();\n  }\n\n  /**\n   * 验证增量测试准确性\n   */\n  async verifyAccuracy(sampleSize: number = 0.1): Promise<VerificationResult> {\n    return await this.verifier.verifyAccuracy(this.runner, sampleSize);\n  }\n\n  /**\n   * 获取缓存统计\n   */\n  getCacheStats(): CacheStats {\n    return this.runner.getCacheStats();\n  }\n\n  /**\n   * 清理缓存\n   */\n  clearCache(): void {\n    this.runner.clearCache();\n  }\n\n  /**\n   * 重建依赖图\n   */\n  async rebuildDependencyGraph(): Promise<void> {\n    await this.runner.rebuildDependencyGraph();\n  }\n\n  /**\n   * 获取准确性趋势分析\n   */\n  getAccuracyTrends(): AccuracyMetrics {\n    return this.verifier.analyzeAccuracyTrends();\n  }\n\n  /**\n   * 销毁系统\n   */\n  destroy(): void {\n    this.runner.destroy();\n  }\n}\n\n// 重新导入类型\nimport type { IncrementalTestOptions } from './IncrementalTestRunner';\nimport type { IncrementalTestResult } from './IncrementalTestRunner';\nimport type { CacheStats } from './TestCacheManager';\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/integration-test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/matchers/CustomMatchers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/middleware/MiddlewareChainTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/middleware/MiddlewareTestFramework.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 125. Maximum allowed is 120.","line":815,"column":1,"nodeType":"Program","messageId":"max","endLine":815,"endColumn":126}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Middleware Test Framework\n *\n * Comprehensive testing framework for middleware components including\n * functional testing, boundary testing, integration testing, and performance benchmarking.\n */\nimport { EventEmitter } from 'events';\n\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport interface MiddlewareTestConfig {\n  timeout: number;\n  retries: number;\n  performance: {\n    enabled: boolean;\n    warmupRuns: number;\n    benchmarkRuns: number;\n    thresholds: PerformanceThresholds;\n  };\n  logging: {\n    enabled: boolean;\n    level: 'debug' | 'info' | 'warn' | 'error';\n    includeStack: boolean;\n  };\n  mocking: {\n    enabled: boolean;\n    mockExternalServices: boolean;\n    mockDatabase: boolean;\n  };\n}\n\nexport interface PerformanceThresholds {\n  maxExecutionTime: number; // milliseconds\n  maxMemoryUsage: number; // MB\n  maxCpuUsage: number; // percentage\n  minThroughput: number; // requests per second\n}\n\nexport interface MiddlewareFunction {\n  (request: NextRequest): Promise<NextResponse> | NextResponse;\n}\n\nexport interface MiddlewareChain {\n  name: string;\n  description: string;\n  middlewares: MiddlewareDefinition[];\n  order: 'sequential' | 'parallel';\n}\n\nexport interface MiddlewareDefinition {\n  name: string;\n  handler: MiddlewareFunction;\n  config?: any;\n  dependencies?: string[];\n  priority?: number;\n}\n\nexport interface TestScenario {\n  name: string;\n  description: string;\n  type: 'functional' | 'boundary' | 'integration' | 'performance';\n  middleware: string | MiddlewareChain;\n  input: TestInput;\n  expected: TestExpectation;\n  setup?: () => Promise<void>;\n  teardown?: () => Promise<void>;\n}\n\nexport interface TestInput {\n  request: {\n    url: string;\n    method: string;\n    headers?: Record<string, string>;\n    body?: any;\n    cookies?: Record<string, string>;\n    searchParams?: Record<string, string>;\n  };\n  context?: {\n    user?: any;\n    session?: any;\n    environment?: string;\n    feature_flags?: Record<string, boolean>;\n  };\n  mocks?: MockConfiguration[];\n}\n\nexport interface MockConfiguration {\n  service: string;\n  method: string;\n  response: any;\n  delay?: number;\n  error?: Error;\n}\n\nexport interface TestExpectation {\n  response?: {\n    status?: number;\n    headers?: Record<string, string>;\n    body?: any;\n    cookies?: Record<string, string>;\n  };\n  sideEffects?: {\n    database?: DatabaseExpectation[];\n    external_calls?: ExternalCallExpectation[];\n    logs?: LogExpectation[];\n    metrics?: MetricExpectation[];\n  };\n  performance?: {\n    maxExecutionTime?: number;\n    maxMemoryUsage?: number;\n    minThroughput?: number;\n  };\n  errors?: {\n    shouldThrow?: boolean;\n    errorType?: string;\n    errorMessage?: string;\n  };\n}\n\nexport interface DatabaseExpectation {\n  table: string;\n  operation: 'insert' | 'update' | 'delete' | 'select';\n  data?: any;\n  count?: number;\n}\n\nexport interface ExternalCallExpectation {\n  service: string;\n  endpoint: string;\n  method: string;\n  called: boolean;\n  callCount?: number;\n  payload?: any;\n}\n\nexport interface LogExpectation {\n  level: string;\n  message: string;\n  count?: number;\n}\n\nexport interface MetricExpectation {\n  name: string;\n  value: number;\n  operator: '>' | '<' | '=' | '>=' | '<=';\n}\n\nexport interface TestResult {\n  scenario: string;\n  type: string;\n  status: 'passed' | 'failed' | 'skipped';\n  duration: number;\n  assertions: AssertionResult[];\n  performance?: PerformanceResult;\n  error?: TestError;\n  metadata: TestMetadata;\n}\n\nexport interface AssertionResult {\n  name: string;\n  passed: boolean;\n  expected: any;\n  actual: any;\n  message: string;\n}\n\nexport interface PerformanceResult {\n  executionTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  throughput: number;\n  breakdown: PerformanceBreakdown[];\n}\n\nexport interface PerformanceBreakdown {\n  middleware: string;\n  executionTime: number;\n  memoryDelta: number;\n  cpuTime: number;\n}\n\nexport interface TestError {\n  message: string;\n  stack?: string;\n  type: string;\n  context: any;\n}\n\nexport interface TestMetadata {\n  timestamp: Date;\n  environment: string;\n  nodeVersion: string;\n  testFrameworkVersion: string;\n  middleware: string;\n  requestId: string;\n}\n\nexport interface BoundaryTestCase {\n  name: string;\n  description: string;\n  input: any;\n  expectedBehavior: 'success' | 'error' | 'fallback';\n  category: 'null' | 'undefined' | 'empty' | 'invalid' | 'extreme' | 'malformed';\n}\n\nexport interface IntegrationTestSuite {\n  name: string;\n  description: string;\n  chain: MiddlewareChain;\n  scenarios: IntegrationScenario[];\n}\n\nexport interface IntegrationScenario {\n  name: string;\n  description: string;\n  flow: IntegrationStep[];\n  assertions: IntegrationAssertion[];\n}\n\nexport interface IntegrationStep {\n  middleware: string;\n  input: any;\n  expectedOutput: any;\n  sideEffects?: any[];\n}\n\nexport interface IntegrationAssertion {\n  type: 'response' | 'state' | 'side_effect' | 'performance';\n  target: string;\n  condition: any;\n  message: string;\n}\n\nexport class MiddlewareTestFramework extends EventEmitter {\n  private config: MiddlewareTestConfig;\n  private middlewares: Map<string, MiddlewareDefinition> = new Map();\n  private chains: Map<string, MiddlewareChain> = new Map();\n  private testResults: TestResult[] = [];\n  private performanceBaselines: Map<string, PerformanceResult> = new Map();\n\n  constructor(config: MiddlewareTestConfig) {\n    super();\n    this.config = config;\n  }\n\n  /**\n   * Register middleware for testing\n   */\n  registerMiddleware(definition: MiddlewareDefinition): void {\n    this.middlewares.set(definition.name, definition);\n    this.emit('middlewareRegistered', { name: definition.name });\n  }\n\n  /**\n   * Register middleware chain for testing\n   */\n  registerChain(chain: MiddlewareChain): void {\n    this.chains.set(chain.name, chain);\n    this.emit('chainRegistered', { name: chain.name });\n  }\n\n  /**\n   * Run functional tests for middleware\n   */\n  async runFunctionalTests(scenarios: TestScenario[]): Promise<TestResult[]> {\n    const results: TestResult[] = [];\n\n    for (const scenario of scenarios.filter(s => s.type === 'functional')) {\n      this.emit('testStarted', { scenario: scenario.name, type: 'functional' });\n\n      const result = await this.executeTestScenario(scenario);\n      results.push(result);\n\n      this.emit('testCompleted', { scenario: scenario.name, result });\n    }\n\n    return results;\n  }\n\n  /**\n   * Run boundary tests for middleware\n   */\n  async runBoundaryTests(middleware: string, testCases: BoundaryTestCase[]): Promise<TestResult[]> {\n    const results: TestResult[] = [];\n    const middlewareDefinition = this.middlewares.get(middleware);\n\n    if (!middlewareDefinition) {\n      throw new Error(`Middleware ${middleware} not found`);\n    }\n\n    for (const testCase of testCases) {\n      this.emit('boundaryTestStarted', { middleware, testCase: testCase.name });\n\n      const result = await this.executeBoundaryTest(middlewareDefinition, testCase);\n      results.push(result);\n\n      this.emit('boundaryTestCompleted', { middleware, testCase: testCase.name, result });\n    }\n\n    return results;\n  }\n\n  /**\n   * Run integration tests for middleware chains\n   */\n  async runIntegrationTests(suites: IntegrationTestSuite[]): Promise<TestResult[]> {\n    const results: TestResult[] = [];\n\n    for (const suite of suites) {\n      this.emit('integrationSuiteStarted', { suite: suite.name });\n\n      for (const scenario of suite.scenarios) {\n        const result = await this.executeIntegrationScenario(suite.chain, scenario);\n        results.push(result);\n      }\n\n      this.emit('integrationSuiteCompleted', { suite: suite.name });\n    }\n\n    return results;\n  }\n\n  /**\n   * Run performance benchmarks for middleware\n   */\n  async runPerformanceBenchmarks(middleware: string, scenarios: TestScenario[]): Promise<TestResult[]> {\n    if (!this.config.performance.enabled) {\n      return [];\n    }\n\n    const results: TestResult[] = [];\n    const performanceScenarios = scenarios.filter(s => s.type === 'performance');\n\n    for (const scenario of performanceScenarios) {\n      this.emit('performanceBenchmarkStarted', { middleware, scenario: scenario.name });\n\n      const result = await this.executePerformanceBenchmark(scenario);\n      results.push(result);\n\n      // Store baseline if this is the first run\n      if (!this.performanceBaselines.has(scenario.name) && result.performance) {\n        this.performanceBaselines.set(scenario.name, result.performance);\n      }\n\n      this.emit('performanceBenchmarkCompleted', { middleware, scenario: scenario.name, result });\n    }\n\n    return results;\n  }\n\n  /**\n   * Execute a single test scenario\n   */\n  private async executeTestScenario(scenario: TestScenario): Promise<TestResult> {\n    const startTime = Date.now();\n    const result: TestResult = {\n      scenario: scenario.name,\n      type: scenario.type,\n      status: 'passed',\n      duration: 0,\n      assertions: [],\n      metadata: {\n        timestamp: new Date(),\n        environment: process.env.NODE_ENV || 'test',\n        nodeVersion: process.version,\n        testFrameworkVersion: '1.0.0',\n        middleware: typeof scenario.middleware === 'string' ? scenario.middleware : scenario.middleware.name,\n        requestId: this.generateRequestId(),\n      },\n    };\n\n    try {\n      // Setup\n      if (scenario.setup) {\n        await scenario.setup();\n      }\n\n      // Execute middleware\n      const request = this.createTestRequest(scenario.input);\n      let response: NextResponse;\n\n      if (typeof scenario.middleware === 'string') {\n        const middlewareDefinition = this.middlewares.get(scenario.middleware);\n        if (!middlewareDefinition) {\n          throw new Error(`Middleware ${scenario.middleware} not found`);\n        }\n        response = await this.executeMiddleware(middlewareDefinition, request);\n      } else {\n        response = await this.executeMiddlewareChain(scenario.middleware, request);\n      }\n\n      // Validate response\n      result.assertions = await this.validateResponse(response, scenario.expected);\n\n      // Check if all assertions passed\n      result.status = result.assertions.every(a => a.passed) ? 'passed' : 'failed';\n\n      // Teardown\n      if (scenario.teardown) {\n        await scenario.teardown();\n      }\n\n    } catch (error) {\n      result.status = 'failed';\n      result.error = {\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        type: error instanceof Error ? error.constructor.name : 'Unknown',\n        context: { scenario: scenario.name },\n      };\n    }\n\n    result.duration = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Execute boundary test\n   */\n  private async executeBoundaryTest(middleware: MiddlewareDefinition, testCase: BoundaryTestCase): Promise<TestResult> {\n    const startTime = Date.now();\n    const result: TestResult = {\n      scenario: testCase.name,\n      type: 'boundary',\n      status: 'passed',\n      duration: 0,\n      assertions: [],\n      metadata: {\n        timestamp: new Date(),\n        environment: process.env.NODE_ENV || 'test',\n        nodeVersion: process.version,\n        testFrameworkVersion: '1.0.0',\n        middleware: middleware.name,\n        requestId: this.generateRequestId(),\n      },\n    };\n\n    try {\n      const request = this.createTestRequest({\n        request: {\n          url: 'http://localhost:3000/test',\n          method: 'POST',\n          body: testCase.input,\n        },\n      });\n\n      let response: NextResponse;\n      let threwError = false;\n      let error: any = null;\n\n      try {\n        response = await this.executeMiddleware(middleware, request);\n      } catch (e) {\n        threwError = true;\n        error = e;\n      }\n\n      // Validate behavior based on expected outcome\n      const assertions: AssertionResult[] = [];\n\n      switch (testCase.expectedBehavior) {\n        case 'success':\n          assertions.push({\n            name: 'Should not throw error',\n            passed: !threwError,\n            expected: false,\n            actual: threwError,\n            message: threwError ? `Unexpected error: ${error?.message}` : 'No error thrown as expected',\n          });\n          break;\n\n        case 'error':\n          assertions.push({\n            name: 'Should throw error',\n            passed: threwError,\n            expected: true,\n            actual: threwError,\n            message: threwError ? 'Error thrown as expected' : 'Expected error but none was thrown',\n          });\n          break;\n\n        case 'fallback':\n          assertions.push({\n            name: 'Should handle gracefully',\n            passed: !threwError && response!.status >= 200 && response!.status < 300,\n            expected: 'graceful handling',\n            actual: threwError ? 'error' : 'handled',\n            message: 'Should handle boundary case gracefully',\n          });\n          break;\n      }\n\n      result.assertions = assertions;\n      result.status = assertions.every(a => a.passed) ? 'passed' : 'failed';\n\n    } catch (error) {\n      result.status = 'failed';\n      result.error = {\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        type: error instanceof Error ? error.constructor.name : 'Unknown',\n        context: { testCase: testCase.name },\n      };\n    }\n\n    result.duration = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Execute integration scenario\n   */\n  private async executeIntegrationScenario(chain: MiddlewareChain, scenario: IntegrationScenario): Promise<TestResult> {\n    const startTime = Date.now();\n    const result: TestResult = {\n      scenario: scenario.name,\n      type: 'integration',\n      status: 'passed',\n      duration: 0,\n      assertions: [],\n      metadata: {\n        timestamp: new Date(),\n        environment: process.env.NODE_ENV || 'test',\n        nodeVersion: process.version,\n        testFrameworkVersion: '1.0.0',\n        middleware: chain.name,\n        requestId: this.generateRequestId(),\n      },\n    };\n\n    try {\n      // Execute the flow\n      let currentInput = scenario.flow[0]?.input;\n      const stepResults: any[] = [];\n\n      for (const step of scenario.flow) {\n        const middleware = this.middlewares.get(step.middleware);\n        if (!middleware) {\n          throw new Error(`Middleware ${step.middleware} not found in chain`);\n        }\n\n        const request = this.createTestRequest({\n          request: {\n            url: 'http://localhost:3000/test',\n            method: 'POST',\n            body: currentInput,\n          },\n        });\n\n        const response = await this.executeMiddleware(middleware, request);\n        stepResults.push({\n          middleware: step.middleware,\n          input: currentInput,\n          output: response,\n          step: step,\n        });\n\n        // Use output as input for next step\n        currentInput = await response.json().catch(() => ({}));\n      }\n\n      // Validate assertions\n      const assertions: AssertionResult[] = [];\n\n      for (const assertion of scenario.assertions) {\n        const assertionResult = await this.validateIntegrationAssertion(assertion, stepResults);\n        assertions.push(assertionResult);\n      }\n\n      result.assertions = assertions;\n      result.status = assertions.every(a => a.passed) ? 'passed' : 'failed';\n\n    } catch (error) {\n      result.status = 'failed';\n      result.error = {\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        type: error instanceof Error ? error.constructor.name : 'Unknown',\n        context: { scenario: scenario.name },\n      };\n    }\n\n    result.duration = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Execute performance benchmark\n   */\n  private async executePerformanceBenchmark(scenario: TestScenario): Promise<TestResult> {\n    const result: TestResult = {\n      scenario: scenario.name,\n      type: 'performance',\n      status: 'passed',\n      duration: 0,\n      assertions: [],\n      metadata: {\n        timestamp: new Date(),\n        environment: process.env.NODE_ENV || 'test',\n        nodeVersion: process.version,\n        testFrameworkVersion: '1.0.0',\n        middleware: typeof scenario.middleware === 'string' ? scenario.middleware : scenario.middleware.name,\n        requestId: this.generateRequestId(),\n      },\n    };\n\n    try {\n      // Warmup runs\n      for (let i = 0; i < this.config.performance.warmupRuns; i++) {\n        await this.executeSingleRun(scenario);\n      }\n\n      // Benchmark runs\n      const runs: PerformanceResult[] = [];\n      for (let i = 0; i < this.config.performance.benchmarkRuns; i++) {\n        const runResult = await this.executeSingleRun(scenario);\n        runs.push(runResult);\n      }\n\n      // Calculate aggregate performance metrics\n      result.performance = this.aggregatePerformanceResults(runs);\n\n      // Validate against thresholds\n      result.assertions = this.validatePerformanceThresholds(result.performance);\n      result.status = result.assertions.every(a => a.passed) ? 'passed' : 'failed';\n\n    } catch (error) {\n      result.status = 'failed';\n      result.error = {\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        type: error instanceof Error ? error.constructor.name : 'Unknown',\n        context: { scenario: scenario.name },\n      };\n    }\n\n    return result;\n  }\n\n  /**\n   * Execute single performance run\n   */\n  private async executeSingleRun(scenario: TestScenario): Promise<PerformanceResult> {\n    const startTime = process.hrtime.bigint();\n    const startMemory = process.memoryUsage();\n\n    const request = this.createTestRequest(scenario.input);\n\n    if (typeof scenario.middleware === 'string') {\n      const middlewareDefinition = this.middlewares.get(scenario.middleware);\n      if (!middlewareDefinition) {\n        throw new Error(`Middleware ${scenario.middleware} not found`);\n      }\n      await this.executeMiddleware(middlewareDefinition, request);\n    } else {\n      await this.executeMiddlewareChain(scenario.middleware, request);\n    }\n\n    const endTime = process.hrtime.bigint();\n    const endMemory = process.memoryUsage();\n\n    const executionTime = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n    const memoryUsage = (endMemory.heapUsed - startMemory.heapUsed) / 1024 / 1024; // Convert to MB\n\n    return {\n      executionTime,\n      memoryUsage,\n      cpuUsage: 0, // Would need more sophisticated CPU monitoring\n      throughput: 1000 / executionTime, // requests per second\n      breakdown: [], // Would need instrumentation for detailed breakdown\n    };\n  }\n\n  /**\n   * Execute middleware\n   */\n  private async executeMiddleware(middleware: MiddlewareDefinition, request: NextRequest): Promise<NextResponse> {\n    return await middleware.handler(request);\n  }\n\n  /**\n   * Execute middleware chain\n   */\n  private async executeMiddlewareChain(chain: MiddlewareChain, request: NextRequest): Promise<NextResponse> {\n    const currentRequest = request;\n    let response: NextResponse = NextResponse.next();\n\n    if (chain.order === 'sequential') {\n      for (const middlewareRef of chain.middlewares) {\n        const middleware = this.middlewares.get(middlewareRef.name);\n        if (!middleware) {\n          throw new Error(`Middleware ${middlewareRef.name} not found in chain`);\n        }\n        response = await middleware.handler(currentRequest);\n        // In a real implementation, we'd need to handle request/response chaining properly\n      }\n    } else {\n      // Parallel execution - simplified implementation\n      const promises = chain.middlewares.map(middlewareRef => {\n        const middleware = this.middlewares.get(middlewareRef.name);\n        if (!middleware) {\n          throw new Error(`Middleware ${middlewareRef.name} not found in chain`);\n        }\n        return middleware.handler(currentRequest);\n      });\n\n      const responses = await Promise.all(promises);\n      response = responses[responses.length - 1]; // Use last response\n    }\n\n    return response;\n  }\n\n  /**\n   * Create test request\n   */\n  private createTestRequest(input: TestInput): NextRequest {\n    const url = new URL(input.request.url);\n\n    // Add search params\n    if (input.request.searchParams) {\n      Object.entries(input.request.searchParams).forEach(([key, value]) => {\n        url.searchParams.set(key, value);\n      });\n    }\n\n    const headers = new Headers(input.request.headers || {});\n\n    // Add cookies to headers\n    if (input.request.cookies) {\n      const cookieString = Object.entries(input.request.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ');\n      headers.set('cookie', cookieString);\n    }\n\n    const requestInit: RequestInit = {\n      method: input.request.method,\n      headers,\n    };\n\n    if (input.request.body && input.request.method !== 'GET') {\n      requestInit.body = typeof input.request.body === 'string'\n        ? input.request.body\n        : JSON.stringify(input.request.body);\n\n      if (!headers.has('content-type')) {\n        headers.set('content-type', 'application/json');\n      }\n    }\n\n    return new NextRequest(url.toString(), requestInit);\n  }\n\n  /**\n   * Validate response against expectations\n   */\n  private async validateResponse(response: NextResponse, expected: TestExpectation): Promise<AssertionResult[]> {\n    const assertions: AssertionResult[] = [];\n\n    // Validate status\n    if (expected.response?.status !== undefined) {\n      assertions.push({\n        name: 'Response status',\n        passed: response.status === expected.response.status,\n        expected: expected.response.status,\n        actual: response.status,\n        message: `Expected status ${expected.response.status}, got ${response.status}`,\n      });\n    }\n\n    // Validate headers\n    if (expected.response?.headers) {\n      Object.entries(expected.response.headers).forEach(([key, expectedValue]) => {\n        const actualValue = response.headers.get(key);\n        assertions.push({\n          name: `Header ${key}`,\n          passed: actualValue === expectedValue,\n          expected: expectedValue,\n          actual: actualValue,\n          message: `Expected header ${key} to be ${expectedValue}, got ${actualValue}`,\n        });\n      });\n    }\n\n    // Validate body\n    if (expected.response?.body !== undefined) {\n      try {\n        const actualBody = await response.clone().json();\n        const bodyMatches = JSON.stringify(actualBody) === JSON.stringify(expected.response.body);\n        assertions.push({\n          name: 'Response body',\n          passed: bodyMatches,\n          expected: expected.response.body,\n          actual: actualBody,\n          message: bodyMatches ? 'Body matches expected' : 'Body does not match expected',\n        });\n      } catch (error) {\n        assertions.push({\n          name: 'Response body parsing',\n          passed: false,\n          expected: 'valid JSON',\n          actual: 'invalid JSON',\n          message: `Failed to parse response body as JSON: ${error}`,\n        });\n      }\n    }\n\n    return assertions;\n  }\n\n  /**\n   * Validate integration assertion\n   */\n  private async validateIntegrationAssertion(assertion: IntegrationAssertion, stepResults: any[]): Promise<AssertionResult> {\n    // Simplified implementation - would need more sophisticated validation logic\n    return {\n      name: assertion.type,\n      passed: true, // Placeholder\n      expected: assertion.condition,\n      actual: 'validated',\n      message: assertion.message,\n    };\n  }\n\n  /**\n   * Validate performance thresholds\n   */\n  private validatePerformanceThresholds(performance: PerformanceResult): AssertionResult[] {\n    const assertions: AssertionResult[] = [];\n    const thresholds = this.config.performance.thresholds;\n\n    // Execution time threshold\n    assertions.push({\n      name: 'Execution time threshold',\n      passed: performance.executionTime <= thresholds.maxExecutionTime,\n      expected: `<= ${thresholds.maxExecutionTime}ms`,\n      actual: `${performance.executionTime}ms`,\n      message: `Execution time should be under ${thresholds.maxExecutionTime}ms`,\n    });\n\n    // Memory usage threshold\n    assertions.push({\n      name: 'Memory usage threshold',\n      passed: performance.memoryUsage <= thresholds.maxMemoryUsage,\n      expected: `<= ${thresholds.maxMemoryUsage}MB`,\n      actual: `${performance.memoryUsage}MB`,\n      message: `Memory usage should be under ${thresholds.maxMemoryUsage}MB`,\n    });\n\n    // Throughput threshold\n    assertions.push({\n      name: 'Throughput threshold',\n      passed: performance.throughput >= thresholds.minThroughput,\n      expected: `>= ${thresholds.minThroughput} req/s`,\n      actual: `${performance.throughput} req/s`,\n      message: `Throughput should be at least ${thresholds.minThroughput} requests per second`,\n    });\n\n    return assertions;\n  }\n\n  /**\n   * Aggregate performance results\n   */\n  private aggregatePerformanceResults(runs: PerformanceResult[]): PerformanceResult {\n    const avgExecutionTime = runs.reduce((sum, run) => sum + run.executionTime, 0) / runs.length;\n    const avgMemoryUsage = runs.reduce((sum, run) => sum + run.memoryUsage, 0) / runs.length;\n    const avgCpuUsage = runs.reduce((sum, run) => sum + run.cpuUsage, 0) / runs.length;\n    const avgThroughput = runs.reduce((sum, run) => sum + run.throughput, 0) / runs.length;\n\n    return {\n      executionTime: avgExecutionTime,\n      memoryUsage: avgMemoryUsage,\n      cpuUsage: avgCpuUsage,\n      throughput: avgThroughput,\n      breakdown: [], // Would aggregate breakdowns if available\n    };\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  private generateRequestId(): string {\n    return `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Generate comprehensive test report\n   */\n  generateReport(results: TestResult[]): string {\n    const totalTests = results.length;\n    const passedTests = results.filter(r => r.status === 'passed').length;\n    const failedTests = results.filter(r => r.status === 'failed').length;\n    const skippedTests = results.filter(r => r.status === 'skipped').length;\n\n    let report = '# Middleware Test Report\\n\\n';\n    report += '**Summary:**\\n';\n    report += `- Total Tests: ${totalTests}\\n`;\n    report += `- Passed: ${passedTests}\\n`;\n    report += `- Failed: ${failedTests}\\n`;\n    report += `- Skipped: ${skippedTests}\\n`;\n    report += `- Success Rate: ${totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : 0}%\\n\\n`;\n\n    // Test type breakdown\n    const typeBreakdown = new Map<string, { passed: number; failed: number; skipped: number }>();\n    results.forEach(result => {\n      const stats = typeBreakdown.get(result.type) || { passed: 0, failed: 0, skipped: 0 };\n      stats[result.status]++;\n      typeBreakdown.set(result.type, stats);\n    });\n\n    report += '## Test Type Breakdown\\n\\n';\n    typeBreakdown.forEach((stats, type) => {\n      const total = stats.passed + stats.failed + stats.skipped;\n      const successRate = total > 0 ? ((stats.passed / total) * 100).toFixed(1) : 0;\n      report += `- **${type}**: ${stats.passed}/${total} passed (${successRate}%)\\n`;\n    });\n\n    // Performance summary\n    const performanceResults = results.filter(r => r.performance);\n    if (performanceResults.length > 0) {\n      report += '\\n## Performance Summary\\n\\n';\n      performanceResults.forEach(result => {\n        report += `### ${result.scenario}\\n`;\n        report += `- Execution Time: ${result.performance!.executionTime.toFixed(2)}ms\\n`;\n        report += `- Memory Usage: ${result.performance!.memoryUsage.toFixed(2)}MB\\n`;\n        report += `- Throughput: ${result.performance!.throughput.toFixed(2)} req/s\\n\\n`;\n      });\n    }\n\n    // Failed tests details\n    const failedResults = results.filter(r => r.status === 'failed');\n    if (failedResults.length > 0) {\n      report += '\\n## Failed Tests\\n\\n';\n      failedResults.forEach(result => {\n        report += `### ${result.scenario} (${result.type})\\n`;\n        report += `- Duration: ${result.duration}ms\\n`;\n        report += `- Error: ${result.error?.message || 'Unknown error'}\\n`;\n\n        if (result.assertions.length > 0) {\n          report += '- Failed Assertions:\\n';\n          result.assertions.filter(a => !a.passed).forEach(assertion => {\n            report += `  - ${assertion.name}: ${assertion.message}\\n`;\n          });\n        }\n        report += '\\n';\n      });\n    }\n\n    return report;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    this.middlewares.clear();\n    this.chains.clear();\n    this.testResults = [];\n    this.performanceBaselines.clear();\n    this.removeAllListeners();\n  }\n}\n\n/**\n * Create middleware test framework instance\n */\nexport function createMiddlewareTestFramework(config: MiddlewareTestConfig): MiddlewareTestFramework {\n  return new MiddlewareTestFramework(config);\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/middleware/MiddlewareTestUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/middleware/index.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":503,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":515,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Middleware Testing Framework\n *\n * Comprehensive middleware testing utilities including functional testing,\n * boundary testing, integration testing, and performance benchmarking.\n */\n\n// Core framework\nexport {\n  MiddlewareTestFramework,\n  createMiddlewareTestFramework,\n  type MiddlewareTestConfig,\n  type PerformanceThresholds,\n  type MiddlewareFunction,\n  type MiddlewareChain,\n  type MiddlewareDefinition,\n  type TestScenario,\n  type TestInput,\n  type MockConfiguration,\n  type TestExpectation,\n  type DatabaseExpectation,\n  type ExternalCallExpectation,\n  type LogExpectation,\n  type MetricExpectation,\n  type TestResult,\n  type AssertionResult,\n  type PerformanceResult,\n  type PerformanceBreakdown,\n  type TestError,\n  type TestMetadata,\n  type BoundaryTestCase,\n  type IntegrationTestSuite,\n  type IntegrationScenario,\n  type IntegrationStep,\n  type IntegrationAssertion,\n} from './MiddlewareTestFramework';\n\n// Test utilities\nexport {\n  MiddlewareTestUtils,\n  MiddlewareAssertions,\n} from './MiddlewareTestUtils';\n\n// Chain testing\nexport {\n  MiddlewareChainTester,\n  type ChainTestConfig,\n  type ChainExecutionResult,\n  type IntermediateState,\n  type ChainValidationResult,\n  type ChainIssue,\n} from './MiddlewareChainTester';\n\n// Convenience functions\nexport const createDefaultMiddlewareTestConfig = (): MiddlewareTestConfig => ({\n  timeout: 5000,\n  retries: 3,\n  performance: {\n    enabled: true,\n    warmupRuns: 5,\n    benchmarkRuns: 100,\n    thresholds: {\n      maxExecutionTime: 1000, // 1 second\n      maxMemoryUsage: 100, // 100 MB\n      maxCpuUsage: 80, // 80%\n      minThroughput: 100, // 100 req/s\n    },\n  },\n  logging: {\n    enabled: true,\n    level: 'info',\n    includeStack: false,\n  },\n  mocking: {\n    enabled: true,\n    mockExternalServices: true,\n    mockDatabase: true,\n  },\n});\n\nexport const createDefaultChainTestConfig = (): ChainTestConfig => ({\n  timeout: 10000,\n  validateOrder: true,\n  captureIntermediateStates: true,\n  enablePerformanceTracking: true,\n});\n\n// Common middleware test scenarios\nexport const CommonTestScenarios = {\n  /**\n   * Authentication middleware test scenarios\n   */\n  authentication: (): TestScenario[] => [\n    {\n      name: 'Valid JWT token',\n      description: 'Test middleware with valid JWT token',\n      type: 'functional',\n      middleware: 'auth',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/protected',\n          method: 'GET',\n          headers: {\n            'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n          },\n        },\n      },\n      expected: {\n        response: {\n          status: 200,\n        },\n      },\n    },\n    {\n      name: 'Invalid JWT token',\n      description: 'Test middleware with invalid JWT token',\n      type: 'functional',\n      middleware: 'auth',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/protected',\n          method: 'GET',\n          headers: {\n            'authorization': 'Bearer invalid-token',\n          },\n        },\n      },\n      expected: {\n        response: {\n          status: 401,\n        },\n      },\n    },\n    {\n      name: 'Missing authorization header',\n      description: 'Test middleware without authorization header',\n      type: 'functional',\n      middleware: 'auth',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/protected',\n          method: 'GET',\n        },\n      },\n      expected: {\n        response: {\n          status: 401,\n        },\n      },\n    },\n  ],\n\n  /**\n   * Rate limiting middleware test scenarios\n   */\n  rateLimiting: (limit: number = 10, windowMs: number = 60000): TestScenario[] => [\n    {\n      name: 'Within rate limit',\n      description: 'Test requests within rate limit',\n      type: 'functional',\n      middleware: 'rate-limit',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/test',\n          method: 'GET',\n          headers: {\n            'x-forwarded-for': '192.168.1.1',\n          },\n        },\n      },\n      expected: {\n        response: {\n          status: 200,\n        },\n      },\n    },\n    {\n      name: 'Exceeding rate limit',\n      description: 'Test requests exceeding rate limit',\n      type: 'functional',\n      middleware: 'rate-limit',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/test',\n          method: 'GET',\n          headers: {\n            'x-forwarded-for': '192.168.1.2',\n          },\n        },\n      },\n      expected: {\n        response: {\n          status: 429,\n        },\n      },\n    },\n  ],\n\n  /**\n   * CORS middleware test scenarios\n   */\n  cors: (): TestScenario[] => [\n    {\n      name: 'Same origin request',\n      description: 'Test CORS with same origin',\n      type: 'functional',\n      middleware: 'cors',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/test',\n          method: 'GET',\n          headers: {\n            'origin': 'http://localhost:3000',\n          },\n        },\n      },\n      expected: {\n        response: {\n          status: 200,\n          headers: {\n            'access-control-allow-origin': 'http://localhost:3000',\n          },\n        },\n      },\n    },\n    {\n      name: 'Cross origin request',\n      description: 'Test CORS with allowed cross origin',\n      type: 'functional',\n      middleware: 'cors',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/test',\n          method: 'GET',\n          headers: {\n            'origin': 'https://example.com',\n          },\n        },\n      },\n      expected: {\n        response: {\n          status: 200,\n          headers: {\n            'access-control-allow-origin': 'https://example.com',\n          },\n        },\n      },\n    },\n    {\n      name: 'Preflight request',\n      description: 'Test CORS preflight request',\n      type: 'functional',\n      middleware: 'cors',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/test',\n          method: 'OPTIONS',\n          headers: {\n            'origin': 'https://example.com',\n            'access-control-request-method': 'POST',\n            'access-control-request-headers': 'content-type',\n          },\n        },\n      },\n      expected: {\n        response: {\n          status: 200,\n          headers: {\n            'access-control-allow-methods': 'POST',\n            'access-control-allow-headers': 'content-type',\n          },\n        },\n      },\n    },\n  ],\n\n  /**\n   * Request validation middleware test scenarios\n   */\n  validation: (): TestScenario[] => [\n    {\n      name: 'Valid request body',\n      description: 'Test validation with valid request body',\n      type: 'functional',\n      middleware: 'validation',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/users',\n          method: 'POST',\n          body: {\n            name: 'John Doe',\n            email: 'john@example.com',\n            age: 30,\n          },\n        },\n      },\n      expected: {\n        response: {\n          status: 200,\n        },\n      },\n    },\n    {\n      name: 'Invalid request body',\n      description: 'Test validation with invalid request body',\n      type: 'functional',\n      middleware: 'validation',\n      input: {\n        request: {\n          url: 'http://localhost:3000/api/users',\n          method: 'POST',\n          body: {\n            name: '',\n            email: 'invalid-email',\n            age: -5,\n          },\n        },\n      },\n      expected: {\n        response: {\n          status: 400,\n        },\n      },\n    },\n  ],\n};\n\n// Common boundary test cases\nexport const CommonBoundaryTests = {\n  /**\n   * Generate boundary tests for string fields\n   */\n  stringField: (fieldName: string): BoundaryTestCase[] =>\n    MiddlewareTestUtils.generateBoundaryTestCases(fieldName, 'string'),\n\n  /**\n   * Generate boundary tests for number fields\n   */\n  numberField: (fieldName: string): BoundaryTestCase[] =>\n    MiddlewareTestUtils.generateBoundaryTestCases(fieldName, 'number'),\n\n  /**\n   * Generate boundary tests for object fields\n   */\n  objectField: (fieldName: string): BoundaryTestCase[] =>\n    MiddlewareTestUtils.generateBoundaryTestCases(fieldName, 'object'),\n\n  /**\n   * Generate boundary tests for array fields\n   */\n  arrayField: (fieldName: string): BoundaryTestCase[] =>\n    MiddlewareTestUtils.generateBoundaryTestCases(fieldName, 'array'),\n};\n\n// Performance test helpers\nexport const PerformanceTestHelpers = {\n  /**\n   * Create performance test scenario\n   */\n  createPerformanceTest: (\n    middlewareName: string,\n    requestCount: number = 1000,\n    maxExecutionTime: number = 100,\n  ): TestScenario => ({\n    name: `${middlewareName} performance test`,\n    description: `Performance test for ${middlewareName} middleware`,\n    type: 'performance',\n    middleware: middlewareName,\n    input: {\n      request: {\n        url: 'http://localhost:3000/api/test',\n        method: 'GET',\n      },\n    },\n    expected: {\n      performance: {\n        maxExecutionTime,\n        minThroughput: requestCount / (maxExecutionTime / 1000),\n      },\n    },\n  }),\n\n  /**\n   * Create load test scenario\n   */\n  createLoadTest: (\n    middlewareName: string,\n    concurrentRequests: number = 100,\n    duration: number = 60000,\n  ): TestScenario => ({\n    name: `${middlewareName} load test`,\n    description: `Load test for ${middlewareName} middleware`,\n    type: 'performance',\n    middleware: middlewareName,\n    input: {\n      request: {\n        url: 'http://localhost:3000/api/test',\n        method: 'GET',\n      },\n    },\n    expected: {\n      performance: {\n        maxExecutionTime: duration,\n        minThroughput: concurrentRequests,\n      },\n    },\n  }),\n};\n\n// Integration test helpers\nexport const IntegrationTestHelpers = {\n  /**\n   * Create authentication + authorization chain test\n   */\n  createAuthChainTest: (): IntegrationTestSuite => ({\n    name: 'Authentication and Authorization Chain',\n    description: 'Test authentication followed by authorization',\n    chain: {\n      name: 'auth-chain',\n      description: 'Authentication and authorization middleware chain',\n      middlewares: [\n        { name: 'auth', handler: async () => NextResponse.next() },\n        { name: 'authz', handler: async () => NextResponse.next() },\n      ],\n      order: 'sequential',\n    },\n    scenarios: [\n      {\n        name: 'Valid user with permissions',\n        description: 'Test valid authenticated user with required permissions',\n        flow: [\n          {\n            middleware: 'auth',\n            input: { token: 'valid-token' },\n            expectedOutput: { user: { id: '123', role: 'admin' } },\n            sideEffects: [],\n          },\n          {\n            middleware: 'authz',\n            input: { user: { id: '123', role: 'admin' }, resource: 'users' },\n            expectedOutput: { authorized: true },\n            sideEffects: [],\n          },\n        ],\n        assertions: [\n          {\n            type: 'response',\n            target: 'final',\n            condition: { status: 200 },\n            message: 'Should allow access for authorized user',\n          },\n        ],\n      },\n    ],\n  }),\n\n  /**\n   * Create rate limiting + CORS chain test\n   */\n  createRateLimitCorsChainTest: (): IntegrationTestSuite => ({\n    name: 'Rate Limiting and CORS Chain',\n    description: 'Test rate limiting followed by CORS handling',\n    chain: {\n      name: 'rate-cors-chain',\n      description: 'Rate limiting and CORS middleware chain',\n      middlewares: [\n        { name: 'rate-limit', handler: async () => NextResponse.next() },\n        { name: 'cors', handler: async () => NextResponse.next() },\n      ],\n      order: 'sequential',\n    },\n    scenarios: [\n      {\n        name: 'Cross-origin request within rate limit',\n        description: 'Test cross-origin request that passes rate limiting',\n        flow: [\n          {\n            middleware: 'rate-limit',\n            input: { ip: '192.168.1.1', endpoint: '/api/test' },\n            expectedOutput: { allowed: true },\n            sideEffects: [],\n          },\n          {\n            middleware: 'cors',\n            input: { origin: 'https://example.com', method: 'GET' },\n            expectedOutput: { corsHeaders: { 'access-control-allow-origin': 'https://example.com' } },\n            sideEffects: [],\n          },\n        ],\n        assertions: [\n          {\n            type: 'response',\n            target: 'final',\n            condition: { status: 200 },\n            message: 'Should allow cross-origin request within rate limit',\n          },\n        ],\n      },\n    ],\n  }),\n};\n\nexport default {\n  MiddlewareTestFramework,\n  MiddlewareTestUtils,\n  MiddlewareAssertions,\n  MiddlewareChainTester,\n  createMiddlewareTestFramework,\n  createDefaultMiddlewareTestConfig,\n  createDefaultChainTestConfig,\n  CommonTestScenarios,\n  CommonBoundaryTests,\n  PerformanceTestHelpers,\n  IntegrationTestHelpers,\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/mocks/BaseMockService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/mocks/MockDatabaseService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/mocks/MockEmailService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/mocks/MockGeminiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/monitoring/MemoryUsageTracker.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 123. Maximum allowed is 120.","line":351,"column":1,"nodeType":"Program","messageId":"max","endLine":351,"endColumn":124},{"ruleId":"max-len","severity":1,"message":"This line has a length of 130. Maximum allowed is 120.","line":428,"column":1,"nodeType":"Program","messageId":"max","endLine":428,"endColumn":131}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\nimport * as v8 from 'v8';\n\nexport interface MemorySnapshot {\n  timestamp: number;\n  heapUsed: number;\n  heapTotal: number;\n  external: number;\n  rss: number;\n  arrayBuffers: number;\n  heapSpaceUsed: HeapSpaceUsage[];\n  heapStatistics: v8.HeapStatistics;\n}\n\nexport interface HeapSpaceUsage {\n  spaceName: string;\n  spaceSize: number;\n  spaceUsedSize: number;\n  spaceAvailableSize: number;\n  physicalSpaceSize: number;\n}\n\nexport interface MemoryLeak {\n  testId: string;\n  testName: string;\n  startMemory: number;\n  endMemory: number;\n  leakSize: number;\n  leakRate: number; // bytes per second\n  duration: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface MemoryAnalysis {\n  totalSnapshots: number;\n  timeRange: { start: number; end: number };\n  memoryGrowth: number;\n  averageMemoryUsage: number;\n  peakMemoryUsage: number;\n  memoryLeaks: MemoryLeak[];\n  garbageCollectionStats: GCStats;\n  recommendations: string[];\n}\n\nexport interface GCStats {\n  totalCollections: number;\n  totalTime: number;\n  averageTime: number;\n  collections: GCEvent[];\n}\n\nexport interface GCEvent {\n  timestamp: number;\n  type: string;\n  duration: number;\n  memoryBefore: number;\n  memoryAfter: number;\n  memoryFreed: number;\n}\n\nexport interface TrackerOptions {\n  samplingInterval: number; // ms\n  leakThreshold: number; // bytes\n  maxSnapshots: number;\n  enableGCTracking: boolean;\n  enableHeapProfiling: boolean;\n}\n\n/**\n * 内存使用跟踪分析器\n * 跟踪和分析测试过程中的内存使用情况\n */\nexport class MemoryUsageTracker extends EventEmitter {\n  private options: TrackerOptions;\n  private snapshots: MemorySnapshot[] = [];\n  private gcEvents: GCEvent[] = [];\n  private testMemoryMap: Map<string, { start: MemorySnapshot; end?: MemorySnapshot }> = new Map();\n  private samplingInterval?: NodeJS.Timeout;\n  private isTracking = false;\n  private gcObserver?: any;\n\n  constructor(options: Partial<TrackerOptions> = {}) {\n    super();\n    this.options = {\n      samplingInterval: 500, // 500ms\n      leakThreshold: 10 * 1024 * 1024, // 10MB\n      maxSnapshots: 2000,\n      enableGCTracking: true,\n      enableHeapProfiling: false,\n      ...options,\n    };\n  }\n\n  /**\n   * 开始内存跟踪\n   */\n  startTracking(): void {\n    if (this.isTracking) {\n      return;\n    }\n\n    this.isTracking = true;\n\n    // 开始定期采样\n    this.samplingInterval = setInterval(() => {\n      this.captureMemorySnapshot();\n    }, this.options.samplingInterval);\n\n    // 启用GC跟踪\n    if (this.options.enableGCTracking) {\n      this.enableGCTracking();\n    }\n\n    // 启用堆分析\n    if (this.options.enableHeapProfiling) {\n      this.enableHeapProfiling();\n    }\n\n    this.emit('tracking:started');\n  }\n\n  /**\n   * 停止内存跟踪\n   */\n  stopTracking(): void {\n    if (!this.isTracking) {\n      return;\n    }\n\n    this.isTracking = false;\n\n    if (this.samplingInterval) {\n      clearInterval(this.samplingInterval);\n      this.samplingInterval = undefined;\n    }\n\n    if (this.gcObserver) {\n      this.gcObserver.disconnect();\n      this.gcObserver = undefined;\n    }\n\n    this.emit('tracking:stopped');\n  }\n\n  /**\n   * 捕获内存快照\n   */\n  private captureMemorySnapshot(): void {\n    const memUsage = process.memoryUsage();\n    const heapSpaces = v8.getHeapSpaceStatistics();\n    const heapStats = v8.getHeapStatistics();\n\n    const snapshot: MemorySnapshot = {\n      timestamp: Date.now(),\n      heapUsed: memUsage.heapUsed,\n      heapTotal: memUsage.heapTotal,\n      external: memUsage.external,\n      rss: memUsage.rss,\n      arrayBuffers: memUsage.arrayBuffers,\n      heapSpaceUsed: heapSpaces.map(space => ({\n        spaceName: space.space_name,\n        spaceSize: space.space_size,\n        spaceUsedSize: space.space_used_size,\n        spaceAvailableSize: space.space_available_size,\n        physicalSpaceSize: space.physical_space_size,\n      })),\n      heapStatistics: heapStats,\n    };\n\n    this.snapshots.push(snapshot);\n\n    // 保持快照数量在限制内\n    if (this.snapshots.length > this.options.maxSnapshots) {\n      this.snapshots = this.snapshots.slice(-this.options.maxSnapshots);\n    }\n\n    this.emit('snapshot:captured', snapshot);\n  }\n\n  /**\n   * 启用垃圾回收跟踪\n   */\n  private enableGCTracking(): void {\n    try {\n      // 使用性能观察器跟踪GC事件\n      const { PerformanceObserver } = require('perf_hooks');\n\n      this.gcObserver = new PerformanceObserver((list: any) => {\n        const entries = list.getEntries();\n        entries.forEach((entry: any) => {\n          if (entry.entryType === 'gc') {\n            const memoryBefore = this.getLastSnapshot()?.heapUsed || 0;\n\n            // 捕获GC后的内存快照\n            setTimeout(() => {\n              const memoryAfter = process.memoryUsage().heapUsed;\n\n              const gcEvent: GCEvent = {\n                timestamp: entry.startTime + entry.duration,\n                type: this.getGCType(entry.kind),\n                duration: entry.duration,\n                memoryBefore,\n                memoryAfter,\n                memoryFreed: Math.max(0, memoryBefore - memoryAfter),\n              };\n\n              this.gcEvents.push(gcEvent);\n\n              // 保持GC事件数量在限制内\n              if (this.gcEvents.length > this.options.maxSnapshots) {\n                this.gcEvents = this.gcEvents.slice(-this.options.maxSnapshots);\n              }\n\n              this.emit('gc:event', gcEvent);\n            }, 10);\n          }\n        });\n      });\n\n      this.gcObserver.observe({ entryTypes: ['gc'] });\n    } catch (error) {\n      console.warn('Failed to enable GC tracking:', error.message);\n    }\n  }\n\n  /**\n   * 获取GC类型\n   */\n  private getGCType(kind: number): string {\n    const gcTypes: { [key: number]: string } = {\n      1: 'Scavenge',\n      2: 'Mark-Sweep-Compact',\n      4: 'Incremental Marking',\n      8: 'Weak Phantom Callback Processing',\n      15: 'All',\n    };\n    return gcTypes[kind] || `Unknown(${kind})`;\n  }\n\n  /**\n   * 启用堆分析\n   */\n  private enableHeapProfiling(): void {\n    try {\n      // 定期触发堆快照分析\n      setInterval(() => {\n        if (this.isTracking) {\n          this.analyzeHeapUsage();\n        }\n      }, 30000); // 每30秒分析一次\n    } catch (error) {\n      console.warn('Failed to enable heap profiling:', error.message);\n    }\n  }\n\n  /**\n   * 分析堆使用情况\n   */\n  private analyzeHeapUsage(): void {\n    try {\n      const heapStats = v8.getHeapStatistics();\n      const heapSpaces = v8.getHeapSpaceStatistics();\n\n      const analysis = {\n        timestamp: Date.now(),\n        heapStatistics: heapStats,\n        heapSpaces: heapSpaces,\n        fragmentation: this.calculateFragmentation(heapStats, heapSpaces),\n      };\n\n      this.emit('heap:analysis', analysis);\n    } catch (error) {\n      console.warn('Failed to analyze heap usage:', error.message);\n    }\n  }\n\n  /**\n   * 计算内存碎片化程度\n   */\n  private calculateFragmentation(heapStats: v8.HeapStatistics, heapSpaces: v8.HeapSpaceStatistics[]): number {\n    const totalAllocated = heapSpaces.reduce((sum, space) => sum + space.space_used_size, 0);\n    const totalAvailable = heapSpaces.reduce((sum, space) => sum + space.space_available_size, 0);\n    const totalSize = heapSpaces.reduce((sum, space) => sum + space.space_size, 0);\n\n    if (totalSize === 0) return 0;\n\n    // 碎片化 = (总大小 - 已使用 - 可用) / 总大小\n    const fragmented = totalSize - totalAllocated - totalAvailable;\n    return fragmented / totalSize;\n  }\n\n  /**\n   * 开始测试内存跟踪\n   */\n  startTestTracking(testId: string, testName: string): void {\n    const snapshot = this.getLastSnapshot() || this.captureMemorySnapshotSync();\n    this.testMemoryMap.set(testId, { start: snapshot });\n    this.emit('test:memory:start', { testId, testName, snapshot });\n  }\n\n  /**\n   * 结束测试内存跟踪\n   */\n  endTestTracking(testId: string): void {\n    const testMemory = this.testMemoryMap.get(testId);\n    if (!testMemory) {\n      return;\n    }\n\n    const endSnapshot = this.getLastSnapshot() || this.captureMemorySnapshotSync();\n    testMemory.end = endSnapshot;\n\n    // 检查内存泄漏\n    const leak = this.detectMemoryLeak(testId, testMemory.start, endSnapshot);\n    if (leak) {\n      this.emit('memory:leak', leak);\n    }\n\n    this.emit('test:memory:end', { testId, startSnapshot: testMemory.start, endSnapshot });\n  }\n\n  /**\n   * 同步捕获内存快照\n   */\n  private captureMemorySnapshotSync(): MemorySnapshot {\n    const memUsage = process.memoryUsage();\n    const heapSpaces = v8.getHeapSpaceStatistics();\n    const heapStats = v8.getHeapStatistics();\n\n    return {\n      timestamp: Date.now(),\n      heapUsed: memUsage.heapUsed,\n      heapTotal: memUsage.heapTotal,\n      external: memUsage.external,\n      rss: memUsage.rss,\n      arrayBuffers: memUsage.arrayBuffers,\n      heapSpaceUsed: heapSpaces.map(space => ({\n        spaceName: space.space_name,\n        spaceSize: space.space_size,\n        spaceUsedSize: space.space_used_size,\n        spaceAvailableSize: space.space_available_size,\n        physicalSpaceSize: space.physical_space_size,\n      })),\n      heapStatistics: heapStats,\n    };\n  }\n\n  /**\n   * 检测内存泄漏\n   */\n  private detectMemoryLeak(testId: string, startSnapshot: MemorySnapshot, endSnapshot: MemorySnapshot): MemoryLeak | null {\n    const memoryGrowth = endSnapshot.heapUsed - startSnapshot.heapUsed;\n    const duration = endSnapshot.timestamp - startSnapshot.timestamp;\n    const leakRate = duration > 0 ? memoryGrowth / (duration / 1000) : 0;\n\n    if (memoryGrowth > this.options.leakThreshold) {\n      let severity: MemoryLeak['severity'] = 'low';\n\n      if (memoryGrowth > this.options.leakThreshold * 5) {\n        severity = 'critical';\n      } else if (memoryGrowth > this.options.leakThreshold * 3) {\n        severity = 'high';\n      } else if (memoryGrowth > this.options.leakThreshold * 2) {\n        severity = 'medium';\n      }\n\n      return {\n        testId,\n        testName: testId, // 简化实现\n        startMemory: startSnapshot.heapUsed,\n        endMemory: endSnapshot.heapUsed,\n        leakSize: memoryGrowth,\n        leakRate,\n        duration,\n        severity,\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * 获取最后一个快照\n   */\n  private getLastSnapshot(): MemorySnapshot | null {\n    return this.snapshots.length > 0 ? this.snapshots[this.snapshots.length - 1] : null;\n  }\n\n  /**\n   * 分析内存使用情况\n   */\n  analyzeMemoryUsage(timeWindow?: number): MemoryAnalysis {\n    const cutoffTime = timeWindow ? Date.now() - timeWindow : 0;\n    const relevantSnapshots = this.snapshots.filter(s => s.timestamp > cutoffTime);\n\n    if (relevantSnapshots.length === 0) {\n      return {\n        totalSnapshots: 0,\n        timeRange: { start: 0, end: 0 },\n        memoryGrowth: 0,\n        averageMemoryUsage: 0,\n        peakMemoryUsage: 0,\n        memoryLeaks: [],\n        garbageCollectionStats: {\n          totalCollections: 0,\n          totalTime: 0,\n          averageTime: 0,\n          collections: [],\n        },\n        recommendations: [],\n      };\n    }\n\n    const startSnapshot = relevantSnapshots[0];\n    const endSnapshot = relevantSnapshots[relevantSnapshots.length - 1];\n\n    const memoryGrowth = endSnapshot.heapUsed - startSnapshot.heapUsed;\n    const averageMemoryUsage = relevantSnapshots.reduce((sum, s) => sum + s.heapUsed, 0) / relevantSnapshots.length;\n    const peakMemoryUsage = Math.max(...relevantSnapshots.map(s => s.heapUsed));\n\n    // 分析内存泄漏\n    const memoryLeaks = this.analyzeMemoryLeaks();\n\n    // 分析GC统计\n    const gcStats = this.analyzeGCStats(cutoffTime);\n\n    // 生成建议\n    const recommendations = this.generateRecommendations(memoryGrowth, averageMemoryUsage, peakMemoryUsage, memoryLeaks, gcStats);\n\n    return {\n      totalSnapshots: relevantSnapshots.length,\n      timeRange: { start: startSnapshot.timestamp, end: endSnapshot.timestamp },\n      memoryGrowth,\n      averageMemoryUsage,\n      peakMemoryUsage,\n      memoryLeaks,\n      garbageCollectionStats: gcStats,\n      recommendations,\n    };\n  }\n\n  /**\n   * 分析内存泄漏\n   */\n  private analyzeMemoryLeaks(): MemoryLeak[] {\n    const leaks: MemoryLeak[] = [];\n\n    for (const [testId, testMemory] of this.testMemoryMap.entries()) {\n      if (testMemory.end) {\n        const leak = this.detectMemoryLeak(testId, testMemory.start, testMemory.end);\n        if (leak) {\n          leaks.push(leak);\n        }\n      }\n    }\n\n    return leaks.sort((a, b) => b.leakSize - a.leakSize);\n  }\n\n  /**\n   * 分析GC统计\n   */\n  private analyzeGCStats(cutoffTime: number): GCStats {\n    const relevantGCEvents = this.gcEvents.filter(gc => gc.timestamp > cutoffTime);\n\n    const totalCollections = relevantGCEvents.length;\n    const totalTime = relevantGCEvents.reduce((sum, gc) => sum + gc.duration, 0);\n    const averageTime = totalCollections > 0 ? totalTime / totalCollections : 0;\n\n    return {\n      totalCollections,\n      totalTime,\n      averageTime,\n      collections: relevantGCEvents,\n    };\n  }\n\n  /**\n   * 生成优化建议\n   */\n  private generateRecommendations(\n    memoryGrowth: number,\n    averageMemoryUsage: number,\n    peakMemoryUsage: number,\n    memoryLeaks: MemoryLeak[],\n    gcStats: GCStats,\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // 内存增长建议\n    if (memoryGrowth > 50 * 1024 * 1024) { // 50MB\n      recommendations.push('Significant memory growth detected. Consider reviewing object lifecycle management.');\n    }\n\n    // 内存泄漏建议\n    if (memoryLeaks.length > 0) {\n      recommendations.push(`${memoryLeaks.length} potential memory leaks detected. Review test cleanup procedures.`);\n\n      const criticalLeaks = memoryLeaks.filter(l => l.severity === 'critical');\n      if (criticalLeaks.length > 0) {\n        recommendations.push(`${criticalLeaks.length} critical memory leaks require immediate attention.`);\n      }\n    }\n\n    // GC建议\n    if (gcStats.averageTime > 100) { // 100ms\n      recommendations.push('High GC pause times detected. Consider optimizing object allocation patterns.');\n    }\n\n    if (gcStats.totalCollections > 100) {\n      recommendations.push('Frequent garbage collections detected. Review memory allocation strategies.');\n    }\n\n    // 峰值内存建议\n    if (peakMemoryUsage > 1024 * 1024 * 1024) { // 1GB\n      recommendations.push('High peak memory usage detected. Consider implementing memory-efficient algorithms.');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 获取内存快照\n   */\n  getSnapshots(): MemorySnapshot[] {\n    return [...this.snapshots];\n  }\n\n  /**\n   * 获取GC事件\n   */\n  getGCEvents(): GCEvent[] {\n    return [...this.gcEvents];\n  }\n\n  /**\n   * 获取内存趋势\n   */\n  getMemoryTrends(timeWindow: number = 3600000): {\n    timestamps: number[];\n    heapUsed: number[];\n    heapTotal: number[];\n    rss: number[];\n    external: number[];\n  } {\n    const cutoffTime = Date.now() - timeWindow;\n    const relevantSnapshots = this.snapshots.filter(s => s.timestamp > cutoffTime);\n\n    return {\n      timestamps: relevantSnapshots.map(s => s.timestamp),\n      heapUsed: relevantSnapshots.map(s => s.heapUsed),\n      heapTotal: relevantSnapshots.map(s => s.heapTotal),\n      rss: relevantSnapshots.map(s => s.rss),\n      external: relevantSnapshots.map(s => s.external),\n    };\n  }\n\n  /**\n   * 重置跟踪数据\n   */\n  reset(): void {\n    this.snapshots = [];\n    this.gcEvents = [];\n    this.testMemoryMap.clear();\n    this.emit('tracking:reset');\n  }\n\n  /**\n   * 销毁跟踪器\n   */\n  destroy(): void {\n    this.stopTracking();\n    this.reset();\n    this.removeAllListeners();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/monitoring/PerformanceBottleneckAnalyzer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/monitoring/PerformanceRegressionDetector.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 124. Maximum allowed is 120.","line":410,"column":1,"nodeType":"Program","messageId":"max","endLine":410,"endColumn":125}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface PerformanceBaseline {\n  testId: string;\n  testName: string;\n  averageDuration: number;\n  averageMemoryUsage: number;\n  standardDeviation: number;\n  sampleCount: number;\n  lastUpdated: Date;\n  confidence: number; // 0-1\n}\n\nexport interface PerformanceRegression {\n  testId: string;\n  testName: string;\n  type: 'duration' | 'memory' | 'both';\n  severity: 'minor' | 'moderate' | 'major' | 'critical';\n  currentValue: number;\n  baselineValue: number;\n  regressionPercent: number;\n  confidence: number;\n  timestamp: Date;\n  details: RegressionDetails;\n}\n\nexport interface RegressionDetails {\n  historicalData: PerformanceDataPoint[];\n  trendAnalysis: TrendAnalysis;\n  possibleCauses: string[];\n  recommendations: string[];\n}\n\nexport interface PerformanceDataPoint {\n  timestamp: Date;\n  duration: number;\n  memoryUsage: number;\n  testId: string;\n}\n\nexport interface TrendAnalysis {\n  trend: 'improving' | 'stable' | 'degrading';\n  slope: number;\n  correlation: number;\n  volatility: number;\n}\n\nexport interface DetectorOptions {\n  baselineFile: string;\n  minSampleSize: number;\n  regressionThreshold: number; // percentage\n  confidenceThreshold: number;\n  maxHistorySize: number;\n  enableTrendAnalysis: boolean;\n  autoUpdateBaseline: boolean;\n}\n\n/**\n * 性能回归检测器\n * 自动检测测试性能回归并提供分析\n */\nexport class PerformanceRegressionDetector extends EventEmitter {\n  private options: DetectorOptions;\n  private baselines: Map<string, PerformanceBaseline> = new Map();\n  private performanceHistory: Map<string, PerformanceDataPoint[]> = new Map();\n  private regressions: PerformanceRegression[] = [];\n\n  constructor(options: Partial<DetectorOptions> = {}) {\n    super();\n    this.options = {\n      baselineFile: path.join(process.cwd(), '.test-performance', 'baselines.json'),\n      minSampleSize: 10,\n      regressionThreshold: 20, // 20% regression threshold\n      confidenceThreshold: 0.8,\n      maxHistorySize: 1000,\n      enableTrendAnalysis: true,\n      autoUpdateBaseline: true,\n      ...options,\n    };\n\n    this.loadBaselines();\n  }\n\n  /**\n   * 记录测试性能数据\n   */\n  recordPerformance(testId: string, testName: string, duration: number, memoryUsage: number): void {\n    const dataPoint: PerformanceDataPoint = {\n      timestamp: new Date(),\n      duration,\n      memoryUsage,\n      testId,\n    };\n\n    // 添加到历史记录\n    if (!this.performanceHistory.has(testId)) {\n      this.performanceHistory.set(testId, []);\n    }\n\n    const history = this.performanceHistory.get(testId)!;\n    history.push(dataPoint);\n\n    // 保持历史记录在限制内\n    if (history.length > this.options.maxHistorySize) {\n      history.splice(0, history.length - this.options.maxHistorySize);\n    }\n\n    // 检查回归\n    this.checkForRegression(testId, testName, dataPoint);\n\n    // 更新基线（如果启用）\n    if (this.options.autoUpdateBaseline) {\n      this.updateBaseline(testId, testName);\n    }\n\n    this.emit('performance:recorded', { testId, testName, dataPoint });\n  }\n\n  /**\n   * 检查性能回归\n   */\n  private checkForRegression(testId: string, testName: string, dataPoint: PerformanceDataPoint): void {\n    const baseline = this.baselines.get(testId);\n    if (!baseline || baseline.confidence < this.options.confidenceThreshold) {\n      return;\n    }\n\n    const durationRegression = this.calculateRegression(dataPoint.duration, baseline.averageDuration);\n    const memoryRegression = this.calculateRegression(dataPoint.memoryUsage, baseline.averageMemoryUsage);\n\n    let regressionType: PerformanceRegression['type'] | null = null;\n    let regressionPercent = 0;\n    let currentValue = 0;\n    let baselineValue = 0;\n\n    // 检查持续时间回归\n    if (Math.abs(durationRegression) > this.options.regressionThreshold) {\n      if (memoryRegression > this.options.regressionThreshold) {\n        regressionType = 'both';\n        regressionPercent = Math.max(durationRegression, memoryRegression);\n        currentValue = dataPoint.duration;\n        baselineValue = baseline.averageDuration;\n      } else {\n        regressionType = 'duration';\n        regressionPercent = durationRegression;\n        currentValue = dataPoint.duration;\n        baselineValue = baseline.averageDuration;\n      }\n    } else if (memoryRegression > this.options.regressionThreshold) {\n      regressionType = 'memory';\n      regressionPercent = memoryRegression;\n      currentValue = dataPoint.memoryUsage;\n      baselineValue = baseline.averageMemoryUsage;\n    }\n\n    if (regressionType) {\n      const regression = this.createRegressionReport(\n        testId,\n        testName,\n        regressionType,\n        regressionPercent,\n        currentValue,\n        baselineValue,\n        baseline.confidence,\n      );\n\n      this.regressions.push(regression);\n      this.emit('regression:detected', regression);\n    }\n  }\n\n  /**\n   * 计算回归百分比\n   */\n  private calculateRegression(currentValue: number, baselineValue: number): number {\n    if (baselineValue === 0) return 0;\n    return ((currentValue - baselineValue) / baselineValue) * 100;\n  }\n\n  /**\n   * 创建回归报告\n   */\n  private createRegressionReport(\n    testId: string,\n    testName: string,\n    type: PerformanceRegression['type'],\n    regressionPercent: number,\n    currentValue: number,\n    baselineValue: number,\n    confidence: number,\n  ): PerformanceRegression {\n    const severity = this.calculateSeverity(regressionPercent);\n    const historicalData = this.performanceHistory.get(testId) || [];\n    const trendAnalysis = this.options.enableTrendAnalysis\n      ? this.analyzeTrend(historicalData)\n      : { trend: 'stable' as const, slope: 0, correlation: 0, volatility: 0 };\n\n    const possibleCauses = this.identifyPossibleCauses(type, regressionPercent, trendAnalysis);\n    const recommendations = this.generateRecommendations(type, severity, trendAnalysis);\n\n    return {\n      testId,\n      testName,\n      type,\n      severity,\n      currentValue,\n      baselineValue,\n      regressionPercent,\n      confidence,\n      timestamp: new Date(),\n      details: {\n        historicalData: historicalData.slice(-50), // 最近50个数据点\n        trendAnalysis,\n        possibleCauses,\n        recommendations,\n      },\n    };\n  }\n\n  /**\n   * 计算回归严重程度\n   */\n  private calculateSeverity(regressionPercent: number): PerformanceRegression['severity'] {\n    const absRegression = Math.abs(regressionPercent);\n\n    if (absRegression >= 100) return 'critical';\n    if (absRegression >= 50) return 'major';\n    if (absRegression >= 30) return 'moderate';\n    return 'minor';\n  }\n\n  /**\n   * 分析性能趋势\n   */\n  private analyzeTrend(data: PerformanceDataPoint[]): TrendAnalysis {\n    if (data.length < 5) {\n      return { trend: 'stable', slope: 0, correlation: 0, volatility: 0 };\n    }\n\n    // 使用最近的数据点进行趋势分析\n    const recentData = data.slice(-20);\n    const n = recentData.length;\n\n    // 计算线性回归斜率\n    const xValues = recentData.map((_, i) => i);\n    const yValues = recentData.map(d => d.duration);\n\n    const slope = this.calculateLinearRegressionSlope(xValues, yValues);\n    const correlation = this.calculateCorrelation(xValues, yValues);\n\n    // 计算波动性（标准差）\n    const mean = yValues.reduce((sum, val) => sum + val, 0) / n;\n    const variance = yValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / n;\n    const volatility = Math.sqrt(variance) / mean; // 变异系数\n\n    // 确定趋势\n    let trend: TrendAnalysis['trend'] = 'stable';\n    if (Math.abs(slope) > mean * 0.01) { // 斜率超过均值的1%\n      trend = slope > 0 ? 'degrading' : 'improving';\n    }\n\n    return { trend, slope, correlation, volatility };\n  }\n\n  /**\n   * 计算线性回归斜率\n   */\n  private calculateLinearRegressionSlope(x: number[], y: number[]): number {\n    const n = x.length;\n    const sumX = x.reduce((sum, val) => sum + val, 0);\n    const sumY = y.reduce((sum, val) => sum + val, 0);\n    const sumXY = x.reduce((sum, val, i) => sum + val * y[i], 0);\n    const sumXX = x.reduce((sum, val) => sum + val * val, 0);\n\n    const denominator = n * sumXX - sumX * sumX;\n    if (denominator === 0) return 0;\n\n    return (n * sumXY - sumX * sumY) / denominator;\n  }\n\n  /**\n   * 计算相关系数\n   */\n  private calculateCorrelation(x: number[], y: number[]): number {\n    const n = x.length;\n    const sumX = x.reduce((sum, val) => sum + val, 0);\n    const sumY = y.reduce((sum, val) => sum + val, 0);\n    const sumXY = x.reduce((sum, val, i) => sum + val * y[i], 0);\n    const sumXX = x.reduce((sum, val) => sum + val * val, 0);\n    const sumYY = y.reduce((sum, val) => sum + val * val, 0);\n\n    const numerator = n * sumXY - sumX * sumY;\n    const denominator = Math.sqrt((n * sumXX - sumX * sumX) * (n * sumYY - sumY * sumY));\n\n    if (denominator === 0) return 0;\n    return numerator / denominator;\n  }\n\n  /**\n   * 识别可能的原因\n   */\n  private identifyPossibleCauses(\n    type: PerformanceRegression['type'],\n    regressionPercent: number,\n    trendAnalysis: TrendAnalysis,\n  ): string[] {\n    const causes: string[] = [];\n\n    // 基于回归类型的原因\n    if (type === 'duration' || type === 'both') {\n      causes.push('Algorithm complexity increase');\n      causes.push('Inefficient database queries');\n      causes.push('Network latency issues');\n      causes.push('Resource contention');\n    }\n\n    if (type === 'memory' || type === 'both') {\n      causes.push('Memory leaks');\n      causes.push('Inefficient data structures');\n      causes.push('Large object allocations');\n      causes.push('Garbage collection pressure');\n    }\n\n    // 基于趋势的原因\n    if (trendAnalysis.trend === 'degrading') {\n      causes.push('Gradual performance degradation');\n      causes.push('Accumulating technical debt');\n    }\n\n    if (trendAnalysis.volatility > 0.3) {\n      causes.push('Inconsistent test environment');\n      causes.push('External dependencies variability');\n    }\n\n    // 基于严重程度的原因\n    if (regressionPercent > 50) {\n      causes.push('Major code changes');\n      causes.push('Configuration changes');\n      causes.push('Infrastructure changes');\n    }\n\n    return causes;\n  }\n\n  /**\n   * 生成建议\n   */\n  private generateRecommendations(\n    type: PerformanceRegression['type'],\n    severity: PerformanceRegression['severity'],\n    trendAnalysis: TrendAnalysis,\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // 基于严重程度的建议\n    if (severity === 'critical') {\n      recommendations.push('Immediate investigation required');\n      recommendations.push('Consider rolling back recent changes');\n    } else if (severity === 'major') {\n      recommendations.push('High priority investigation needed');\n      recommendations.push('Review recent code changes');\n    }\n\n    // 基于回归类型的建议\n    if (type === 'duration' || type === 'both') {\n      recommendations.push('Profile code execution to identify bottlenecks');\n      recommendations.push('Review algorithm complexity');\n      recommendations.push('Check for inefficient database queries');\n    }\n\n    if (type === 'memory' || type === 'both') {\n      recommendations.push('Analyze memory usage patterns');\n      recommendations.push('Check for memory leaks');\n      recommendations.push('Review object lifecycle management');\n    }\n\n    // 基于趋势的建议\n    if (trendAnalysis.trend === 'degrading') {\n      recommendations.push('Establish performance monitoring alerts');\n      recommendations.push('Implement regular performance reviews');\n    }\n\n    if (trendAnalysis.volatility > 0.3) {\n      recommendations.push('Stabilize test environment');\n      recommendations.push('Mock external dependencies');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 更新性能基线\n   */\n  private updateBaseline(testId: string, testName: string): void {\n    const history = this.performanceHistory.get(testId);\n    if (!history || history.length < this.options.minSampleSize) {\n      return;\n    }\n\n    const recentData = history.slice(-this.options.minSampleSize);\n    const durations = recentData.map(d => d.duration);\n    const memoryUsages = recentData.map(d => d.memoryUsage);\n\n    const averageDuration = durations.reduce((sum, val) => sum + val, 0) / durations.length;\n    const averageMemoryUsage = memoryUsages.reduce((sum, val) => sum + val, 0) / memoryUsages.length;\n\n    // 计算标准差\n    const durationVariance = durations.reduce((sum, val) => sum + Math.pow(val - averageDuration, 2), 0) / durations.length;\n    const standardDeviation = Math.sqrt(durationVariance);\n\n    // 计算置信度（基于样本数量和变异系数）\n    const coefficientOfVariation = standardDeviation / averageDuration;\n    const confidence = Math.min(0.95, Math.max(0.5, 1 - coefficientOfVariation));\n\n    const baseline: PerformanceBaseline = {\n      testId,\n      testName,\n      averageDuration,\n      averageMemoryUsage,\n      standardDeviation,\n      sampleCount: recentData.length,\n      lastUpdated: new Date(),\n      confidence,\n    };\n\n    this.baselines.set(testId, baseline);\n    this.emit('baseline:updated', baseline);\n  }\n\n  /**\n   * 手动设置基线\n   */\n  setBaseline(testId: string, testName: string, averageDuration: number, averageMemoryUsage: number): void {\n    const baseline: PerformanceBaseline = {\n      testId,\n      testName,\n      averageDuration,\n      averageMemoryUsage,\n      standardDeviation: 0,\n      sampleCount: 1,\n      lastUpdated: new Date(),\n      confidence: 1.0,\n    };\n\n    this.baselines.set(testId, baseline);\n    this.saveBaselines();\n    this.emit('baseline:set', baseline);\n  }\n\n  /**\n   * 获取基线\n   */\n  getBaseline(testId: string): PerformanceBaseline | null {\n    return this.baselines.get(testId) || null;\n  }\n\n  /**\n   * 获取所有基线\n   */\n  getAllBaselines(): PerformanceBaseline[] {\n    return Array.from(this.baselines.values());\n  }\n\n  /**\n   * 获取回归报告\n   */\n  getRegressions(timeWindow?: number): PerformanceRegression[] {\n    if (!timeWindow) {\n      return [...this.regressions];\n    }\n\n    const cutoffTime = new Date(Date.now() - timeWindow);\n    return this.regressions.filter(r => r.timestamp > cutoffTime);\n  }\n\n  /**\n   * 获取性能历史\n   */\n  getPerformanceHistory(testId: string): PerformanceDataPoint[] {\n    return this.performanceHistory.get(testId) || [];\n  }\n\n  /**\n   * 加载基线数据\n   */\n  private loadBaselines(): void {\n    try {\n      if (fs.existsSync(this.options.baselineFile)) {\n        const data = fs.readFileSync(this.options.baselineFile, 'utf8');\n        const baselines = JSON.parse(data);\n\n        for (const baseline of baselines) {\n          baseline.lastUpdated = new Date(baseline.lastUpdated);\n          this.baselines.set(baseline.testId, baseline);\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load performance baselines:', error.message);\n    }\n  }\n\n  /**\n   * 保存基线数据\n   */\n  private saveBaselines(): void {\n    try {\n      const dir = path.dirname(this.options.baselineFile);\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n      }\n\n      const baselines = Array.from(this.baselines.values());\n      fs.writeFileSync(this.options.baselineFile, JSON.stringify(baselines, null, 2));\n    } catch (error) {\n      console.warn('Failed to save performance baselines:', error.message);\n    }\n  }\n\n  /**\n   * 重置检测器\n   */\n  reset(): void {\n    this.baselines.clear();\n    this.performanceHistory.clear();\n    this.regressions = [];\n    this.emit('detector:reset');\n  }\n\n  /**\n   * 导出数据\n   */\n  exportData(): {\n    baselines: PerformanceBaseline[];\n    regressions: PerformanceRegression[];\n    historySize: number;\n  } {\n    return {\n      baselines: this.getAllBaselines(),\n      regressions: this.getRegressions(),\n      historySize: Array.from(this.performanceHistory.values()).reduce((sum, history) => sum + history.length, 0),\n    };\n  }\n\n  /**\n   * 销毁检测器\n   */\n  destroy(): void {\n    this.saveBaselines();\n    this.reset();\n    this.removeAllListeners();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/monitoring/RealTimePerformanceMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/monitoring/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/parallel/ErrorIsolation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/parallel/LoadBalancer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/parallel/ParallelTestExecutor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/parallel/ResultAggregator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/parallel/TestWorker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/parallel/TestWorker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/parallel/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/performance/PerformanceMonitor.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 126. Maximum allowed is 120.","line":321,"column":1,"nodeType":"Program","messageId":"max","endLine":321,"endColumn":127}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test Performance Monitoring Tools\n *\n * This module provides tools for monitoring and measuring performance\n * during test execution, including execution time, memory usage, and\n * performance regression detection.\n */\n\nimport { TestError, TestErrorType } from '../errors/TestError';\n\nexport interface PerformanceMetrics {\n  executionTime: number;\n  memoryUsage: {\n    heapUsed: number;\n    heapTotal: number;\n    external: number;\n    rss: number;\n  };\n  cpuUsage?: {\n    user: number;\n    system: number;\n  };\n  timestamp: Date;\n}\n\nexport interface PerformanceBenchmark {\n  name: string;\n  baseline: PerformanceMetrics;\n  threshold: {\n    executionTime?: number; // percentage increase allowed\n    memoryUsage?: number;   // percentage increase allowed\n  };\n}\n\nexport interface PerformanceReport {\n  testName: string;\n  metrics: PerformanceMetrics;\n  benchmark?: PerformanceBenchmark;\n  regression?: {\n    type: 'execution_time' | 'memory_usage';\n    severity: 'warning' | 'critical';\n    message: string;\n    actualIncrease: number;\n    allowedIncrease: number;\n  };\n}\n\n/**\n * Performance monitoring and measurement tools for tests\n */\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private benchmarks: Map<string, PerformanceBenchmark> = new Map();\n  private measurements: Map<string, PerformanceMetrics[]> = new Map();\n  private activeTimers: Map<string, { startTime: number; startMemory: NodeJS.MemoryUsage }> = new Map();\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  /**\n   * Start measuring performance for a test\n   */\n  startMeasurement(testName: string): void {\n    const startTime = performance.now();\n    const startMemory = process.memoryUsage();\n\n    this.activeTimers.set(testName, { startTime, startMemory });\n  }\n\n  /**\n   * Stop measuring performance and return metrics\n   */\n  stopMeasurement(testName: string): PerformanceMetrics {\n    const timer = this.activeTimers.get(testName);\n    if (!timer) {\n      throw new TestError(\n        TestErrorType.ASSERTION_FAILED,\n        `No active measurement found for test: ${testName}`,\n      );\n    }\n\n    const endTime = performance.now();\n    const endMemory = process.memoryUsage();\n    const executionTime = endTime - timer.startTime;\n\n    const metrics: PerformanceMetrics = {\n      executionTime,\n      memoryUsage: {\n        heapUsed: endMemory.heapUsed - timer.startMemory.heapUsed,\n        heapTotal: endMemory.heapTotal - timer.startMemory.heapTotal,\n        external: endMemory.external - timer.startMemory.external,\n        rss: endMemory.rss - timer.startMemory.rss,\n      },\n      timestamp: new Date(),\n    };\n\n    // Store measurement\n    const testMeasurements = this.measurements.get(testName) || [];\n    testMeasurements.push(metrics);\n    this.measurements.set(testName, testMeasurements);\n\n    this.activeTimers.delete(testName);\n    return metrics;\n  }\n\n  /**\n   * Measure the performance of a function\n   */\n  async measureFunction<T>(\n    testName: string,\n    fn: () => Promise<T> | T,\n  ): Promise<{ result: T; metrics: PerformanceMetrics }> {\n    this.startMeasurement(testName);\n\n    try {\n      const result = await fn();\n      const metrics = this.stopMeasurement(testName);\n      return { result, metrics };\n    } catch (error) {\n      // Clean up timer if function throws\n      this.activeTimers.delete(testName);\n      throw error;\n    }\n  }\n\n  /**\n   * Set a performance benchmark for a test\n   */\n  setBenchmark(benchmark: PerformanceBenchmark): void {\n    this.benchmarks.set(benchmark.name, benchmark);\n  }\n\n  /**\n   * Get performance benchmark for a test\n   */\n  getBenchmark(testName: string): PerformanceBenchmark | undefined {\n    return this.benchmarks.get(testName);\n  }\n\n  /**\n   * Validate performance against benchmark\n   */\n  validatePerformance(testName: string, metrics: PerformanceMetrics): PerformanceReport {\n    const benchmark = this.benchmarks.get(testName);\n    const report: PerformanceReport = {\n      testName,\n      metrics,\n      benchmark,\n    };\n\n    if (benchmark) {\n      const regression = this.detectRegression(metrics, benchmark);\n      if (regression) {\n        report.regression = regression;\n      }\n    }\n\n    return report;\n  }\n\n  /**\n   * Assert that performance is within acceptable limits\n   */\n  assertPerformanceWithinLimits(\n    testName: string,\n    metrics: PerformanceMetrics,\n    limits: {\n      maxExecutionTime?: number;\n      maxMemoryUsage?: number;\n    },\n  ): void {\n    if (limits.maxExecutionTime && metrics.executionTime > limits.maxExecutionTime) {\n      throw new TestError(\n        TestErrorType.ASSERTION_FAILED,\n        `Test \"${testName}\" execution time ${metrics.executionTime}ms exceeds limit of ${limits.maxExecutionTime}ms`,\n      );\n    }\n\n    if (limits.maxMemoryUsage && metrics.memoryUsage.heapUsed > limits.maxMemoryUsage) {\n      throw new TestError(\n        TestErrorType.ASSERTION_FAILED,\n        `Test \"${testName}\" memory usage ${metrics.memoryUsage.heapUsed} bytes exceeds limit of ${limits.maxMemoryUsage} bytes`,\n      );\n    }\n  }\n\n  /**\n   * Get performance statistics for a test\n   */\n  getPerformanceStats(testName: string): {\n    count: number;\n    average: PerformanceMetrics;\n    min: PerformanceMetrics;\n    max: PerformanceMetrics;\n    trend: 'improving' | 'degrading' | 'stable';\n  } | null {\n    const measurements = this.measurements.get(testName);\n    if (!measurements || measurements.length === 0) {\n      return null;\n    }\n\n    const count = measurements.length;\n    const executionTimes = measurements.map(m => m.executionTime);\n    const memoryUsages = measurements.map(m => m.memoryUsage.heapUsed);\n\n    const average: PerformanceMetrics = {\n      executionTime: executionTimes.reduce((a, b) => a + b, 0) / count,\n      memoryUsage: {\n        heapUsed: memoryUsages.reduce((a, b) => a + b, 0) / count,\n        heapTotal: measurements.reduce((a, b) => a + b.memoryUsage.heapTotal, 0) / count,\n        external: measurements.reduce((a, b) => a + b.memoryUsage.external, 0) / count,\n        rss: measurements.reduce((a, b) => a + b.memoryUsage.rss, 0) / count,\n      },\n      timestamp: new Date(),\n    };\n\n    const minExecTime = Math.min(...executionTimes);\n    const maxExecTime = Math.max(...executionTimes);\n    const minMemory = Math.min(...memoryUsages);\n    const maxMemory = Math.max(...memoryUsages);\n\n    const min: PerformanceMetrics = {\n      executionTime: minExecTime,\n      memoryUsage: {\n        heapUsed: minMemory,\n        heapTotal: 0,\n        external: 0,\n        rss: 0,\n      },\n      timestamp: new Date(),\n    };\n\n    const max: PerformanceMetrics = {\n      executionTime: maxExecTime,\n      memoryUsage: {\n        heapUsed: maxMemory,\n        heapTotal: 0,\n        external: 0,\n        rss: 0,\n      },\n      timestamp: new Date(),\n    };\n\n    const trend = this.calculateTrend(measurements);\n\n    return { count, average, min, max, trend };\n  }\n\n  /**\n   * Clear all measurements for a test\n   */\n  clearMeasurements(testName?: string): void {\n    if (testName) {\n      this.measurements.delete(testName);\n    } else {\n      this.measurements.clear();\n    }\n  }\n\n  /**\n   * Export performance data\n   */\n  exportData(): {\n    benchmarks: Record<string, PerformanceBenchmark>;\n    measurements: Record<string, PerformanceMetrics[]>;\n  } {\n    return {\n      benchmarks: Object.fromEntries(this.benchmarks),\n      measurements: Object.fromEntries(this.measurements),\n    };\n  }\n\n  /**\n   * Import performance data\n   */\n  importData(data: {\n    benchmarks?: Record<string, PerformanceBenchmark>;\n    measurements?: Record<string, PerformanceMetrics[]>;\n  }): void {\n    if (data.benchmarks) {\n      for (const [name, benchmark] of Object.entries(data.benchmarks)) {\n        this.benchmarks.set(name, benchmark);\n      }\n    }\n\n    if (data.measurements) {\n      for (const [name, measurements] of Object.entries(data.measurements)) {\n        this.measurements.set(name, measurements);\n      }\n    }\n  }\n\n  // Private helper methods\n  private detectRegression(\n    metrics: PerformanceMetrics,\n    benchmark: PerformanceBenchmark,\n  ): PerformanceReport['regression'] | null {\n    const { threshold } = benchmark;\n    const baseline = benchmark.baseline;\n\n    // Check execution time regression\n    if (threshold.executionTime) {\n      const increase = ((metrics.executionTime - baseline.executionTime) / baseline.executionTime) * 100;\n      if (increase > threshold.executionTime) {\n        return {\n          type: 'execution_time',\n          severity: increase > threshold.executionTime * 2 ? 'critical' : 'warning',\n          message: `Execution time increased by ${increase.toFixed(2)}%`,\n          actualIncrease: increase,\n          allowedIncrease: threshold.executionTime,\n        };\n      }\n    }\n\n    // Check memory usage regression\n    if (threshold.memoryUsage) {\n      const increase = ((metrics.memoryUsage.heapUsed - baseline.memoryUsage.heapUsed) / baseline.memoryUsage.heapUsed) * 100;\n      if (increase > threshold.memoryUsage) {\n        return {\n          type: 'memory_usage',\n          severity: increase > threshold.memoryUsage * 2 ? 'critical' : 'warning',\n          message: `Memory usage increased by ${increase.toFixed(2)}%`,\n          actualIncrease: increase,\n          allowedIncrease: threshold.memoryUsage,\n        };\n      }\n    }\n\n    return null;\n  }\n\n  private calculateTrend(measurements: PerformanceMetrics[]): 'improving' | 'degrading' | 'stable' {\n    if (measurements.length < 3) return 'stable';\n\n    const recent = measurements.slice(-5); // Last 5 measurements\n    const older = measurements.slice(-10, -5); // Previous 5 measurements\n\n    if (older.length === 0) return 'stable';\n\n    const recentAvg = recent.reduce((sum, m) => sum + m.executionTime, 0) / recent.length;\n    const olderAvg = older.reduce((sum, m) => sum + m.executionTime, 0) / older.length;\n\n    const change = ((recentAvg - olderAvg) / olderAvg) * 100;\n\n    if (change < -5) return 'improving';\n    if (change > 5) return 'degrading';\n    return 'stable';\n  }\n}\n\n/**\n * Decorator for measuring function performance\n */\nexport function measurePerformance(testName?: string) {\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    const monitor = PerformanceMonitor.getInstance();\n\n    descriptor.value = async function (...args: any[]) {\n      const name = testName || `${target.constructor.name}.${propertyName}`;\n      const { result } = await monitor.measureFunction(name, () => method.apply(this, args));\n      return result;\n    };\n  };\n}\n\n/**\n * Helper function to create performance benchmarks\n */\nexport function createPerformanceBenchmark(\n  name: string,\n  baselineMetrics: PerformanceMetrics,\n  thresholds: {\n    executionTime?: number;\n    memoryUsage?: number;\n  },\n): PerformanceBenchmark {\n  return {\n    name,\n    baseline: baselineMetrics,\n    threshold: thresholds,\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/privacy/AccessPermissionTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/privacy/DataDeletionTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/privacy/DataMaskingTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/privacy/PrivacyComplianceChecker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/privacy/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/quality-gates/ComplianceChecker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/quality-gates/CoverageChecker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/quality-gates/PerformanceChecker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/quality-gates/QualityGateSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/quality-gates/SecurityChecker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/quality-gates/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/reporting/TestReportGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/reporting/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/security/AuthorizationTester.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 127. Maximum allowed is 120.","line":103,"column":1,"nodeType":"Program","messageId":"max","endLine":103,"endColumn":128},{"ruleId":"max-len","severity":1,"message":"This line has a length of 137. Maximum allowed is 120.","line":416,"column":1,"nodeType":"Program","messageId":"max","endLine":416,"endColumn":138}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Authorization Security Tester\n *\n * 专门用于测试认证授权安全边界的测试器\n * 包括权限提升、访问控制绕过、会话管理等测试\n */\n\nexport interface AuthorizationConfig {\n  enableRoleBasedTests: boolean;\n  enableResourceAccessTests: boolean;\n  enablePrivilegeEscalationTests: boolean;\n  enableSessionTests: boolean;\n  enableTokenTests: boolean;\n  customRoles: Role[];\n  customResources: Resource[];\n  testScenarios: AuthTestScenario[];\n}\n\nexport interface Role {\n  name: string;\n  permissions: string[];\n  level: number;\n  description: string;\n}\n\nexport interface Resource {\n  id: string;\n  type: string;\n  owner?: string;\n  visibility: 'public' | 'private' | 'restricted';\n  requiredPermissions: string[];\n  requiredRoles: string[];\n}\n\nexport interface AuthTestScenario {\n  name: string;\n  description: string;\n  user: TestUser;\n  resource: Resource;\n  action: string;\n  expectedResult: 'allow' | 'deny';\n  testType: 'role_based' | 'resource_access' | 'privilege_escalation' | 'session' | 'token';\n}\n\nexport interface TestUser {\n  id: string;\n  username: string;\n  roles: string[];\n  permissions: string[];\n  sessionId?: string;\n  token?: string;\n  attributes?: Record<string, any>;\n}\n\nexport interface AuthorizationTestResult {\n  scenario: AuthTestScenario;\n  actualResult: 'allow' | 'deny' | 'error';\n  passed: boolean;\n  executionTime: number;\n  errorMessage?: string;\n  securityRisk: 'none' | 'low' | 'medium' | 'high' | 'critical';\n  details: AuthTestDetails;\n}\n\nexport interface AuthTestDetails {\n  requestedAction: string;\n  userContext: TestUser;\n  resourceContext: Resource;\n  authorizationDecision: string;\n  reasonCode?: string;\n  additionalInfo?: Record<string, any>;\n}\n\nexport class AuthorizationTester {\n  private config: AuthorizationConfig;\n  private defaultScenarios: AuthTestScenario[];\n\n  constructor(config: AuthorizationConfig) {\n    this.config = config;\n    this.defaultScenarios = this.generateDefaultScenarios();\n  }\n\n  /**\n   * 运行完整的授权测试套件\n   */\n  async runAuthorizationTests(authService: AuthorizationService): Promise<AuthorizationTestResult[]> {\n    const results: AuthorizationTestResult[] = [];\n    const allScenarios = [...this.defaultScenarios, ...this.config.testScenarios];\n\n    for (const scenario of allScenarios) {\n      if (this.shouldRunScenario(scenario)) {\n        const result = await this.testScenario(scenario, authService);\n        results.push(result);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * 测试单个授权场景\n   */\n  private async testScenario(scenario: AuthTestScenario, authService: AuthorizationService): Promise<AuthorizationTestResult> {\n    const startTime = Date.now();\n\n    try {\n      const authResult = await authService.authorize(scenario.user, scenario.resource, scenario.action);\n      const executionTime = Date.now() - startTime;\n\n      const actualResult = authResult.allowed ? 'allow' : 'deny';\n      const passed = actualResult === scenario.expectedResult;\n      const securityRisk = this.assessSecurityRisk(scenario, actualResult, passed);\n\n      return {\n        scenario,\n        actualResult,\n        passed,\n        executionTime,\n        securityRisk,\n        details: {\n          requestedAction: scenario.action,\n          userContext: scenario.user,\n          resourceContext: scenario.resource,\n          authorizationDecision: authResult.decision,\n          reasonCode: authResult.reasonCode,\n          additionalInfo: authResult.additionalInfo,\n        },\n      };\n    } catch (error) {\n      return {\n        scenario,\n        actualResult: 'error',\n        passed: false,\n        executionTime: Date.now() - startTime,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        securityRisk: 'high',\n        details: {\n          requestedAction: scenario.action,\n          userContext: scenario.user,\n          resourceContext: scenario.resource,\n          authorizationDecision: 'error',\n        },\n      };\n    }\n  }\n\n  /**\n   * 生成默认的测试场景\n   */\n  private generateDefaultScenarios(): AuthTestScenario[] {\n    const scenarios: AuthTestScenario[] = [];\n\n    // 基于角色的访问控制测试\n    if (this.config.enableRoleBasedTests) {\n      scenarios.push(\n        {\n          name: 'Admin Full Access',\n          description: '管理员应该能够访问所有资源',\n          user: { id: 'admin1', username: 'admin', roles: ['admin'], permissions: ['*'] },\n          resource: { id: 'res1', type: 'document', visibility: 'private', requiredPermissions: ['read'], requiredRoles: ['user'] },\n          action: 'read',\n          expectedResult: 'allow',\n          testType: 'role_based',\n        },\n        {\n          name: 'User Limited Access',\n          description: '普通用户只能访问自己的资源',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read', 'write'] },\n          resource: { id: 'res1', type: 'document', visibility: 'private', owner: 'user1', requiredPermissions: ['read'], requiredRoles: ['user'] },\n          action: 'read',\n          expectedResult: 'allow',\n          testType: 'role_based',\n        },\n        {\n          name: 'Unauthorized User Access',\n          description: '未授权用户不应该能够访问私有资源',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read'] },\n          resource: { id: 'res2', type: 'document', visibility: 'private', owner: 'user2', requiredPermissions: ['read'], requiredRoles: ['user'] },\n          action: 'read',\n          expectedResult: 'deny',\n          testType: 'role_based',\n        },\n      );\n    }\n\n    // 资源访问控制测试\n    if (this.config.enableResourceAccessTests) {\n      scenarios.push(\n        {\n          name: 'Public Resource Access',\n          description: '任何用户都应该能够访问公共资源',\n          user: { id: 'guest1', username: 'guest', roles: ['guest'], permissions: [] },\n          resource: { id: 'pub1', type: 'document', visibility: 'public', requiredPermissions: [], requiredRoles: [] },\n          action: 'read',\n          expectedResult: 'allow',\n          testType: 'resource_access',\n        },\n        {\n          name: 'Restricted Resource Access',\n          description: '只有特定角色才能访问受限资源',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read'] },\n          resource: { id: 'rest1', type: 'document', visibility: 'restricted', requiredPermissions: ['read'], requiredRoles: ['premium'] },\n          action: 'read',\n          expectedResult: 'deny',\n          testType: 'resource_access',\n        },\n        {\n          name: 'Owner Resource Access',\n          description: '资源所有者应该能够访问自己的私有资源',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read', 'write'] },\n          resource: { id: 'priv1', type: 'document', visibility: 'private', owner: 'user1', requiredPermissions: ['read'], requiredRoles: ['user'] },\n          action: 'write',\n          expectedResult: 'allow',\n          testType: 'resource_access',\n        },\n      );\n    }\n\n    // 权限提升测试\n    if (this.config.enablePrivilegeEscalationTests) {\n      scenarios.push(\n        {\n          name: 'Horizontal Privilege Escalation',\n          description: '用户不应该能够访问其他用户的私有资源',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read', 'write'] },\n          resource: { id: 'priv2', type: 'document', visibility: 'private', owner: 'user2', requiredPermissions: ['read'], requiredRoles: ['user'] },\n          action: 'read',\n          expectedResult: 'deny',\n          testType: 'privilege_escalation',\n        },\n        {\n          name: 'Vertical Privilege Escalation',\n          description: '普通用户不应该能够执行管理员操作',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read', 'write'] },\n          resource: { id: 'admin1', type: 'system', visibility: 'restricted', requiredPermissions: ['admin'], requiredRoles: ['admin'] },\n          action: 'delete',\n          expectedResult: 'deny',\n          testType: 'privilege_escalation',\n        },\n        {\n          name: 'Role Manipulation Attempt',\n          description: '用户不应该能够修改自己的角色',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read', 'write'] },\n          resource: { id: 'role1', type: 'role', visibility: 'restricted', requiredPermissions: ['admin'], requiredRoles: ['admin'] },\n          action: 'update',\n          expectedResult: 'deny',\n          testType: 'privilege_escalation',\n        },\n      );\n    }\n\n    // 会话管理测试\n    if (this.config.enableSessionTests) {\n      scenarios.push(\n        {\n          name: 'Valid Session Access',\n          description: '有效会话应该允许访问',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read'], sessionId: 'valid_session_123' },\n          resource: { id: 'res1', type: 'document', visibility: 'private', owner: 'user1', requiredPermissions: ['read'], requiredRoles: ['user'] },\n          action: 'read',\n          expectedResult: 'allow',\n          testType: 'session',\n        },\n        {\n          name: 'Invalid Session Access',\n          description: '无效会话应该拒绝访问',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read'], sessionId: 'invalid_session_456' },\n          resource: { id: 'res1', type: 'document', visibility: 'private', owner: 'user1', requiredPermissions: ['read'], requiredRoles: ['user'] },\n          action: 'read',\n          expectedResult: 'deny',\n          testType: 'session',\n        },\n        {\n          name: 'Expired Session Access',\n          description: '过期会话应该拒绝访问',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read'], sessionId: 'expired_session_789' },\n          resource: { id: 'res1', type: 'document', visibility: 'private', owner: 'user1', requiredPermissions: ['read'], requiredRoles: ['user'] },\n          action: 'read',\n          expectedResult: 'deny',\n          testType: 'session',\n        },\n      );\n    }\n\n    // Token验证测试\n    if (this.config.enableTokenTests) {\n      scenarios.push(\n        {\n          name: 'Valid Token Access',\n          description: '有效token应该允许访问',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read'], token: 'valid_jwt_token' },\n          resource: { id: 'api1', type: 'api', visibility: 'restricted', requiredPermissions: ['api_access'], requiredRoles: ['user'] },\n          action: 'call',\n          expectedResult: 'allow',\n          testType: 'token',\n        },\n        {\n          name: 'Invalid Token Access',\n          description: '无效token应该拒绝访问',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read'], token: 'invalid_jwt_token' },\n          resource: { id: 'api1', type: 'api', visibility: 'restricted', requiredPermissions: ['api_access'], requiredRoles: ['user'] },\n          action: 'call',\n          expectedResult: 'deny',\n          testType: 'token',\n        },\n        {\n          name: 'Tampered Token Access',\n          description: '被篡改的token应该拒绝访问',\n          user: { id: 'user1', username: 'user1', roles: ['user'], permissions: ['read'], token: 'tampered_jwt_token' },\n          resource: { id: 'api1', type: 'api', visibility: 'restricted', requiredPermissions: ['api_access'], requiredRoles: ['user'] },\n          action: 'call',\n          expectedResult: 'deny',\n          testType: 'token',\n        },\n      );\n    }\n\n    return scenarios;\n  }\n\n  /**\n   * 判断是否应该运行特定的场景\n   */\n  private shouldRunScenario(scenario: AuthTestScenario): boolean {\n    switch (scenario.testType) {\n      case 'role_based':\n        return this.config.enableRoleBasedTests;\n      case 'resource_access':\n        return this.config.enableResourceAccessTests;\n      case 'privilege_escalation':\n        return this.config.enablePrivilegeEscalationTests;\n      case 'session':\n        return this.config.enableSessionTests;\n      case 'token':\n        return this.config.enableTokenTests;\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * 评估安全风险级别\n   */\n  private assessSecurityRisk(scenario: AuthTestScenario, actualResult: string, passed: boolean): 'none' | 'low' | 'medium' | 'high' | 'critical' {\n    if (passed) {\n      return 'none';\n    }\n\n    // 如果测试失败，根据场景类型和预期结果评估风险\n    if (scenario.expectedResult === 'deny' && actualResult === 'allow') {\n      // 应该拒绝但实际允许 - 这是安全漏洞\n      switch (scenario.testType) {\n        case 'privilege_escalation':\n          return 'critical';\n        case 'resource_access':\n          return scenario.resource.visibility === 'private' ? 'high' : 'medium';\n        case 'role_based':\n          return 'high';\n        case 'session':\n        case 'token':\n          return 'medium';\n        default:\n          return 'medium';\n      }\n    } else if (scenario.expectedResult === 'allow' && actualResult === 'deny') {\n      // 应该允许但实际拒绝 - 这是功能问题，安全风险较低\n      return 'low';\n    }\n\n    return 'medium';\n  }\n\n  /**\n   * 生成授权测试报告\n   */\n  generateAuthorizationReport(results: AuthorizationTestResult[]): AuthorizationReport {\n    const totalTests = results.length;\n    const passedTests = results.filter(r => r.passed).length;\n    const failedTests = results.filter(r => !r.passed).length;\n\n    const criticalRisks = results.filter(r => r.securityRisk === 'critical').length;\n    const highRisks = results.filter(r => r.securityRisk === 'high').length;\n    const mediumRisks = results.filter(r => r.securityRisk === 'medium').length;\n    const lowRisks = results.filter(r => r.securityRisk === 'low').length;\n\n    const averageExecutionTime = results.reduce((sum, r) => sum + r.executionTime, 0) / totalTests;\n\n    const testTypeResults = this.groupResultsByTestType(results);\n\n    return {\n      summary: {\n        totalTests,\n        passedTests,\n        failedTests,\n        passRate: (passedTests / totalTests) * 100,\n        averageExecutionTime,\n      },\n      riskDistribution: {\n        critical: criticalRisks,\n        high: highRisks,\n        medium: mediumRisks,\n        low: lowRisks,\n        none: totalTests - criticalRisks - highRisks - mediumRisks - lowRisks,\n      },\n      testTypeResults,\n      testResults: results,\n      securityIssues: this.identifySecurityIssues(results),\n      recommendations: this.generateRecommendations(results),\n      timestamp: new Date(),\n    };\n  }\n\n  /**\n   * 按测试类型分组结果\n   */\n  private groupResultsByTestType(results: AuthorizationTestResult[]): Record<string, { passed: number; failed: number; total: number }> {\n    const grouped: Record<string, { passed: number; failed: number; total: number }> = {};\n\n    for (const result of results) {\n      const testType = result.scenario.testType;\n      if (!grouped[testType]) {\n        grouped[testType] = { passed: 0, failed: 0, total: 0 };\n      }\n\n      grouped[testType].total++;\n      if (result.passed) {\n        grouped[testType].passed++;\n      } else {\n        grouped[testType].failed++;\n      }\n    }\n\n    return grouped;\n  }\n\n  /**\n   * 识别安全问题\n   */\n  private identifySecurityIssues(results: AuthorizationTestResult[]): SecurityIssue[] {\n    const issues: SecurityIssue[] = [];\n    const failedResults = results.filter(r => !r.passed && r.securityRisk !== 'none');\n\n    for (const result of failedResults) {\n      issues.push({\n        type: result.scenario.testType,\n        severity: result.securityRisk,\n        description: `${result.scenario.name}: ${result.scenario.description}`,\n        impact: this.getImpactForTestType(result.scenario.testType),\n        recommendation: this.getRecommendationForTestType(result.scenario.testType),\n        affectedResource: result.scenario.resource.id,\n        testScenario: result.scenario.name,\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * 生成改进建议\n   */\n  private generateRecommendations(results: AuthorizationTestResult[]): string[] {\n    const recommendations: string[] = [];\n    const failedResults = results.filter(r => !r.passed);\n\n    if (failedResults.some(r => r.scenario.testType === 'privilege_escalation')) {\n      recommendations.push('加强权限提升防护，实施最小权限原则');\n    }\n\n    if (failedResults.some(r => r.scenario.testType === 'role_based')) {\n      recommendations.push('审查基于角色的访问控制实现');\n    }\n\n    if (failedResults.some(r => r.scenario.testType === 'resource_access')) {\n      recommendations.push('完善资源访问控制策略');\n    }\n\n    if (failedResults.some(r => r.scenario.testType === 'session')) {\n      recommendations.push('加强会话管理和验证机制');\n    }\n\n    if (failedResults.some(r => r.scenario.testType === 'token')) {\n      recommendations.push('改进token验证和安全处理');\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('授权安全性良好，继续保持当前的安全措施');\n    }\n\n    return recommendations;\n  }\n\n  private getImpactForTestType(testType: string): string {\n    const impacts = {\n      privilege_escalation: '权限提升可能导致系统完全被攻破',\n      role_based: '角色控制失效可能导致未授权访问',\n      resource_access: '资源访问控制失效可能导致数据泄露',\n      session: '会话管理问题可能导致会话劫持',\n      token: 'Token验证问题可能导致身份伪造',\n    };\n    return impacts[testType as keyof typeof impacts] || '未知安全影响';\n  }\n\n  private getRecommendationForTestType(testType: string): string {\n    const recommendations = {\n      privilege_escalation: '实施严格的权限检查和最小权限原则',\n      role_based: '审查和加强基于角色的访问控制',\n      resource_access: '完善资源级别的访问控制',\n      session: '加强会话管理和超时控制',\n      token: '改进token生成、验证和撤销机制',\n    };\n    return recommendations[testType as keyof typeof recommendations] || '审查相关安全实现';\n  }\n}\n\n// 授权服务接口\nexport interface AuthorizationService {\n  authorize(user: TestUser, resource: Resource, action: string): Promise<AuthorizationResult>;\n}\n\nexport interface AuthorizationResult {\n  allowed: boolean;\n  decision: string;\n  reasonCode?: string;\n  additionalInfo?: Record<string, any>;\n}\n\nexport interface SecurityIssue {\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  impact: string;\n  recommendation: string;\n  affectedResource: string;\n  testScenario: string;\n}\n\nexport interface AuthorizationReport {\n  summary: {\n    totalTests: number;\n    passedTests: number;\n    failedTests: number;\n    passRate: number;\n    averageExecutionTime: number;\n  };\n  riskDistribution: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n    none: number;\n  };\n  testTypeResults: Record<string, { passed: number; failed: number; total: number }>;\n  testResults: AuthorizationTestResult[];\n  securityIssues: SecurityIssue[];\n  recommendations: string[];\n  timestamp: Date;\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/security/EncryptionValidator.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 155. Maximum allowed is 120.","line":152,"column":1,"nodeType":"Program","messageId":"max","endLine":152,"endColumn":156},{"ruleId":"max-len","severity":1,"message":"This line has a length of 127. Maximum allowed is 120.","line":585,"column":1,"nodeType":"Program","messageId":"max","endLine":585,"endColumn":128},{"ruleId":"max-len","severity":1,"message":"This line has a length of 167. Maximum allowed is 120.","line":698,"column":1,"nodeType":"Program","messageId":"max","endLine":698,"endColumn":168}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Encryption Validation Tester\n *\n * 专门用于验证数据加密正确性的测试器\n * 包括加密算法测试、密钥管理测试、数据完整性验证等\n */\nimport crypto from 'crypto';\n\nexport interface EncryptionConfig {\n  enableAlgorithmTests: boolean;\n  enableKeyManagementTests: boolean;\n  enableDataIntegrityTests: boolean;\n  enablePerformanceTests: boolean;\n  supportedAlgorithms: EncryptionAlgorithm[];\n  keyStrengthRequirements: KeyStrengthConfig;\n  testDataSets: TestDataSet[];\n}\n\nexport interface EncryptionAlgorithm {\n  name: string;\n  type: 'symmetric' | 'asymmetric' | 'hash';\n  keySize: number;\n  blockSize?: number;\n  mode?: string;\n  padding?: string;\n  description: string;\n}\n\nexport interface KeyStrengthConfig {\n  minimumSymmetricKeySize: number;\n  minimumAsymmetricKeySize: number;\n  requiredRandomness: number;\n  keyRotationInterval: number;\n}\n\nexport interface TestDataSet {\n  name: string;\n  data: string;\n  size: number;\n  type: 'text' | 'binary' | 'json' | 'xml';\n  sensitivityLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface EncryptionTestResult {\n  testName: string;\n  algorithm: EncryptionAlgorithm;\n  testType: 'algorithm' | 'key_management' | 'data_integrity' | 'performance';\n  status: 'passed' | 'failed' | 'warning' | 'error';\n  executionTime: number;\n  details: EncryptionTestDetails;\n  securityLevel: 'weak' | 'acceptable' | 'strong' | 'excellent';\n  issues: EncryptionIssue[];\n}\n\nexport interface EncryptionTestDetails {\n  originalData: string;\n  encryptedData?: string;\n  decryptedData?: string;\n  keyInfo: KeyInfo;\n  performanceMetrics?: PerformanceMetrics;\n  integrityCheck?: IntegrityCheckResult;\n}\n\nexport interface KeyInfo {\n  algorithm: string;\n  keySize: number;\n  keyStrength: number;\n  generationMethod: string;\n  isSecure: boolean;\n}\n\nexport interface PerformanceMetrics {\n  encryptionTime: number;\n  decryptionTime: number;\n  throughput: number;\n  memoryUsage: number;\n}\n\nexport interface IntegrityCheckResult {\n  hashMatch: boolean;\n  dataCorruption: boolean;\n  tamperingDetected: boolean;\n  checksumValid: boolean;\n}\n\nexport interface EncryptionIssue {\n  type: 'weak_key' | 'weak_algorithm' | 'poor_performance' | 'integrity_failure' | 'implementation_error';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  recommendation: string;\n}\n\nexport class EncryptionValidator {\n  private config: EncryptionConfig;\n\n  constructor(config: EncryptionConfig) {\n    this.config = config;\n  }\n\n  /**\n   * 运行完整的加密验证测试套件\n   */\n  async runEncryptionTests(encryptionService: EncryptionService): Promise<EncryptionTestResult[]> {\n    const results: EncryptionTestResult[] = [];\n\n    // 算法测试\n    if (this.config.enableAlgorithmTests) {\n      const algorithmResults = await this.runAlgorithmTests(encryptionService);\n      results.push(...algorithmResults);\n    }\n\n    // 密钥管理测试\n    if (this.config.enableKeyManagementTests) {\n      const keyManagementResults = await this.runKeyManagementTests(encryptionService);\n      results.push(...keyManagementResults);\n    }\n\n    // 数据完整性测试\n    if (this.config.enableDataIntegrityTests) {\n      const integrityResults = await this.runDataIntegrityTests(encryptionService);\n      results.push(...integrityResults);\n    }\n\n    // 性能测试\n    if (this.config.enablePerformanceTests) {\n      const performanceResults = await this.runPerformanceTests(encryptionService);\n      results.push(...performanceResults);\n    }\n\n    return results;\n  }\n\n  /**\n   * 运行加密算法测试\n   */\n  private async runAlgorithmTests(encryptionService: EncryptionService): Promise<EncryptionTestResult[]> {\n    const results: EncryptionTestResult[] = [];\n\n    for (const algorithm of this.config.supportedAlgorithms) {\n      for (const testData of this.config.testDataSets) {\n        const result = await this.testAlgorithm(algorithm, testData, encryptionService);\n        results.push(result);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * 测试单个加密算法\n   */\n  private async testAlgorithm(algorithm: EncryptionAlgorithm, testData: TestDataSet, encryptionService: EncryptionService): Promise<EncryptionTestResult> {\n    const startTime = Date.now();\n    const issues: EncryptionIssue[] = [];\n\n    try {\n      // 生成密钥\n      const keyInfo = await this.generateTestKey(algorithm);\n\n      // 加密数据\n      const encryptedData = await encryptionService.encrypt(testData.data, algorithm.name, keyInfo);\n\n      // 解密数据\n      const decryptedData = await encryptionService.decrypt(encryptedData, algorithm.name, keyInfo);\n\n      // 验证结果\n      const encryptionWorked = encryptedData !== testData.data;\n      const decryptionWorked = decryptedData === testData.data;\n\n      const executionTime = Date.now() - startTime;\n\n      // 检查算法强度\n      const securityLevel = this.assessAlgorithmSecurity(algorithm);\n      if (securityLevel === 'weak') {\n        issues.push({\n          type: 'weak_algorithm',\n          severity: 'high',\n          description: `算法 ${algorithm.name} 安全强度不足`,\n          recommendation: '使用更强的加密算法',\n        });\n      }\n\n      // 检查密钥强度\n      if (!keyInfo.isSecure) {\n        issues.push({\n          type: 'weak_key',\n          severity: 'critical',\n          description: '密钥强度不足或生成方法不安全',\n          recommendation: '使用更强的密钥生成方法',\n        });\n      }\n\n      const status = encryptionWorked && decryptionWorked && issues.length === 0 ? 'passed' :\n                    issues.some(i => i.severity === 'critical') ? 'failed' : 'warning';\n\n      return {\n        testName: `Algorithm Test - ${algorithm.name} with ${testData.name}`,\n        algorithm,\n        testType: 'algorithm',\n        status,\n        executionTime,\n        details: {\n          originalData: testData.data,\n          encryptedData,\n          decryptedData,\n          keyInfo,\n        },\n        securityLevel,\n        issues,\n      };\n    } catch (error) {\n      issues.push({\n        type: 'implementation_error',\n        severity: 'critical',\n        description: `加密算法实现错误: ${error}`,\n        recommendation: '检查加密服务实现',\n      });\n\n      return {\n        testName: `Algorithm Test - ${algorithm.name} with ${testData.name}`,\n        algorithm,\n        testType: 'algorithm',\n        status: 'error',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: testData.data,\n          keyInfo: { algorithm: algorithm.name, keySize: 0, keyStrength: 0, generationMethod: 'unknown', isSecure: false },\n        },\n        securityLevel: 'weak',\n        issues,\n      };\n    }\n  }\n\n  /**\n   * 运行密钥管理测试\n   */\n  private async runKeyManagementTests(encryptionService: EncryptionService): Promise<EncryptionTestResult[]> {\n    const results: EncryptionTestResult[] = [];\n\n    // 测试密钥生成\n    results.push(await this.testKeyGeneration(encryptionService));\n\n    // 测试密钥强度\n    results.push(await this.testKeyStrength(encryptionService));\n\n    // 测试密钥轮换\n    results.push(await this.testKeyRotation(encryptionService));\n\n    // 测试密钥存储\n    results.push(await this.testKeyStorage(encryptionService));\n\n    return results;\n  }\n\n  /**\n   * 测试密钥生成\n   */\n  private async testKeyGeneration(encryptionService: EncryptionService): Promise<EncryptionTestResult> {\n    const startTime = Date.now();\n    const issues: EncryptionIssue[] = [];\n\n    try {\n      const keys: string[] = [];\n\n      // 生成多个密钥测试随机性\n      for (let i = 0; i < 10; i++) {\n        const key = await encryptionService.generateKey('AES-256');\n        keys.push(key);\n      }\n\n      // 检查密钥唯一性\n      const uniqueKeys = new Set(keys);\n      if (uniqueKeys.size !== keys.length) {\n        issues.push({\n          type: 'weak_key',\n          severity: 'critical',\n          description: '密钥生成缺乏随机性，存在重复密钥',\n          recommendation: '改进密钥生成的随机性',\n        });\n      }\n\n      // 检查密钥长度\n      const keyLength = Buffer.from(keys[0], 'base64').length * 8;\n      if (keyLength < this.config.keyStrengthRequirements.minimumSymmetricKeySize) {\n        issues.push({\n          type: 'weak_key',\n          severity: 'high',\n          description: `密钥长度 ${keyLength} 位不足，建议至少 ${this.config.keyStrengthRequirements.minimumSymmetricKeySize} 位`,\n          recommendation: '增加密钥长度',\n        });\n      }\n\n      return {\n        testName: 'Key Generation Test',\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Key generation test' },\n        testType: 'key_management',\n        status: issues.length === 0 ? 'passed' : issues.some(i => i.severity === 'critical') ? 'failed' : 'warning',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: 'key generation test',\n          keyInfo: {\n            algorithm: 'AES-256',\n            keySize: keyLength,\n            keyStrength: this.calculateKeyStrength(keys[0]),\n            generationMethod: 'crypto.randomBytes',\n            isSecure: keyLength >= this.config.keyStrengthRequirements.minimumSymmetricKeySize,\n          },\n        },\n        securityLevel: this.assessKeySecurityLevel(keyLength),\n        issues,\n      };\n    } catch (error) {\n      return {\n        testName: 'Key Generation Test',\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Key generation test' },\n        testType: 'key_management',\n        status: 'error',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: 'key generation test',\n          keyInfo: { algorithm: 'AES-256', keySize: 0, keyStrength: 0, generationMethod: 'unknown', isSecure: false },\n        },\n        securityLevel: 'weak',\n        issues: [{\n          type: 'implementation_error',\n          severity: 'critical',\n          description: `密钥生成失败: ${error}`,\n          recommendation: '检查密钥生成实现',\n        }],\n      };\n    }\n  }\n\n  /**\n   * 测试密钥强度\n   */\n  private async testKeyStrength(encryptionService: EncryptionService): Promise<EncryptionTestResult> {\n    const startTime = Date.now();\n    const issues: EncryptionIssue[] = [];\n\n    try {\n      // 测试弱密钥\n      const weakKeys = ['password', '123456', 'admin', 'qwerty'];\n\n      for (const weakKey of weakKeys) {\n        const strength = this.calculateKeyStrength(weakKey);\n        if (strength < this.config.keyStrengthRequirements.requiredRandomness) {\n          issues.push({\n            type: 'weak_key',\n            severity: 'critical',\n            description: `检测到弱密钥: ${weakKey}`,\n            recommendation: '禁止使用弱密钥，实施密钥强度检查',\n          });\n        }\n      }\n\n      // 测试强密钥\n      const strongKey = await encryptionService.generateKey('AES-256');\n      const strongKeyStrength = this.calculateKeyStrength(strongKey);\n\n      return {\n        testName: 'Key Strength Test',\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Key strength test' },\n        testType: 'key_management',\n        status: issues.length === 0 ? 'passed' : 'failed',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: 'key strength test',\n          keyInfo: {\n            algorithm: 'AES-256',\n            keySize: 256,\n            keyStrength: strongKeyStrength,\n            generationMethod: 'secure random',\n            isSecure: strongKeyStrength >= this.config.keyStrengthRequirements.requiredRandomness,\n          },\n        },\n        securityLevel: strongKeyStrength >= this.config.keyStrengthRequirements.requiredRandomness ? 'strong' : 'weak',\n        issues,\n      };\n    } catch (error) {\n      return {\n        testName: 'Key Strength Test',\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Key strength test' },\n        testType: 'key_management',\n        status: 'error',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: 'key strength test',\n          keyInfo: { algorithm: 'AES-256', keySize: 0, keyStrength: 0, generationMethod: 'unknown', isSecure: false },\n        },\n        securityLevel: 'weak',\n        issues: [{\n          type: 'implementation_error',\n          severity: 'critical',\n          description: `密钥强度测试失败: ${error}`,\n          recommendation: '检查密钥强度验证实现',\n        }],\n      };\n    }\n  }\n\n  /**\n   * 测试密钥轮换\n   */\n  private async testKeyRotation(encryptionService: EncryptionService): Promise<EncryptionTestResult> {\n    const startTime = Date.now();\n    const issues: EncryptionIssue[] = [];\n\n    try {\n      const testData = 'key rotation test data';\n\n      // 生成初始密钥\n      const oldKey = await encryptionService.generateKey('AES-256');\n      const encryptedWithOldKey = await encryptionService.encrypt(testData, 'AES-256', { key: oldKey });\n\n      // 轮换密钥\n      const newKey = await encryptionService.generateKey('AES-256');\n\n      // 验证新密钥可以加密\n      const encryptedWithNewKey = await encryptionService.encrypt(testData, 'AES-256', { key: newKey });\n\n      // 验证旧密钥仍可解密历史数据\n      const decryptedWithOldKey = await encryptionService.decrypt(encryptedWithOldKey, 'AES-256', { key: oldKey });\n\n      // 验证新密钥可以解密新数据\n      const decryptedWithNewKey = await encryptionService.decrypt(encryptedWithNewKey, 'AES-256', { key: newKey });\n\n      const rotationWorked = decryptedWithOldKey === testData && decryptedWithNewKey === testData;\n\n      if (!rotationWorked) {\n        issues.push({\n          type: 'implementation_error',\n          severity: 'high',\n          description: '密钥轮换后数据解密失败',\n          recommendation: '检查密钥轮换实现',\n        });\n      }\n\n      return {\n        testName: 'Key Rotation Test',\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Key rotation test' },\n        testType: 'key_management',\n        status: rotationWorked ? 'passed' : 'failed',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: testData,\n          encryptedData: encryptedWithNewKey,\n          decryptedData: decryptedWithNewKey,\n          keyInfo: {\n            algorithm: 'AES-256',\n            keySize: 256,\n            keyStrength: this.calculateKeyStrength(newKey),\n            generationMethod: 'secure random',\n            isSecure: true,\n          },\n        },\n        securityLevel: 'strong',\n        issues,\n      };\n    } catch (error) {\n      return {\n        testName: 'Key Rotation Test',\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Key rotation test' },\n        testType: 'key_management',\n        status: 'error',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: 'key rotation test',\n          keyInfo: { algorithm: 'AES-256', keySize: 0, keyStrength: 0, generationMethod: 'unknown', isSecure: false },\n        },\n        securityLevel: 'weak',\n        issues: [{\n          type: 'implementation_error',\n          severity: 'critical',\n          description: `密钥轮换测试失败: ${error}`,\n          recommendation: '检查密钥轮换实现',\n        }],\n      };\n    }\n  }\n\n  /**\n   * 测试密钥存储\n   */\n  private async testKeyStorage(encryptionService: EncryptionService): Promise<EncryptionTestResult> {\n    const startTime = Date.now();\n    const issues: EncryptionIssue[] = [];\n\n    try {\n      // 生成测试密钥\n      const key = await encryptionService.generateKey('AES-256');\n\n      // 存储密钥\n      await encryptionService.storeKey('test-key-id', key);\n\n      // 检索密钥\n      const retrievedKey = await encryptionService.retrieveKey('test-key-id');\n\n      // 验证密钥一致性\n      const keysMatch = key === retrievedKey;\n\n      if (!keysMatch) {\n        issues.push({\n          type: 'implementation_error',\n          severity: 'critical',\n          description: '密钥存储和检索不一致',\n          recommendation: '检查密钥存储实现',\n        });\n      }\n\n      // 测试密钥删除\n      await encryptionService.deleteKey('test-key-id');\n\n      try {\n        await encryptionService.retrieveKey('test-key-id');\n        issues.push({\n          type: 'implementation_error',\n          severity: 'medium',\n          description: '已删除的密钥仍可访问',\n          recommendation: '确保密钥删除的彻底性',\n        });\n      } catch {\n        // 预期行为：密钥应该不存在\n      }\n\n      return {\n        testName: 'Key Storage Test',\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Key storage test' },\n        testType: 'key_management',\n        status: keysMatch && issues.length === 0 ? 'passed' : 'failed',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: 'key storage test',\n          keyInfo: {\n            algorithm: 'AES-256',\n            keySize: 256,\n            keyStrength: this.calculateKeyStrength(key),\n            generationMethod: 'secure random',\n            isSecure: true,\n          },\n        },\n        securityLevel: 'strong',\n        issues,\n      };\n    } catch (error) {\n      return {\n        testName: 'Key Storage Test',\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Key storage test' },\n        testType: 'key_management',\n        status: 'error',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: 'key storage test',\n          keyInfo: { algorithm: 'AES-256', keySize: 0, keyStrength: 0, generationMethod: 'unknown', isSecure: false },\n        },\n        securityLevel: 'weak',\n        issues: [{\n          type: 'implementation_error',\n          severity: 'critical',\n          description: `密钥存储测试失败: ${error}`,\n          recommendation: '检查密钥存储实现',\n        }],\n      };\n    }\n  }\n\n  /**\n   * 运行数据完整性测试\n   */\n  private async runDataIntegrityTests(encryptionService: EncryptionService): Promise<EncryptionTestResult[]> {\n    const results: EncryptionTestResult[] = [];\n\n    for (const testData of this.config.testDataSets) {\n      const result = await this.testDataIntegrity(testData, encryptionService);\n      results.push(result);\n    }\n\n    return results;\n  }\n\n  /**\n   * 测试数据完整性\n   */\n  private async testDataIntegrity(testData: TestDataSet, encryptionService: EncryptionService): Promise<EncryptionTestResult> {\n    const startTime = Date.now();\n    const issues: EncryptionIssue[] = [];\n\n    try {\n      const key = await encryptionService.generateKey('AES-256');\n\n      // 加密数据\n      const encryptedData = await encryptionService.encrypt(testData.data, 'AES-256', { key });\n\n      // 计算原始数据哈希\n      const originalHash = crypto.createHash('sha256').update(testData.data).digest('hex');\n\n      // 解密数据\n      const decryptedData = await encryptionService.decrypt(encryptedData, 'AES-256', { key });\n\n      // 计算解密数据哈希\n      const decryptedHash = crypto.createHash('sha256').update(decryptedData).digest('hex');\n\n      // 验证完整性\n      const integrityCheck: IntegrityCheckResult = {\n        hashMatch: originalHash === decryptedHash,\n        dataCorruption: testData.data !== decryptedData,\n        tamperingDetected: false,\n        checksumValid: true,\n      };\n\n      // 测试篡改检测\n      const tamperedData = encryptedData.slice(0, -10) + 'tampered123';\n      try {\n        await encryptionService.decrypt(tamperedData, 'AES-256', { key });\n        issues.push({\n          type: 'integrity_failure',\n          severity: 'critical',\n          description: '未能检测到数据篡改',\n          recommendation: '实施数据完整性验证机制',\n        });\n      } catch {\n        integrityCheck.tamperingDetected = true;\n      }\n\n      if (!integrityCheck.hashMatch || integrityCheck.dataCorruption) {\n        issues.push({\n          type: 'integrity_failure',\n          severity: 'critical',\n          description: '数据完整性验证失败',\n          recommendation: '检查加密解密实现',\n        });\n      }\n\n      return {\n        testName: `Data Integrity Test - ${testData.name}`,\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Data integrity test' },\n        testType: 'data_integrity',\n        status: issues.length === 0 ? 'passed' : 'failed',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: testData.data,\n          encryptedData,\n          decryptedData,\n          keyInfo: {\n            algorithm: 'AES-256',\n            keySize: 256,\n            keyStrength: this.calculateKeyStrength(key),\n            generationMethod: 'secure random',\n            isSecure: true,\n          },\n          integrityCheck,\n        },\n        securityLevel: 'strong',\n        issues,\n      };\n    } catch (error) {\n      return {\n        testName: `Data Integrity Test - ${testData.name}`,\n        algorithm: { name: 'AES-256', type: 'symmetric', keySize: 256, description: 'Data integrity test' },\n        testType: 'data_integrity',\n        status: 'error',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: testData.data,\n          keyInfo: { algorithm: 'AES-256', keySize: 0, keyStrength: 0, generationMethod: 'unknown', isSecure: false },\n        },\n        securityLevel: 'weak',\n        issues: [{\n          type: 'implementation_error',\n          severity: 'critical',\n          description: `数据完整性测试失败: ${error}`,\n          recommendation: '检查加密服务实现',\n        }],\n      };\n    }\n  }\n\n  /**\n   * 运行性能测试\n   */\n  private async runPerformanceTests(encryptionService: EncryptionService): Promise<EncryptionTestResult[]> {\n    const results: EncryptionTestResult[] = [];\n\n    for (const algorithm of this.config.supportedAlgorithms) {\n      for (const testData of this.config.testDataSets) {\n        const result = await this.testEncryptionPerformance(algorithm, testData, encryptionService);\n        results.push(result);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * 测试加密性能\n   */\n  private async testEncryptionPerformance(algorithm: EncryptionAlgorithm, testData: TestDataSet, encryptionService: EncryptionService): Promise<EncryptionTestResult> {\n    const startTime = Date.now();\n    const issues: EncryptionIssue[] = [];\n\n    try {\n      const key = await this.generateTestKey(algorithm);\n\n      // 测试加密性能\n      const encryptStartTime = process.hrtime.bigint();\n      const encryptedData = await encryptionService.encrypt(testData.data, algorithm.name, key);\n      const encryptEndTime = process.hrtime.bigint();\n      const encryptionTime = Number(encryptEndTime - encryptStartTime) / 1000000; // 转换为毫秒\n\n      // 测试解密性能\n      const decryptStartTime = process.hrtime.bigint();\n      const decryptedData = await encryptionService.decrypt(encryptedData, algorithm.name, key);\n      const decryptEndTime = process.hrtime.bigint();\n      const decryptionTime = Number(decryptEndTime - decryptStartTime) / 1000000; // 转换为毫秒\n\n      // 计算吞吐量\n      const throughput = (testData.size / (encryptionTime + decryptionTime)) * 1000; // bytes per second\n\n      const performanceMetrics: PerformanceMetrics = {\n        encryptionTime,\n        decryptionTime,\n        throughput,\n        memoryUsage: process.memoryUsage().heapUsed,\n      };\n\n      // 性能阈值检查\n      const maxAcceptableTime = 1000; // 1秒\n      if (encryptionTime > maxAcceptableTime || decryptionTime > maxAcceptableTime) {\n        issues.push({\n          type: 'poor_performance',\n          severity: 'medium',\n          description: `加密/解密性能较差: 加密${encryptionTime}ms, 解密${decryptionTime}ms`,\n          recommendation: '优化加密算法实现或考虑使用更高效的算法',\n        });\n      }\n\n      return {\n        testName: `Performance Test - ${algorithm.name} with ${testData.name}`,\n        algorithm,\n        testType: 'performance',\n        status: issues.length === 0 ? 'passed' : 'warning',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: testData.data,\n          encryptedData,\n          decryptedData,\n          keyInfo: key,\n          performanceMetrics,\n        },\n        securityLevel: 'strong',\n        issues,\n      };\n    } catch (error) {\n      return {\n        testName: `Performance Test - ${algorithm.name} with ${testData.name}`,\n        algorithm,\n        testType: 'performance',\n        status: 'error',\n        executionTime: Date.now() - startTime,\n        details: {\n          originalData: testData.data,\n          keyInfo: { algorithm: algorithm.name, keySize: 0, keyStrength: 0, generationMethod: 'unknown', isSecure: false },\n        },\n        securityLevel: 'weak',\n        issues: [{\n          type: 'implementation_error',\n          severity: 'critical',\n          description: `性能测试失败: ${error}`,\n          recommendation: '检查加密服务实现',\n        }],\n      };\n    }\n  }\n\n  // 辅助方法\n  private async generateTestKey(algorithm: EncryptionAlgorithm): Promise<KeyInfo> {\n    const keyBuffer = crypto.randomBytes(algorithm.keySize / 8);\n    const key = keyBuffer.toString('base64');\n\n    return {\n      algorithm: algorithm.name,\n      keySize: algorithm.keySize,\n      keyStrength: this.calculateKeyStrength(key),\n      generationMethod: 'crypto.randomBytes',\n      isSecure: algorithm.keySize >= this.config.keyStrengthRequirements.minimumSymmetricKeySize,\n      key,\n    };\n  }\n\n  private calculateKeyStrength(key: string): number {\n    // 简化的密钥强度计算\n    const entropy = this.calculateEntropy(key);\n    return Math.min(entropy * key.length, 256);\n  }\n\n  private calculateEntropy(str: string): number {\n    const freq: Record<string, number> = {};\n    for (const char of str) {\n      freq[char] = (freq[char] || 0) + 1;\n    }\n\n    let entropy = 0;\n    const len = str.length;\n    for (const count of Object.values(freq)) {\n      const p = count / len;\n      entropy -= p * Math.log2(p);\n    }\n\n    return entropy;\n  }\n\n  private assessAlgorithmSecurity(algorithm: EncryptionAlgorithm): 'weak' | 'acceptable' | 'strong' | 'excellent' {\n    if (algorithm.keySize >= 256) return 'excellent';\n    if (algorithm.keySize >= 128) return 'strong';\n    if (algorithm.keySize >= 64) return 'acceptable';\n    return 'weak';\n  }\n\n  private assessKeySecurityLevel(keySize: number): 'weak' | 'acceptable' | 'strong' | 'excellent' {\n    if (keySize >= 256) return 'excellent';\n    if (keySize >= 128) return 'strong';\n    if (keySize >= 64) return 'acceptable';\n    return 'weak';\n  }\n\n  /**\n   * 生成加密验证报告\n   */\n  generateEncryptionReport(results: EncryptionTestResult[]): EncryptionReport {\n    const totalTests = results.length;\n    const passedTests = results.filter(r => r.status === 'passed').length;\n    const failedTests = results.filter(r => r.status === 'failed').length;\n    const warningTests = results.filter(r => r.status === 'warning').length;\n    const errorTests = results.filter(r => r.status === 'error').length;\n\n    const securityLevels = {\n      excellent: results.filter(r => r.securityLevel === 'excellent').length,\n      strong: results.filter(r => r.securityLevel === 'strong').length,\n      acceptable: results.filter(r => r.securityLevel === 'acceptable').length,\n      weak: results.filter(r => r.securityLevel === 'weak').length,\n    };\n\n    const allIssues = results.flatMap(r => r.issues);\n    const criticalIssues = allIssues.filter(i => i.severity === 'critical').length;\n    const highIssues = allIssues.filter(i => i.severity === 'high').length;\n    const mediumIssues = allIssues.filter(i => i.severity === 'medium').length;\n    const lowIssues = allIssues.filter(i => i.severity === 'low').length;\n\n    return {\n      summary: {\n        totalTests,\n        passedTests,\n        failedTests,\n        warningTests,\n        errorTests,\n        passRate: (passedTests / totalTests) * 100,\n      },\n      securityLevels,\n      issueDistribution: {\n        critical: criticalIssues,\n        high: highIssues,\n        medium: mediumIssues,\n        low: lowIssues,\n      },\n      testResults: results,\n      recommendations: this.generateEncryptionRecommendations(results),\n      timestamp: new Date(),\n    };\n  }\n\n  private generateEncryptionRecommendations(results: EncryptionTestResult[]): string[] {\n    const recommendations: string[] = [];\n    const allIssues = results.flatMap(r => r.issues);\n\n    if (allIssues.some(i => i.type === 'weak_algorithm')) {\n      recommendations.push('升级到更强的加密算法');\n    }\n\n    if (allIssues.some(i => i.type === 'weak_key')) {\n      recommendations.push('加强密钥生成和管理策略');\n    }\n\n    if (allIssues.some(i => i.type === 'poor_performance')) {\n      recommendations.push('优化加密性能或选择更高效的算法');\n    }\n\n    if (allIssues.some(i => i.type === 'integrity_failure')) {\n      recommendations.push('实施数据完整性验证机制');\n    }\n\n    if (allIssues.some(i => i.type === 'implementation_error')) {\n      recommendations.push('修复加密服务实现问题');\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('加密实现安全性良好，继续保持当前标准');\n    }\n\n    return recommendations;\n  }\n}\n\n// 加密服务接口\nexport interface EncryptionService {\n  encrypt(data: string, algorithm: string, keyInfo: any): Promise<string>;\n  decrypt(encryptedData: string, algorithm: string, keyInfo: any): Promise<string>;\n  generateKey(algorithm: string): Promise<string>;\n  storeKey(keyId: string, key: string): Promise<void>;\n  retrieveKey(keyId: string): Promise<string>;\n  deleteKey(keyId: string): Promise<void>;\n}\n\nexport interface EncryptionReport {\n  summary: {\n    totalTests: number;\n    passedTests: number;\n    failedTests: number;\n    warningTests: number;\n    errorTests: number;\n    passRate: number;\n  };\n  securityLevels: {\n    excellent: number;\n    strong: number;\n    acceptable: number;\n    weak: number;\n  };\n  issueDistribution: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n  };\n  testResults: EncryptionTestResult[];\n  recommendations: string[];\n  timestamp: Date;\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/security/InputValidationTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/security/SecurityTestFramework.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/security/VulnerabilityScanner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/security/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/setup/jest-setup-tools.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/stability/FlakyTestDetector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/stability/TestEnvironmentVerifier.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/stability/TestRetryManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/stability/TestStabilityMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/stability/TestStabilitySystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/stability/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/state/StateConsistencyTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/state/StateTestFramework.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/state/ZustandTestUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/state/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/types/CompileTimeTestUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/types/InterfaceConsistencyChecker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/types/RuntimeTypeValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/types/TypeAssertions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/types/TypeCoverageAnalyzer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/types/TypeRegressionTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/types/TypeTestFramework.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/ui/AccessibilityTester.ts","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 126. Maximum allowed is 120.","line":190,"column":1,"nodeType":"Program","messageId":"max","endLine":190,"endColumn":127}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Accessibility Tester\n *\n * Comprehensive accessibility testing framework that validates\n * WCAG compliance, keyboard navigation, screen reader compatibility,\n * and other accessibility standards.\n */\nimport { fireEvent, waitFor } from '@testing-library/react';\nimport { axe, AxeResults, Result as AxeResult } from 'jest-axe';\n\nexport interface AccessibilityTestConfig {\n  wcagLevel: 'A' | 'AA' | 'AAA';\n  includeRules: string[];\n  excludeRules: string[];\n  tags: string[];\n  customRules: AccessibilityRule[];\n  keyboardNavigation: boolean;\n  screenReaderTesting: boolean;\n  colorContrastTesting: boolean;\n  focusManagement: boolean;\n}\n\nexport interface AccessibilityRule {\n  id: string;\n  name: string;\n  description: string;\n  impact: 'minor' | 'moderate' | 'serious' | 'critical';\n  tags: string[];\n  check: (element: HTMLElement) => AccessibilityViolation[];\n}\n\nexport interface AccessibilityViolation {\n  ruleId: string;\n  impact: 'minor' | 'moderate' | 'serious' | 'critical';\n  message: string;\n  element: HTMLElement;\n  selector: string;\n  help: string;\n  helpUrl?: string;\n  suggestion: string;\n  wcagCriteria: string[];\n}\n\nexport interface AccessibilityTestResult {\n  passed: boolean;\n  score: number;\n  violations: AccessibilityViolation[];\n  summary: AccessibilitySummary;\n  keyboardNavigation?: KeyboardNavigationResult;\n  screenReader?: ScreenReaderResult;\n  colorContrast?: ColorContrastResult;\n  focusManagement?: FocusManagementResult;\n}\n\nexport interface AccessibilitySummary {\n  totalElements: number;\n  violatingElements: number;\n  criticalViolations: number;\n  seriousViolations: number;\n  moderateViolations: number;\n  minorViolations: number;\n  wcagLevel: string;\n  complianceScore: number;\n}\n\nexport interface KeyboardNavigationResult {\n  passed: boolean;\n  focusableElements: number;\n  tabbableElements: number;\n  trapFocus: boolean;\n  skipLinks: boolean;\n  issues: KeyboardIssue[];\n}\n\nexport interface KeyboardIssue {\n  type: 'missing-focus' | 'focus-trap' | 'skip-link' | 'tab-order' | 'keyboard-activation';\n  element: HTMLElement;\n  description: string;\n  severity: 'low' | 'medium' | 'high';\n  suggestion: string;\n}\n\nexport interface ScreenReaderResult {\n  passed: boolean;\n  ariaLabels: number;\n  landmarks: number;\n  headingStructure: boolean;\n  altTexts: number;\n  issues: ScreenReaderIssue[];\n}\n\nexport interface ScreenReaderIssue {\n  type: 'missing-label' | 'missing-landmark' | 'heading-structure' | 'missing-alt' | 'aria-invalid';\n  element: HTMLElement;\n  description: string;\n  severity: 'low' | 'medium' | 'high';\n  suggestion: string;\n}\n\nexport interface ColorContrastResult {\n  passed: boolean;\n  totalChecks: number;\n  failedChecks: number;\n  issues: ColorContrastIssue[];\n}\n\nexport interface ColorContrastIssue {\n  element: HTMLElement;\n  foreground: string;\n  background: string;\n  ratio: number;\n  requiredRatio: number;\n  level: 'AA' | 'AAA';\n  size: 'normal' | 'large';\n  suggestion: string;\n}\n\nexport interface FocusManagementResult {\n  passed: boolean;\n  focusIndicators: boolean;\n  focusOrder: boolean;\n  focusTrapping: boolean;\n  issues: FocusIssue[];\n}\n\nexport interface FocusIssue {\n  type: 'missing-indicator' | 'wrong-order' | 'no-trap' | 'lost-focus';\n  element: HTMLElement;\n  description: string;\n  severity: 'low' | 'medium' | 'high';\n  suggestion: string;\n}\n\nexport class AccessibilityTester {\n  private config: AccessibilityTestConfig;\n  private customRules: Map<string, AccessibilityRule> = new Map();\n\n  constructor(config: Partial<AccessibilityTestConfig> = {}) {\n    this.config = {\n      wcagLevel: 'AA',\n      includeRules: [],\n      excludeRules: [],\n      tags: ['wcag2a', 'wcag2aa'],\n      customRules: [],\n      keyboardNavigation: true,\n      screenReaderTesting: true,\n      colorContrastTesting: true,\n      focusManagement: true,\n      ...config,\n    };\n\n    this.initializeCustomRules();\n  }\n\n  /**\n   * Run comprehensive accessibility test\n   */\n  async testAccessibility(container: HTMLElement): Promise<AccessibilityTestResult> {\n    const violations: AccessibilityViolation[] = [];\n\n    // Run axe-core tests\n    const axeResults = await this.runAxeTests(container);\n    violations.push(...this.convertAxeViolations(axeResults.violations));\n\n    // Run custom rule tests\n    const customViolations = await this.runCustomRules(container);\n    violations.push(...customViolations);\n\n    // Run specific accessibility tests\n    const keyboardNavigation = this.config.keyboardNavigation\n      ? await this.testKeyboardNavigation(container)\n      : undefined;\n\n    const screenReader = this.config.screenReaderTesting\n      ? await this.testScreenReaderCompatibility(container)\n      : undefined;\n\n    const colorContrast = this.config.colorContrastTesting\n      ? await this.testColorContrast(container)\n      : undefined;\n\n    const focusManagement = this.config.focusManagement\n      ? await this.testFocusManagement(container)\n      : undefined;\n\n    // Calculate summary\n    const summary = this.calculateSummary(violations, container);\n\n    // Calculate overall score\n    const score = this.calculateAccessibilityScore(summary, keyboardNavigation, screenReader, colorContrast, focusManagement);\n\n    return {\n      passed: violations.filter(v => v.impact === 'critical' || v.impact === 'serious').length === 0,\n      score,\n      violations,\n      summary,\n      keyboardNavigation,\n      screenReader,\n      colorContrast,\n      focusManagement,\n    };\n  }\n\n  /**\n   * Run axe-core accessibility tests\n   */\n  private async runAxeTests(container: HTMLElement): Promise<AxeResults> {\n    const axeConfig = {\n      rules: this.buildAxeRulesConfig(),\n      tags: this.config.tags,\n      exclude: this.config.excludeRules.map(rule => `[data-rule=\"${rule}\"]`),\n    };\n\n    return await axe(container, axeConfig);\n  }\n\n  /**\n   * Convert axe violations to our format\n   */\n  private convertAxeViolations(axeViolations: AxeResult[]): AccessibilityViolation[] {\n    return axeViolations.flatMap(violation =>\n      violation.nodes.map(node => ({\n        ruleId: violation.id,\n        impact: violation.impact as 'minor' | 'moderate' | 'serious' | 'critical',\n        message: violation.description,\n        element: node.element as HTMLElement,\n        selector: node.target.join(' '),\n        help: violation.help,\n        helpUrl: violation.helpUrl,\n        suggestion: this.generateSuggestion(violation.id, node.element as HTMLElement),\n        wcagCriteria: violation.tags.filter(tag => tag.startsWith('wcag')),\n      })),\n    );\n  }\n\n  /**\n   * Test keyboard navigation\n   */\n  private async testKeyboardNavigation(container: HTMLElement): Promise<KeyboardNavigationResult> {\n    const issues: KeyboardIssue[] = [];\n    const focusableElements = this.getFocusableElements(container);\n    const tabbableElements = this.getTabbableElements(container);\n\n    // Test focus indicators\n    for (const element of focusableElements) {\n      if (!this.hasFocusIndicator(element)) {\n        issues.push({\n          type: 'missing-focus',\n          element,\n          description: 'Element lacks visible focus indicator',\n          severity: 'high',\n          suggestion: 'Add CSS focus styles or ensure default focus indicators are visible',\n        });\n      }\n    }\n\n    // Test tab order\n    const tabOrderIssues = await this.testTabOrder(tabbableElements);\n    issues.push(...tabOrderIssues);\n\n    // Test keyboard activation\n    const activationIssues = await this.testKeyboardActivation(focusableElements);\n    issues.push(...activationIssues);\n\n    // Test focus trapping (for modals, dialogs)\n    const trapFocus = await this.testFocusTrapping(container);\n\n    // Test skip links\n    const skipLinks = this.hasSkipLinks(container);\n\n    return {\n      passed: issues.filter(i => i.severity === 'high').length === 0,\n      focusableElements: focusableElements.length,\n      tabbableElements: tabbableElements.length,\n      trapFocus,\n      skipLinks,\n      issues,\n    };\n  }\n\n  /**\n   * Test screen reader compatibility\n   */\n  private async testScreenReaderCompatibility(container: HTMLElement): Promise<ScreenReaderResult> {\n    const issues: ScreenReaderIssue[] = [];\n\n    // Test ARIA labels\n    const ariaLabels = this.countAriaLabels(container);\n    const missingLabels = this.findMissingLabels(container);\n    issues.push(...missingLabels);\n\n    // Test landmarks\n    const landmarks = this.countLandmarks(container);\n    const landmarkIssues = this.validateLandmarks(container);\n    issues.push(...landmarkIssues);\n\n    // Test heading structure\n    const headingStructure = this.validateHeadingStructure(container);\n    if (!headingStructure.valid) {\n      issues.push({\n        type: 'heading-structure',\n        element: container,\n        description: 'Heading structure is not logical',\n        severity: 'medium',\n        suggestion: 'Ensure headings follow a logical hierarchy (h1 → h2 → h3, etc.)',\n      });\n    }\n\n    // Test alt texts\n    const altTexts = this.countAltTexts(container);\n    const missingAltTexts = this.findMissingAltTexts(container);\n    issues.push(...missingAltTexts);\n\n    return {\n      passed: issues.filter(i => i.severity === 'high').length === 0,\n      ariaLabels,\n      landmarks,\n      headingStructure: headingStructure.valid,\n      altTexts,\n      issues,\n    };\n  }\n\n  /**\n   * Test color contrast\n   */\n  private async testColorContrast(container: HTMLElement): Promise<ColorContrastResult> {\n    const issues: ColorContrastIssue[] = [];\n    const textElements = container.querySelectorAll('*');\n    let totalChecks = 0;\n    let failedChecks = 0;\n\n    for (const element of textElements) {\n      if (this.hasTextContent(element as HTMLElement)) {\n        totalChecks++;\n        const contrastIssue = await this.checkColorContrast(element as HTMLElement);\n        if (contrastIssue) {\n          issues.push(contrastIssue);\n          failedChecks++;\n        }\n      }\n    }\n\n    return {\n      passed: failedChecks === 0,\n      totalChecks,\n      failedChecks,\n      issues,\n    };\n  }\n\n  /**\n   * Test focus management\n   */\n  private async testFocusManagement(container: HTMLElement): Promise<FocusManagementResult> {\n    const issues: FocusIssue[] = [];\n\n    // Test focus indicators\n    const focusIndicators = await this.testFocusIndicators(container);\n    if (!focusIndicators) {\n      issues.push({\n        type: 'missing-indicator',\n        element: container,\n        description: 'Some elements lack proper focus indicators',\n        severity: 'high',\n        suggestion: 'Ensure all interactive elements have visible focus indicators',\n      });\n    }\n\n    // Test focus order\n    const focusOrder = await this.testFocusOrder(container);\n    if (!focusOrder) {\n      issues.push({\n        type: 'wrong-order',\n        element: container,\n        description: 'Focus order does not match visual order',\n        severity: 'medium',\n        suggestion: 'Adjust tab order to match visual layout',\n      });\n    }\n\n    // Test focus trapping\n    const focusTrapping = await this.testFocusTrapping(container);\n    if (!focusTrapping && this.isModal(container)) {\n      issues.push({\n        type: 'no-trap',\n        element: container,\n        description: 'Modal does not trap focus',\n        severity: 'high',\n        suggestion: 'Implement focus trapping for modal dialogs',\n      });\n    }\n\n    return {\n      passed: issues.filter(i => i.severity === 'high').length === 0,\n      focusIndicators,\n      focusOrder,\n      focusTrapping,\n      issues,\n    };\n  }\n\n  /**\n   * Run custom accessibility rules\n   */\n  private async runCustomRules(container: HTMLElement): Promise<AccessibilityViolation[]> {\n    const violations: AccessibilityViolation[] = [];\n\n    for (const rule of this.customRules.values()) {\n      try {\n        const ruleViolations = rule.check(container);\n        violations.push(...ruleViolations);\n      } catch (error) {\n        console.error(`Custom rule ${rule.id} failed:`, error);\n      }\n    }\n\n    return violations;\n  }\n\n  /**\n   * Get focusable elements\n   */\n  private getFocusableElements(container: HTMLElement): HTMLElement[] {\n    const focusableSelectors = [\n      'a[href]',\n      'button:not([disabled])',\n      'input:not([disabled])',\n      'select:not([disabled])',\n      'textarea:not([disabled])',\n      '[tabindex]:not([tabindex=\"-1\"])',\n      '[contenteditable=\"true\"]',\n    ];\n\n    return Array.from(container.querySelectorAll(focusableSelectors.join(', '))) as HTMLElement[];\n  }\n\n  /**\n   * Get tabbable elements\n   */\n  private getTabbableElements(container: HTMLElement): HTMLElement[] {\n    return this.getFocusableElements(container).filter(element => {\n      const tabIndex = element.getAttribute('tabindex');\n      return tabIndex !== '-1';\n    });\n  }\n\n  /**\n   * Check if element has focus indicator\n   */\n  private hasFocusIndicator(element: HTMLElement): boolean {\n    // Simulate focus\n    element.focus();\n    const computedStyle = window.getComputedStyle(element, ':focus');\n\n    // Check for common focus indicators\n    const hasOutline = computedStyle.outline !== 'none' && computedStyle.outline !== '0px';\n    const hasBoxShadow = computedStyle.boxShadow !== 'none';\n    const hasBorder = computedStyle.borderColor !== computedStyle.getPropertyValue('border-color');\n\n    return hasOutline || hasBoxShadow || hasBorder;\n  }\n\n  /**\n   * Test tab order\n   */\n  private async testTabOrder(elements: HTMLElement[]): Promise<KeyboardIssue[]> {\n    const issues: KeyboardIssue[] = [];\n\n    for (let i = 0; i < elements.length - 1; i++) {\n      const current = elements[i];\n      const next = elements[i + 1];\n\n      // Check if visual order matches tab order\n      const currentRect = current.getBoundingClientRect();\n      const nextRect = next.getBoundingClientRect();\n\n      // Simple heuristic: next element should be to the right or below\n      if (nextRect.top < currentRect.top ||\n          (nextRect.top === currentRect.top && nextRect.left < currentRect.left)) {\n        issues.push({\n          type: 'tab-order',\n          element: next,\n          description: 'Tab order does not match visual order',\n          severity: 'medium',\n          suggestion: 'Adjust tabindex or DOM order to match visual layout',\n        });\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * Test keyboard activation\n   */\n  private async testKeyboardActivation(elements: HTMLElement[]): Promise<KeyboardIssue[]> {\n    const issues: KeyboardIssue[] = [];\n\n    for (const element of elements) {\n      if (this.isInteractiveElement(element)) {\n        const canActivate = await this.testElementActivation(element);\n        if (!canActivate) {\n          issues.push({\n            type: 'keyboard-activation',\n            element,\n            description: 'Element cannot be activated with keyboard',\n            severity: 'high',\n            suggestion: 'Add keyboard event handlers for Enter and Space keys',\n          });\n        }\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * Test element activation with keyboard\n   */\n  private async testElementActivation(element: HTMLElement): Promise<boolean> {\n    let activated = false;\n\n    // Add temporary event listener\n    const handleActivation = () => { activated = true; };\n    element.addEventListener('click', handleActivation);\n\n    try {\n      // Test Enter key\n      element.focus();\n      fireEvent.keyDown(element, { key: 'Enter', code: 'Enter' });\n      await waitFor(() => {}, { timeout: 100 });\n\n      if (!activated) {\n        // Test Space key\n        fireEvent.keyDown(element, { key: ' ', code: 'Space' });\n        await waitFor(() => {}, { timeout: 100 });\n      }\n\n      return activated;\n    } finally {\n      element.removeEventListener('click', handleActivation);\n    }\n  }\n\n  /**\n   * Test focus trapping\n   */\n  private async testFocusTrapping(container: HTMLElement): Promise<boolean> {\n    if (!this.isModal(container)) return true;\n\n    const focusableElements = this.getFocusableElements(container);\n    if (focusableElements.length === 0) return true;\n\n    const firstElement = focusableElements[0];\n    const lastElement = focusableElements[focusableElements.length - 1];\n\n    // Test forward trapping\n    lastElement.focus();\n    fireEvent.keyDown(lastElement, { key: 'Tab', code: 'Tab' });\n    await waitFor(() => {}, { timeout: 100 });\n\n    if (document.activeElement !== firstElement) return false;\n\n    // Test backward trapping\n    firstElement.focus();\n    fireEvent.keyDown(firstElement, { key: 'Tab', code: 'Tab', shiftKey: true });\n    await waitFor(() => {}, { timeout: 100 });\n\n    return document.activeElement === lastElement;\n  }\n\n  /**\n   * Check if container has skip links\n   */\n  private hasSkipLinks(container: HTMLElement): boolean {\n    const skipLinks = container.querySelectorAll('a[href^=\"#\"]');\n    return Array.from(skipLinks).some(link =>\n      link.textContent?.toLowerCase().includes('skip') ||\n      link.getAttribute('aria-label')?.toLowerCase().includes('skip'),\n    );\n  }\n\n  /**\n   * Count ARIA labels\n   */\n  private countAriaLabels(container: HTMLElement): number {\n    return container.querySelectorAll('[aria-label], [aria-labelledby]').length;\n  }\n\n  /**\n   * Find elements missing labels\n   */\n  private findMissingLabels(container: HTMLElement): ScreenReaderIssue[] {\n    const issues: ScreenReaderIssue[] = [];\n    const interactiveElements = container.querySelectorAll('button, input, select, textarea');\n\n    interactiveElements.forEach(element => {\n      if (!this.hasAccessibleName(element as HTMLElement)) {\n        issues.push({\n          type: 'missing-label',\n          element: element as HTMLElement,\n          description: 'Interactive element lacks accessible name',\n          severity: 'high',\n          suggestion: 'Add aria-label, aria-labelledby, or associated label element',\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  /**\n   * Check if element has accessible name\n   */\n  private hasAccessibleName(element: HTMLElement): boolean {\n    return !!(\n      element.getAttribute('aria-label') ||\n      element.getAttribute('aria-labelledby') ||\n      element.getAttribute('title') ||\n      element.textContent?.trim() ||\n      (element.tagName === 'INPUT' && element.getAttribute('placeholder'))\n    );\n  }\n\n  /**\n   * Count landmarks\n   */\n  private countLandmarks(container: HTMLElement): number {\n    const landmarkSelectors = [\n      'main', 'nav', 'aside', 'header', 'footer', 'section',\n      '[role=\"main\"]', '[role=\"navigation\"]', '[role=\"complementary\"]',\n      '[role=\"banner\"]', '[role=\"contentinfo\"]', '[role=\"region\"]',\n    ];\n\n    return container.querySelectorAll(landmarkSelectors.join(', ')).length;\n  }\n\n  /**\n   * Validate landmarks\n   */\n  private validateLandmarks(container: HTMLElement): ScreenReaderIssue[] {\n    const issues: ScreenReaderIssue[] = [];\n\n    // Check for main landmark\n    const mainLandmarks = container.querySelectorAll('main, [role=\"main\"]');\n    if (mainLandmarks.length === 0) {\n      issues.push({\n        type: 'missing-landmark',\n        element: container,\n        description: 'Page lacks main landmark',\n        severity: 'medium',\n        suggestion: 'Add <main> element or role=\"main\" to identify main content',\n      });\n    } else if (mainLandmarks.length > 1) {\n      issues.push({\n        type: 'missing-landmark',\n        element: container,\n        description: 'Multiple main landmarks found',\n        severity: 'medium',\n        suggestion: 'Use only one main landmark per page',\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * Validate heading structure\n   */\n  private validateHeadingStructure(container: HTMLElement): { valid: boolean; issues: string[] } {\n    const headings = Array.from(container.querySelectorAll('h1, h2, h3, h4, h5, h6'));\n    const issues: string[] = [];\n    let previousLevel = 0;\n\n    for (const heading of headings) {\n      const level = parseInt(heading.tagName.charAt(1), 10);\n\n      if (level > previousLevel + 1) {\n        issues.push(`Heading level ${level} follows level ${previousLevel}, skipping levels`);\n      }\n\n      previousLevel = level;\n    }\n\n    return {\n      valid: issues.length === 0,\n      issues,\n    };\n  }\n\n  /**\n   * Count alt texts\n   */\n  private countAltTexts(container: HTMLElement): number {\n    return container.querySelectorAll('img[alt]').length;\n  }\n\n  /**\n   * Find missing alt texts\n   */\n  private findMissingAltTexts(container: HTMLElement): ScreenReaderIssue[] {\n    const issues: ScreenReaderIssue[] = [];\n    const images = container.querySelectorAll('img');\n\n    images.forEach(img => {\n      if (!img.hasAttribute('alt')) {\n        issues.push({\n          type: 'missing-alt',\n          element: img,\n          description: 'Image lacks alt attribute',\n          severity: 'high',\n          suggestion: 'Add descriptive alt text or empty alt=\"\" for decorative images',\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  /**\n   * Check if element has text content\n   */\n  private hasTextContent(element: HTMLElement): boolean {\n    return !!(element.textContent?.trim() || element.getAttribute('aria-label'));\n  }\n\n  /**\n   * Check color contrast\n   */\n  private async checkColorContrast(element: HTMLElement): Promise<ColorContrastIssue | null> {\n    const computedStyle = window.getComputedStyle(element);\n    const color = computedStyle.color;\n    const backgroundColor = computedStyle.backgroundColor;\n\n    if (color === 'rgba(0, 0, 0, 0)' || backgroundColor === 'rgba(0, 0, 0, 0)') {\n      return null; // Skip transparent elements\n    }\n\n    const ratio = this.calculateContrastRatio(color, backgroundColor);\n    const fontSize = parseFloat(computedStyle.fontSize);\n    const fontWeight = computedStyle.fontWeight;\n\n    const isLargeText = fontSize >= 18 || (fontSize >= 14 && (fontWeight === 'bold' || parseInt(fontWeight, 10) >= 700));\n    const requiredRatio = this.config.wcagLevel === 'AAA'\n      ? (isLargeText ? 4.5 : 7)\n      : (isLargeText ? 3 : 4.5);\n\n    if (ratio < requiredRatio) {\n      return {\n        element,\n        foreground: color,\n        background: backgroundColor,\n        ratio,\n        requiredRatio,\n        level: this.config.wcagLevel,\n        size: isLargeText ? 'large' : 'normal',\n        suggestion: `Increase contrast ratio to at least ${requiredRatio}:1`,\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Calculate contrast ratio between two colors\n   */\n  private calculateContrastRatio(color1: string, color2: string): number {\n    const luminance1 = this.getLuminance(color1);\n    const luminance2 = this.getLuminance(color2);\n\n    const lighter = Math.max(luminance1, luminance2);\n    const darker = Math.min(luminance1, luminance2);\n\n    return (lighter + 0.05) / (darker + 0.05);\n  }\n\n  /**\n   * Get luminance of color\n   */\n  private getLuminance(color: string): number {\n    const rgb = this.parseColor(color);\n    if (!rgb) return 0;\n\n    const [r, g, b] = [rgb.r, rgb.g, rgb.b].map(c => {\n      c = c / 255;\n      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n    });\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  }\n\n  /**\n   * Parse color string to RGB\n   */\n  private parseColor(color: string): { r: number; g: number; b: number } | null {\n    // Handle rgb() format\n    const rgbMatch = color.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n    if (rgbMatch) {\n      return {\n        r: parseInt(rgbMatch[1], 10),\n        g: parseInt(rgbMatch[2], 10),\n        b: parseInt(rgbMatch[3], 10),\n      };\n    }\n\n    // Handle hex format\n    const hexMatch = color.match(/^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i);\n    if (hexMatch) {\n      return {\n        r: parseInt(hexMatch[1], 16),\n        g: parseInt(hexMatch[2], 16),\n        b: parseInt(hexMatch[3], 16),\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Test focus indicators\n   */\n  private async testFocusIndicators(container: HTMLElement): Promise<boolean> {\n    const focusableElements = this.getFocusableElements(container);\n    return focusableElements.every(element => this.hasFocusIndicator(element));\n  }\n\n  /**\n   * Test focus order\n   */\n  private async testFocusOrder(container: HTMLElement): Promise<boolean> {\n    const tabbableElements = this.getTabbableElements(container);\n    const issues = await this.testTabOrder(tabbableElements);\n    return issues.length === 0;\n  }\n\n  /**\n   * Check if element is interactive\n   */\n  private isInteractiveElement(element: HTMLElement): boolean {\n    const interactiveTags = ['button', 'a', 'input', 'select', 'textarea'];\n    const interactiveRoles = ['button', 'link', 'menuitem', 'tab'];\n\n    return interactiveTags.includes(element.tagName.toLowerCase()) ||\n           interactiveRoles.includes(element.getAttribute('role') || '') ||\n           element.hasAttribute('onclick') ||\n           element.hasAttribute('tabindex');\n  }\n\n  /**\n   * Check if container is a modal\n   */\n  private isModal(container: HTMLElement): boolean {\n    return !!(\n      container.getAttribute('role') === 'dialog' ||\n      container.getAttribute('role') === 'alertdialog' ||\n      container.hasAttribute('aria-modal') ||\n      container.classList.contains('modal')\n    );\n  }\n\n  /**\n   * Build axe rules configuration\n   */\n  private buildAxeRulesConfig(): Record<string, { enabled: boolean }> {\n    const rules: Record<string, { enabled: boolean }> = {};\n\n    // Enable included rules\n    this.config.includeRules.forEach(rule => {\n      rules[rule] = { enabled: true };\n    });\n\n    // Disable excluded rules\n    this.config.excludeRules.forEach(rule => {\n      rules[rule] = { enabled: false };\n    });\n\n    return rules;\n  }\n\n  /**\n   * Generate suggestion for violation\n   */\n  private generateSuggestion(ruleId: string, element: HTMLElement): string {\n    const suggestions: Record<string, string> = {\n      'color-contrast': 'Increase the contrast ratio between text and background colors',\n      'label': 'Add an accessible name using aria-label, aria-labelledby, or a label element',\n      'button-name': 'Provide accessible text content or aria-label for the button',\n      'link-name': 'Ensure links have accessible text content or aria-label',\n      'image-alt': 'Add descriptive alt text to images',\n      'heading-order': 'Use heading elements in a logical, hierarchical order',\n      'landmark-one-main': 'Use only one main landmark per page',\n      'region': 'Add landmarks to identify page regions',\n      'focus-order-semantics': 'Ensure focus order matches the visual order',\n      'keyboard': 'Make all interactive elements keyboard accessible',\n    };\n\n    return suggestions[ruleId] || 'Review element for accessibility compliance';\n  }\n\n  /**\n   * Calculate summary statistics\n   */\n  private calculateSummary(violations: AccessibilityViolation[], container: HTMLElement): AccessibilitySummary {\n    const totalElements = container.querySelectorAll('*').length;\n    const violatingElements = new Set(violations.map(v => v.element)).size;\n\n    const criticalViolations = violations.filter(v => v.impact === 'critical').length;\n    const seriousViolations = violations.filter(v => v.impact === 'serious').length;\n    const moderateViolations = violations.filter(v => v.impact === 'moderate').length;\n    const minorViolations = violations.filter(v => v.impact === 'minor').length;\n\n    const complianceScore = Math.max(0, 100 - (\n      criticalViolations * 25 +\n      seriousViolations * 15 +\n      moderateViolations * 10 +\n      minorViolations * 5\n    ));\n\n    return {\n      totalElements,\n      violatingElements,\n      criticalViolations,\n      seriousViolations,\n      moderateViolations,\n      minorViolations,\n      wcagLevel: this.config.wcagLevel,\n      complianceScore,\n    };\n  }\n\n  /**\n   * Calculate overall accessibility score\n   */\n  private calculateAccessibilityScore(\n    summary: AccessibilitySummary,\n    keyboardNav?: KeyboardNavigationResult,\n    screenReader?: ScreenReaderResult,\n    colorContrast?: ColorContrastResult,\n    focusManagement?: FocusManagementResult,\n  ): number {\n    let score = summary.complianceScore;\n\n    // Adjust score based on specific test results\n    if (keyboardNav && !keyboardNav.passed) score -= 10;\n    if (screenReader && !screenReader.passed) score -= 10;\n    if (colorContrast && !colorContrast.passed) score -= 15;\n    if (focusManagement && !focusManagement.passed) score -= 10;\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * Initialize custom accessibility rules\n   */\n  private initializeCustomRules(): void {\n    // Add custom rules from config\n    this.config.customRules.forEach(rule => {\n      this.customRules.set(rule.id, rule);\n    });\n\n    // Add built-in custom rules\n    this.addBuiltInRules();\n  }\n\n  /**\n   * Add built-in custom rules\n   */\n  private addBuiltInRules(): void {\n    // Custom rule for form validation\n    this.customRules.set('form-validation', {\n      id: 'form-validation',\n      name: 'Form Validation Accessibility',\n      description: 'Ensures form validation messages are accessible',\n      impact: 'serious',\n      tags: ['forms', 'validation'],\n      check: (container: HTMLElement) => {\n        const violations: AccessibilityViolation[] = [];\n        const forms = container.querySelectorAll('form');\n\n        forms.forEach(form => {\n          const inputs = form.querySelectorAll('input, select, textarea');\n          inputs.forEach(input => {\n            const hasValidation = input.hasAttribute('aria-describedby') ||\n                                input.hasAttribute('aria-invalid');\n\n            if (!hasValidation) {\n              violations.push({\n                ruleId: 'form-validation',\n                impact: 'serious',\n                message: 'Form input lacks validation accessibility attributes',\n                element: input as HTMLElement,\n                selector: this.generateSelector(input as HTMLElement),\n                help: 'Add aria-describedby and aria-invalid attributes for form validation',\n                suggestion: 'Use aria-describedby to reference validation messages and aria-invalid to indicate validation state',\n                wcagCriteria: ['wcag2a'],\n              });\n            }\n          });\n        });\n\n        return violations;\n      },\n    });\n\n    // Custom rule for interactive elements\n    this.customRules.set('interactive-elements', {\n      id: 'interactive-elements',\n      name: 'Interactive Elements Accessibility',\n      description: 'Ensures interactive elements are properly accessible',\n      impact: 'serious',\n      tags: ['interactive', 'keyboard'],\n      check: (container: HTMLElement) => {\n        const violations: AccessibilityViolation[] = [];\n        const interactiveElements = container.querySelectorAll('[onclick], [onkeydown]');\n\n        interactiveElements.forEach(element => {\n          const htmlElement = element as HTMLElement;\n          if (!this.isInteractiveElement(htmlElement) && !htmlElement.hasAttribute('role')) {\n            violations.push({\n              ruleId: 'interactive-elements',\n              impact: 'serious',\n              message: 'Interactive element lacks proper role or semantic meaning',\n              element: htmlElement,\n              selector: this.generateSelector(htmlElement),\n              help: 'Add appropriate role attribute or use semantic HTML elements',\n              suggestion: 'Use button, link, or other semantic elements, or add role=\"button\" with keyboard support',\n              wcagCriteria: ['wcag2a'],\n            });\n          }\n        });\n\n        return violations;\n      },\n    });\n  }\n\n  /**\n   * Generate selector for element\n   */\n  private generateSelector(element: HTMLElement): string {\n    if (element.id) return `#${element.id}`;\n    if (element.className) return `.${element.className.split(' ')[0]}`;\n    return element.tagName.toLowerCase();\n  }\n\n  /**\n   * Add custom accessibility rule\n   */\n  addRule(rule: AccessibilityRule): void {\n    this.customRules.set(rule.id, rule);\n  }\n\n  /**\n   * Remove accessibility rule\n   */\n  removeRule(ruleId: string): boolean {\n    return this.customRules.delete(ruleId);\n  }\n\n  /**\n   * Get all accessibility rules\n   */\n  getRules(): AccessibilityRule[] {\n    return Array.from(this.customRules.values());\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: Partial<AccessibilityTestConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Generate accessibility report\n   */\n  generateReport(result: AccessibilityTestResult): string {\n    let report = '# Accessibility Test Report\\n\\n';\n\n    report += `**Overall Score:** ${result.score}/100\\n`;\n    report += `**Status:** ${result.passed ? 'PASSED' : 'FAILED'}\\n`;\n    report += `**WCAG Level:** ${result.summary.wcagLevel}\\n\\n`;\n\n    report += '## Summary\\n';\n    report += `- Total Elements: ${result.summary.totalElements}\\n`;\n    report += `- Violating Elements: ${result.summary.violatingElements}\\n`;\n    report += `- Critical Violations: ${result.summary.criticalViolations}\\n`;\n    report += `- Serious Violations: ${result.summary.seriousViolations}\\n`;\n    report += `- Moderate Violations: ${result.summary.moderateViolations}\\n`;\n    report += `- Minor Violations: ${result.summary.minorViolations}\\n\\n`;\n\n    if (result.violations.length > 0) {\n      report += '## Violations\\n\\n';\n      result.violations.forEach((violation, index) => {\n        report += `### ${index + 1}. ${violation.message}\\n`;\n        report += `- **Impact:** ${violation.impact}\\n`;\n        report += `- **Element:** ${violation.selector}\\n`;\n        report += `- **Help:** ${violation.help}\\n`;\n        report += `- **Suggestion:** ${violation.suggestion}\\n\\n`;\n      });\n    }\n\n    return report;\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): AccessibilityTestConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    this.customRules.clear();\n  }\n}\n\n/**\n * Create accessibility tester instance\n */\nexport function createAccessibilityTester(config?: Partial<AccessibilityTestConfig>): AccessibilityTester {\n  return new AccessibilityTester(config);\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/ui/ComponentMatchers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/ui/ComponentTestFramework.tsx","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 172. Maximum allowed is 120.","line":14,"column":1,"nodeType":"Program","messageId":"max","endLine":14,"endColumn":173},{"ruleId":"max-len","severity":1,"message":"This line has a length of 148. Maximum allowed is 120.","line":17,"column":1,"nodeType":"Program","messageId":"max","endLine":17,"endColumn":149}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Component Test Framework\n *\n * Comprehensive testing framework for React components including\n * rendering tests, interaction simulation, style regression testing,\n * and accessibility validation.\n */\nimport { QueryClient } from '@tanstack/react-query';\nimport { render, screen, fireEvent, waitFor, within, renderHook, act } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport React from 'react';\n// Mock theme provider for testing\nconst MockThemeProvider: React.FC<{ children: React.ReactNode; attribute?: string; defaultTheme?: string }> = ({ children }) => <React.Fragment>{children}</React.Fragment>;\n\n// Mock query client provider for testing\nconst MockQueryClientProvider: React.FC<{ children: React.ReactNode; client: any }> = ({ children }) => <React.Fragment>{children}</React.Fragment>;\n\n// Extend Jest matchers\nexpect.extend(toHaveNoViolations);\n\nexport interface ComponentTestConfig {\n  theme?: 'light' | 'dark' | 'system';\n  viewport?: ViewportSize;\n  mockData?: Record<string, any>;\n  providers?: React.ComponentType<any>[];\n  accessibility?: AccessibilityConfig;\n  performance?: PerformanceConfig;\n  styles?: StyleTestConfig;\n}\n\nexport interface ViewportSize {\n  width: number;\n  height: number;\n  devicePixelRatio?: number;\n}\n\nexport interface AccessibilityConfig {\n  enabled: boolean;\n  rules?: string[];\n  tags?: string[];\n  skipRules?: string[];\n}\n\nexport interface PerformanceConfig {\n  enabled: boolean;\n  renderTimeThreshold?: number;\n  memoryThreshold?: number;\n  reRenderLimit?: number;\n}\n\nexport interface StyleTestConfig {\n  enabled: boolean;\n  snapshotStyles?: boolean;\n  checkResponsive?: boolean;\n  breakpoints?: number[];\n}\n\nexport interface ComponentTestResult {\n  renderTime: number;\n  memoryUsage: number;\n  reRenderCount: number;\n  accessibilityViolations: any[];\n  styleSnapshot?: string;\n  interactions: InteractionResult[];\n}\n\nexport interface InteractionResult {\n  action: string;\n  element: string;\n  success: boolean;\n  duration: number;\n  error?: string;\n}\n\nexport interface ComponentTestSuite {\n  name: string;\n  component: React.ComponentType<any>;\n  props?: Record<string, any>;\n  variants?: ComponentVariant[];\n  interactions?: ComponentInteraction[];\n  config?: ComponentTestConfig;\n}\n\nexport interface ComponentVariant {\n  name: string;\n  props: Record<string, any>;\n  description?: string;\n}\n\nexport interface ComponentInteraction {\n  name: string;\n  action: (user: any, container: HTMLElement) => Promise<void>;\n  assertions: (container: HTMLElement) => Promise<void>;\n  timeout?: number;\n}\n\nexport class ComponentTestFramework {\n  private config: ComponentTestConfig;\n  private queryClient: QueryClient;\n  private performanceObserver?: PerformanceObserver;\n  private renderCount: number = 0;\n\n  constructor(config: ComponentTestConfig = {}) {\n    this.config = {\n      theme: 'light',\n      viewport: { width: 1024, height: 768 },\n      accessibility: { enabled: true },\n      performance: { enabled: true, renderTimeThreshold: 100 },\n      styles: { enabled: true },\n      ...config,\n    };\n\n    this.queryClient = {\n      clear: jest.fn(),\n      // Mock query client for testing\n    };\n\n    this.setupViewport();\n    this.setupPerformanceMonitoring();\n  }\n\n  /**\n   * Render component with all necessary providers and wrappers\n   */\n  renderComponent(\n    component: React.ReactElement,\n    options: ComponentTestConfig = {},\n  ) {\n    const mergedConfig = { ...this.config, ...options };\n    this.renderCount = 0;\n\n    const AllProviders: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n      this.renderCount++;\n\n      let wrappedChildren = children;\n\n      // Wrap with theme provider\n      if (mergedConfig.theme) {\n        wrappedChildren = (\n          <MockThemeProvider attribute=\"class\" defaultTheme={mergedConfig.theme}>\n            {wrappedChildren}\n          </MockThemeProvider>\n        );\n      }\n\n      // Wrap with query client\n      wrappedChildren = (\n        <MockQueryClientProvider client={this.queryClient}>\n          {wrappedChildren}\n        </MockQueryClientProvider>\n      );\n\n      // Wrap with custom providers\n      if (mergedConfig.providers) {\n        mergedConfig.providers.forEach(Provider => {\n          wrappedChildren = <Provider>{wrappedChildren}</Provider>;\n        });\n      }\n\n      return <React.Fragment>{wrappedChildren}</React.Fragment>;\n    };\n\n    const startTime = performance.now();\n    const result = render(component, {\n      wrapper: AllProviders,\n      ...options,\n    });\n    const renderTime = performance.now() - startTime;\n\n    return {\n      ...result,\n      renderTime,\n      renderCount: this.renderCount,\n    };\n  }\n\n  /**\n   * Run comprehensive component test suite\n   */\n  async runTestSuite(suite: ComponentTestSuite): Promise<ComponentTestResult> {\n    const startTime = performance.now();\n    const memoryBefore = this.getMemoryUsage();\n\n    // Render base component\n    const { container, renderTime } = this.renderComponent(\n      React.createElement(suite.component, suite.props || {}),\n    );\n\n    const result: ComponentTestResult = {\n      renderTime,\n      memoryUsage: 0,\n      reRenderCount: this.renderCount,\n      accessibilityViolations: [],\n      interactions: [],\n    };\n\n    try {\n      // Test component variants\n      if (suite.variants) {\n        for (const variant of suite.variants) {\n          await this.testVariant(suite.component, variant, suite.config);\n        }\n      }\n\n      // Run accessibility tests\n      if (this.config.accessibility?.enabled) {\n        result.accessibilityViolations = await this.testAccessibility(container);\n      }\n\n      // Run style tests\n      if (this.config.styles?.enabled) {\n        result.styleSnapshot = await this.testStyles(container);\n      }\n\n      // Run interaction tests\n      if (suite.interactions) {\n        for (const interaction of suite.interactions) {\n          const interactionResult = await this.testInteraction(\n            container,\n            interaction,\n          );\n          result.interactions.push(interactionResult);\n        }\n      }\n\n      // Calculate memory usage\n      const memoryAfter = this.getMemoryUsage();\n      result.memoryUsage = memoryAfter - memoryBefore;\n\n      return result;\n    } catch (error) {\n      throw new Error(`Component test suite failed: ${error}`);\n    }\n  }\n\n  /**\n   * Test component variant\n   */\n  private async testVariant(\n    Component: React.ComponentType<any>,\n    variant: ComponentVariant,\n    config?: ComponentTestConfig,\n  ): Promise<void> {\n    const { container } = this.renderComponent(\n      React.createElement(Component, variant.props),\n      config,\n    );\n\n    // Basic rendering test\n    expect(container.firstChild).toBeInTheDocument();\n\n    // Accessibility test for variant\n    if (this.config.accessibility?.enabled) {\n      const violations = await this.testAccessibility(container);\n      expect(violations).toHaveLength(0);\n    }\n  }\n\n  /**\n   * Test component accessibility\n   */\n  async testAccessibility(container: HTMLElement): Promise<any[]> {\n    const config = this.config.accessibility;\n    if (!config?.enabled) return [];\n\n    const axeConfig = {\n      rules: config.rules ? this.buildRulesConfig(config.rules) : undefined,\n      tags: config.tags,\n      exclude: config.skipRules,\n    };\n\n    const results = await axe(container, axeConfig);\n    return results.violations;\n  }\n\n  /**\n   * Test component styles and responsive behavior\n   */\n  async testStyles(container: HTMLElement): Promise<string> {\n    const config = this.config.styles;\n    if (!config?.enabled) return '';\n\n    let styleSnapshot = '';\n\n    // Capture base styles\n    if (config.snapshotStyles) {\n      styleSnapshot = this.captureStyleSnapshot(container);\n    }\n\n    // Test responsive behavior\n    if (config.checkResponsive && config.breakpoints) {\n      for (const breakpoint of config.breakpoints) {\n        await this.testResponsiveBreakpoint(container, breakpoint);\n      }\n    }\n\n    return styleSnapshot;\n  }\n\n  /**\n   * Test component interaction\n   */\n  async testInteraction(\n    container: HTMLElement,\n    interaction: ComponentInteraction,\n  ): Promise<InteractionResult> {\n    const user = userEvent.setup();\n    const startTime = performance.now();\n\n    try {\n      // Execute interaction\n      await interaction.action(user, container);\n\n      // Run assertions\n      await interaction.assertions(container);\n\n      const duration = performance.now() - startTime;\n      return {\n        action: interaction.name,\n        element: container.tagName,\n        success: true,\n        duration,\n      };\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      return {\n        action: interaction.name,\n        element: container.tagName,\n        success: false,\n        duration,\n        error: error instanceof Error ? error.message : String(error),\n      };\n    }\n  }\n\n  /**\n   * Test responsive breakpoint\n   */\n  private async testResponsiveBreakpoint(\n    container: HTMLElement,\n    breakpoint: number,\n  ): Promise<void> {\n    // Simulate viewport resize\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: breakpoint,\n    });\n\n    // Trigger resize event\n    window.dispatchEvent(new Event('resize'));\n\n    // Wait for any responsive changes\n    await waitFor(() => {\n      // Component should still be rendered\n      expect(container.firstChild).toBeInTheDocument();\n    });\n  }\n\n  /**\n   * Capture style snapshot for regression testing\n   */\n  private captureStyleSnapshot(container: HTMLElement): string {\n    const elements = container.querySelectorAll('*');\n    const styles: string[] = [];\n\n    elements.forEach(element => {\n      const computedStyle = window.getComputedStyle(element);\n      const relevantStyles = [\n        'display', 'position', 'width', 'height', 'margin', 'padding',\n        'color', 'background-color', 'font-size', 'font-weight',\n      ];\n\n      const elementStyles = relevantStyles\n        .map(prop => `${prop}: ${computedStyle.getPropertyValue(prop)}`)\n        .join('; ');\n\n      styles.push(`${element.tagName.toLowerCase()}: ${elementStyles}`);\n    });\n\n    return styles.join('\\n');\n  }\n\n  /**\n   * Build accessibility rules configuration\n   */\n  private buildRulesConfig(rules: string[]): Record<string, { enabled: boolean }> {\n    const config: Record<string, { enabled: boolean }> = {};\n    rules.forEach(rule => {\n      config[rule] = { enabled: true };\n    });\n    return config;\n  }\n\n  /**\n   * Setup viewport for testing\n   */\n  private setupViewport(): void {\n    const { width, height, devicePixelRatio = 1 } = this.config.viewport!;\n\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: width,\n    });\n\n    Object.defineProperty(window, 'innerHeight', {\n      writable: true,\n      configurable: true,\n      value: height,\n    });\n\n    Object.defineProperty(window, 'devicePixelRatio', {\n      writable: true,\n      configurable: true,\n      value: devicePixelRatio,\n    });\n  }\n\n  /**\n   * Setup performance monitoring\n   */\n  private setupPerformanceMonitoring(): void {\n    if (!this.config.performance?.enabled) return;\n\n    if ('PerformanceObserver' in window) {\n      this.performanceObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach(entry => {\n          if (entry.entryType === 'measure' && entry.name.includes('React')) {\n            const threshold = this.config.performance?.renderTimeThreshold || 100;\n            if (entry.duration > threshold) {\n              console.warn(`Slow render detected: ${entry.name} took ${entry.duration}ms`);\n            }\n          }\n        });\n      });\n\n      this.performanceObserver.observe({ entryTypes: ['measure', 'navigation'] });\n    }\n  }\n\n  /**\n   * Get current memory usage\n   */\n  private getMemoryUsage(): number {\n    if ('memory' in performance) {\n      return (performance as any).memory.usedJSHeapSize;\n    }\n    return 0;\n  }\n\n  /**\n   * Create test utilities for common patterns\n   */\n  createTestUtils() {\n    return {\n      // Find elements by test ID\n      findByTestId: (testId: string) => screen.findByTestId(testId),\n      getByTestId: (testId: string) => screen.getByTestId(testId),\n      queryByTestId: (testId: string) => screen.queryByTestId(testId),\n\n      // Find elements by role\n      findByRole: (role: string, options?: any) => screen.findByRole(role, options),\n      getByRole: (role: string, options?: any) => screen.getByRole(role, options),\n      queryByRole: (role: string, options?: any) => screen.queryByRole(role, options),\n\n      // User interactions\n      click: async (element: HTMLElement) => {\n        const user = userEvent.setup();\n        await user.click(element);\n      },\n\n      type: async (element: HTMLElement, text: string) => {\n        const user = userEvent.setup();\n        await user.type(element, text);\n      },\n\n      hover: async (element: HTMLElement) => {\n        const user = userEvent.setup();\n        await user.hover(element);\n      },\n\n      // Wait utilities\n      waitForElement: (callback: () => HTMLElement) => waitFor(callback),\n      waitForElementToBeRemoved: (element: HTMLElement) =>\n        waitFor(() => expect(element).not.toBeInTheDocument()),\n\n      // Accessibility utilities\n      expectAccessible: async (container: HTMLElement) => {\n        const results = await axe(container);\n        expect(results).toHaveNoViolations();\n      },\n\n      // Style utilities\n      expectVisible: (element: HTMLElement) => {\n        expect(element).toBeVisible();\n      },\n\n      expectHidden: (element: HTMLElement) => {\n        expect(element).not.toBeVisible();\n      },\n\n      // Performance utilities\n      measureRenderTime: async (renderFn: () => void) => {\n        const start = performance.now();\n        renderFn();\n        await waitFor(() => {});\n        return performance.now() - start;\n      },\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    if (this.performanceObserver) {\n      this.performanceObserver.disconnect();\n    }\n    this.queryClient.clear();\n  }\n}\n\n/**\n * Create component test framework instance\n */\nexport function createComponentTestFramework(config?: ComponentTestConfig): ComponentTestFramework {\n  return new ComponentTestFramework(config);\n}\n\n/**\n * Higher-order function for component testing\n */\nexport function withComponentTest<P extends object>(\n  Component: React.ComponentType<P>,\n  config?: ComponentTestConfig,\n) {\n  return (props: P) => {\n    const framework = createComponentTestFramework(config);\n    return framework.renderComponent(<Component {...props} />);\n  };\n}\n\n/**\n * Test suite builder for components\n */\nexport class ComponentTestSuiteBuilder {\n  private suite: Partial<ComponentTestSuite> = {};\n\n  component(component: React.ComponentType<any>): this {\n    this.suite.component = component;\n    return this;\n  }\n\n  name(name: string): this {\n    this.suite.name = name;\n    return this;\n  }\n\n  props(props: Record<string, any>): this {\n    this.suite.props = props;\n    return this;\n  }\n\n  variant(name: string, props: Record<string, any>, description?: string): this {\n    if (!this.suite.variants) this.suite.variants = [];\n    this.suite.variants.push({ name, props, description });\n    return this;\n  }\n\n  interaction(\n    name: string,\n    action: ComponentInteraction['action'],\n    assertions: ComponentInteraction['assertions'],\n    timeout?: number,\n  ): this {\n    if (!this.suite.interactions) this.suite.interactions = [];\n    this.suite.interactions.push({ name, action, assertions, timeout });\n    return this;\n  }\n\n  config(config: ComponentTestConfig): this {\n    this.suite.config = config;\n    return this;\n  }\n\n  build(): ComponentTestSuite {\n    if (!this.suite.component || !this.suite.name) {\n      throw new Error('Component and name are required for test suite');\n    }\n    return this.suite as ComponentTestSuite;\n  }\n}\n\n/**\n * Create component test suite builder\n */\nexport function createTestSuite(): ComponentTestSuiteBuilder {\n  return new ComponentTestSuiteBuilder();\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/ui/ComponentTestUtils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/ui/InteractionSimulator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/ui/StyleRegressionTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/testing/utils/TestingUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/utils/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/utils/graphValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/utils/id.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/utils/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/utils/memoryMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/utils/standardErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/lib/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/middleware/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/middleware/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/middleware/query-cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/KeyboardShortcuts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/SafeTextarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/TrendingWorks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/components/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/config/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/contexts/AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/errors/BusinessError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/errors/CustomError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/errors/ValidationError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/errors/error-handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/errors/factory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/errors/responses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/errors/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useAdaptiveTypography.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useApiError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useDataLazyLoad.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","line":227,"column":6,"nodeType":"ArrayExpression","endLine":227,"endColumn":112,"suggestions":[{"desc":"Update the dependencies array to be: [getFromCache, state, onLoadStart, onSuccess, fetchFn, setCache, cacheKey, timeout, retries, onError, retryDelay]","fix":{"range":[4511,4617],"text":"[getFromCache, state, onLoadStart, onSuccess, fetchFn, setCache, cacheKey, timeout, retries, onError, retryDelay]"}}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":250,"column":6,"nodeType":"Identifier","endLine":250,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'dependencies.length', 'reload', and 'state.isLoaded'. Either include them or remove the dependency array.","line":250,"column":6,"nodeType":"Identifier","endLine":250,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [dependencies.length, reload, state.isLoaded]","fix":{"range":[4992,5004],"text":"[dependencies.length, reload, state.isLoaded]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据懒加载Hook\n */\n'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\n\nimport { logger } from '@/lib/logging/logger';\n\n/**\n * 数据懒加载配置\n */\nexport interface DataLazyLoadConfig {\n  // 缓存键\n  cacheKey?: string;\n  // 缓存时间（毫秒）\n  cacheTTL?: number;\n  // 是否启用缓存\n  enableCache?: boolean;\n  // 重试次数\n  retries?: number;\n  // 重试延迟（毫秒）\n  retryDelay?: number;\n  // 超时时间（毫秒）\n  timeout?: number;\n  // 是否在组件挂载时自动加载\n  autoLoad?: boolean;\n  // 依赖项（当依赖项变化时重新加载）\n  dependencies?: any[];\n  // 错误处理\n  onError?: (error: Error) => void;\n  // 成功回调\n  onSuccess?: (data: any) => void;\n  // 加载开始回调\n  onLoadStart?: () => void;\n}\n\n/**\n * 数据懒加载状态\n */\nexport interface DataLazyLoadState<T> {\n  data: T | null;\n  isLoading: boolean;\n  error: Error | null;\n  isLoaded: boolean;\n  lastUpdated: Date | null;\n  retryCount: number;\n}\n\n/**\n * 缓存项\n */\ninterface CacheItem<T> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n}\n\n/**\n * 全局缓存\n */\nconst globalCache = new Map<string, CacheItem<any>>();\n\n/**\n * 数据懒加载Hook\n */\nexport function useDataLazyLoad<T>(\n  fetchFn: () => Promise<T>,\n  config: DataLazyLoadConfig = {},\n): [DataLazyLoadState<T>, () => void, () => void] {\n  const {\n    cacheKey,\n    cacheTTL = 5 * 60 * 1000, // 5分钟\n    enableCache = true,\n    retries = 3,\n    retryDelay = 1000,\n    timeout = 10000,\n    autoLoad = false,\n    dependencies = [],\n    onError,\n    onSuccess,\n    onLoadStart,\n  } = config;\n\n  const [state, setState] = useState<DataLazyLoadState<T>>({\n    data: null,\n    isLoading: false,\n    error: null,\n    isLoaded: false,\n    lastUpdated: null,\n    retryCount: 0,\n  });\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const mountedRef = useRef(true);\n\n  // 从缓存获取数据\n  const getFromCache = useCallback((): T | null => {\n    if (!enableCache || !cacheKey) {\n      return;\n    }\n\n    const cached = globalCache.get(cacheKey);\n    if (!cached) {\n      return;\n    }\n\n    const now = Date.now();\n    if (now - cached.timestamp > cached.ttl) {\n      globalCache.delete(cacheKey);\n      return;\n    }\n\n    return cached.data;\n  }, [enableCache, cacheKey]);\n\n  // 设置缓存\n  const setCache = useCallback((data: T) => {\n    if (!enableCache || !cacheKey) {\n      return;\n    }\n\n    globalCache.set(cacheKey, {\n      data,\n      timestamp: Date.now(),\n      ttl: cacheTTL,\n    });\n  }, [enableCache, cacheKey, cacheTTL]);\n\n  // 执行加载\n  const load = useCallback(async (retryCount = 0) => {\n    if (!mountedRef.current) {\n      return;\n    }\n\n    // 检查缓存\n    const cachedData = getFromCache();\n    if (cachedData && retryCount === 0) {\n      setState({\n        data: cachedData,\n        isLoading: false,\n        error: null,\n        isLoaded: true,\n        lastUpdated: new Date(),\n        retryCount: 0,\n      });\n      onSuccess && onSuccess(cachedData);\n      return;\n    }\n\n    // 取消之前的请求\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    abortControllerRef.current = new AbortController();\n    const { signal } = abortControllerRef.current;\n\n    setState({ ...state, isLoading: true,\n      error: null,\n      retryCount,\n     });\n\n    onLoadStart && onLoadStart();\n\n    try {\n      // 设置超时\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error('Request timeout')), timeout);\n      });\n\n      const fetchPromise = fetchFn();\n      const data = await Promise.race([fetchPromise, timeoutPromise]);\n\n      if (!mountedRef.current || signal.aborted) {\n        return;\n      }\n\n      // 设置缓存\n      setCache(data);\n\n      setState({\n        data,\n        isLoading: false,\n        error: null,\n        isLoaded: true,\n        lastUpdated: new Date(),\n        retryCount: 0,\n      });\n\n      onSuccess && onSuccess(data);\n\n      logger.debug('Data lazy load completed', {\n        cacheKey,\n        retryCount,\n        dataSize: JSON.stringify(data).length,\n      });\n\n    } catch (error) {\n      if (!mountedRef.current || signal.aborted) {\n        return;\n      }\n\n      const err = error instanceof Error ? error : new Error(String(error));\n\n      logger.error('Data lazy load failed', err, {\n        cacheKey,\n        retryCount,\n        maxRetries: retries,\n      });\n\n      // 重试逻辑\n      if (retryCount < retries) {\n        setTimeout(() => {\n          load(retryCount + 1);\n        }, retryDelay * (retryCount + 1));\n        return;\n      }\n\n      setState({ ...state, isLoading: false,\n        error: err,\n        retryCount,\n       });\n\n      onError && onError(err);\n    }\n  }, [fetchFn, getFromCache, setCache, timeout, retries, retryDelay, onLoadStart, onSuccess, onError, cacheKey]);\n\n  // 手动重新加载\n  const reload = useCallback(() => {\n    // 清除缓存\n    if (cacheKey) {\n      globalCache.delete(cacheKey);\n    }\n    load();\n  }, [load, cacheKey]);\n\n  // 自动加载\n  useEffect(() => {\n    if (autoLoad) {\n      load();\n    }\n  }, [autoLoad, load]);\n\n  // 依赖项变化时重新加载\n  useEffect(() => {\n    if (dependencies.length > 0 && state.isLoaded) {\n      reload();\n    }\n  }, dependencies); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // 清理\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  return [state, load, reload];\n}\n\n/**\n * 分页数据懒加载Hook\n */\nexport function usePaginatedDataLazyLoad<T>(\n  fetchFn: (page: number, pageSize: number) => Promise<{ data: T[]; total: number; hasMore: boolean }>,\n  pageSize: number = 20,\n  config: Omit<DataLazyLoadConfig, 'autoLoad'> = {},\n) {\n  const [allData, setAllData] = useState<T[]>([]);\n  const [page, setPage] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const paginatedFetchFn = useCallback(async () => {\n    const result = await fetchFn(page, pageSize);\n    return result;\n  }, [fetchFn, page, pageSize]);\n\n  const [state, load, reload] = useDataLazyLoad(paginatedFetchFn, {\n    ...config,\n    cacheKey: config.cacheKey ? `${config.cacheKey}-page-${page}` : undefined,\n    onSuccess: (result) => {\n      if (page === 1) {\n        setAllData(result.data);\n      } else {\n        setAllData(prev => [...prev, ...result.data]);\n      }\n      setTotal(result.total);\n      setHasMore(result.hasMore);\n      config.onSuccess?.(result);\n    },\n  });\n\n  const loadMore = useCallback(() => {\n    if (hasMore && !state.isLoading) {\n      setPage(prev => prev + 1);\n    }\n  }, [hasMore, state.isLoading]);\n\n  const reset = useCallback(() => {\n    setAllData([]);\n    setPage(1);\n    setTotal(0);\n    setHasMore(true);\n  }, []);\n\n  // 当页码变化时加载数据\n  useEffect(() => {\n    if (page > 1) {\n      load();\n    }\n  }, [page, load]);\n\n  return {\n    data: allData,\n    total,\n    hasMore,\n    page,\n    state,\n    loadMore,\n    reset,\n    reload: () => {\n      reset();\n      reload();\n    },\n  };\n}\n\n/**\n * 搜索数据懒加载Hook\n */\nexport function useSearchDataLazyLoad<T>(\n  searchFn: (query: string) => Promise<T[]>,\n  config: DataLazyLoadConfig & {\n    debounceDelay?: number;\n    minQueryLength?: number;\n  } = {},\n) {\n  const {\n    debounceDelay = 300,\n    minQueryLength = 1,\n    ...lazyLoadConfig\n  } = config;\n\n  const [query, setQuery] = useState('');\n  const [debouncedQuery, setDebouncedQuery] = useState('');\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const searchFetchFn = useCallback(async () => {\n    if (debouncedQuery.length < minQueryLength) {\n      return [];\n    }\n    return await searchFn(debouncedQuery);\n  }, [searchFn, debouncedQuery, minQueryLength]);\n\n  const [state, load, reload] = useDataLazyLoad(searchFetchFn, {\n    ...lazyLoadConfig,\n    cacheKey: lazyLoadConfig.cacheKey ? `${lazyLoadConfig.cacheKey}-search-${debouncedQuery}` : undefined,\n  });\n\n  // 防抖处理\n  useEffect(() => {\n    if (debounceTimeoutRef.current) {\n      clearTimeout(debounceTimeoutRef.current);\n    }\n\n    debounceTimeoutRef.current = setTimeout(() => {\n      setDebouncedQuery(query);\n    }, debounceDelay);\n\n    return () => {\n      if (debounceTimeoutRef.current) {\n        clearTimeout(debounceTimeoutRef.current);\n      }\n    };\n  }, [query, debounceDelay]);\n\n  // 当搜索词变化时加载数据\n  useEffect(() => {\n    if (debouncedQuery.length >= minQueryLength) {\n      load();\n    }\n  }, [debouncedQuery, minQueryLength, load]);\n\n  const search = useCallback((newQuery: string) => {\n    setQuery(newQuery);\n  }, []);\n\n  const clear = useCallback(() => {\n    setQuery('');\n    setDebouncedQuery('');\n  }, []);\n\n  return {\n    query,\n    debouncedQuery,\n    data: state.data || [],\n    state,\n    search,\n    clear,\n    reload,\n  };\n}\n\n/**\n * 条件数据懒加载Hook\n */\nexport function useConditionalDataLazyLoad<T>(\n  fetchFn: () => Promise<T>,\n  condition: boolean | (() => boolean),\n  config: DataLazyLoadConfig = {},\n) {\n  const shouldLoad = typeof condition === 'function' ? condition() : condition;\n\n  const conditionalFetchFn = useCallback(async () => {\n    if (!shouldLoad) {\n      throw new Error('Condition not met');\n    }\n    return await fetchFn();\n  }, [fetchFn, shouldLoad]);\n\n  const [state, load, reload] = useDataLazyLoad(conditionalFetchFn, {\n    ...config,\n    autoLoad: config.autoLoad && shouldLoad,\n  });\n\n  // 当条件变化时重新评估\n  useEffect(() => {\n    if (shouldLoad && !state.isLoaded && !state.isLoading) {\n      load();\n    }\n  }, [shouldLoad, state.isLoaded, state.isLoading, load]);\n\n  return [state, load, reload] as const;\n}\n\n/**\n * 缓存工具函数\n */\nexport const cacheUtils = {\n  /**\n   * 清除所有缓存\n   */\n  clearAll: () => {\n    globalCache.clear();\n    logger.debug('All data lazy load cache cleared');\n  },\n\n  /**\n   * 清除指定键的缓存\n   */\n  clear: (key: string) => {\n    globalCache.delete(key);\n    logger.debug('Data lazy load cache cleared', { key });\n  },\n\n  /**\n   * 获取缓存统计\n   */\n  getStats: () => {\n    const now = Date.now();\n    let validCount = 0;\n    let expiredCount = 0;\n    let totalSize = 0;\n\n    for (const [key, item] of globalCache.entries()) {\n      const isExpired = now - item.timestamp > item.ttl;\n      if (isExpired) {\n        expiredCount++;\n      } else {\n        validCount++;\n      }\n      totalSize += JSON.stringify(item.data).length;\n    }\n\n    return {\n      totalItems: globalCache.size,\n      validItems: validCount,\n      expiredItems: expiredCount,\n      totalSize,\n    };\n  },\n\n  /**\n   * 清理过期缓存\n   */\n  cleanup: () => {\n    const now = Date.now();\n    let cleanedCount = 0;\n\n    for (const [key, item] of globalCache.entries()) {\n      if (now - item.timestamp > item.ttl) {\n        globalCache.delete(key);\n        cleanedCount++;\n      }\n    }\n\n    logger.debug('Expired data lazy load cache cleaned', { cleanedCount });\n    return cleanedCount;\n  },\n};\n\n// 定期清理过期缓存\nif (typeof window !== 'undefined') {\n  setInterval(() => {\n    cacheUtils.cleanup();\n  }, 5 * 60 * 1000); // 每5分钟清理一次\n}\n\nexport default useDataLazyLoad;\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useDebounce.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":47,"column":24,"nodeType":"SpreadElement","endLine":47,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\n\n/**\n * 防抖Hook - 延迟更新值直到指定时间内没有新的更新\n * @param value - 需要防抖的值\n * @param delay - 延迟时间（毫秒）\n * @returns 防抖后的值\n */\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\n/**\n * 防抖回调Hook - 延迟执行回调函数\n * @param callback - 需要防抖的回调函数\n * @param delay - 延迟时间（毫秒）\n * @param deps - 依赖数组\n * @returns 防抖后的回调函数\n */\nexport function useDebouncedCallback<T extends(...args: any[]) => any>(\n  callback: T,\n  delay: number,\n  deps: React.DependencyList = [],\n): T {\n  const [debouncedCallback, setDebouncedCallback] = useState<T>(() => callback);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedCallback(() => callback);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [callback, delay, ...deps]);\n\n  return debouncedCallback;\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useFocusManagement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useHoverEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useInfiniteScroll.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useInvitation.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInvitationData'. Either include it or remove the dependency array.","line":126,"column":6,"nodeType":"ArrayExpression","endLine":126,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadInvitationData, userId]","fix":{"range":[3006,3014],"text":"[loadInvitationData, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 邀请管理相关的自定义Hook\n */\n\nimport { useState, useEffect } from 'react';\n\nimport { useToast } from '@/shared/hooks/use-toast';\n\ninterface InviteCode {\n  id: string\n  code: string\n  inviterId: string\n  createdAt: Date\n  expiresAt: Date\n  isActive: boolean\n  usageCount: number\n  maxUsage: number\n  inviteLink: string\n}\n\ninterface InviteStats {\n  totalInvites: number\n  successfulRegistrations: number\n  activeInvitees: number\n  totalRewardsEarned: number\n  conversionRate: number\n}\n\nexport const useInvitation = (userId: string) => {\n  const [inviteCode, setInviteCode] = useState<InviteCode | null>(null);\n  const [inviteStats, setInviteStats] = useState<InviteStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [generating, setGenerating] = useState(false);\n\n  const { toast } = useToast();\n\n  const loadInvitationData = async () => {\n    try {\n      setLoading(true);\n\n      // 获取邀请码信息\n      const inviteResponse = await fetch(`/api/invite/user/${userId}`);\n      if (inviteResponse.ok) {\n        const inviteData = await inviteResponse.json();\n        setInviteCode(inviteData.data);\n      }\n\n      // 获取邀请统计\n      const statsResponse = await fetch(`/api/invite/stats/${userId}`);\n      if (statsResponse.ok) {\n        const statsData = await statsResponse.json();\n        setInviteStats(statsData.data);\n      }\n    } catch (error) {\n      console.error('Failed to load invitation data:', error);\n      toast({\n        title: '加载失败',\n        description: '无法加载邀请数据，请稍后重试',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateNewInviteCode = async () => {\n    try {\n      setGenerating(true);\n\n      const response = await fetch('/api/invite/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userId }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setInviteCode(data.data);\n        toast({\n          title: '生成成功',\n          description: '新的邀请码已生成',\n        });\n        return data.data;\n      } else {\n        throw new Error('Failed to generate invite code');\n      }\n    } catch (error) {\n      console.error('Failed to generate invite code:', error);\n      toast({\n        title: '生成失败',\n        description: '无法生成邀请码，请稍后重试',\n        variant: 'destructive',\n      });\n      return;\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  const recordShareEvent = async (platform: string) => {\n    if (!inviteCode) return;\n\n    try {\n      await fetch('/api/invite/share', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          inviteCodeId: inviteCode.id,\n          platform,\n          userId,\n        }),\n      });\n    } catch (error) {\n      console.error('Failed to record share event:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (userId) {\n      loadInvitationData();\n    }\n  }, [userId]);\n\n  return {\n    inviteCode,\n    inviteStats,\n    loading,\n    generating,\n    loadInvitationData,\n    generateNewInviteCode,\n    recordShareEvent,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useKeyboardNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useKnowledgeGraph.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useLazyLoad.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useLazyLoadPerformance.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'finishTracking' and 'startTracking'. Either include them or remove the dependency array.","line":182,"column":8,"nodeType":"ArrayExpression","endLine":182,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [finishTracking, startTracking]","fix":{"range":[4742,4744],"text":"[finishTracking, startTracking]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport {\n  ComponentType,\n  ReactNode,\n  createContext,\n  createElement,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\ninterface LazyLoadMetrics {\n  componentName: string;\n  loadStartTime: number;\n  loadEndTime?: number;\n  loadDuration?: number;\n  isLoading: boolean;\n  error?: Error;\n}\n\ninterface PerformanceData {\n  totalComponents: number;\n  loadedComponents: number;\n  averageLoadTime: number;\n  slowestComponent?: LazyLoadMetrics;\n  fastestComponent?: LazyLoadMetrics;\n  failedComponents: LazyLoadMetrics[];\n}\n\n/**\n * 懒加载性能监控Hook\n * 跟踪组件加载时间和性能指标\n */\nexport function useLazyLoadPerformance() {\n  const [metrics, setMetrics] = useState<LazyLoadMetrics[]>([]);\n  const [performanceData, setPerformanceData] = useState<PerformanceData>({\n    totalComponents: 0,\n    loadedComponents: 0,\n    averageLoadTime: 0,\n    failedComponents: [],\n  });\n\n  const metricsRef = useRef<Map<string, LazyLoadMetrics>>(new Map());\n\n  // 开始跟踪组件加载\n  const startTracking = (componentName: string) => {\n    const metric: LazyLoadMetrics = {\n      componentName,\n      loadStartTime: performance.now(),\n      isLoading: true,\n    };\n\n    metricsRef.current.set(componentName, metric);\n    setMetrics(prev => [...prev.filter(m => m.componentName !== componentName), metric]);\n  };\n\n  // 完成组件加载跟踪\n  const finishTracking = (componentName: string, error?: Error) => {\n    const metric = metricsRef.current.get(componentName);\n    if (!metric) return;\n\n    const loadEndTime = performance.now();\n    const loadDuration = loadEndTime - metric.loadStartTime;\n\n    const updatedMetric: LazyLoadMetrics = {\n      ...metric,\n      loadEndTime,\n      loadDuration,\n      isLoading: false,\n      error,\n    };\n\n    metricsRef.current.set(componentName, updatedMetric);\n    setMetrics(prev => prev.map(m =>\n      m.componentName === componentName ? updatedMetric : m,\n    ));\n  };\n\n  // 计算性能数据\n  useEffect(() => {\n    const allMetrics = Array.from(metricsRef.current.values());\n    const loadedMetrics = allMetrics.filter(m => !m.isLoading && !m.error);\n    const failedMetrics = allMetrics.filter(m => m.error);\n\n    const loadTimes = loadedMetrics\n      .map(m => m.loadDuration)\n      .filter((time): time is number => time !== undefined);\n\n    const averageLoadTime = loadTimes.length > 0\n      ? loadTimes.reduce((sum, time) => sum + time, 0) / loadTimes.length\n      : 0;\n\n    const slowestComponent = loadedMetrics.reduce((slowest, current) => {\n      if (!slowest || !current.loadDuration) return slowest;\n      if (!slowest.loadDuration || current.loadDuration > slowest.loadDuration) {\n        return current;\n      }\n      return slowest;\n    }, undefined as LazyLoadMetrics | undefined);\n\n    const fastestComponent = loadedMetrics.reduce((fastest, current) => {\n      if (!fastest || !current.loadDuration) return fastest;\n      if (!fastest.loadDuration || current.loadDuration < fastest.loadDuration) {\n        return current;\n      }\n      return fastest;\n    }, undefined as LazyLoadMetrics | undefined);\n\n    setPerformanceData({\n      totalComponents: allMetrics.length,\n      loadedComponents: loadedMetrics.length,\n      averageLoadTime,\n      slowestComponent,\n      fastestComponent,\n      failedComponents: failedMetrics,\n    });\n  }, [metrics]);\n\n  // 获取组件性能报告\n  const getPerformanceReport = () => {\n    const report = {\n      summary: performanceData,\n      details: metrics,\n      recommendations: [] as string[],\n    };\n\n    // 生成性能建议\n    if (performanceData.averageLoadTime > 1000) {\n      report.recommendations.push('平均加载时间超过1秒，考虑进一步优化组件大小');\n    }\n\n    if (performanceData.failedComponents.length > 0) {\n      report.recommendations.push(`有${performanceData.failedComponents.length}个组件加载失败，需要检查错误处理`);\n    }\n\n    if (performanceData.slowestComponent && performanceData.slowestComponent.loadDuration! > 2000) {\n      report.recommendations.push(`组件\"${performanceData.slowestComponent.componentName}\"加载时间过长，需要优化`);\n    }\n\n    return report;\n  };\n\n  // 清除性能数据\n  const clearMetrics = () => {\n    metricsRef.current.clear();\n    setMetrics([]);\n    setPerformanceData({\n      totalComponents: 0,\n      loadedComponents: 0,\n      averageLoadTime: 0,\n      failedComponents: [],\n    });\n  };\n\n  return {\n    metrics,\n    performanceData,\n    startTracking,\n    finishTracking,\n    getPerformanceReport,\n    clearMetrics,\n  };\n}\n\n/**\n * 懒加载性能监控HOC\n */\nexport function withLazyLoadTracking<T extends object>(\n  WrappedComponent: ComponentType<T>,\n  componentName: string,\n) {\n  return function TrackedComponent(props: T) {\n    const { startTracking, finishTracking } = useLazyLoadPerformance();\n\n    useEffect(() => {\n      startTracking(componentName);\n\n      return () => {\n        finishTracking(componentName);\n      };\n    }, []);\n\n    return createElement(WrappedComponent, props);\n  };\n}\n\n/**\n * 性能监控上下文\n */\nexport const LazyLoadPerformanceContext = createContext<{\n  startTracking:(componentName: string) => void;\n  finishTracking: (componentName: string, error?: Error) => void;\n  getPerformanceReport: () => any;\n} | null>(null);\n\nexport function LazyLoadPerformanceProvider({ children }: { children: ReactNode }) {\n  const performance = useLazyLoadPerformance();\n\n  return createElement(\n    LazyLoadPerformanceContext.Provider,\n    { value: performance },\n    children,\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/usePerformanceMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useResponsive.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useSEO.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useShare.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useSubscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useTouch.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'config' object makes the dependencies of useCallback Hook (at line 192) change on every render. To fix this, wrap the initialization of 'config' in its own useMemo() Hook.","line":63,"column":9,"nodeType":"VariableDeclarator","endLine":63,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 移动端触摸交互优化Hook\n * 提供触摸手势识别和优化\n */\n\nimport { useRef, useEffect, useCallback } from 'react';\n\nimport { useIsTouchDevice } from './useResponsive';\n\ninterface TouchPoint {\n  x: number\n  y: number\n  timestamp: number\n}\n\ninterface SwipeGesture {\n  direction: 'left' | 'right' | 'up' | 'down'\n  distance: number\n  duration: number\n  velocity: number\n}\n\ninterface TouchOptions {\n  // 滑动手势配置\n  swipeThreshold?: number      // 最小滑动距离\n  swipeTimeout?: number        // 最大滑动时间\n  velocityThreshold?: number   // 最小滑动速度\n\n  // 长按配置\n  longPressDelay?: number      // 长按延迟时间\n  longPressMoveThreshold?: number // 长按移动容忍度\n\n  // 双击配置\n  doubleTapDelay?: number      // 双击间隔时间\n  doubleTapDistance?: number   // 双击位置容忍度\n}\n\nconst defaultOptions: Required<TouchOptions> = {\n  swipeThreshold: 50,\n  swipeTimeout: 300,\n  velocityThreshold: 0.3,\n  longPressDelay: 500,\n  longPressMoveThreshold: 10,\n  doubleTapDelay: 300,\n  doubleTapDistance: 25,\n};\n\ninterface TouchHandlers {\n  onSwipe?: (gesture: SwipeGesture) => void\n  onLongPress?: (point: TouchPoint) => void\n  onDoubleTap?: (point: TouchPoint) => void\n  onTouchStart?: (point: TouchPoint) => void\n  onTouchEnd?: (point: TouchPoint) => void\n  onTouchMove?: (point: TouchPoint) => void\n}\n\nexport const useTouch = (\n  elementRef: React.RefObject<HTMLElement>,\n  handlers: TouchHandlers = {},\n  options: TouchOptions = {},\n) => {\n  const isTouchDevice = useIsTouchDevice();\n  const config = { ...defaultOptions, ...options };\n\n  const touchStartRef = useRef<TouchPoint | null>(null);\n  const longPressTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const lastTapRef = useRef<TouchPoint | null>(null);\n  const doubleTapTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // 获取触摸点坐标\n  const getTouchPoint = useCallback((event: TouchEvent | MouseEvent): TouchPoint => {\n    const touch = 'touches' in event ? event.touches[0] || event.changedTouches[0] : event;\n    return {\n      x: touch.clientX,\n      y: touch.clientY,\n      timestamp: Date.now(),\n    };\n  }, []);\n\n  // 计算两点距离\n  const getDistance = useCallback((point1: TouchPoint, point2: TouchPoint): number => {\n    const dx = point2.x - point1.x;\n    const dy = point2.y - point1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }, []);\n\n  // 计算滑动方向\n  const getSwipeDirection = useCallback((start: TouchPoint, end: TouchPoint): 'left' | 'right' | 'up' | 'down' => {\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n\n    if (Math.abs(dx) > Math.abs(dy)) {\n      return dx > 0 ? 'right' : 'left';\n    } else {\n      return dy > 0 ? 'down' : 'up';\n    }\n  }, []);\n\n  // 处理触摸开始\n  const handleTouchStart = useCallback((event: TouchEvent | MouseEvent) => {\n    const point = getTouchPoint(event);\n    touchStartRef.current = point;\n\n    // 触发开始回调\n    handlers.onTouchStart?.(point);\n\n    // 设置长按定时器\n    if (handlers.onLongPress) {\n      longPressTimerRef.current = setTimeout(() => {\n        if (touchStartRef.current) {\n          handlers.onLongPress!(touchStartRef.current);\n        }\n      }, config.longPressDelay);\n    }\n  }, [getTouchPoint, handlers, config.longPressDelay]);\n\n  // 处理触摸移动\n  const handleTouchMove = useCallback((event: TouchEvent | MouseEvent) => {\n    const point = getTouchPoint(event);\n\n    // 触发移动回调\n    handlers.onTouchMove?.(point);\n\n    // 检查是否超出长按移动容忍度\n    if (touchStartRef.current && longPressTimerRef.current) {\n      const distance = getDistance(touchStartRef.current, point);\n      if (distance > config.longPressMoveThreshold) {\n        clearTimeout(longPressTimerRef.current);\n        longPressTimerRef.current = null;\n      }\n    }\n  }, [getTouchPoint, handlers, getDistance, config.longPressMoveThreshold]);\n\n  // 处理触摸结束\n  const handleTouchEnd = useCallback((event: TouchEvent | MouseEvent) => {\n    const point = getTouchPoint(event);\n\n    // 清除长按定时器\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n\n    // 触发结束回调\n    handlers.onTouchEnd?.(point);\n\n    if (!touchStartRef.current) return;\n\n    const startPoint = touchStartRef.current;\n    const distance = getDistance(startPoint, point);\n    const duration = point.timestamp - startPoint.timestamp;\n\n    // 检查滑动手势\n    if (handlers.onSwipe && distance >= config.swipeThreshold && duration <= config.swipeTimeout) {\n      const velocity = distance / duration;\n      if (velocity >= config.velocityThreshold) {\n        const direction = getSwipeDirection(startPoint, point);\n        handlers.onSwipe({\n          direction,\n          distance,\n          duration,\n          velocity,\n        });\n      }\n    }\n\n    // 检查双击手势\n    if (handlers.onDoubleTap) {\n      if (lastTapRef.current) {\n        const timeDiff = point.timestamp - lastTapRef.current.timestamp;\n        const distanceDiff = getDistance(lastTapRef.current, point);\n\n        if (timeDiff <= config.doubleTapDelay && distanceDiff <= config.doubleTapDistance) {\n          handlers.onDoubleTap(point);\n          lastTapRef.current = null;\n          if (doubleTapTimerRef.current) {\n            clearTimeout(doubleTapTimerRef.current);\n            doubleTapTimerRef.current = null;\n          }\n        } else {\n          lastTapRef.current = point;\n        }\n      } else {\n        lastTapRef.current = point;\n        doubleTapTimerRef.current = setTimeout(() => {\n          lastTapRef.current = null;\n        }, config.doubleTapDelay);\n      }\n    }\n\n    touchStartRef.current = null;\n  }, [getTouchPoint, handlers, getDistance, getSwipeDirection, config]);\n\n  // 绑定事件监听器\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element || !isTouchDevice) return;\n\n    // 阻止默认的触摸行为\n    const preventDefault = (e: TouchEvent) => {\n      if (e.touches.length > 1) {\n        e.preventDefault();\n      }\n    };\n\n    // 绑定触摸事件\n    element.addEventListener('touchstart', handleTouchStart, { passive: false });\n    element.addEventListener('touchmove', handleTouchMove, { passive: true });\n    element.addEventListener('touchend', handleTouchEnd, { passive: true });\n    element.addEventListener('touchcancel', handleTouchEnd, { passive: true });\n\n    // 绑定鼠标事件（用于桌面端测试）\n    element.addEventListener('mousedown', handleTouchStart);\n    element.addEventListener('mousemove', handleTouchMove);\n    element.addEventListener('mouseup', handleTouchEnd);\n\n    // 阻止多点触摸的默认行为\n    element.addEventListener('touchstart', preventDefault, { passive: false });\n\n    return () => {\n      element.removeEventListener('touchstart', handleTouchStart);\n      element.removeEventListener('touchmove', handleTouchMove);\n      element.removeEventListener('touchend', handleTouchEnd);\n      element.removeEventListener('touchcancel', handleTouchEnd);\n\n      element.removeEventListener('mousedown', handleTouchStart);\n      element.removeEventListener('mousemove', handleTouchMove);\n      element.removeEventListener('mouseup', handleTouchEnd);\n\n      element.removeEventListener('touchstart', preventDefault);\n\n      // 清理定时器\n      if (longPressTimerRef.current) {\n        clearTimeout(longPressTimerRef.current);\n      }\n      if (doubleTapTimerRef.current) {\n        clearTimeout(doubleTapTimerRef.current);\n      }\n    };\n  }, [elementRef, isTouchDevice, handleTouchStart, handleTouchMove, handleTouchEnd]);\n\n  return {\n    isTouchDevice,\n    isActive: touchStartRef.current !== null,\n  };\n};\n\n// 触摸反馈Hook\nexport const useTouchFeedback = () => {\n  const addTouchFeedback = useCallback((element: HTMLElement, intensity: 'light' | 'medium' | 'strong' = 'medium') => {\n    const feedbackClass = {\n      light: 'scale-98',\n      medium: 'scale-95',\n      strong: 'scale-90',\n    }[intensity];\n\n    element.style.transform = `scale(${intensity === 'light' ? '0.98' : intensity === 'medium' ? '0.95' : '0.90'})`;\n    element.style.transition = 'transform 0.1s ease';\n\n    setTimeout(() => {\n      element.style.transform = 'scale(1)';\n    }, 100);\n  }, []);\n\n  const addRippleEffect = useCallback((element: HTMLElement, x: number, y: number) => {\n    const ripple = document.createElement('div');\n    const rect = element.getBoundingClientRect();\n    const size = Math.max(rect.width, rect.height);\n\n    ripple.style.width = ripple.style.height = size + 'px';\n    ripple.style.left = (x - rect.left - size / 2) + 'px';\n    ripple.style.top = (y - rect.top - size / 2) + 'px';\n    ripple.style.position = 'absolute';\n    ripple.style.borderRadius = '50%';\n    ripple.style.background = 'rgba(255, 255, 255, 0.6)';\n    ripple.style.transform = 'scale(0)';\n    ripple.style.animation = 'ripple 0.6s linear';\n    ripple.style.pointerEvents = 'none';\n\n    element.style.position = 'relative';\n    element.style.overflow = 'hidden';\n    element.appendChild(ripple);\n\n    setTimeout(() => {\n      ripple.remove();\n    }, 600);\n  }, []);\n\n  return {\n    addTouchFeedback,\n    addRippleEffect,\n  };\n};\n\n// 虚拟键盘适配Hook\nexport const useVirtualKeyboard = () => {\n  const { useState } = require('react');\n  const [keyboardHeight, setKeyboardHeight] = useState(0);\n  const [isKeyboardOpen, setIsKeyboardOpen] = useState(false);\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const handleResize = () => {\n      const viewportHeight = window.visualViewport?.height || window.innerHeight;\n      const windowHeight = window.innerHeight;\n      const heightDiff = windowHeight - viewportHeight;\n\n      setKeyboardHeight(heightDiff);\n      setIsKeyboardOpen(heightDiff > 150); // 键盘高度通常>150px\n    };\n\n    // 监听视口变化\n    if (window.visualViewport) {\n      window.visualViewport.addEventListener('resize', handleResize);\n    } else {\n      window.addEventListener('resize', handleResize);\n    }\n\n    return () => {\n      if (window.visualViewport) {\n        window.visualViewport.removeEventListener('resize', handleResize);\n      } else {\n        window.removeEventListener('resize', handleResize);\n      }\n    };\n  }, []);\n\n  return {\n    keyboardHeight,\n    isKeyboardOpen,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useUpgradeRecommendation.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserBehaviorData'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserBehaviorData, userId]","fix":{"range":[1199,1207],"text":"[loadUserBehaviorData, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'showUpgradePrompt'. Either include it or remove the dependency array.","line":102,"column":6,"nodeType":"ArrayExpression","endLine":102,"endColumn":84,"suggestions":[{"desc":"Update the dependencies array to be: [behaviorData, isLoading, lastPromptTime, enablePreventivePrompts, showUpgradePrompt]","fix":{"range":[2995,3073],"text":"[behaviorData, isLoading, lastPromptTime, enablePreventivePrompts, showUpgradePrompt]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'showUpgradePrompt'. Either include it or remove the dependency array.","line":128,"column":6,"nodeType":"ArrayExpression","endLine":128,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [behaviorData, enableSmartTiming, showUpgradePrompt]","fix":{"range":[3842,3887],"text":"[behaviorData, enableSmartTiming, showUpgradePrompt]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'showUpgradePrompt'. Either include it or remove the dependency array.","line":156,"column":6,"nodeType":"ArrayExpression","endLine":156,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [behaviorData, showUpgradePrompt]","fix":{"range":[4665,4691],"text":"[behaviorData, showUpgradePrompt]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 升级推荐Hook\n * 集成配额监控和智能推荐引擎\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n\nimport { useQuotaMonitor } from '@/core/subscription/quota-monitor';\nimport {\n  UpgradeRecommendationEngine,\n  UserBehaviorData,\n  UpgradeContext,\n} from '@/core/subscription/upgrade-engine';\nimport { useUpgradePrompt } from '@/features/subscription/UpgradePrompt';\nimport { QuotaType, UserTier, UpgradeRecommendation } from '@/shared/types/subscription';\n\ninterface UseUpgradeRecommendationOptions {\n  userId: string;\n  currentTier: UserTier;\n  onUpgrade?: (targetTier: UserTier) => void;\n  enablePreventivePrompts?: boolean;\n  enableSmartTiming?: boolean;\n}\n\nexport function useUpgradeRecommendation({\n  userId,\n  currentTier,\n  onUpgrade,\n  enablePreventivePrompts = true,\n  enableSmartTiming = true,\n}: UseUpgradeRecommendationOptions) {\n  const [behaviorData, setBehaviorData] = useState<UserBehaviorData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastPromptTime, setLastPromptTime] = useState<Date | null>(null);\n\n  const { showPrompt, hidePrompt, UpgradePromptComponent } = useUpgradePrompt();\n\n  // 加载用户行为数据\n  useEffect(() => {\n    loadUserBehaviorData();\n  }, [userId]);\n\n  const loadUserBehaviorData = async () => {\n    try {\n      setIsLoading(true);\n      const data = await fetchUserBehaviorData(userId);\n      setBehaviorData(data);\n    } catch (error) {\n      console.error('Failed to load user behavior data:', error);\n      // 使用默认数据\n      setBehaviorData(createDefaultBehaviorData(userId, currentTier));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 检查是否应该显示升级提示\n  const checkUpgradeRecommendation = useCallback(async (\n    quotaType: QuotaType,\n    currentUsage: number,\n    limit: number,\n  ) => {\n    if (!behaviorData || isLoading) return false;\n\n    // 检查冷却时间（避免频繁提示）\n    if (lastPromptTime && shouldRespectCooldown(lastPromptTime, behaviorData)) {\n      return false;\n    }\n\n    const context = createUpgradeContext(quotaType, currentUsage, limit);\n    const usagePercentage = (currentUsage / limit) * 100;\n\n    // 配额已用完 - 立即显示升级提示\n    if (usagePercentage >= 100) {\n      const recommendation = UpgradeRecommendationEngine.generateRecommendation(\n        behaviorData,\n        context,\n      );\n\n      showUpgradePrompt(quotaType, currentUsage, limit, recommendation);\n      setLastPromptTime(new Date());\n      trackUpgradePromptShown(quotaType, 'quota_exceeded');\n      return true;\n    }\n\n    // 预防性提示（配额接近用完）\n    if (enablePreventivePrompts && usagePercentage >= 80) {\n      const recommendation = UpgradeRecommendationEngine.generatePreventiveRecommendation(\n        behaviorData,\n        context,\n      );\n\n      if (recommendation && shouldShowPreventivePrompt(recommendation, context)) {\n        showUpgradePrompt(quotaType, currentUsage, limit, recommendation);\n        setLastPromptTime(new Date());\n        trackUpgradePromptShown(quotaType, 'preventive');\n        return true;\n      }\n    }\n\n    return false;\n  }, [behaviorData, isLoading, lastPromptTime, enablePreventivePrompts, showPrompt]);\n\n  // 智能时机推荐（基于用户行为模式）\n  const checkSmartTimingRecommendation = useCallback(async () => {\n    if (!behaviorData || !enableSmartTiming) return false;\n\n    const context = createCurrentContext();\n    const propensityScore = UpgradeRecommendationEngine.calculateUpgradePropensity(\n      behaviorData,\n      context,\n    );\n\n    // 只在高倾向分数且合适时机时显示\n    if (propensityScore.score > 75 && isOptimalTiming(context, behaviorData)) {\n      const recommendation = UpgradeRecommendationEngine.generateRecommendation(\n        behaviorData,\n        context,\n      );\n\n      showUpgradePrompt('create', 0, 0, recommendation); // 使用默认配额类型\n      setLastPromptTime(new Date());\n      trackUpgradePromptShown('create', 'smart_timing');\n      return true;\n    }\n\n    return false;\n  }, [behaviorData, enableSmartTiming, showPrompt]);\n\n  // 显示升级提示\n  const showUpgradePrompt = (\n    quotaType: QuotaType,\n    currentUsage: number,\n    limit: number,\n    recommendation: UpgradeRecommendation,\n  ) => {\n    showPrompt(quotaType, currentUsage, limit, currentTier, recommendation);\n  };\n\n  // 手动触发升级推荐\n  const triggerUpgradeRecommendation = useCallback(async (\n    quotaType: QuotaType = 'create',\n    currentUsage: number = 0,\n    limit: number = 0,\n  ) => {\n    if (!behaviorData) return;\n\n    const context = createUpgradeContext(quotaType, currentUsage, limit);\n    const recommendation = UpgradeRecommendationEngine.generateRecommendation(\n      behaviorData,\n      context,\n    );\n\n    showUpgradePrompt(quotaType, currentUsage, limit, recommendation);\n    trackUpgradePromptShown(quotaType, 'manual');\n  }, [behaviorData, showPrompt]);\n\n  // 更新用户行为数据\n  const updateBehaviorData = useCallback((updates: Partial<UserBehaviorData>) => {\n    if (behaviorData) {\n      setBehaviorData({ ...behaviorData, ...updates });\n    }\n  }, [behaviorData]);\n\n  // 记录用户交互\n  const recordUserInteraction = useCallback(async (\n    action: 'prompt_viewed' | 'prompt_dismissed' | 'upgrade_clicked' | 'pricing_visited',\n  ) => {\n    if (!behaviorData) return;\n\n    const updates: Partial<UserBehaviorData> = {};\n\n    switch (action) {\n      case 'prompt_viewed':\n        updates.upgradePromptViews = behaviorData.upgradePromptViews + 1;\n        break;\n      case 'prompt_dismissed':\n        updates.upgradePromptDismissals = behaviorData.upgradePromptDismissals + 1;\n        break;\n      case 'pricing_visited':\n        updates.pricingPageVisits = behaviorData.pricingPageVisits + 1;\n        break;\n    }\n\n    updateBehaviorData(updates);\n\n    // 同步到后端\n    try {\n      await fetch('/api/user/behavior', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId, action, timestamp: new Date() }),\n      });\n    } catch (error) {\n      console.error('Failed to record user interaction:', error);\n    }\n  }, [behaviorData, userId, updateBehaviorData]);\n\n  return {\n    // 状态\n    isLoading,\n    behaviorData,\n\n    // 方法\n    checkUpgradeRecommendation,\n    checkSmartTimingRecommendation,\n    triggerUpgradeRecommendation,\n    recordUserInteraction,\n    updateBehaviorData,\n\n    // 组件\n    UpgradePromptComponent,\n  };\n}\n\n// 辅助函数\n\nasync function fetchUserBehaviorData(userId: string): Promise<UserBehaviorData> {\n  const response = await fetch(`/api/user/behavior?userId=${userId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch user behavior data');\n  }\n  return response.json();\n}\n\nfunction createDefaultBehaviorData(userId: string, tier: UserTier): UserBehaviorData {\n  return {\n    userId,\n    tier,\n    registrationDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7天前\n    lastActiveDate: new Date(),\n    totalSessions: 5,\n    averageSessionDuration: 15,\n    dailyActiveStreak: 3,\n    quotaUsageHistory: [],\n    featureUsage: {\n      cardCreation: 10,\n      templateReuse: 3,\n      imageExport: 5,\n      knowledgeGraph: 2,\n      sharing: 1,\n    },\n    upgradePromptViews: 0,\n    upgradePromptDismissals: 0,\n    pricingPageVisits: 0,\n  };\n}\n\nfunction createUpgradeContext(\n  quotaType: QuotaType,\n  currentUsage: number,\n  limit: number,\n): UpgradeContext {\n  const now = new Date();\n  const hour = now.getHours();\n  const dayOfWeek = now.getDay();\n\n  let timeOfDay: 'morning' | 'afternoon' | 'evening' | 'night';\n  if (hour >= 6 && hour < 12) timeOfDay = 'morning';\n  else if (hour >= 12 && hour < 18) timeOfDay = 'afternoon';\n  else if (hour >= 18 && hour < 22) timeOfDay = 'evening';\n  else timeOfDay = 'night';\n\n  return {\n    quotaType,\n    currentUsage,\n    limit,\n    usagePercentage: limit > 0 ? (currentUsage / limit) * 100 : 0,\n    timeOfDay,\n    dayOfWeek: dayOfWeek >= 1 && dayOfWeek <= 5 ? 'weekday' : 'weekend',\n    isRecurringUser: true, // 简化实现\n    hasRecentActivity: true, // 简化实现\n  };\n}\n\nfunction createCurrentContext(): UpgradeContext {\n  return createUpgradeContext('create', 0, 0);\n}\n\nfunction shouldRespectCooldown(lastPromptTime: Date, behaviorData: UserBehaviorData): boolean {\n  const hoursSinceLastPrompt = (Date.now() - lastPromptTime.getTime()) / (1000 * 60 * 60);\n\n  // 基于用户的抗性调整冷却时间\n  const dismissalRate = behaviorData.upgradePromptViews > 0 ?\n    behaviorData.upgradePromptDismissals / behaviorData.upgradePromptViews : 0;\n\n  let cooldownHours = 4; // 默认4小时\n  if (dismissalRate > 0.7) cooldownHours = 24; // 高抗性用户24小时\n  else if (dismissalRate > 0.5) cooldownHours = 12; // 中等抗性用户12小时\n\n  return hoursSinceLastPrompt < cooldownHours;\n}\n\nfunction shouldShowPreventivePrompt(\n  recommendation: UpgradeRecommendation,\n  context: UpgradeContext,\n): boolean {\n  // 只在推荐强度足够且时机合适时显示预防性提示\n  return recommendation.urgency !== 'low' &&\n         (context.timeOfDay === 'morning' || context.timeOfDay === 'afternoon');\n}\n\nfunction isOptimalTiming(context: UpgradeContext, behaviorData: UserBehaviorData): boolean {\n  // 工作时间 + 工作日 + 用户活跃\n  return context.timeOfDay === 'morning' || context.timeOfDay === 'afternoon' &&\n         context.dayOfWeek === 'weekday' &&\n         behaviorData.dailyActiveStreak > 2;\n}\n\nasync function trackUpgradePromptShown(\n  quotaType: QuotaType,\n  trigger: 'quota_exceeded' | 'preventive' | 'smart_timing' | 'manual',\n) {\n  try {\n    await fetch('/api/analytics/upgrade-prompt', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        quotaType,\n        trigger,\n        timestamp: new Date(),\n      }),\n    });\n  } catch (error) {\n    console.error('Failed to track upgrade prompt:', error);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/hooks/useVirtualization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/stores/authStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/types/cards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/types/contribution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/types/knowledgeGraph.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/types/reuse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/types/square.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/types/subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/types/teaching.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/graphValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/id.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/memoryMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/standardErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/shared/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/stores/authStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/types/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/types/components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]},{"filePath":"/Users/apple/inspi/inspi-ai-platform/test-auth-flow.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]}]}]