# 质量门禁强制执行器
name: 🚪 Quality Gate Enforcer

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      force_check:
        description: '强制执行质量检查'
        required: false
        default: 'false'

env:
  NODE_VERSION: '20'
  # 质量门禁阈值
  COVERAGE_THRESHOLD: '85'
  PERFORMANCE_THRESHOLD: '3000'
  SECURITY_THRESHOLD: '0'
  CODE_QUALITY_THRESHOLD: '0'

jobs:
  # 质量门禁预检查
  quality-gate-precheck:
    name: 🔍 质量门禁预检查
    runs-on: ubuntu-latest
    outputs:
      should_block: ${{ steps.precheck.outputs.should_block }}
      block_reason: ${{ steps.precheck.outputs.block_reason }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 检查任务状态
        id: precheck
        run: |
          echo "🔍 检查当前任务状态..."
          
          # 检查是否有阻断状态的任务
          if grep -q "\[!\]" .kiro/specs/*/tasks.md; then
            echo "❌ 发现存在问题的任务，阻断流水线"
            echo "should_block=true" >> $GITHUB_OUTPUT
            echo "block_reason=存在问题状态的任务" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if grep -q "\[R\]" .kiro/specs/*/tasks.md; then
            echo "❌ 发现需要返工的任务，阻断流水线"
            echo "should_block=true" >> $GITHUB_OUTPUT
            echo "block_reason=存在需要返工的任务" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if grep -q "\[~\]" .kiro/specs/*/tasks.md; then
            echo "⚠️ 发现部分完成的任务，需要完善"
            echo "should_block=true" >> $GITHUB_OUTPUT
            echo "block_reason=存在部分完成的任务" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 任务状态检查通过"
          echo "should_block=false" >> $GITHUB_OUTPUT

  # 代码质量检查
  code-quality-gate:
    name: 📊 代码质量门禁
    runs-on: ubuntu-latest
    needs: quality-gate-precheck
    if: needs.quality-gate-precheck.outputs.should_block != 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: ESLint检查
        run: |
          echo "🔍 运行ESLint检查..."
          npm run lint -- --format json --output-file eslint-report.json || true
          
          # 检查ESLint错误数量
          ERROR_COUNT=$(node -p "JSON.parse(require('fs').readFileSync('eslint-report.json')).reduce((sum, file) => sum + file.errorCount, 0)")
          echo "ESLint错误数量: $ERROR_COUNT"
          
          if [ $ERROR_COUNT -gt $CODE_QUALITY_THRESHOLD ]; then
            echo "❌ ESLint错误数量 ($ERROR_COUNT) 超过阈值 ($CODE_QUALITY_THRESHOLD)"
            echo "QUALITY_GATE_FAILED=true" >> $GITHUB_ENV
            echo "FAILURE_REASON=ESLint错误超标" >> $GITHUB_ENV
          else
            echo "✅ ESLint检查通过"
          fi
      
      - name: TypeScript类型检查
        run: |
          echo "🔍 运行TypeScript类型检查..."
          npm run type-check 2>&1 | tee typescript-report.txt || true
          
          # 检查TypeScript错误
          if grep -q "error TS" typescript-report.txt; then
            echo "❌ 发现TypeScript类型错误"
            echo "QUALITY_GATE_FAILED=true" >> $GITHUB_ENV
            echo "FAILURE_REASON=TypeScript类型错误" >> $GITHUB_ENV
          else
            echo "✅ TypeScript类型检查通过"
          fi
      
      - name: 质量门禁结果
        run: |
          if [ "$QUALITY_GATE_FAILED" = "true" ]; then
            echo "❌ 代码质量门禁失败: $FAILURE_REASON"
            exit 1
          else
            echo "✅ 代码质量门禁通过"
          fi

  # 测试覆盖率门禁
  coverage-gate:
    name: 📈 测试覆盖率门禁
    runs-on: ubuntu-latest
    needs: quality-gate-precheck
    if: needs.quality-gate-precheck.outputs.should_block != 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: 运行测试并生成覆盖率
        run: |
          echo "🧪 运行测试并生成覆盖率报告..."
          npm run test:unit -- --coverage --coverageReporters=json-summary
      
      - name: 检查覆盖率门禁
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "Math.round(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct)")
            echo "当前覆盖率: ${COVERAGE}%"
            echo "要求覆盖率: ${COVERAGE_THRESHOLD}%"
            
            if [ $COVERAGE -lt $COVERAGE_THRESHOLD ]; then
              echo "❌ 覆盖率 ${COVERAGE}% 低于门禁要求 ${COVERAGE_THRESHOLD}%"
              echo "COVERAGE_GATE_FAILED=true" >> $GITHUB_ENV
              exit 1
            else
              echo "✅ 覆盖率 ${COVERAGE}% 达到门禁要求"
            fi
          else
            echo "❌ 未找到覆盖率报告文件"
            echo "COVERAGE_GATE_FAILED=true" >> $GITHUB_ENV
            exit 1
          fi

  # 安全门禁
  security-gate:
    name: 🔒 安全门禁
    runs-on: ubuntu-latest
    needs: quality-gate-precheck
    if: needs.quality-gate-precheck.outputs.should_block != 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: 运行安全扫描
        run: |
          echo "🔍 运行npm audit安全扫描..."
          npm audit --audit-level=high --json > audit-report.json || true
          
          # 检查高危和严重漏洞
          HIGH_VULNS=$(node -p "JSON.parse(require('fs').readFileSync('audit-report.json')).metadata?.vulnerabilities?.high || 0")
          CRITICAL_VULNS=$(node -p "JSON.parse(require('fs').readFileSync('audit-report.json')).metadata?.vulnerabilities?.critical || 0")
          TOTAL_HIGH_CRITICAL=$((HIGH_VULNS + CRITICAL_VULNS))
          
          echo "高危漏洞: $HIGH_VULNS"
          echo "严重漏洞: $CRITICAL_VULNS"
          echo "总计高危及以上: $TOTAL_HIGH_CRITICAL"
          
          if [ $TOTAL_HIGH_CRITICAL -gt $SECURITY_THRESHOLD ]; then
            echo "❌ 发现 $TOTAL_HIGH_CRITICAL 个高危及以上安全漏洞，超过阈值 $SECURITY_THRESHOLD"
            echo "SECURITY_GATE_FAILED=true" >> $GITHUB_ENV
            exit 1
          else
            echo "✅ 安全扫描通过，无高危漏洞"
          fi

  # 性能门禁（仅主分支）
  performance-gate:
    name: ⚡ 性能门禁
    runs-on: ubuntu-latest
    needs: quality-gate-precheck
    if: needs.quality-gate-precheck.outputs.should_block != 'true' && github.ref == 'refs/heads/main'
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
      
      - name: Build and start application
        run: |
          npm run build
          npm start &
          sleep 30
          curl -f http://localhost:3000 || exit 1
      
      - name: 运行性能测试
        run: |
          echo "⚡ 运行性能测试..."
          npm run test:performance:basic
      
      - name: 检查性能门禁
        run: |
          # 这里应该检查性能测试结果
          # 简化版本，实际应该解析性能测试报告
          echo "✅ 性能门禁检查通过（简化版本）"

  # 最终质量门禁决策
  final-quality-gate:
    name: 🎯 最终质量门禁
    runs-on: ubuntu-latest
    needs: [quality-gate-precheck, code-quality-gate, coverage-gate, security-gate, performance-gate]
    if: always()
    
    steps:
      - name: 质量门禁决策
        run: |
          echo "🎯 最终质量门禁决策..."
          
          # 检查预检查结果
          if [ "${{ needs.quality-gate-precheck.outputs.should_block }}" = "true" ]; then
            echo "❌ 质量门禁失败: ${{ needs.quality-gate-precheck.outputs.block_reason }}"
            echo "FINAL_DECISION=BLOCK" >> $GITHUB_ENV
            echo "BLOCK_REASON=${{ needs.quality-gate-precheck.outputs.block_reason }}" >> $GITHUB_ENV
          fi
          
          # 检查各个门禁结果
          if [ "${{ needs.code-quality-gate.result }}" = "failure" ]; then
            echo "❌ 代码质量门禁失败"
            echo "FINAL_DECISION=BLOCK" >> $GITHUB_ENV
            echo "BLOCK_REASON=代码质量不达标" >> $GITHUB_ENV
          fi
          
          if [ "${{ needs.coverage-gate.result }}" = "failure" ]; then
            echo "❌ 测试覆盖率门禁失败"
            echo "FINAL_DECISION=BLOCK" >> $GITHUB_ENV
            echo "BLOCK_REASON=测试覆盖率不达标" >> $GITHUB_ENV
          fi
          
          if [ "${{ needs.security-gate.result }}" = "failure" ]; then
            echo "❌ 安全门禁失败"
            echo "FINAL_DECISION=BLOCK" >> $GITHUB_ENV
            echo "BLOCK_REASON=存在安全漏洞" >> $GITHUB_ENV
          fi
          
          if [ "${{ needs.performance-gate.result }}" = "failure" ]; then
            echo "❌ 性能门禁失败"
            echo "FINAL_DECISION=BLOCK" >> $GITHUB_ENV
            echo "BLOCK_REASON=性能不达标" >> $GITHUB_ENV
          fi
          
          # 最终决策
          if [ "$FINAL_DECISION" = "BLOCK" ]; then
            echo "🚫 质量门禁最终决策: 阻断"
            echo "🔍 阻断原因: $BLOCK_REASON"
            echo ""
            echo "📋 解决建议:"
            echo "1. 修复所有质量问题"
            echo "2. 确保所有测试通过"
            echo "3. 提高代码覆盖率"
            echo "4. 修复安全漏洞"
            echo "5. 优化性能指标"
            echo "6. 重新提交代码"
            exit 1
          else
            echo "✅ 质量门禁最终决策: 通过"
            echo "🎉 所有质量检查都已通过，可以继续流程"
          fi
      
      - name: 创建质量门禁报告
        if: always()
        run: |
          cat > quality-gate-report.md << EOF
          # 🚪 质量门禁报告
          
          **时间**: $(date)
          **分支**: ${{ github.ref_name }}
          **提交**: ${{ github.sha }}
          
          ## 📊 检查结果
          
          | 检查项 | 状态 | 结果 |
          |--------|------|------|
          | 任务状态检查 | ${{ needs.quality-gate-precheck.result == 'success' && '✅ 通过' || '❌ 失败' }} | ${{ needs.quality-gate-precheck.outputs.block_reason || '正常' }} |
          | 代码质量 | ${{ needs.code-quality-gate.result == 'success' && '✅ 通过' || needs.code-quality-gate.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} | ESLint + TypeScript |
          | 测试覆盖率 | ${{ needs.coverage-gate.result == 'success' && '✅ 通过' || needs.coverage-gate.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} | ≥ ${{ env.COVERAGE_THRESHOLD }}% |
          | 安全扫描 | ${{ needs.security-gate.result == 'success' && '✅ 通过' || needs.security-gate.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} | 无高危漏洞 |
          | 性能测试 | ${{ needs.performance-gate.result == 'success' && '✅ 通过' || needs.performance-gate.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }} | 性能指标达标 |
          
          ## 🎯 最终决策
          
          ${{ env.FINAL_DECISION == 'BLOCK' && '🚫 **阻断**: 存在质量问题，需要修复后重新提交' || '✅ **通过**: 所有质量检查通过，可以继续流程' }}
          
          ${{ env.BLOCK_REASON && format('**阻断原因**: {0}', env.BLOCK_REASON) || '' }}
          
          ---
          *自动生成的质量门禁报告*
          EOF
          
          echo "📄 质量门禁报告已生成"
          cat quality-gate-report.md
      
      - name: 上传质量门禁报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-gate-report
          path: quality-gate-report.md