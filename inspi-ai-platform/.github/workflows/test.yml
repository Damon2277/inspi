name: 测试流水线

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 单元测试和集成测试
  unit-and-integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 安装依赖
      run: npm ci

    - name: 代码格式检查
      run: npm run lint

    - name: 类型检查
      run: npm run type-check

    - name: 运行单元测试
      run: npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret

    - name: 运行集成测试
      run: npm run test:integration
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret

    - name: 生成测试覆盖率报告
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret

    - name: 上传覆盖率报告到Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: 上传测试结果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/

  # 端到端测试
  e2e-tests:
    runs-on: ubuntu-latest
    needs: unit-and-integration-tests
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 安装依赖
      run: npm ci

    - name: 安装Playwright浏览器
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: 构建应用
      run: npm run build
      env:
        NODE_ENV: production

    - name: 启动应用
      run: npm start &
      env:
        NODE_ENV: test
        PORT: 3000

    - name: 等待应用启动
      run: npx wait-on http://localhost:3000

    - name: 运行E2E测试
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000

    - name: 上传E2E测试结果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/

  # 性能测试
  performance-tests:
    runs-on: ubuntu-latest
    needs: unit-and-integration-tests
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 安装依赖
      run: npm ci

    - name: 运行性能测试
      run: npm run test:performance
      env:
        NODE_ENV: test

    - name: 上传性能测试结果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: test-results/performance/

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 运行npm audit
      run: npm audit --audit-level moderate

    - name: 运行Snyk安全扫描
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud扫描
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 构建验证
  build-verification:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 安装依赖
      run: npm ci

    - name: 构建应用
      run: npm run build

    - name: 验证构建产物
      run: |
        if [ ! -d ".next" ]; then
          echo "构建失败：.next目录不存在"
          exit 1
        fi
        if [ ! -f ".next/BUILD_ID" ]; then
          echo "构建失败：BUILD_ID文件不存在"
          exit 1
        fi
        echo "构建验证成功"

    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.node-version }}
        path: .next/

  # 测试报告汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-and-integration-tests, e2e-tests, performance-tests]
    if: always()
    
    steps:
    - name: 下载所有测试结果
      uses: actions/download-artifact@v3

    - name: 生成测试报告摘要
      run: |
        echo "# 测试报告摘要" > test-summary.md
        echo "" >> test-summary.md
        echo "## 单元测试和集成测试" >> test-summary.md
        
        for version in 18.x 20.x; do
          if [ -d "test-results-$version" ]; then
            echo "### Node.js $version" >> test-summary.md
            if [ -f "test-results-$version/coverage/coverage-summary.json" ]; then
              echo "覆盖率报告已生成" >> test-summary.md
            fi
          fi
        done
        
        echo "" >> test-summary.md
        echo "## E2E测试" >> test-summary.md
        
        for browser in chromium firefox webkit; do
          if [ -d "e2e-results-$browser" ]; then
            echo "### $browser" >> test-summary.md
            echo "E2E测试已完成" >> test-summary.md
          fi
        done
        
        echo "" >> test-summary.md
        echo "## 性能测试" >> test-summary.md
        if [ -d "performance-results" ]; then
          echo "性能测试已完成" >> test-summary.md
        fi

    - name: 发布测试报告
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md

    - name: 评论PR（如果是PR）
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('test-summary.md')) {
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }